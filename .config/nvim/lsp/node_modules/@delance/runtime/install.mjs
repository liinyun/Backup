#!/usr/bin/env node

import assert, {AssertionError} from 'node:assert';
import {subtle} from 'node:crypto';
import fs from 'node:fs/promises';
import path from 'node:path';
import process from 'node:process';
import delance from '@delance/builder';
import {BlobReader, BlobWriter, TextWriter, ZipReader} from '@zip.js/zip.js';
import pMap from 'p-map';
import pRetry, {AbortError} from 'p-retry';

import pkg from './package.json' with {type: 'json'};

/**
 * @param {string} string
 */
function reverse(string) {
	return [...string].reverse().join('');
}

const output = path.resolve(`dist/v${pkg.version}-${pkg.delance.sha256}`);

await fs.mkdir(output, {recursive: true});

let processed = true;
try {
	await fs.access(path.join(output, 'server.bundle.js'));
} catch {
	processed = false;
}

if (processed) {
	process.exit();
}

/** @type {Blob?} */
let vsix = null;

if (process.env.DELANCE_VSIX) {
	try {
		vsix = new Blob([await fs.readFile(process.env.DELANCE_VSIX)]);
		const hash = Array.from(
			new Uint8Array(
				await subtle.digest('SHA-256', await vsix.arrayBuffer()),
			),
		)
			.map((b) => b.toString(16).padStart(2, '0'))
			.join('');

		assert.equal(hash, pkg.delance.sha256, 'sha256 mismatch');
	} catch (e) {
		if (/** @type {Error & {syscall: string}} */ (e)?.syscall === 'open') {
			console.error(e);
		} else {
			throw e;
		}
	}
}

if (!vsix) {
	const baseURL = new URL(reverse('/moc.oidutslausiv.ecalptekram//:sptth'));
	const publisher = reverse('nohtyp-sm');
	const extension = reverse('ecnalyp-edocsv');

	const items = new URL(`/items?itemName=${publisher}.${extension}`, baseURL);
	const download = new URL(
		`/_apis/public/gallery/publishers/${publisher}/vsextensions/${extension}/${pkg.version}/vspackage`,
		baseURL,
	);

	/** @type {RequestInit} */
	const init = {
		headers: {
			'user-agent': 'Mozilla/5.0 (Delance) Gecko/20100101 Firefox/120.0',
		},
		credentials: 'include',
	};

	const {headers} = await fetch(items, init);
	const cookie = headers
		.getSetCookie()
		.map((c) => c.split(';', 2)[0])
		.join('; ');

	vsix = await pRetry(async () => {
		const response = await fetch(download, {
			headers: {
				cookie,
			},
			redirect: 'follow',
			referrer: items.href,
		});

		if (response.status === 429) {
			const delay = response.headers.get('retry-after');
			if (delay) {
				throw new Error('Rate limited');
			}
		}

		if (!response.ok) {
			throw new AbortError(response.statusText);
		}

		const vsix = await response.blob();

		const hash = Array.from(
			new Uint8Array(
				await subtle.digest('SHA-256', await vsix.arrayBuffer()),
			),
		)
			.map((b) => b.toString(16).padStart(2, '0'))
			.join('');

		try {
			assert.equal(hash, pkg.delance.sha256, 'sha256 mismatch');
		} catch (error) {
			if (error instanceof AssertionError) {
				throw new AbortError(error);
			}
			throw error;
		}

		return vsix;
	});
}

const zip = new ZipReader(new BlobReader(vsix));

const prefix = path.normalize('extension/dist/');

await pMap(
	await zip.getEntries(),
	async (entry) => {
		const filename = path.normalize(entry.filename);
		if (!filename.startsWith(prefix)) {
			return;
		}

		console.time(filename);
		const dest = filename.slice(prefix.length);

		if (entry.directory) {
			await fs.mkdir(path.join(output, dest), {recursive: true});
			return;
		}

		let file;
		if (dest.endsWith('.bundle.js')) {
			if (dest.startsWith('browser.')) {
				return;
			}
			const writer = new TextWriter();
			assert(entry.getData !== undefined);
			await entry.getData(writer);

			const script = await delance(await writer.getData());
			file = new Blob([script], {type: 'text/javascript'});
		} else {
			const writer = new BlobWriter();
			assert(entry.getData !== undefined);
			await entry.getData(writer);
			file = await writer.getData();
		}

		await fs.mkdir(path.join(output, path.dirname(dest)), {
			recursive: true,
		});
		await fs.writeFile(
			path.join(output, dest),
			Buffer.from(await file.arrayBuffer()),
		);
		console.timeEnd(filename);
	},
	{concurrency: 4},
);

await fs.writeFile(
	'dist/langserver.cjs',
	`#!/usr/bin/env node

require('./v${pkg.version}-${pkg.delance.sha256}/server.bundle.js');`,
);
