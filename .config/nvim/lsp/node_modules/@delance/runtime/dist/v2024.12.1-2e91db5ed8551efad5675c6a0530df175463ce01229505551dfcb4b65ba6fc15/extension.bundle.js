(() => {
  'use strict';

  var _0x28cc3c = {
    27130: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ClientCommands = exports.Commands = undefined;
      exports.createCommandResult = _0x1daa42;
      var _0x840b8d;
      (function (_0x4ac356) {
        _0x4ac356.createTypeStub = 'python.createTypeStub';
        _0x4ac356.orderImports = 'python.orderImports';
        _0x4ac356.addMissingOptionalToParam = 'python.addOptionalForParam';
        _0x4ac356.removeUnusedImport = 'python.removeUnusedImport';
        _0x4ac356.addImport = 'python.addImport';
        _0x4ac356.intelliCodeCompletionItemCommand = 'python.intellicode.completionItemSelected';
        _0x4ac356.intelliCodeLoadExtension = 'python.intellicode.loadLanguageServerExtension';
        _0x4ac356.changeSpelling = 'pylance.changeSpelling';
        _0x4ac356.extractMethod = 'pylance.extractMethod';
        _0x4ac356.extractVariable = 'pylance.extractVariable';
        _0x4ac356.dumpFileDebugInfo = 'pyright.dumpFileDebugInfo';
        _0x4ac356.completionAccepted = 'pylance.completionAccepted';
        _0x4ac356.executedClientCommand = 'pylance.executedClientCommand';
        _0x4ac356.convertImportFormat = 'pylance.convertImportFormat';
        _0x4ac356.moveSymbol = 'pylance.moveSymbol';
        _0x4ac356.getSourceFiles = 'pylance.getSourceFiles';
        _0x4ac356.getAutoImports = 'pylance.getAutoImports';
        _0x4ac356.fixAll = 'pylance.fixAll';
        _0x4ac356.addFixtureTypeAnnotation = 'pylance.pytest.addFixtureTypeAnnotation';
        _0x4ac356.addAllFixtureTypeAnnotations = 'pylance.pytest.addAllFixtureTypeAnnotations';
        _0x4ac356.restartServer = 'pyright.restartserver';
        _0x4ac356.clearPersistedIndices = 'pylance.indexing.clearPersistedIndices';
        _0x4ac356.startProfiling = 'pylance.profiling.start';
        _0x4ac356.stopProfiling = 'pylance.profiling.stop';
        _0x4ac356.startLogging = 'pylance.logging.start';
        _0x4ac356.stopLogging = 'pylance.logging.stop';
        _0x4ac356.implementAllAbstractClasses = 'pylance.implementAllAbstractClasses';
        _0x4ac356.implementAllAbstractClassesWithCopilot = 'pylance.implementAllAbstractClassesWithCopilot';
        _0x4ac356.getAllDocstringRanges = 'pylance.getAllDocstringRanges';
        _0x4ac356.generateDocstring = 'pylance.generateDocstring';
        _0x4ac356.fixupCopilotDocstringOutput = 'pylance.fixupCopilotDocstringOutput';
      })(_0x840b8d || (exports.Commands = _0x840b8d = {}));
      var _0x290716;
      (function (_0x1da328) {
        _0x1da328.reportIssue = 'pylance.reportIssue';
        _0x1da328.triggerParameterHints = 'pylance.triggerParameterHints';
        _0x1da328.runCommands = 'pylance.runCommands';
        _0x1da328.extractMethodWithRename = 'pylance.extractMethodWithRename';
        _0x1da328.extractVariableWithRename = 'pylance.extractVariableWithRename';
        _0x1da328.moveSymbolWithFileSelection = 'pylance.moveSymbolWithFileSelection';
        _0x1da328.addToExtraPaths = 'pylance.addToExtraPaths';
        _0x1da328.dumpTokens = 'pylance.dumpTokens';
        _0x1da328.dumpNodes = 'pylance.dumpNodes';
        _0x1da328.dumpTypes = 'pylance.dumpTypes';
        _0x1da328.dumpCachedTypes = 'pylance.dumpCachedTypes';
        _0x1da328.setAutoImportCompletions = 'pylance.setAutoImportCompletions';
        _0x1da328.dumpCodeFlowGraph = 'pylance.dumpCodeFlowGraph';
        _0x1da328.pythonSetInterpeter = 'python.setInterpreter';
        _0x1da328.notebookSelectKernel = '_notebook.selectKernel';
        _0x1da328.openUri = 'pylance.openUri';
        _0x1da328.searchImports = 'pylance.searchImports';
        _0x1da328.gotoOutputChannel = 'pylance.gotoOutputChannel';
        _0x1da328.openConfig = 'pylance.openConfig';
        _0x1da328.startEditorChat = 'vscode.editorChat.start';
        _0x1da328.showTypeCheckingPicker = 'pylance.showTypeCheckingPicker';
        _0x1da328.foldDocstrings = 'pylance.foldDocstrings';
        _0x1da328.unfoldDocstrings = 'pylance.unfoldDocstrings';
      })(_0x290716 || (exports.ClientCommands = _0x290716 = {}));
      function _0x1daa42(_0x2b1eae, _0x29de52, _0x1b9f58) {
        if (_0x29de52) {
          return _0x1b9f58;
        }
        return {
          label: _0x2b1eae,
          edits: _0x1b9f58
        };
      }
    },
    93980: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntervalCounter = exports.TaskSequentializer = exports.RunOnceWorker = exports.ProcessTimeRunOnceScheduler = exports.RunOnceScheduler = exports.IntervalTimer = exports.TimeoutTimer = exports.LimitedQueue = exports.Queue = exports.Limiter = exports.AutoOpenBarrier = exports.Barrier = exports.ThrottledDelayer = exports.Delayer = exports.SequencerByKey = exports.Sequencer = exports.Throttler = undefined;
      exports.createCancelablePromise = _0x24073c;
      exports.raceCancellablePromises = _0xc46476;
      exports.raceTimeout = _0x54b989;
      exports.asPromise = _0x471712;
      exports.timeout = _0x1ed5d0;
      exports.sequence = _0x202678;
      exports.first = _0x9c68f;
      exports.firstParallel = _0x12f7e6;
      const _0x3b4752 = require(56911);
      const _0x2d54aa = require(91426);
      const _0x2ca0e6 = require(34455);
      function _0x24073c(_0x4c0bb6) {
        const _0x16f23f = new _0x3b4752.CancellationTokenSource();
        const _0x5ebff2 = _0x4c0bb6(_0x16f23f.token);
        const _0x54e8b3 = new Promise((_0x2366e0, _0x3a0b56) => {
          const _0x2d4ff8 = _0x16f23f.token.onCancellationRequested(() => {
            _0x2d4ff8.dispose();
            _0x3a0b56(new _0x2d54aa.OperationCanceledException());
          });
          Promise.resolve(_0x5ebff2).then(_0x3af43b => {
            _0x2d4ff8.dispose();
            _0x16f23f.dispose();
            _0x2366e0(_0x3af43b);
          }, _0xc58e3e => {
            _0x2d4ff8.dispose();
            _0x16f23f.dispose();
            _0x3a0b56(_0xc58e3e);
          });
        });
        return new class {
          cancel() {
            _0x16f23f.cancel();
            _0x16f23f.dispose();
          }
          then(_0x45a7d6, _0x5eaf61) {
            return _0x54e8b3.then(_0x45a7d6, _0x5eaf61);
          }
          catch(_0x31c1be) {
            return this.then(undefined, _0x31c1be);
          }
          finally(_0x9f047a) {
            return _0x54e8b3.finally(_0x9f047a);
          }
        }();
      }
      async function _0xc46476(_0x156246) {
        let _0x23756e = -1;
        const _0xd868ce = _0x156246.map((_0x3a6e59, _0x3057cb) => _0x3a6e59.then(_0x3890f8 => {
          _0x23756e = _0x3057cb;
          return _0x3890f8;
        }));
        try {
          const _0x4d4610 = await Promise.race(_0xd868ce);
          return _0x4d4610;
        } finally {
          _0x156246.forEach((_0x39aa6f, _0x4e1ab2) => {
            if (_0x4e1ab2 !== _0x23756e) {
              _0x39aa6f.cancel();
            }
          });
        }
      }
      function _0x54b989(_0x59c7bb, _0x4d3e1c, _0x5c2277) {
        let _0x37b182 = undefined;
        const _0x40a122 = setTimeout(() => {
          if (_0x37b182 === null || _0x37b182 === undefined) {
            undefined;
          } else {
            _0x37b182(undefined);
          }
          if (_0x5c2277 === null || _0x5c2277 === undefined) {
            undefined;
          } else {
            _0x5c2277();
          }
        }, _0x4d3e1c);
        return Promise.race([_0x59c7bb.finally(() => clearTimeout(_0x40a122)), new Promise(_0x17fd86 => _0x37b182 = _0x17fd86)]);
      }
      function _0x471712(_0x390db7) {
        return new Promise((_0x116ad3, _0xc51b9) => {
          const _0x311786 = _0x390db7();
          if (_0x2ca0e6.isThenable(_0x311786)) {
            _0x311786.then(_0x116ad3, _0xc51b9);
          } else {
            _0x116ad3(_0x311786);
          }
        });
      }
      class _0x1e5d7e {
        constructor() {
          this._isDisposed = false;
          this._activePromise = null;
          this._queuedPromise = null;
          this._queuedPromiseFactory = null;
        }
        queue(_0x592979) {
          if (this._isDisposed) {
            return Promise.reject(new Error('Throttler is disposed'));
          }
          if (this._activePromise) {
            this._queuedPromiseFactory = _0x592979;
            if (!this._queuedPromise) {
              const _0x3b03f5 = () => {
                this._queuedPromise = null;
                if (this._isDisposed) {
                  return;
                }
                const _0x3cedc8 = this.queue(this._queuedPromiseFactory);
                this._queuedPromiseFactory = null;
                return _0x3cedc8;
              };
              this._queuedPromise = new Promise(_0x41a45b => {
                this._activePromise.then(_0x3b03f5, _0x3b03f5).then(_0x41a45b);
              });
            }
            return new Promise((_0x4d6c07, _0x5aff94) => {
              this._queuedPromise.then(_0x4d6c07, _0x5aff94);
            });
          }
          this._activePromise = _0x592979();
          return new Promise((_0x3c4a99, _0x2e7ae6) => {
            this._activePromise.then(_0x3c9a1d => {
              this._activePromise = null;
              _0x3c4a99(_0x3c9a1d);
            }, _0x1bf0ae => {
              this._activePromise = null;
              _0x2e7ae6(_0x1bf0ae);
            });
          });
        }
        dispose() {
          this._isDisposed = true;
        }
      }
      exports.Throttler = _0x1e5d7e;
      class _0x43e11a {
        constructor() {
          this._current = Promise.resolve(null);
        }
        queue(_0x565276) {
          return this._current = this._current.then(() => _0x565276(), () => _0x565276());
        }
      }
      exports.Sequencer = _0x43e11a;
      class _0xadc07d {
        constructor() {
          this._promiseMap = new Map();
        }
        queue(_0x3f53ef, _0x2d85f2) {
          const _0xd84410 = this._promiseMap.get(_0x3f53ef) ?? Promise.resolve();
          const _0x16e1ce = _0xd84410.catch(() => {}).then(_0x2d85f2).finally(() => {
            if (this._promiseMap.get(_0x3f53ef) === _0x16e1ce) {
              this._promiseMap.delete(_0x3f53ef);
            }
          });
          this._promiseMap.set(_0x3f53ef, _0x16e1ce);
          return _0x16e1ce;
        }
      }
      exports.SequencerByKey = _0xadc07d;
      const _0x302618 = (_0x3cbe29, _0x1051ef) => {
        let _0x2be434 = true;
        const _0xbe927f = setTimeout(() => {
          _0x2be434 = false;
          _0x1051ef();
        }, _0x3cbe29);
        return {
          isTriggered: () => _0x2be434,
          dispose: () => {
            clearTimeout(_0xbe927f);
            _0x2be434 = false;
          }
        };
      };
      const _0x461919 = _0x4249a9 => {
        let _0x166794 = true;
        queueMicrotask(() => {
          if (_0x166794) {
            _0x166794 = false;
            _0x4249a9();
          }
        });
        return {
          isTriggered: () => _0x166794,
          dispose: () => {
            _0x166794 = false;
          }
        };
      };
      class _0x2538cd {
        constructor(_0x67f3b5) {
          this.defaultDelay = _0x67f3b5;
          this._deferred = null;
          this._completionPromise = null;
          this._doResolve = null;
          this._doReject = null;
          this._task = null;
        }
        trigger(_0x213fe4, _0xdd99ef = this.defaultDelay) {
          this._task = _0x213fe4;
          this._cancelTimeout();
          if (!this._completionPromise) {
            this._completionPromise = new Promise((_0x1fae3f, _0x477d65) => {
              this._doResolve = _0x1fae3f;
              this._doReject = _0x477d65;
            }).then(() => {
              this._completionPromise = null;
              this._doResolve = null;
              if (this._task) {
                const _0xfab1dc = this._task;
                this._task = null;
                return _0xfab1dc();
              }
              return undefined;
            });
          }
          const _0x59aec1 = () => {
            var _0x4f492e;
            this._deferred = null;
            if ((_0x4f492e = this._doResolve) === null || _0x4f492e === undefined) {
              undefined;
            } else {
              _0x4f492e.call(this, null);
            }
          };
          this._deferred = _0xdd99ef === -1 ? _0x461919(_0x59aec1) : _0x302618(_0xdd99ef, _0x59aec1);
          return this._completionPromise;
        }
        isTriggered() {
          var _0x389921;
          return !!((_0x389921 = this._deferred) === null || _0x389921 === undefined ? undefined : _0x389921.isTriggered());
        }
        cancel() {
          var _0x58db68;
          this._cancelTimeout();
          if (this._completionPromise) {
            if ((_0x58db68 = this._doReject) === null || _0x58db68 === undefined) {
              undefined;
            } else {
              _0x58db68.call(this, new _0x2d54aa.OperationCanceledException());
            }
            this._completionPromise = null;
          }
        }
        dispose() {
          this.cancel();
        }
        _cancelTimeout() {
          var _0x31968c;
          if ((_0x31968c = this._deferred) === null || _0x31968c === undefined) {
            undefined;
          } else {
            _0x31968c.dispose();
          }
          this._deferred = null;
        }
      }
      exports.Delayer = _0x2538cd;
      class _0x45a684 {
        constructor(_0x1b51c1) {
          this._delayer = new _0x2538cd(_0x1b51c1);
          this._throttler = new _0x1e5d7e();
        }
        trigger(_0x2240cb, _0x3dd6ce) {
          return this._delayer.trigger(() => this._throttler.queue(_0x2240cb), _0x3dd6ce);
        }
        isTriggered() {
          return this._delayer.isTriggered();
        }
        cancel() {
          this._delayer.cancel();
        }
        dispose() {
          this._delayer.dispose();
          this._throttler.dispose();
        }
      }
      exports.ThrottledDelayer = _0x45a684;
      class _0x4f3a82 {
        constructor() {
          this._isOpen = false;
          this._promise = new Promise((_0xce6baf, _0x857875) => {
            this._completePromise = _0xce6baf;
          });
        }
        isOpen() {
          return this._isOpen;
        }
        open() {
          this._isOpen = true;
          this._completePromise(true);
        }
        wait() {
          return this._promise;
        }
      }
      exports.Barrier = _0x4f3a82;
      class _0xa54614 extends _0x4f3a82 {
        constructor(_0xa89ca3) {
          super();
          this._timeout = setTimeout(() => this.open(), _0xa89ca3);
        }
        open() {
          clearTimeout(this._timeout);
          super.open();
        }
      }
      exports.AutoOpenBarrier = _0xa54614;
      function _0x1ed5d0(_0x1f4a28, _0x26f5aa) {
        if (!_0x26f5aa) {
          return _0x24073c(_0x2e768c => _0x1ed5d0(_0x1f4a28, _0x2e768c));
        }
        return new Promise((_0x25453d, _0x392b1c) => {
          const _0x2b68fe = setTimeout(() => {
            _0x217aa6.dispose();
            _0x25453d();
          }, _0x1f4a28);
          const _0x217aa6 = _0x26f5aa.onCancellationRequested(() => {
            clearTimeout(_0x2b68fe);
            _0x217aa6.dispose();
            _0x392b1c(new _0x2d54aa.OperationCanceledException());
          });
        });
      }
      function _0x202678(_0xeb5af7) {
        const _0x3a219e = [];
        let _0x449ffa = 0;
        const _0x4cade3 = _0xeb5af7.length;
        function _0x1760eb() {
          if (_0x449ffa < _0x4cade3) {
            return _0xeb5af7[_0x449ffa++]();
          } else {
            return null;
          }
        }
        function _0x41df67(_0x36003b) {
          if (_0x36003b !== undefined && _0x36003b !== null) {
            _0x3a219e.push(_0x36003b);
          }
          const _0x33d598 = _0x1760eb();
          if (_0x33d598) {
            return _0x33d598.then(_0x41df67);
          }
          return Promise.resolve(_0x3a219e);
        }
        return Promise.resolve(null).then(_0x41df67);
      }
      function _0x9c68f(_0x4b788d, _0x3eea62 = _0x510594 => !!_0x510594, _0x204405 = null) {
        let _0x1c28f2 = 0;
        const _0x786f08 = _0x4b788d.length;
        const _0x4568c8 = () => {
          if (_0x1c28f2 >= _0x786f08) {
            return Promise.resolve(_0x204405);
          }
          const _0x35c665 = _0x4b788d[_0x1c28f2++];
          const _0x4da9d5 = Promise.resolve(_0x35c665());
          return _0x4da9d5.then(_0x105d44 => {
            if (_0x3eea62(_0x105d44)) {
              return Promise.resolve(_0x105d44);
            }
            return _0x4568c8();
          });
        };
        return _0x4568c8();
      }
      function _0x12f7e6(_0x4fcee2, _0x28d2fa = _0xb6876 => !!_0xb6876, _0x50bdf2 = null) {
        if (_0x4fcee2.length === 0) {
          return Promise.resolve(_0x50bdf2);
        }
        let _0x3c87a1 = _0x4fcee2.length;
        const _0x7db6de = () => {
          var _0x4c8840;
          var _0x339d6d;
          _0x3c87a1 = -1;
          for (const _0xf978e8 of _0x4fcee2) {
            if ((_0x339d6d = (_0x4c8840 = _0xf978e8).cancel) === null || _0x339d6d === undefined) {
              undefined;
            } else {
              _0x339d6d.call(_0x4c8840);
            }
          }
        };
        return new Promise((_0x4e8c89, _0x550501) => {
          for (const _0x146a67 of _0x4fcee2) {
            _0x146a67.then(_0x5c5095 => {
              if (--_0x3c87a1 >= 0 && _0x28d2fa(_0x5c5095)) {
                _0x7db6de();
                _0x4e8c89(_0x5c5095);
              } else {
                if (_0x3c87a1 === 0) {
                  _0x4e8c89(_0x50bdf2);
                }
              }
            }).catch(_0x1318b3 => {
              if (--_0x3c87a1 >= 0) {
                _0x7db6de();
                _0x550501(_0x1318b3);
              }
            });
          }
        });
      }
      class _0x1958ba {
        constructor(_0x4681c6) {
          this._size = 0;
          this._maxDegreeOfParalellism = _0x4681c6;
          this._outstandingPromises = [];
          this._runningPromises = 0;
          this._onDrained = new _0x3b4752.Emitter();
        }
        get onDrained() {
          return this._onDrained.event;
        }
        get size() {
          return this._size;
        }
        queue(_0x2b0bb5) {
          this._size++;
          return new Promise((_0x4b980c, _0x2f2e74) => {
            this._outstandingPromises.push({
              factory: _0x2b0bb5,
              c: _0x4b980c,
              e: _0x2f2e74
            });
            this._consume();
          });
        }
        dispose() {
          this._onDrained.dispose();
        }
        _consume() {
          while (this._outstandingPromises.length && this._runningPromises < this._maxDegreeOfParalellism) {
            const _0x5c8d0d = this._outstandingPromises.shift();
            this._runningPromises++;
            const _0x24438d = _0x5c8d0d.factory();
            _0x24438d.then(_0x5c8d0d.c, _0x5c8d0d.e);
            _0x24438d.then(() => this._consumed(), () => this._consumed());
          }
        }
        _consumed() {
          this._size--;
          this._runningPromises--;
          if (this._outstandingPromises.length > 0) {
            this._consume();
          } else {
            this._onDrained.fire();
          }
        }
      }
      exports.Limiter = _0x1958ba;
      class _0x33ba3f extends _0x1958ba {
        constructor() {
          super(1);
        }
      }
      exports.Queue = _0x33ba3f;
      class _0x4aefb5 {
        constructor() {
          this._sequentializer = new _0x1f201b();
          this._tasks = 0;
        }
        queue(_0x356e47) {
          if (!this._sequentializer.isRunning()) {
            return this._sequentializer.run(this._tasks++, _0x356e47());
          }
          return this._sequentializer.queue(() => {
            return this._sequentializer.run(this._tasks++, _0x356e47());
          });
        }
      }
      exports.LimitedQueue = _0x4aefb5;
      class _0x5e9758 {
        constructor(_0x41ba15, _0xfaa6fe) {
          this._token = -1;
          if (typeof _0x41ba15 === 'function' && typeof _0xfaa6fe === 'number') {
            this.setIfNotSet(_0x41ba15, _0xfaa6fe);
          }
        }
        dispose() {
          this.cancel();
        }
        cancel() {
          if (this._token !== -1) {
            clearTimeout(this._token);
            this._token = -1;
          }
        }
        cancelAndSet(_0x53bdfe, _0x478e31) {
          this.cancel();
          this._token = setTimeout(() => {
            this._token = -1;
            _0x53bdfe();
          }, _0x478e31);
        }
        setIfNotSet(_0x283cca, _0x204b68) {
          if (this._token !== -1) {
            return;
          }
          this._token = setTimeout(() => {
            this._token = -1;
            _0x283cca();
          }, _0x204b68);
        }
      }
      exports.TimeoutTimer = _0x5e9758;
      class _0x2df959 {
        constructor() {
          this._disposable = undefined;
        }
        cancel() {
          var _0x28b717;
          if ((_0x28b717 = this._disposable) === null || _0x28b717 === undefined) {
            undefined;
          } else {
            _0x28b717.dispose();
          }
          this._disposable = undefined;
        }
        cancelAndSet(_0x3e0354, _0x446184, _0x596c44 = globalThis) {
          this.cancel();
          const _0x54be13 = _0x596c44.setInterval(() => {
            _0x3e0354();
          }, _0x446184);
          this._disposable = _0x3b4752.Disposable.create(() => {
            _0x596c44.clearInterval(_0x54be13);
            this._disposable = undefined;
          });
        }
        dispose() {
          this.cancel();
        }
      }
      exports.IntervalTimer = _0x2df959;
      class _0x24f646 {
        constructor(_0x419aae, _0x129b15) {
          this._timeoutToken = -1;
          this.runner = _0x419aae;
          this._timeout = _0x129b15;
          this._timeoutHandler = this._onTimeout.bind(this);
        }
        get delay() {
          return this._timeout;
        }
        set delay(_0x2b4d00) {
          this._timeout = _0x2b4d00;
        }
        dispose() {
          this.cancel();
          this.runner = null;
        }
        cancel() {
          if (this.isScheduled()) {
            clearTimeout(this._timeoutToken);
            this._timeoutToken = -1;
          }
        }
        schedule(_0x289281 = this._timeout) {
          this.cancel();
          this._timeoutToken = setTimeout(this._timeoutHandler, _0x289281);
        }
        isScheduled() {
          return this._timeoutToken !== -1;
        }
        flush() {
          if (this.isScheduled()) {
            this.cancel();
            this.doRun();
          }
        }
        doRun() {
          var _0x3aea94;
          if ((_0x3aea94 = this.runner) === null || _0x3aea94 === undefined) {
            undefined;
          } else {
            _0x3aea94.call(this);
          }
        }
        _onTimeout() {
          this._timeoutToken = -1;
          if (this.runner) {
            this.doRun();
          }
        }
      }
      exports.RunOnceScheduler = _0x24f646;
      class _0x253843 {
        constructor(_0xe4b725, _0x1f2c8e) {
          if (_0x1f2c8e % 1000 !== 0) {
            console.warn(`ProcessTimeRunOnceScheduler resolution is 1s, ${_0x1f2c8e}ms is not a multiple of 1000ms.`);
          }
          this._runner = _0xe4b725;
          this._timeout = _0x1f2c8e;
          this._counter = 0;
          this._intervalToken = -1;
          this._intervalHandler = this._onInterval.bind(this);
        }
        dispose() {
          this.cancel();
          this._runner = null;
        }
        cancel() {
          if (this.isScheduled()) {
            clearInterval(this._intervalToken);
            this._intervalToken = -1;
          }
        }
        schedule(_0x74d834 = this._timeout) {
          if (_0x74d834 % 1000 !== 0) {
            console.warn(`ProcessTimeRunOnceScheduler resolution is 1s, ${_0x74d834}ms is not a multiple of 1000ms.`);
          }
          this.cancel();
          this._counter = Math.ceil(_0x74d834 / 1000);
          this._intervalToken = setInterval(this._intervalHandler, 1000);
        }
        isScheduled() {
          return this._intervalToken !== -1;
        }
        _onInterval() {
          var _0x453eb2;
          this._counter--;
          if (this._counter > 0) {
            return;
          }
          clearInterval(this._intervalToken);
          this._intervalToken = -1;
          if ((_0x453eb2 = this._runner) === null || _0x453eb2 === undefined) {
            undefined;
          } else {
            _0x453eb2.call(this);
          }
        }
      }
      exports.ProcessTimeRunOnceScheduler = _0x253843;
      class _0x36ca30 extends _0x24f646 {
        constructor(_0x3edd38, _0x3ce229) {
          super(_0x3edd38, _0x3ce229);
          this._units = [];
        }
        work(_0x255631) {
          this._units.push(_0x255631);
          if (!this.isScheduled()) {
            this.schedule();
          }
        }
        dispose() {
          this._units = [];
          super.dispose();
        }
        doRun() {
          var _0x2c89c8;
          const _0x35d2f1 = this._units;
          this._units = [];
          if ((_0x2c89c8 = this.runner) === null || _0x2c89c8 === undefined) {
            undefined;
          } else {
            _0x2c89c8.call(this, _0x35d2f1);
          }
        }
      }
      exports.RunOnceWorker = _0x36ca30;
      class _0x1f201b {
        get running() {
          var _0x410871;
          if ((_0x410871 = this._running) === null || _0x410871 === undefined) {
            return undefined;
          } else {
            return _0x410871.promise;
          }
        }
        isRunning(_0xd96e07) {
          if (typeof _0xd96e07 === 'number') {
            return this._running?.taskId === _0xd96e07;
          }
          return !!this._running;
        }
        cancelRunning() {
          var _0x435321;
          if ((_0x435321 = this._running) === null || _0x435321 === undefined) {
            undefined;
          } else {
            _0x435321.cancel();
          }
        }
        run(_0x58adf4, _0x2d64ea, _0x29eb19) {
          this._running = {
            taskId: _0x58adf4,
            cancel: () => _0x29eb19 === null || _0x29eb19 === undefined ? undefined : _0x29eb19(),
            promise: _0x2d64ea
          };
          _0x2d64ea.then(() => this._doneRunning(_0x58adf4), () => this._doneRunning(_0x58adf4));
          return _0x2d64ea;
        }
        queue(_0x713db1) {
          if (!this._queued) {
            let _0x5e2a2e;
            let _0x16f068;
            const _0x84a40a = new Promise((_0x221565, _0x137c08) => {
              _0x5e2a2e = _0x221565;
              _0x16f068 = _0x137c08;
            });
            this._queued = {
              run: _0x713db1,
              promise: _0x84a40a,
              promiseResolve: _0x5e2a2e,
              promiseReject: _0x16f068
            };
          } else {
            this._queued.run = _0x713db1;
          }
          return this._queued.promise;
        }
        hasQueued() {
          return !!this._queued;
        }
        async join() {
          var _0x20caae;
          var _0x223abf;
          if ((_0x20caae = this._queued?.promise) !== null && _0x20caae !== undefined) {
            return _0x20caae;
          } else {
            if ((_0x223abf = this._running) === null || _0x223abf === undefined) {
              return undefined;
            } else {
              return _0x223abf.promise;
            }
          }
        }
        _doneRunning(_0x338882) {
          if (this._running && _0x338882 === this._running.taskId) {
            this._running = undefined;
            this._runQueued();
          }
        }
        _runQueued() {
          if (this._queued) {
            const _0x346430 = this._queued;
            this._queued = undefined;
            _0x346430.run().then(_0x346430.promiseResolve, _0x346430.promiseReject);
          }
        }
      }
      exports.TaskSequentializer = _0x1f201b;
      class _0x2c2514 {
        constructor(_0xf1bf42, _0x22237e = () => Date.now()) {
          this._interval = _0xf1bf42;
          this._nowFn = _0x22237e;
          this._lastIncrementTime = 0;
          this._value = 0;
        }
        increment() {
          const _0x4dba71 = this._nowFn();
          if (_0x4dba71 - this._lastIncrementTime > this._interval) {
            this._lastIncrementTime = _0x4dba71;
            this._value = 0;
          }
          this._value++;
          return this._value;
        }
      }
      exports.IntervalCounter = _0x2c2514;
    },
    23073: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.verifyClient = _0x59a92b;
      exports.generateVerificationString = _0x18dbf5;
      const _0x3fab32 = require(96662);
      function _0x59a92b(_0x450a4d) {
        return;
      }
      function _0x18dbf5() {
        return JSON.stringify(_0x3fab32.licenseErrorText);
      }
    },
    99504: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PYTHON_EXTENSION_ID = exports.PYLANCE_EXTENSION_ID = exports.IS_INTERNAL = exports.IS_RELEASE = exports.IS_PR = exports.IS_DEV = exports.IS_INSIDERS = exports.PYRIGHT_VERSION = exports.PYRIGHT_COMMIT = exports.VERSION = undefined;
      const _0x1dca22 = __importStar(require(69216));
      const _0x2801cc = require(23203);
      exports.VERSION = _0x2801cc.version || '';
      exports.PYRIGHT_COMMIT = _0x2801cc.pyrightCommit || 'unknown';
      exports.PYRIGHT_VERSION = _0x2801cc.pyrightVersion || 'unknown';
      exports.IS_INSIDERS = _0x568cd4(exports.VERSION);
      exports.IS_DEV = exports.VERSION.indexOf('-dev') !== -1;
      exports.IS_PR = exports.VERSION.indexOf('-pr.') !== -1;
      exports.IS_RELEASE = !exports.IS_INSIDERS && !exports.IS_DEV && !exports.IS_PR;
      exports.IS_INTERNAL = exports.IS_DEV || exports.IS_PR;
      exports.PYLANCE_EXTENSION_ID = 'ms-python.vscode-pylance';
      exports.PYTHON_EXTENSION_ID = 'ms-python.python';
      function _0x568cd4(_0x10d031) {
        try {
          const _0x2e0e59 = new _0x1dca22.SemVer(_0x10d031).patch;
          return _0x2e0e59 >= 100;
        } catch (_0x30a77f) {
          return false;
        }
      }
    },
    3756: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.decrypt = _0x3d4ee4;
      exports.encrypt = _0x3fda7a;
      const _0x5168d3 = __importStar(require(76982));
      const _0x102752 = require(96662);
      const _0x17669f = 'aes-192-cbc';
      const _0x579dd8 = 'SEE  LICENSE.txt';
      const _0x39fbe7 = _0x5168d3.scryptSync(_0x102752.licenseErrorText, _0x579dd8, 24);
      const _0x1e583f = Buffer.from(_0x579dd8);
      function _0x3d4ee4(_0x1f2d2f) {
        const _0x42a3ee = _0x5168d3.createDecipheriv(_0x17669f, _0x39fbe7, _0x1e583f);
        let _0x2367a9 = _0x42a3ee.update(_0x1f2d2f, 'hex', 'utf8');
        _0x2367a9 += _0x42a3ee.final('utf8');
        return _0x2367a9;
      }
      function _0x3fda7a(_0x30aa47) {
        const _0xe262cb = _0x5168d3.createCipheriv(_0x17669f, _0x39fbe7, _0x1e583f);
        let _0x5226f4 = _0xe262cb.update(_0x30aa47, 'utf8', 'hex');
        _0x5226f4 += _0xe262cb.final('hex');
        return _0x5226f4;
      }
    },
    96662: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.licenseErrorText = undefined;
      exports.licenseErrorText = ['You may install and use any number of copies of the software only with Microsoft Visual Studio,', 'Visual Studio for Mac, Visual Studio Code, Azure DevOps, Team Foundation Server, and successor Microsoft products', 'and services (collectively, the “Visual Studio Products and Services”) to develop and test your applications.', 'The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights.', 'You may not:', 'work around any technical limitations in the software that only allow you to use it in certain ways;', 'reverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the software,', 'except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the software;', 'remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software;', 'use the software in any way that is against the law or to create or propagate malware; or', 'share, publish, distribute, or lease the software (except for any distributable code, subject to the terms above),', 'provide the software as a stand-alone offering for others to use, or transfer the software or this agreement to any third party.'].join(' ');
    },
    585: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LspTelemetryThrottler = undefined;
      const _0x369ec7 = require(91426);
      const _0x5b85dd = require(34455);
      const _0x257af7 = require(99504);
      const _0x392e42 = require(62470);
      class _0x166d93 {
        constructor() {
          this._nextWindow = 0;
          this._eventCount = 0;
          this._globalDebounce = 3600000;
          this._globalLimit = 100;
          this._lastCaptured = new Map();
          this._debounceFrequentCall = 300000;
          this._debounceRareCall = 60000;
          this._rareMessages = new Set(['textDocument/declaration', 'textDocument/definition', 'textDocument/documentSymbol', 'textDocument/prepareRename', 'textDocument/references', 'textDocument/rename', 'workspace/symbol']);
        }
        maybeSendTelemetry(_0x49c32c, _0x2857a6, _0x3b08df, _0x495c43, _0x1f11a3, _0x4ee47f) {
          const _0x34134b = Date.now();
          const _0x46cc49 = new _0x392e42.StopWatch();
          if (_0x34134b > this._nextWindow) {
            this._nextWindow = _0x34134b + this._globalDebounce;
            this._eventCount = 0;
          }
          const _0x20c080 = (_0x1abf4d, _0x51411a) => {
            const _0x1b392c = this._rareMessages.has(_0x49c32c) ? this._debounceRareCall : this._debounceFrequentCall;
            const _0x21b6a5 = this._lastCaptured.get(_0x49c32c);
            if (_0x51411a || _0x3b08df() && this._eventCount < this._globalLimit && (!_0x21b6a5 || _0x34134b - _0x21b6a5 > _0x1b392c)) {
              this._lastCaptured.set(_0x49c32c, _0x34134b);
              this._eventCount += 1;
              const _0x454897 = _0x49c32c.replace(/\//g, '.');
              let _0x553522 = {
                duration: _0x46cc49.elapsedTime
              };
              if (_0x1f11a3) {
                _0x553522 = {
                  ..._0x553522,
                  ..._0x1f11a3(this, _0x1abf4d)
                };
              }
              let _0x3b4b98 = {
                lsVersion: _0x257af7.VERSION,
                method: _0x454897
              };
              if (_0x51411a) {
                _0x3b4b98.failed = _0x51411a;
              }
              if (_0x4ee47f) {
                _0x3b4b98 = {
                  ..._0x3b4b98,
                  ..._0x4ee47f(this, _0x1abf4d)
                };
              }
              _0x495c43(_0x553522, _0x3b4b98);
            }
            return _0x1abf4d;
          };
          try {
            const _0x3df09e = _0x2857a6();
            if (_0x5b85dd.isThenable(_0x3df09e)) {
              return _0x3df09e.then(_0x20c080).catch(_0x5a9862 => {
                if (!_0x369ec7.OperationCanceledException.is(_0x5a9862)) {
                  _0x20c080(undefined, _0x5a9862);
                }
                throw _0x5a9862;
              });
            }
            return _0x20c080(_0x3df09e);
          } catch (_0x36dd09) {
            if (!_0x369ec7.OperationCanceledException.is(_0x36dd09)) {
              _0x20c080(undefined, _0x36dd09);
            }
            throw _0x36dd09;
          }
        }
      }
      exports.LspTelemetryThrottler = _0x166d93;
    },
    62470: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StopWatch = undefined;
      class _0x3691ee {
        constructor() {
          this._started = new Date().getTime();
        }
        get elapsedTime() {
          return new Date().getTime() - this._started;
        }
        reset() {
          this._started = new Date().getTime();
        }
      }
      exports.StopWatch = _0x3691ee;
    },
    95349: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CustomLSP = undefined;
      const _0x5e5720 = require(8067);
      var _0x2e5527;
      (function (_0x43e5ad) {
        let _0x606acb;
        (function (_0x504783) {
          _0x504783.Initialization = 'initialization';
          _0x504783.DidOpenDocument = 'didopendocument';
          _0x504783.DidChangeDocument = 'didchangedocument';
          _0x504783.DidOpenNotebookDocument = 'didopennotebookdocument';
          _0x504783.DidChangeNotebookDocument = 'didchangenotebookdocument';
          _0x504783.IndexingDone = 'indexingdone';
          _0x504783.WorkspaceIndexingDone = 'workspaceindexingdone';
        })(_0x606acb = _0x43e5ad.TestSignalKinds ||= {});
        let _0x5028bd;
        (function (_0x5d449c) {
          _0x5d449c.InExperiment = 'python/inExperiment';
          _0x5d449c.GetExperimentValue = 'python/getExperimentValue';
          _0x5d449c.IsTrustedWorkspace = 'python/isTrustedWorkspace';
          _0x5d449c.JupyterReferences = 'python/jupyterReferences';
          _0x5d449c.JupyterDocumentSymbols = 'python/jupyterDocumentSymbols';
          _0x5d449c.ApplyCursorMovingEdit = 'python/applyCursorMovingEdit';
          _0x5d449c.ClientShowMessage = 'python/clientShowMessage';
          _0x5d449c.GetConfigInfo = 'python/getConfigInfo';
          _0x5d449c.CheckLanguageModel = 'python/checkLanguageModel';
          _0x5d449c.PromptLanguageModel = 'python/promptLanguageModel';
          _0x5d449c.AnalyzeFile = 'test/analyzeFile';
          _0x5d449c.GetWorkspaceConfig = 'test/getWorkspaceConfig';
          _0x5d449c.GetWorkspaceSettings = 'test/getWorkspaceSettings';
          _0x5d449c.GetWorkspaceKinds = 'test/getWorkspaceKinds';
          _0x5d449c.GetWorkspaceInfos = 'test/getWorkspaceInfos';
          _0x5d449c.GetNotebookData = 'test/getNotebookData';
          _0x5d449c.GetUserFiles = 'test/getUserFiles';
          _0x5d449c.GetOpenFiles = 'test/getOpenFiles';
          _0x5d449c.GetWorkspaceInfo = 'test/getWorkspaceInfo';
          _0x5d449c.GetFileContent = 'test/getFileContent';
          _0x5d449c.GetWorkspaceFileContent = 'test/getWorkspaceFileContent';
          _0x5d449c.RunIndexer = 'test/runIndexer';
          _0x5d449c.AnalyzeWorkspace = 'test/analyzeWorkspace';
          _0x5d449c.GetDiagnostics = 'test/getDiagnostics';
          _0x5d449c.GetUserIndices = 'test/getUserIndices';
          _0x5d449c.Wait = 'test/wait';
        })(_0x5028bd = _0x43e5ad.Requests ||= {});
        let _0x35541e;
        (function (_0x55a008) {
          _0x55a008.IsTrustedWorkspace = 'python/isTrustedWorkspaceSync';
        })(_0x35541e = _0x43e5ad.SyncRequests ||= {});
        let _0x418898;
        (function (_0x5b738d) {
          _0x5b738d.SetStatusBarMessage = 'python/setStatusBarMessage';
          _0x5b738d.BeginProgress = 'python/beginProgress';
          _0x5b738d.ReportProgress = 'python/reportProgress';
          _0x5b738d.EndProgress = 'python/endProgress';
          _0x5b738d.WorkspaceTrusted = 'python/workspaceTrusted';
          _0x5b738d.ConfigOptionsChanged = 'python/configOptionsChanged';
          _0x5b738d.AskForWait = 'test/askForWait';
          _0x5b738d.TestSignal = 'test/signal';
          _0x5b738d.DidChangeConfiguration = 'workspace/didChangeConfiguration';
          _0x5b738d.DidChangeNotebookDocument = 'notebookDocument/didChange';
          _0x5b738d.CacheDirCreate = 'python/cacheDirCreate';
          _0x5b738d.CacheFileWrite = 'python/cacheFileWrite';
          _0x5b738d.TestAddFile = 'test/addFile';
          _0x5b738d.TestStartServer = 'test/startServer';
          _0x5b738d.TestStartServerResponse = 'test/startServerResponse';
          _0x5b738d.TestLog = 'test/logMessage';
          _0x5b738d.TestPassExtraMessagePort = 'test/passExtraMessagePort';
          _0x5b738d.ExecuteCommand = 'pylance/executeCommand';
          _0x5b738d.AddOrUpdateDistUrl = 'pylance/addOrUpdateDistUrl';
          _0x5b738d.RemoveDistUrl = 'pylance/removeDistUrl';
        })(_0x418898 = _0x43e5ad.Notifications ||= {});
        function _0x4ca5b7(_0x310314, _0x5485a1, _0x30039e, _0x35c166) {
          return _0x310314.sendRequest(_0x5485a1, _0x30039e, _0x35c166);
        }
        _0x43e5ad.sendRequest = _0x4ca5b7;
        function _0x3213d4(_0x4e8798, _0x59a77e, _0x54f8a4) {
          const _0x3e904a = _0x4e8798;
          const _0x1b1ef7 = _0x3e904a.sendRequest(_0x59a77e, new _0x5e5720.VariableResult('json'));
          if (_0x1b1ef7.errno !== 0) {
            throw new Error(`Request ${_0x59a77e} failed with error ${_0x1b1ef7.errno}`);
          }
          return _0x1b1ef7.data;
        }
        _0x43e5ad.sendRequestSync = _0x3213d4;
        function _0x2fbef6(_0x10c4df, _0xdac3cb, _0x49dc1c) {
          _0x10c4df.sendNotification(_0xdac3cb, _0x49dc1c);
        }
        _0x43e5ad.sendNotification = _0x2fbef6;
        function _0x2cbcd6(_0x204e4f, _0x148045, _0x5d4805) {
          return _0x204e4f.onRequest(_0x148045, _0x5d4805);
        }
        _0x43e5ad.onRequest = _0x2cbcd6;
        function _0x339190(_0x584f17, _0x31a0fd, _0x526d6a) {
          return _0x584f17.onNotification(_0x31a0fd, _0x526d6a);
        }
        _0x43e5ad.onNotification = _0x339190;
      })(_0x2e5527 || (exports.CustomLSP = _0x2e5527 = {}));
    },
    15986: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Localizer = undefined;
      exports.setGetRawString = _0x210fe0;
      const _0x5f1aab = require(18721);
      const _0x387887 = require(52420);
      const _0x130f35 = require(76463);
      const _0x493432 = require(32535);
      const _0x35595c = require(47011);
      const _0x14215f = require(94814);
      const _0x2f96bd = require(29150);
      const _0xa130a4 = require(14997);
      const _0x2e0843 = require(42235);
      const _0x383f5c = require(6842);
      const _0x26191b = require(39452);
      const _0x5b2feb = require(53802);
      const _0x3a95f4 = require(49381);
      const _0x4b6ad9 = require(70417);
      const _0x156134 = require(41101);
      const _0x365fdf = require(67703);
      const _0x4b2223 = 'en-us';
      const _0x53b886 = new Map([['cs', _0x5f1aab], ['de', _0x387887], ['en-us', _0x130f35], ['en', _0x130f35], ['es', _0x493432], ['fr', _0x35595c], ['it', _0x14215f], ['ja', _0x2f96bd], ['ko', _0xa130a4], ['pl', _0x2e0843], ['pt-br', _0x383f5c], ['qps-ploc', _0x26191b], ['ru', _0x5b2feb], ['tr', _0x3a95f4], ['zh-cn', _0x4b6ad9], ['zh-tw', _0x156134]]);
      let _0x172180 = undefined;
      let _0xebaa1e = {};
      function _0x749d2a(_0x158ee4) {
        if (_0x172180 === undefined) {
          _0x172180 = _0x42c812();
        }
        const _0x3bd31a = _0x158ee4.split('.');
        const _0xcb894d = _0x365fdf.getRawStringFromMap(_0x172180, _0x3bd31a) || _0x365fdf.getRawStringFromMap(_0xebaa1e, _0x3bd31a);
        if (_0xcb894d) {
          return _0xcb894d;
        }
        return _0x9de98f(_0x158ee4);
      }
      let _0x2dad9f = _0x749d2a;
      const _0x9de98f = _0x365fdf.setGetRawString(_0x2dad9f);
      function _0x210fe0(_0x4a2730) {
        const _0x1469e3 = _0x2dad9f;
        _0x2dad9f = _0x4a2730;
        _0x365fdf.setGetRawString(_0x4a2730);
        return _0x1469e3;
      }
      function _0x42c812() {
        _0xebaa1e = _0x28778e();
        const _0x2286c7 = _0x365fdf.getLocaleFromEnv();
        return _0x365fdf.loadStringsForLocale(_0x2286c7, _0x53b886);
      }
      function _0x28778e() {
        const _0x137092 = _0x53b886.get(_0x4b2223);
        if (_0x137092) {
          return _0x137092;
        }
        console.error('Could not load default strings');
        return {};
      }
      var _0x4c4e2d;
      (function (_0x4061d0) {
        let _0x326a26;
        (function (_0x30dda9) {
          _0x30dda9.fixtureNotFound = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Pytest.fixtureNotFound'));
          _0x30dda9.addTypeAnnnotation = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Pytest.addTypeAnnotation'));
          _0x30dda9.addTypeAnnnotations = () => _0x2dad9f('Pytest.addTypeAnnotations');
        })(_0x326a26 = _0x4061d0.Pytest ||= {});
        let _0x3e4606;
        (function (_0x29f2d7) {
          _0x29f2d7.moveFile = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFile'));
          _0x29f2d7.moveFileLabel = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileLabel'));
          _0x29f2d7.moveFileDescription = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileDescription'));
          _0x29f2d7.moveFileNotUserFile = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileNotUserFile'));
          _0x29f2d7.moveFilePrivateSymbol = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFilePrivateSymbol'));
          _0x29f2d7.moveFileImportableOnly = () => _0x2dad9f('Refactoring.moveFileImportableOnly');
          _0x29f2d7.moveFileUnsupportedSymbol = () => _0x2dad9f('Refactoring.moveFileUnsupportedSymbol');
          _0x29f2d7.moveFileMultipleDeclarations = () => _0x2dad9f('Refactoring.moveFileMultipleDeclarations');
          _0x29f2d7.moveFileSimpleAssignmentsOnly = () => _0x2dad9f('Refactoring.moveFileSimpleAssignmentsOnly');
          _0x29f2d7.moveFileExtensionMismatch = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileExtensionMismatch'));
          _0x29f2d7.moveFileMissingInfo = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileMissingInfo'));
          _0x29f2d7.moveFileSameFile = () => _0x2dad9f('Refactoring.moveFileSameFile');
          _0x29f2d7.moveFileSymbolNotFound = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileSymbolNotFound'));
          _0x29f2d7.moveFileAbsentSymbol = () => _0x2dad9f('Refactoring.moveFileAbsentSymbol');
          _0x29f2d7.moveFileInsertLocation = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Refactoring.moveFileInsertLocation'));
        })(_0x3e4606 = _0x4061d0.Refactoring ||= {});
        let _0x52812c;
        (function (_0x1fa352) {
          let _0x150407;
          (function (_0x362c3c) {
            _0x362c3c.commandTitle = () => _0x2dad9f('CodeAction.MoveSymbol.commandTitle');
            _0x362c3c.moveSymbolsTo = () => _0x2dad9f('CodeAction.MoveSymbol.moveSymbolsTo');
            _0x362c3c.moveSymbolsToNewFile = () => _0x2dad9f('CodeAction.MoveSymbol.moveSymbolsToNewFile');
          })(_0x150407 = _0x1fa352.MoveSymbol ||= {});
          let _0x241e19;
          (function (_0x4c961e) {
            _0x4c961e.method = () => _0x2dad9f('CodeAction.Extract.method');
            _0x4c961e.variable = () => _0x2dad9f('CodeAction.Extract.variable');
          })(_0x241e19 = _0x1fa352.Extract ||= {});
          let _0x2b8517;
          (function (_0x185527) {
            _0x185527.removeUnusedImport = () => _0x2dad9f('CodeAction.RemoveUnusedImport.removeUnusedImport');
            _0x185527.removeAllUnusedImports = () => _0x2dad9f('CodeAction.RemoveUnusedImport.removeAllUnusedImports');
          })(_0x2b8517 = _0x1fa352.RemoveUnusedImport ||= {});
          let _0xac1f50;
          (function (_0x2dd8c5) {
            _0x2dd8c5.convertToRelativePath = () => _0x2dad9f('CodeAction.ToggleImportPath.convertToRelativePath');
            _0x2dd8c5.convertAllToRelativePath = () => _0x2dad9f('CodeAction.ToggleImportPath.convertAllToRelativePath');
            _0x2dd8c5.convertToAbsolutePath = () => _0x2dad9f('CodeAction.ToggleImportPath.convertToAbsolutePath');
            _0x2dd8c5.convertAllToAbsolutePath = () => _0x2dad9f('CodeAction.ToggleImportPath.convertAllToAbsolutePath');
            _0x2dd8c5.convertAllFormat = () => _0x2dad9f('CodeAction.ToggleImportPath.convertAllFormat');
          })(_0xac1f50 = _0x1fa352.ToggleImportPath ||= {});
          let _0xe45c9a;
          (function (_0x51b261) {
            _0x51b261.addExtraPath = () => new _0x365fdf.ParameterizedString(_0x2dad9f('CodeAction.ExtraPath.addExtraPath'));
          })(_0xe45c9a = _0x1fa352.ExtraPath ||= {});
          let _0x4ff36d;
          (function (_0x16edb5) {
            _0x16edb5.addAutoImport = () => new _0x365fdf.ParameterizedString(_0x2dad9f('CodeAction.AutoImport.addAutoImport'));
            _0x16edb5.searchImport = () => _0x2dad9f('CodeAction.AutoImport.searchImport');
          })(_0x4ff36d = _0x1fa352.AutoImport ||= {});
          let _0xe5dc6b;
          (function (_0x54257c) {
            _0x54257c.changeSpellingTo = () => new _0x365fdf.ParameterizedString(_0x2dad9f('CodeAction.ChangeSpelling.changeSpellingTo'));
          })(_0xe5dc6b = _0x1fa352.ChangeSpelling ||= {});
          let _0x122f1a;
          (function (_0xd30ded) {
            _0xd30ded.runFixAll = () => _0x2dad9f('CodeAction.FixAll.runFixAll');
          })(_0x122f1a = _0x1fa352.FixAll ||= {});
          let _0xcbb9cd;
          (function (_0x7742a4) {
            _0x7742a4.selectInterpreterTitle = () => _0x2dad9f('CodeAction.UnresolvedImports.selectInterpreterTitle');
            _0x7742a4.selectKernelTitle = () => _0x2dad9f('CodeAction.UnresolvedImports.selectKernelTitle');
            _0x7742a4.learnMoreTitle = () => _0x2dad9f('CodeAction.UnresolvedImports.learnMoreTitle');
          })(_0xcbb9cd = _0x1fa352.UnresolvedImports ||= {});
          let _0x2a592c;
          (function (_0x23a161) {
            _0x23a161.implementAllAbstractClasses = () => _0x2dad9f('CodeAction.ImplementAbstractClass.implementAllAbstractClasses');
            _0x23a161.implementAllAbstractClassesWithCopilot = () => _0x2dad9f('Copilot.implementAllInheritedAbstractClasseswithCopilot');
          })(_0x2a592c = _0x1fa352.ImplementAbstractClass ||= {});
          let _0x246b8a;
          (function (_0x4e7f14) {
            _0x4e7f14.generateDocstring = () => _0x2dad9f('DocstringTemplate.GenerateDocstring');
            _0x4e7f14.generateDocstringWithCopilot = () => _0x2dad9f('Copilot.GenerateDocstringWithCopilot');
          })(_0x246b8a = _0x1fa352.GenerateDocstring ||= {});
        })(_0x52812c = _0x4061d0.CodeAction ||= {});
        let _0x11f74f;
        (function (_0x16162d) {
          _0x16162d.importResolveRedirect = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Diagnostic.importResolveRedirect'));
        })(_0x11f74f = _0x4061d0.Diagnostic ||= {});
        let _0x446928;
        (function (_0x2e014f) {
          _0x2e014f.defaultPythonEnvironmentName = () => _0x2dad9f('Messages.defaultPythonEnvironmentName');
          _0x2e014f.windowsStoreEnvironmentName = () => _0x2dad9f('Messages.windowsStoreEnvironmentName');
          _0x2e014f.globalEnvironmentName = () => _0x2dad9f('Messages.globalEnvironmentName');
          _0x2e014f.singularFileAndSingularCellToAnalyze = () => _0x2dad9f('Messages.singularFileAndSingularCellToAnalyze');
          _0x2e014f.singularFileAndPluralCellsToAnalyze = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Messages.singularFileAndPluralCellsToAnalyze'));
          _0x2e014f.pluralFilesAndSingularCellToAnalyze = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Messages.pluralFilesAndSingularCellToAnalyze'));
          _0x2e014f.pluralFilesAndPluralCellsToAnalyze = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Messages.pluralFilesAndPluralCellsToAnalyze'));
        })(_0x446928 = _0x4061d0.Messages ||= {});
        let _0x3c79cf;
        (function (_0x59a074) {
          let _0x415aec;
          (function (_0x2f41e7) {
            _0x2f41e7.profilingDataSaved = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Commands.ProfilingCommand.profilingDataSaved'));
          })(_0x415aec = _0x59a074.ProfilingCommand ||= {});
          let _0x392721;
          (function (_0x1044ee) {
            _0x1044ee.loggingDataSaved = () => new _0x365fdf.ParameterizedString(_0x2dad9f('Commands.LoggingCommand.loggingDataSaved'));
          })(_0x392721 = _0x59a074.LoggingCommand ||= {});
          _0x59a074.gotoOutputCommand = () => _0x2dad9f('Commands.gotoOutputCommand');
        })(_0x3c79cf = _0x4061d0.Commands ||= {});
        let _0x21f7ed;
        (function (_0x3db5e1) {
          _0x3db5e1.title = () => _0x2dad9f('PerformanceTracking.title');
          _0x3db5e1.button = () => _0x2dad9f('PerformanceTracking.button');
        })(_0x21f7ed = _0x4061d0.PerformanceTracking ||= {});
        let _0x26341d;
        (function (_0x15942c) {
          _0x15942c.docstringForName = () => new _0x365fdf.ParameterizedString(_0x2dad9f('DocstringTemplate.docstringForName'));
          _0x15942c.description = () => _0x2dad9f('DocstringTemplate.description');
        })(_0x26341d = _0x4061d0.DocstringTemplate ||= {});
      })(_0x4c4e2d || (exports.Localizer = _0x4c4e2d = {}));
    },
    21251: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncListener = undefined;
      const _0x2393f3 = require(42073);
      const _0x5e5592 = require(37688);
      class _0x5e7f34 {
        constructor(_0x51344f, _0x314040, _0xfaca11, _0x159cb7) {
          this._connection = _0x51344f;
          this._progressContext = _0x314040;
          this._workspace = _0xfaca11;
          this._progressPartCreator = _0x159cb7;
          this._disposed = false;
          this._inProgressReporters = new Map();
          this._inProgressParts = new Map();
          this._disposables = [];
          this._disposables.push(this._connection.onRequest('file/readSync', async _0x45a660 => {
            if (!this._disposed && this._workspace) {
              const _0x173cb5 = await this._workspace.fs.readFile(_0x45a660.uri);
              return {
                errno: 0,
                data: _0x173cb5
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('file/readDirectorySync', async _0x2fb049 => {
            if (!this._disposed && this._workspace) {
              const _0x262480 = await this._workspace.fs.readDirectory(_0x2fb049.uri);
              return {
                errno: 0,
                data: _0x262480
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('file/statSync', async _0x5bafaf => {
            if (!this._disposed && this._workspace) {
              try {
                const _0x2353b0 = await this._workspace.fs.stat(_0x5bafaf.uri);
                const _0x388396 = {
                  mtime: _0x2353b0.mtime,
                  size: _0x2353b0.size,
                  type: _0x2353b0.type === 0 ? 'unknown' : _0x2353b0.type === 1 ? 'file' : 'directory'
                };
                return {
                  errno: 0,
                  data: _0x388396
                };
              } catch (_0x3203dc) {
                return {
                  errno: 0,
                  data: {
                    mtime: 0,
                    size: 0,
                    type: 'unknown'
                  }
                };
              }
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('workspace/configurationSync', async _0x54c734 => {
            if (!this._disposed && this._workspace) {
              const _0x2b38ec = (_0x6c6655, _0x563736) => {
                const _0x27b316 = _0x6c6655.items;
                return JSON.parse(JSON.stringify(_0x27b316.map(_0x2ff1b8 => this._getConfiguration(_0x2ff1b8.scopeUri, _0x2ff1b8.section, this._workspace))));
              };
              const _0x28649f = this._workspace.configuration ? await this._workspace.configuration(_0x54c734, _0x5e5592.CancellationToken.None, _0x2b38ec) : _0x2b38ec(_0x54c734, _0x5e5592.CancellationToken.None);
              return {
                errno: 0,
                data: _0x28649f
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('window/workDoneProgress/createSync', async () => {
            if (!this._disposed) {
              const _0x186c62 = _0x2393f3.v4();
              const _0x39ab41 = new _0x5e5592.CancellationTokenSource();
              this._inProgressReporters.set(_0x186c62, _0x39ab41);
              const _0x1fc3ff = this._progressContext;
              const _0x5b74c1 = {
                onProgress: function (_0x1acb52, _0x36b671, _0x10b096) {
                  return _0x1fc3ff.onProgress(_0x1acb52, _0x36b671, _0x10b096);
                },
                sendNotification: function (_0x448aca, _0x2b569b) {
                  if (_0x448aca === _0x5e5592.WorkDoneProgressCancelNotification.type) {
                    _0x39ab41.cancel();
                  }
                  _0x1fc3ff.sendNotification(_0x448aca, _0x2b569b);
                },
                sendProgress: function (_0x3c464a, _0x309d6e, _0x25ecd6) {
                  _0x1fc3ff.sendProgress(_0x3c464a, _0x309d6e, _0x25ecd6);
                }
              };
              const _0x2d9bf2 = this._progressPartCreator(_0x5b74c1, _0x186c62, () => {
                _0x39ab41.cancel();
                this._inProgressReporters.delete(_0x186c62);
                this._inProgressParts.delete(_0x186c62);
              });
              this._inProgressParts.set(_0x186c62, _0x2d9bf2);
              return {
                errno: 0,
                data: {
                  token: _0x186c62
                }
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('window/workDoneProgress/isCanceledSync', async _0x364887 => {
            var _0x3c62e4;
            if (!this._disposed) {
              const _0x1ca187 = (_0x3c62e4 = this._inProgressReporters.get(_0x364887.token)) === null || _0x3c62e4 === undefined ? undefined : _0x3c62e4.token.isCancellationRequested;
              return {
                errno: 0,
                data: _0x1ca187
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('workspace/applyEditSync', async _0x54b2a8 => {
            if (!this._disposed && this._workspace) {
              const _0x57233c = await this._workspace.applyEdit(_0x54b2a8);
              return {
                errno: 0,
                data: _0x57233c
              };
            }
            return {
              errno: -1
            };
          }), this._connection.onRequest('workspace/workspaceFoldersSync', async () => {
            if (!this._disposed && this._workspace) {
              const _0xcdca36 = this._workspace.workspaceFolders;
              return {
                errno: 0,
                data: _0xcdca36
              };
            }
            return {
              errno: -1
            };
          }));
          this._connection.signalReady({});
        }
        dispose() {
          if (!this._disposed) {
            this._disposed = true;
            this._inProgressReporters.forEach(_0x4a60ae => {
              if (!_0x4a60ae.token.isCancellationRequested) {
                _0x4a60ae.cancel();
              }
            });
            this._inProgressReporters.clear();
            this._disposables.forEach(_0x1c2313 => _0x1c2313.dispose());
          }
        }
        _getConfiguration(_0x123d21, _0x119ae8, _0x58ee23) {
          let _0x286fe0 = null;
          if (_0x119ae8) {
            const _0xea57b2 = _0x119ae8.lastIndexOf('.');
            if (_0xea57b2 === -1) {
              _0x286fe0 = _0x58ee23.getConfiguration(undefined, _0x123d21).get(_0x119ae8);
            } else {
              const _0x241814 = _0x58ee23.getConfiguration(_0x119ae8.slice(0, _0xea57b2), _0x123d21);
              if (_0x241814) {
                _0x286fe0 = _0x241814.get(_0x119ae8.slice(_0xea57b2 + 1));
              }
            }
          } else {
            const _0x184f00 = _0x58ee23.getConfiguration(undefined, _0x123d21);
            _0x286fe0 = {};
            for (const _0x26d485 of Object.keys(_0x184f00)) {
              if (_0x184f00.has(_0x26d485)) {
                _0x286fe0[_0x26d485] = _0x184f00.get(_0x26d485);
              }
            }
          }
          if (_0x286fe0 === undefined) {
            _0x286fe0 = null;
          }
          return _0x286fe0;
        }
      }
      exports.SyncListener = _0x5e7f34;
    },
    22205: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FilteringWorker = undefined;
      class _0x4b90f9 {
        constructor(_0x52c0eb, _0x5d9768) {
          this._worker = _0x52c0eb;
          this._filter = _0x5d9768;
        }
        get stdin() {
          return this._worker.stdin;
        }
        get stdout() {
          return this._worker.stdout;
        }
        get stderr() {
          return this._worker.stderr;
        }
        get threadId() {
          return this._worker.threadId;
        }
        get performance() {
          return this._worker.performance;
        }
        postMessage(_0x32e955, _0x95a173) {
          this._worker.postMessage(_0x32e955, _0x95a173);
        }
        postMessageToThread(_0x2cf4cd, _0x479e9b, _0x6192ab, _0x1c5055) {
          if (typeof _0x6192ab === 'number' || _0x6192ab === undefined) {
            return this._worker.postMessageToThread(_0x2cf4cd, _0x479e9b, _0x6192ab);
          } else {
            return this._worker.postMessageToThread(_0x2cf4cd, _0x479e9b, _0x6192ab, _0x1c5055);
          }
        }
        ref() {
          this._worker.ref();
        }
        unref() {
          this._worker.unref();
        }
        terminate() {
          return this._worker.terminate();
        }
        getHeapSnapshot() {
          return this._worker.getHeapSnapshot();
        }
        addListener(_0x23a20c, _0x4def38) {
          this._worker.addListener(_0x23a20c, _0x28868b => {
            if (this._filter(_0x28868b)) {
              _0x4def38(_0x28868b);
            }
          });
          return this;
        }
        emit(_0x25fc68, _0xb9c5a5, ..._0x39b2b5) {
          return this._worker.emit(_0x25fc68, _0xb9c5a5, ..._0x39b2b5);
        }
        once(_0x913d32, _0xad064b) {
          this._worker.once(_0x913d32, _0xad064b);
          return this;
        }
        prependListener(_0x51ab36, _0x3da7e4) {
          this._worker.prependListener(_0x51ab36, _0x3da7e4);
          return this;
        }
        prependOnceListener(_0x22e899, _0x45e6bf) {
          this._worker.prependOnceListener(_0x22e899, _0x45e6bf);
          return this;
        }
        removeListener(_0x1bb05e, _0x4578ca) {
          this._worker.removeListener(_0x1bb05e, _0x4578ca);
          return this;
        }
        off(_0x3b413d, _0x29ebe2) {
          this._worker.off(_0x3b413d, _0x29ebe2);
          return this;
        }
        removeAllListeners(_0x4098a1) {
          this._worker.removeAllListeners(_0x4098a1);
          return this;
        }
        setMaxListeners(_0x3299a3) {
          this._worker.setMaxListeners(_0x3299a3);
          return this;
        }
        getMaxListeners() {
          return this._worker.getMaxListeners();
        }
        listeners(_0x51b454) {
          return this._worker.listeners(_0x51b454);
        }
        rawListeners(_0x3e4e00) {
          return this._worker.rawListeners(_0x3e4e00);
        }
        listenerCount(_0x5f46b7) {
          return this._worker.listenerCount(_0x5f46b7);
        }
        eventNames() {
          return this._worker.eventNames();
        }
        on(_0x3122e0, _0xa2ca2e) {
          this._worker.on(_0x3122e0, _0x44a47f => {
            if (this._filter(_0x44a47f)) {
              _0xa2ca2e(_0x44a47f);
            }
          });
          return this;
        }
      }
      exports.FilteringWorker = _0x4b90f9;
    },
    44657: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CallArgumentNameModes = exports.MoveNewFileMarker = undefined;
      exports.MoveNewFileMarker = '*** new file ***';
      var _0x4ad7f3;
      (function (_0x63264a) {
        _0x63264a.off = 'off';
        _0x63264a.partial = 'partial';
        _0x63264a.all = 'all';
      })(_0x4ad7f3 || (exports.CallArgumentNameModes = _0x4ad7f3 = {}));
    },
    46134: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.registerAutoClosing = _0x5686e2;
      const _0x4301d7 = __importStar(require(91398));
      const _0x2082d8 = require(56814);
      const _0x1c1f08 = require(49969);
      function _0x5686e2() {
        if (!_0x1d406b()) {
          return;
        }
        _0x4301d7.workspace.onDidChangeTextDocument(_0x494de8 => {
          if (_0x494de8.document.languageId === 'python') {
            _0x494de8.contentChanges.forEach(_0x5acee0 => _0x151dcf(_0x494de8.document, _0x5acee0));
          }
        });
      }
      function _0x151dcf(_0x254e45, _0x2f1e96) {
        const _0x1f0db4 = _0x2f1e96.text === '\'' || _0x2f1e96.text === '"';
        if (!_0x1f0db4) {
          return;
        }
        const _0x14af62 = _0x4301d7.window.activeTextEditor;
        if (!_0x14af62 || _0x14af62.document.uri.toString() !== _0x254e45.uri.toString()) {
          return;
        }
        if (_0x14af62.selections.length > 1 || !_0x14af62.selection.isEmpty) {
          return;
        }
        const _0x5820b7 = _0x2f1e96.range.end;
        const _0x50047c = _0x5820b7.translate(0, 1);
        const _0x3c96b2 = _0x2f1e96.text[0].repeat(3);
        const _0x1a94e3 = _0x254e45.getText(new _0x4301d7.Range(_0x50047c.with(undefined, 0), _0x50047c));
        if (!_0x1a94e3.endsWith(_0x3c96b2)) {
          return;
        }
        const _0x1ea875 = _0x254e45.getText(new _0x4301d7.Range(new _0x4301d7.Position(0, 0), new _0x4301d7.Position(_0x5820b7.line + 1, 0)));
        const _0x23667d = new _0x1c1f08.Tokenizer();
        const {
          lines: _0x537ab2,
          tokens: _0x34c7ae
        } = _0x23667d.tokenize(_0x1ea875);
        const _0x369fbb = _0x2082d8.convertPositionToOffset(_0x5820b7, _0x537ab2);
        if (_0x369fbb === undefined || _0x369fbb < 0) {
          return;
        }
        const _0x49a4a5 = _0x34c7ae.getItemAt(_0x34c7ae.getItemAtPosition(_0x369fbb));
        if (!_0x3f5f3c(_0x49a4a5)) {
          return;
        }
        _0x556a4a(_0x14af62, _0x254e45, _0x3c96b2, _0x49a4a5, _0x1ea875, _0x50047c);
      }
      function _0x556a4a(_0x52e6d3, _0x46d8b0, _0x2f7de7, _0x2d4f11, _0x2859fc, _0x4b663e) {
        const _0x4220f1 = (_0x2d4f11.flags & 4) !== 0;
        const _0x5b6a95 = (_0x2d4f11.flags & 65536) !== 0;
        const _0x3ccf5c = /^\s*$/.test(_0x2d4f11.escapedValue);
        if (!_0x4220f1 || !_0x3ccf5c || !_0x5b6a95) {
          return;
        }
        if (!_0x4c5fdd(_0x46d8b0.uri, _0x2859fc, _0x2d4f11)) {
          return;
        }
        _0x49832a(_0x52e6d3, _0x2f7de7, _0x4b663e);
      }
      function _0x4c5fdd(_0x522f09, _0x3751f5, _0x44f08c) {
        const _0x2b1f60 = _0x4301d7.workspace.getConfiguration('editor', _0x522f09).get('autoClosingQuotes');
        if (_0x2b1f60 === 'always' || _0x2b1f60 === 'languageDefined') {
          return true;
        }
        if (_0x2b1f60 === 'beforeWhitespace') {
          if (_0x44f08c.start === 0 || /\s/.test(_0x3751f5[_0x44f08c.start - 1])) {
            return true;
          }
        }
        return false;
      }
      function _0x49832a(_0x38ae3f, _0x93b37c, _0x3ac4ba) {
        const _0x52e7d6 = new _0x4301d7.SnippetString();
        _0x52e7d6.appendPlaceholder('', 0);
        _0x52e7d6.appendText(_0x93b37c);
        _0x38ae3f.insertSnippet(_0x52e7d6, _0x3ac4ba);
      }
      function _0x3f5f3c(_0x3b273d) {
        return _0x3b273d.type === 5;
      }
      function _0x1d406b() {
        const _0xf01f66 = _0x4301d7.workspace.getConfiguration('python').get('languageServer');
        return _0xf01f66 === 'Default' || _0xf01f66 === 'Pylance';
      }
    },
    60987: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.addToExtraPaths = _0x551029;
      const _0x56a61d = require(91398);
      const _0x41db8b = require(27130);
      async function _0x551029(_0x25bddd, _0x1f4dc6, _0x5c3475, _0x51e3df) {
        const _0x538dd0 = _0x25bddd.getConfiguration('python.analysis', _0x56a61d.Uri.file(_0x5c3475));
        const _0x44f8a5 = _0x538dd0.get('extraPaths');
        const _0x5efb16 = Array.isArray(_0x44f8a5) ? [..._0x44f8a5] : [];
        _0x5efb16.push(_0x51e3df);
        await _0x538dd0.update('extraPaths', _0x5efb16);
        await _0x1f4dc6.executeCommand(_0x41db8b.Commands.executedClientCommand, _0x41db8b.ClientCommands.addToExtraPaths);
      }
    },
    81316: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.renameEdit = _0x804300;
      const _0x47e381 = __importStar(require(91398));
      function _0x804300(_0x5ce500) {
        const _0x2feb16 = _0x47e381.window.activeTextEditor;
        if (!_0x2feb16) {
          return;
        }
        const _0x8f9ecd = _0x5ce500.edits.changes;
        const _0x4dc400 = _0x5ce500.data;
        if (_0x8f9ecd && _0x4dc400) {
          const _0x2dbd0b = _0x4dc400.newSymbolName;
          const _0x9501a3 = _0x2feb16.document.uri.toString();
          const _0x5603c9 = _0x8f9ecd[_0x9501a3];
          if (!_0x5603c9) {
            const _0x1057b1 = Object.keys(_0x8f9ecd);
            throw new Error(`Unable to match active uri: ${_0x9501a3} 
 in extract results: ${_0x1057b1.join('\n')}`);
          }
          const _0x3bdb4d = _0x5603c9.reduce((_0x4304bd, _0x20cddc) => _0x20cddc.range.start.line < _0x4304bd ? _0x20cddc.range.start.line : _0x4304bd, _0x5603c9[0].range.start.line);
          let _0x1b84db;
          for (let _0x4da358 = _0x3bdb4d; _0x4da358 < _0x2feb16.document.lineCount; _0x4da358 += 1) {
            const _0x16dd73 = _0x2feb16.document.lineAt(_0x4da358);
            const _0x58db87 = _0x16dd73.text.indexOf(_0x2dbd0b);
            if (_0x58db87 >= 0) {
              _0x1b84db = new _0x47e381.Position(_0x16dd73.range.start.line, _0x58db87);
              break;
            }
          }
          if (_0x1b84db) {
            _0x2feb16.selections = [new _0x47e381.Selection(_0x1b84db, new _0x47e381.Position(_0x1b84db.line, _0x1b84db.character + _0x2dbd0b.length))];
            _0x2feb16.revealRange(new _0x47e381.Range(_0x2feb16.selection.start, _0x2feb16.selection.end), _0x47e381.TextEditorRevealType.Default);
          }
          _0x47e381.commands.executeCommand('editor.action.rename');
        }
      }
    },
    28778: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.default = _0x503982;
      const _0x3037a5 = require(87016);
      const _0x3fc9d5 = __importStar(require(91398));
      const _0x1e529d = 'https://github.com/microsoft/pylance-release/issues/new';
      function _0x503982(_0xeab799, _0x99bd9b) {
        _0x3fc9d5.commands.executeCommand('python.viewLanguageServerOutput').then(() => {
          setTimeout(() => {
            _0x2d6eb3(_0xeab799, _0x99bd9b);
          }, 1000);
        });
      }
      function _0x2d6eb3(_0xdea5ea, _0x4f1471) {
        const _0x12261f = process.platform || 'web';
        const _0x18ff9d = process.arch || '';
        const _0x33ce9c = _0x3fc9d5.workspace.getConfiguration('python');
        const _0x5d3a92 = _0x33ce9c.get('analysis.indexing');
        const _0x10e26c = _0x33ce9c.get('analysis.typeCheckingMode');
        let _0x4d320e = '';
        const _0x575a78 = _0x3fc9d5.workspace.textDocuments.find(_0x422b27 => _0x422b27.languageId === 'Log');
        if (_0x575a78) {
          _0x4d320e = _0x575a78.getText();
        }
        const _0x3dc2ce = `
<!--
Read the guidelines for 'Filing an issue'.

'https://aka.ms/pylance-filing-an-issue'
-->

<h3> Environment data </h3>

-   Language Server version: ${_0x4f1471}
-   OS and version: ${_0x12261f} ${_0x18ff9d}
-   Python version (and distribution if applicable, e.g. Anaconda): 
-   python.analysis.indexing: ${_0x5d3a92}
-   python.analysis.typeCheckingMode: ${_0x10e26c}

<h3> Code Snippet </h3>

<!--
Please provide a minimal, self-contained code snippet that reproduces the issue. If the code snippet uses any libraries, please specify the versions used.

Note: If you think a GIF of what is happening would be helpful, consider tools like https://www.cockos.com/licecap/, https://github.com/phw/peek or https://www.screentogif.com/ .
-->

\`\`\`python
XXX
\`\`\`

<h3> Repro Steps </h3>

<!--
If multiple steps are needed to reproduce the issue, please list the steps here. Delete this section if not needed.
-->

1. XXX

<h3> Expected behavior </h3>

XXX

<h3> Actual behavior </h3>

XXX

<h3> Logs </h3>

<!--
Enable trace logging by adding "python.analysis.logLevel": "Trace" to your settings.json configuration file.

Adding this will cause a large amount of info to be printed to the Python output panel. This should not be left long term, as the performance impact of the logging is significant.
-->

\`\`\`
XXX
\`\`\`
`;
        _0x3fc9d5.env.clipboard.writeText(_0x4d320e);
        const _0x3bcfca = new _0x3037a5.URLSearchParams({
          body: _0x3dc2ce
        });
        const _0x4fd400 = _0x1e529d + '?' + _0x3bcfca.toString();
        _0xdea5ea.launch(_0x4fd400);
      }
    },
    63765: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ApplicationShellImpl = undefined;
      const _0x330f51 = require(91398);
      class _0x464820 {
        showInformationMessage(_0x53333b, _0x488a11, ..._0x58bd30) {
          return _0x330f51.window.showInformationMessage(_0x53333b, _0x488a11, ..._0x58bd30);
        }
        showWarningMessage(_0x4bfb1b, _0x199a02, ..._0xa16ada) {
          return _0x330f51.window.showWarningMessage(_0x4bfb1b, _0x199a02, ..._0xa16ada);
        }
        showErrorMessage(_0xf085be, _0x249cf3, ..._0x371c4e) {
          return _0x330f51.window.showErrorMessage(_0xf085be, _0x249cf3, ..._0x371c4e);
        }
        setStatusBarMessage(_0x5ce61a, _0x221573) {
          return _0x330f51.window.setStatusBarMessage(_0x5ce61a, _0x221573);
        }
        createStatusBarItem(_0x28b128, _0x2bbad1) {
          return _0x330f51.window.createStatusBarItem(_0x28b128, _0x2bbad1);
        }
        withProgress(_0x1ee063, _0x2fc4d9) {
          return _0x330f51.window.withProgress(_0x1ee063, _0x2fc4d9);
        }
        withProgressCustomIcon(_0x4cf8ef, _0x37de4c) {
          const _0x55d2eb = new _0x330f51.CancellationTokenSource().token;
          const _0x65c1b4 = this.createStatusBarItem(_0x330f51.StatusBarAlignment.Left);
          const _0xe04d5b = {
            report: _0xcd6cf5 => {
              _0x65c1b4.text = _0x4cf8ef + ' ' + _0xcd6cf5.message;
            }
          };
          _0x65c1b4.show();
          return _0x37de4c(_0xe04d5b, _0x55d2eb).then(_0x4a591a => {
            _0x65c1b4.dispose();
            return _0x4a591a;
          });
        }
        createOutputChannel(_0x564369) {
          return _0x330f51.window.createOutputChannel(_0x564369);
        }
        createQuickPick() {
          return _0x330f51.window.createQuickPick();
        }
        showQuickPick(_0x23efdb, _0x2b1079, _0x4143b6) {
          return _0x330f51.window.showQuickPick(_0x23efdb, _0x2b1079, _0x4143b6);
        }
        showOpenDialog(_0x4c0836) {
          return _0x330f51.window.showOpenDialog(_0x4c0836);
        }
      }
      exports.ApplicationShellImpl = _0x464820;
    },
    462: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LanguageClientManager = exports.PythonDocumentSelector = undefined;
      const _0x4906dd = __importStar(require(48281));
      const _0x3fe885 = require(14906);
      const _0x30f3c1 = require(63454);
      const _0xc67faf = 'vscode-notebook-cell';
      const _0x4ffdae = 'vscode-interactive-input';
      exports.PythonDocumentSelector = [{
        scheme: 'file',
        language: _0x3fe885.pythonName
      }, {
        scheme: 'untitled',
        language: _0x3fe885.pythonName
      }, {
        scheme: 'vscode-notebook',
        language: _0x3fe885.pythonName
      }, {
        scheme: 'vscode-chat-code-block',
        language: _0x3fe885.pythonName
      }, {
        scheme: 'vscode-copilot-chat-code-block',
        language: _0x3fe885.pythonName
      }, {
        scheme: _0xc67faf,
        language: _0x3fe885.pythonName
      }, {
        scheme: _0x4ffdae,
        language: _0x3fe885.pythonName
      }];
      class _0x44e601 {
        constructor(_0x203581, _0x542b00) {
          this._createClient = _0x203581;
          this._disposeClient = _0x542b00;
          this._lastRequest = Promise.resolve({
            type: 'stop',
            info: _0x40480c()
          });
        }
        async startClient() {
          await this._enqueueRequestAndWaitForRun('start');
        }
        async stopClient() {
          await this._enqueueRequestAndWaitForRun('stop');
        }
        async restartClient() {
          await this._enqueueRequestAndWaitForRun('restart');
        }
        async getClient() {
          const _0x408d19 = await this._lastRequest;
          return _0x408d19.info.client;
        }
        async _enqueueRequestAndWaitForRun(_0x6e8572) {
          this._lastRequest = this._createNewRequest(this._lastRequest, _0x6e8572);
          await this._lastRequest;
        }
        async _createNewRequest(_0x2e1226, _0x597589) {
          const _0x2f2ca3 = await _0x2e1226;
          if (_0x2f2ca3.type === _0x597589) {
            return _0x2f2ca3;
          }
          if (_0x597589 === 'restart') {
            if (_0x2f2ca3.type === 'start') {
              try {
                await this._stopClient(_0x2f2ca3.info);
              } catch {}
              return await this._startClient();
            } else {
              if (_0x2f2ca3.type === 'stop') {
                return _0x2f2ca3;
              } else {
                _0x30f3c1.traceError('Previous request can\'t be \'restart\'');
                return {
                  type: 'stop',
                  info: _0x40480c()
                };
              }
            }
          } else {
            if (_0x597589 === 'stop') {
              _0x4906dd.assert(_0x2f2ca3.type === 'start');
              return await this._stopClient(_0x2f2ca3.info);
            }
          }
          _0x4906dd.assert(_0x2f2ca3.type === 'stop');
          return await this._startClient();
        }
        async _stopClient(_0x370dd3) {
          while (_0x370dd3.disposables.length > 0) {
            const _0x18b53b = _0x370dd3.disposables.shift();
            _0x18b53b.dispose();
          }
          const _0x4140cc = _0x370dd3.client;
          await _0x370dd3.stop();
          _0x4140cc.dispose();
          this._disposeClient(_0x370dd3);
          return {
            type: 'stop',
            info: _0x40480c()
          };
        }
        async _startClient() {
          const _0x5047aa = await this._createClient();
          await _0x5047aa.start();
          return {
            type: 'start',
            info: _0x5047aa
          };
        }
      }
      exports.LanguageClientManager = _0x44e601;
      function _0x40480c() {
        return {
          client: undefined,
          start: () => Promise.resolve(),
          stop: () => Promise.resolve(),
          disposables: []
        };
      }
    },
    14906: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.EventName = exports.AppinsightsKey = exports.pythonAnalysisSectionLogLevelName = exports.logLevelName = exports.pylanceOutputName = exports.pythonAnalysisSectionName = exports.languageServerSettingName = exports.defaultName = exports.pylanceName = exports.pythonName = exports.pythonExtensionId = undefined;
      exports.pythonExtensionId = 'ms-python.python';
      exports.pythonName = 'python';
      exports.pylanceName = 'Pylance';
      exports.defaultName = 'Default';
      exports.languageServerSettingName = 'languageServer';
      exports.pythonAnalysisSectionName = 'python.analysis';
      exports.pylanceOutputName = 'Pylance Language Server';
      exports.logLevelName = 'logLevel';
      exports.pythonAnalysisSectionLogLevelName = exports.pythonAnalysisSectionName + '.' + exports.logLevelName;
      exports.AppinsightsKey = '0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255';
      var _0x2cfd3b;
      (function (_0x67e199) {
        _0x67e199.PYTHON_EXPERIMENTS_INIT_PERFORMANCE = 'PYTHON_EXPERIMENTS_INIT_PERFORMANCE';
        _0x67e199.PYTHON_EXPERIMENTS_LSP_NOTEBOOKS = 'PYTHON_EXPERIMENTS_LSP_NOTEBOOKS';
        _0x67e199.PYTHON_EXPERIMENTS_OPT_IN_OPT_OUT_SETTINGS = 'PYTHON_EXPERIMENTS_OPT_IN_OPT_OUT_SETTINGS';
        _0x67e199.LANGUAGE_SERVER_READY = 'LANGUAGE_SERVER.READY';
        _0x67e199.LANGUAGE_SERVER_TELEMETRY = 'LANGUAGE_SERVER.EVENT';
        _0x67e199.LANGUAGE_SERVER_REQUEST = 'LANGUAGE_SERVER.REQUEST';
        _0x67e199.LANGUAGE_SERVER_STARTUP_FAILURE = 'LANGUAGE_SERVER.STARTUP_FAILURE';
        _0x67e199.LANGUAGE_SERVER_INVALID_CLIENT = 'LANGUAGE_SERVER.INVALID_CLIENT';
        _0x67e199.LANGUAGE_SERVER_CRASH = 'LANGUAGE_SERVER.CRASH';
      })(_0x2cfd3b || (exports.EventName = _0x2cfd3b = {}));
    },
    17505: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Refactoring = exports.ClientLoc = exports.LanguageServer = exports.Common = undefined;
      exports._resetCollections = _0x2569e5;
      exports.localize = _0x5e5ca9;
      exports._getAskedForCollection = _0x26cb08;
      exports.loadLocalizedStrings = _0x199cb6;
      const _0x369be7 = __importStar(require(91398));
      const _0x17c35b = require(48281);
      const _0x5c873d = require(60849);
      var _0x3f7c70;
      (function (_0x108e20) {
        _0x108e20.yes = _0x5e5ca9('Common.Yes', 'Yes');
        _0x108e20.no = _0x5e5ca9('Common.No', 'No');
        _0x108e20.help = _0x5e5ca9('Common.Help', 'Help');
        _0x108e20.remindMeLater = _0x5e5ca9('Common.remindMeLater', 'Remind me later');
        _0x108e20.reload = _0x5e5ca9('Common.reload', 'Reload');
      })(_0x3f7c70 || (exports.Common = _0x3f7c70 = {}));
      var _0x48d857;
      (function (_0x6cc316) {
        _0x6cc316.settingsMigratedMessage = _0x5e5ca9('LanguageServer.settingsMigratedMessage', 'Settings applicable to Microsoft Language Server were copied to Pylance settings. Please check settings.json file(s) for details.');
        _0x6cc316.settingsMigrationError = _0x5e5ca9('LanguageServer.settingsMigrationError', 'The following settings could not be migrated:');
        _0x6cc316.settingsNotOverridable = _0x5e5ca9('LanguageServer.settingsNotOverridable', '"{0}" cannot be set when a Pyrightconfig.json or pyproject.toml is being used.');
      })(_0x48d857 || (exports.LanguageServer = _0x48d857 = {}));
      var _0x268534;
      (function (_0x3a9277) {
        _0x3a9277.typeCheckingModeStatusItem = {
          pickerPlaceholder: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.pickerPlaceholder', 'Current mode: {0}. Select the type checking mode.'),
          pickerSettingsPage: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.pickerSettingsPage', 'view on settings page'),
          name: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.name', 'Python Type Checking Mode'),
          textFormatted: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.textFormatted', 'Type Checking: {0}'),
          textFormattedFromConfig: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig', 'Type Checking: {0} (from {1})'),
          title: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.title', 'Select type checking mode'),
          titleConfig: _0x5e5ca9('ClientLoc.typeCheckingModeStatusItem.titleConfig', 'Open config')
        };
        _0x3a9277.autoImportCompletionsStatusItem = {
          name: _0x5e5ca9('ClientLoc.autoImportCompletionsStatusItem.name', 'Python Auto-Import Completions Mode'),
          textFormatted: _0x5e5ca9('ClientLoc.autoImportCompletionsStatusItem.text', 'Auto-Import Completions: {0}'),
          titleOn: _0x5e5ca9('ClientLoc.autoImportCompletionsStatusItem.titleOn', 'Switch to on'),
          titleOff: _0x5e5ca9('ClientLoc.autoImportCompletionsStatusItem.titleOff', 'Switch to off')
        };
        _0x3a9277.updateSettingsErrorMsgFormatted = _0x5e5ca9('ClientLoc.updateSettingsErrorMsgFormatted', 'Failed to update setting \'{0}.{1}\'.');
        _0x3a9277.pylanceAndPythonStableExtensionMismatch = _0x5e5ca9('ClientLoc.pylanceAndPythonStableExtensionMismatch', 'Pylance and Python extension are using incompatible libraries. Please make sure both extensions are the latest stable versions.');
        _0x3a9277.pylanceAndPythonPrereleaseExtensionMismatch = _0x5e5ca9('ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch', 'Pylance and Python extension are using incompatible libraries. Please make sure both extensions are the latest stable versions.');
        let _0x193936;
        (function (_0x2ec391) {
          _0x2ec391.crashMessage = _0x5e5ca9('ClientLoc.ServerRestart.crashMessage', 'Pylance has crashed.');
          _0x2ec391.restartingMessage = _0x5e5ca9('ClientLoc.ServerRestart.restartingMessage', 'Restarting Pylance using Node.js...');
          _0x2ec391.crashRestartingMessage = _0x5e5ca9('ClientLoc.ServerRestart.crashRestartingMessage', 'Pylance has crashed. Pylance will restart when you select a Node.js executable to run Pylance.');
          _0x2ec391.selectButton = _0x5e5ca9('ClientLoc.ServerRestart.selectButton', 'Select');
          _0x2ec391.selectNodeJsTitle = _0x5e5ca9('ClientLoc.ServerRestart.selectNodeJsTitle', 'Select Node.js executable to run Pylance');
        })(_0x193936 = _0x3a9277.ServerRestart ||= {});
        _0x3a9277.askNodeSafetyQuestion = _0x5e5ca9('ClientLoc.askNodeSafetyQuestion', 'Pylance is configured to run with {0}. Do you want to use this executable to run Pylance?');
        _0x3a9277.crashTooManyRestarts = _0x5e5ca9('ClientLoc.crashTooManyRestarts', 'Pylance has crashed 5 times in the last 3 minutes. Pylance will not be restarted. Please check [this link](https://aka.ms/AApf7ox) for more details.');
      })(_0x268534 || (exports.ClientLoc = _0x268534 = {}));
      var _0x15d7d5;
      (function (_0x30de27) {
        let _0x147784;
        (function (_0x1edfad) {
          _0x1edfad.progressBarTitle = _0x5e5ca9('Refactoring.MoveSymbol.progressBarTitle', 'Move Symbol To...');
          _0x1edfad.newFileLabel = _0x5e5ca9('Refactoring.MoveSymbol.newFileLabel', 'Enter destination file path');
          _0x1edfad.newFileDetail = _0x5e5ca9('Refactoring.MoveSymbol.newFileDetail', 'Enter path or select destination file');
          _0x1edfad.separatorText = _0x5e5ca9('Refactoring.MoveSymbol.separatorText', 'Destination Files');
          _0x1edfad.quickPickPlaceHolder = _0x5e5ca9('Refactoring.MoveSymbol.quickPickPlaceHolder', 'Search destination file');
          _0x1edfad.quickPickTitle = _0x5e5ca9('Refactoring.MoveSymbol.quickPickTitle', 'Select destination for move');
          _0x1edfad.openDialogOpenLabel = _0x5e5ca9('Refactoring.MoveSymbol.openDialogOpenLabel', 'Select');
          _0x1edfad.openDialogTitle = _0x5e5ca9('Refactoring.MoveSymbol.openDialogTitle', 'Select new file to move the symbol to...');
        })(_0x147784 = _0x30de27.MoveSymbol ||= {});
        let _0x40cf9b;
        (function (_0x12dd57) {
          _0x12dd57.quickPickPlaceHolder = _0x5e5ca9('Refactoring.SearchImports.quickPickPlaceHolder', 'Search imports');
          _0x12dd57.quickPickTitle = _0x5e5ca9('Refactoring.SearchImports.quickPickTitle', 'Search imports to insert');
        })(_0x40cf9b = _0x30de27.SearchImports ||= {});
      })(_0x15d7d5 || (exports.Refactoring = _0x15d7d5 = {}));
      let _0x2b2976;
      let _0x1ae067;
      let _0xe873ed = {};
      let _0x3c71fa;
      const _0x5bdf94 = Object.prototype.hasOwnProperty;
      function _0x2569e5() {
        _0x3c71fa = '';
        _0x2b2976 = undefined;
        _0xe873ed = {};
      }
      function _0x5e5ca9(_0x20a7d5, _0x166562) {
        return () => {
          return _0xf08791(_0x20a7d5, _0x166562);
        };
      }
      function _0x26cb08() {
        return _0xe873ed;
      }
      function _0x54460a() {
        try {
          if (navigator?.language) {
            return navigator.language.toLowerCase();
          }
        } catch {}
        const _0x2ae25d = process.env.VSCODE_NLS_CONFIG;
        if (_0x2ae25d) {
          return JSON.parse(_0x2ae25d).locale;
        } else {
          return 'en-us';
        }
      }
      function _0xf08791(_0x103c8b, _0x94f358) {
        let _0x7bb1fe = _0x1ae067;
        _0x17c35b.assertDefined(_0x7bb1fe);
        if (_0x2b2976 && _0x5bdf94.call(_0x2b2976, _0x103c8b)) {
          _0x7bb1fe = _0x2b2976;
        }
        let _0x13eabc = _0x7bb1fe[_0x103c8b];
        if (!_0x13eabc && _0x94f358) {
          _0x13eabc = _0x94f358;
        }
        _0xe873ed[_0x103c8b] = typeof _0x13eabc === 'string' ? _0x13eabc : _0x13eabc.message;
        return _0xe873ed[_0x103c8b];
      }
      async function _0x199cb6() {
        _0x3c71fa = _0x54460a();
        _0x2b2976 = await _0x40b4f1(_0x3c71fa);
        if (!_0x1ae067) {
          _0x1ae067 = await _0x40b4f1();
        }
      }
      async function _0x40b4f1(_0x45ce9e) {
        try {
          const _0x18ac6d = _0x45ce9e ? `package.nls.${_0x45ce9e}.json` : 'package.nls.json';
          const _0x1cda9b = _0x369be7.Uri.joinPath(_0x5c873d.getExtensionRoot(), _0x18ac6d);
          const _0x3450b8 = await _0x369be7.workspace.fs.readFile(_0x1cda9b);
          const _0x54c981 = new TextDecoder().decode(_0x3450b8);
          return JSON.parse(_0x54c981);
        } catch (_0x33859d) {
          if (!(_0x33859d instanceof _0x369be7.FileSystemError) || _0x33859d.code !== 'FileNotFound') {
            console.log(_0x33859d);
          }
          return {};
        }
      }
    },
    63454: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.registerOutputChannelForLogging = _0x215b02;
      exports.traceLog = _0x394ee7;
      exports.traceInfo = _0xfa7c6f;
      exports.traceWarn = _0x5e549e;
      exports.traceError = _0x4ffbed;
      const _0x3313c1 = __importStar(require(91398));
      const _0x2173c1 = require(25075);
      const _0x170088 = require(14906);
      let _0x5893cf;
      function _0x215b02(_0x5a2077) {
        if (_0x5893cf) {
          return;
        }
        _0x5893cf = new _0x2173c1.ConsoleWithLogLevel(new _0x12fedf(_0x5a2077), 'Client');
        _0x3313c1.workspace.onDidChangeConfiguration(_0x3567d4 => {
          if (_0x3567d4.affectsConfiguration(_0x170088.pythonAnalysisSectionLogLevelName)) {
            _0x258285();
          }
        });
        _0x258285();
      }
      function _0x394ee7(_0xbc3b6a) {
        _0x1635c5(_0x2173c1.LogLevel.Log, _0xbc3b6a);
      }
      function _0xfa7c6f(_0x4f7a39) {
        _0x1635c5(_0x2173c1.LogLevel.Info, _0x4f7a39);
      }
      function _0x5e549e(_0x27497e) {
        _0x1635c5(_0x2173c1.LogLevel.Warn, _0x27497e);
      }
      function _0x4ffbed(_0x4e3371) {
        _0x1635c5(_0x2173c1.LogLevel.Error, _0x4e3371);
      }
      function _0x1635c5(_0x50515b, _0x15b0fb) {
        if (!_0x5893cf) {
          return;
        }
        try {
          _0x2173c1.log(_0x5893cf, _0x50515b, _0x15b0fb);
        } catch {}
      }
      function _0x258285() {
        if (!_0x5893cf) {
          return;
        }
        const _0x46c449 = _0x3313c1.workspace.getConfiguration(_0x170088.pythonAnalysisSectionName);
        _0x5893cf.level = _0x2173c1.convertLogLevel(_0x46c449.get(_0x170088.logLevelName));
      }
      class _0x12fedf {
        constructor(_0x3cf866) {
          this._output = _0x3cf866;
        }
        log(_0x10b8b9) {
          this._output.appendLine(_0x10b8b9);
        }
        info(_0x400d69) {
          this._output.appendLine(_0x400d69);
        }
        warn(_0x105bc2) {
          this._output.appendLine(_0x105bc2);
        }
        error(_0x2e43ef) {
          this._output.appendLine(_0x2e43ef);
        }
      }
    },
    939: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceMiddlewareBase = undefined;
      const _0xd17091 = require(91398);
      const _0x569015 = require(98766);
      const _0x285b8f = require(34455);
      const _0x1cf0a2 = require(585);
      const _0x2bebb9 = require(15986);
      const _0x4ad389 = require(14906);
      function _0x360e99(_0x560e22, _0x539f2b) {
        const _0x41fd52 = _0x560e22.inspect(_0x539f2b);
        if (_0x41fd52 === undefined || _0x41fd52 === null) {
          return false;
        }
        return _0x41fd52.globalValue !== undefined || _0x41fd52.workspaceValue !== undefined || _0x41fd52.workspaceFolderValue !== undefined || _0x41fd52.globalLanguageValue !== undefined || _0x41fd52.workspaceLanguageValue !== undefined || _0x41fd52.workspaceFolderLanguageValue !== undefined;
      }
      class _0x635504 {
        constructor(_0x5221a4, _0x16ff59, _0x90fe4, _0x42c1b4) {
          this._config = _0x5221a4;
          this._telemetryService = _0x16ff59;
          this._serverVersion = _0x90fe4;
          this._pythonApi = _0x42c1b4;
          this._lspTelemetryThrottler = new _0x1cf0a2.LspTelemetryThrottler();
          this.workspace = {
            configuration: async (_0xf28ce8, _0x17cca9, _0x17c637) => {
              let _0x466420 = _0x17c637(_0xf28ce8, _0x17cca9);
              if (_0x285b8f.isThenable(_0x466420)) {
                _0x466420 = await _0x466420;
              }
              if (_0x466420 instanceof _0x569015.ResponseError) {
                return _0x466420;
              }
              for (const [_0x51ed84, _0xbf9f1e] of _0xf28ce8.items.entries()) {
                if (_0xbf9f1e.section === 'python' && this._pythonApi.environments) {
                  const _0xa21118 = _0xbf9f1e.scopeUri ? _0xd17091.Uri.parse(_0xbf9f1e.scopeUri) : undefined;
                  const _0x3d3b16 = _0x466420[_0x51ed84];
                  _0x3d3b16.pythonPath = (await this.getPythonPathOverride(_0xa21118)) ?? (await this._getPythonPath(_0xa21118));
                  const _0x10a496 = this._pythonApi.environments.getEnvironmentVariables(_0xa21118);
                  const _0x54da24 = _0x10a496.PYTHONPATH;
                  if (_0x54da24) {
                    _0x3d3b16._envPYTHONPATH = _0x54da24;
                  }
                  const _0x5b82a2 = await this._getEnvironmentName(_0xa21118);
                  if (_0x5b82a2) {
                    _0x3d3b16.pythonEnvironmentName = _0x5b82a2;
                  }
                }
                this._configurationHook(_0xbf9f1e, _0x466420[_0x51ed84]);
              }
              return _0x466420;
            }
          };
          this.notebooks = {
            didOpen: this.didOpenNotebook.bind(this),
            didSave: this.didSaveNotebook.bind(this),
            didChange: this.didChangeNotebook.bind(this),
            didClose: this.didCloseNotebook.bind(this)
          };
          this.handleDiagnostics = this.handleDiagnostics.bind(this);
          this.didOpen = this.didOpen.bind(this);
          this.didSave = this.didSave.bind(this);
          this.didChange = this.didChange.bind(this);
          this.didClose = this.didClose.bind(this);
          this.willSave = this.willSave.bind(this);
          this.willSaveWaitUntil = this.willSaveWaitUntil.bind(this);
        }
        didChange() {
          return this._callNext('didChange', arguments);
        }
        didOpen() {
          return this._callNext('didOpen', arguments);
        }
        didClose() {
          return this._callNext('didClose', arguments);
        }
        didSave() {
          return this._callNext('didSave', arguments);
        }
        willSave() {
          return this._callNext('willSave', arguments);
        }
        willSaveWaitUntil() {
          return this._callNext('willSaveWaitUntil', arguments);
        }
        async didOpenNotebook() {
          return this._callNotebooksNext('didOpen', arguments);
        }
        async didSaveNotebook() {
          return this._callNotebooksNext('didSave', arguments);
        }
        async didChangeNotebook() {
          return this._callNotebooksNext('didChange', arguments);
        }
        async didCloseNotebook() {
          return this._callNotebooksNext('didClose', arguments);
        }
        provideCompletionItem() {
          return this._callNextAndSendTelemetry('textDocument/completion', 'provideCompletionItem', arguments, (_0x40d35d, _0x3279d6) => {
            if (!_0x3279d6) {
              return {
                resultLength: 0
              };
            }
            const _0x21780a = Array.isArray(_0x3279d6) ? _0x3279d6.length : _0x3279d6.items.length;
            return {
              resultLength: _0x21780a
            };
          }, (_0x31eac5, _0x1673c8) => {
            if (!_0x1673c8) {
              return {};
            }
            const _0x42e482 = Array.isArray(_0x1673c8) ? _0x1673c8 : _0x1673c8?.items || [];
            const _0x24ebb4 = _0x42e482[0]?.data?.moduleHash;
            const _0x464d06 = _0x42e482[0]?.data?.moduleVersion;
            if (_0x24ebb4) {
              return {
                moduleHash: _0x24ebb4,
                moduleVersion: _0x464d06 || '0'
              };
            }
            return {};
          });
        }
        provideHover() {
          return this._callNextAndSendTelemetry('textDocument/hover', 'provideHover', arguments, undefined, (_0x37cd28, _0x21c8e8) => {
            if (!_0x21c8e8) {
              return {};
            }
            let _0x2a30d5;
            let _0x178859;
            _0x21c8e8.contents.forEach(_0x4d12bd => {
              const _0x2b1518 = _0x4d12bd;
              const _0x2b4a2c = typeof _0x2b1518.value === 'string' ? _0x2b1518.value.toString() : _0x2b1518.toString();
              if (_0x2b4a2c && _0x2b4a2c.includes('<!--moduleHash:') && !_0x2a30d5) {
                _0x2a30d5 = _0x2b4a2c.match(/<!--moduleHash:(.+)-->/m)?.[1];
              }
              if (_0x2b4a2c && _0x2b4a2c.includes('<!--moduleVersion:') && !_0x178859) {
                _0x178859 = _0x2b4a2c.match(/<!--moduleVersion:(.+)-->/m)?.[1];
              }
            });
            if (!_0x2a30d5) {
              return {};
            }
            return {
              moduleHash: parseInt(_0x2a30d5, 10),
              moduleVersion: _0x178859 || '0'
            };
          });
        }
        handleDiagnostics(_0x1832a8, _0xb23c37, _0x550fa4) {
          return this._callNext('handleDiagnostics', arguments);
        }
        resolveCompletionItem() {
          return this._callNextAndSendTelemetry('completionItem/resolve', 'resolveCompletionItem', arguments);
        }
        provideSignatureHelp() {
          return this._callNextAndSendTelemetry('textDocument/signatureHelp', 'provideSignatureHelp', arguments);
        }
        provideDefinition() {
          return this._callNextAndSendTelemetry('textDocument/definition', 'provideDefinition', arguments);
        }
        provideReferences() {
          return this._callNextAndSendTelemetry('textDocument/references', 'provideReferences', arguments);
        }
        provideDocumentHighlights() {
          return this._callNext('provideDocumentHighlights', arguments);
        }
        provideDocumentSymbols() {
          return this._callNextAndSendTelemetry('textDocument/documentSymbol', 'provideDocumentSymbols', arguments);
        }
        provideWorkspaceSymbols() {
          return this._callNextAndSendTelemetry('workspace/symbol', 'provideWorkspaceSymbols', arguments);
        }
        provideCodeActions() {
          const _0x14a3f6 = this._callNextAndSendTelemetry('textDocument/codeAction', 'provideCodeActions', arguments, undefined, (_0xa0cc51, _0x1a4de3) => {
            if (!_0x1a4de3) {
              return {};
            }
            const _0x375ebc = _0x1a4de3.map(_0x517fec => {
              if (_0x569015.Command.is(_0x517fec)) {
                return `[c:${_0x517fec.command}]`;
              } else {
                return `[a:${_0x517fec.command?.command ?? _0x517fec.title}]`;
              }
            });
            return {
              actions: _0x375ebc.join(', ')
            };
          });
          return Promise.resolve(_0x14a3f6).then(_0x286353 => {
            return this._modifyCodeActions(_0x286353);
          });
        }
        provideCodeLenses() {
          return this._callNextAndSendTelemetry('textDocument/codeLens', 'provideCodeLenses', arguments);
        }
        resolveCodeLens() {
          return this._callNextAndSendTelemetry('codeLens/resolve', 'resolveCodeLens', arguments);
        }
        provideDocumentFormattingEdits() {
          return this._callNext('provideDocumentFormattingEdits', arguments);
        }
        provideDocumentRangeFormattingEdits() {
          return this._callNext('provideDocumentRangeFormattingEdits', arguments);
        }
        provideOnTypeFormattingEdits() {
          return this._callNextAndSendTelemetry('textDocument/onTypeFormatting', 'provideOnTypeFormattingEdits', arguments);
        }
        provideRenameEdits() {
          return this._callNextAndSendTelemetry('textDocument/rename', 'provideRenameEdits', arguments);
        }
        prepareRename() {
          return this._callNextAndSendTelemetry('textDocument/prepareRename', 'prepareRename', arguments);
        }
        provideDocumentLinks() {
          return this._callNext('provideDocumentLinks', arguments);
        }
        resolveDocumentLink() {
          return this._callNext('resolveDocumentLink', arguments);
        }
        provideDeclaration() {
          return this._callNextAndSendTelemetry('textDocument/declaration', 'provideDeclaration', arguments);
        }
        provideTypeDefinition() {
          return this._callNext('provideTypeDefinition', arguments);
        }
        provideImplementation() {
          return this._callNext('provideImplementation', arguments);
        }
        provideDocumentColors() {
          return this._callNext('provideDocumentColors', arguments);
        }
        provideColorPresentations() {
          return this._callNext('provideColorPresentations', arguments);
        }
        provideFoldingRanges() {
          return this._callNext('provideFoldingRanges', arguments);
        }
        provideSelectionRanges() {
          return this._callNext('provideSelectionRanges', arguments);
        }
        prepareCallHierarchy() {
          return this._callNext('prepareCallHierarchy', arguments);
        }
        provideCallHierarchyIncomingCalls() {
          return this._callNext('provideCallHierarchyIncomingCalls', arguments);
        }
        provideCallHierarchyOutgoingCalls() {
          return this._callNext('provideCallHierarchyOutgoingCalls', arguments);
        }
        provideDocumentSemanticTokens() {
          return this._callNext('provideDocumentSemanticTokens', arguments);
        }
        provideDocumentSemanticTokensEdits() {
          return this._callNext('provideDocumentSemanticTokensEdits', arguments);
        }
        provideDocumentRangeSemanticTokens() {
          return this._callNext('provideDocumentRangeSemanticTokens', arguments);
        }
        provideLinkedEditingRange() {
          return this._callNext('provideLinkedEditingRange', arguments);
        }
        async getPythonPathOverride(_0x548569) {
          return undefined;
        }
        _configurationHook(_0xaddaba, _0x39bdb7) {
          if (_0xaddaba.section === 'editor') {
            const _0x26d830 = this._config.getConfiguration(_0xaddaba.section, {
              uri: _0xaddaba.scopeUri ? _0xd17091.Uri.parse(_0xaddaba.scopeUri) : undefined,
              languageId: _0x4ad389.pythonName
            });
            const _0x3e4800 = _0x39bdb7;
            _0x3e4800.formatOnType = _0x26d830.get('formatOnType');
            _0x3e4800.insertSpaces = _0x26d830.get('insertSpaces');
            _0x3e4800.indentSize = _0x26d830.get('indentSize');
            _0x3e4800.tabSize = _0x26d830.get('tabSize');
          } else {
            if (_0xaddaba.section === 'python.analysis') {
              const _0x463a01 = this._config.getConfiguration(_0xaddaba.section, _0xaddaba.scopeUri ? _0xd17091.Uri.parse(_0xaddaba.scopeUri) : undefined);
              const _0x39c83e = _0x39bdb7;
              for (const _0x53c8c0 of _0x51f5bc(_0x463a01)) {
                if (!_0x360e99(_0x463a01, _0x53c8c0)) {
                  _0x39c83e.setByDefault = _0x39c83e.setByDefault ?? [];
                  _0x39c83e.setByDefault.push(_0x53c8c0.toLowerCase());
                }
              }
            }
          }
        }
        _modifyCodeActions(_0x467296) {
          const _0x1155fe = _0xd17091.extensions.getExtension('github.copilot-chat');
          const _0x3cf804 = _0x1155fe && _0x1155fe.isActive ? true : false;
          if (_0x467296) {
            return _0x467296.filter(_0x73b17f => {
              if (!_0x3cf804 && _0x73b17f.data?.isAI) {
                return false;
              }
              return true;
            });
          }
          return _0x467296;
        }
        _getEnvironmentTypeName(_0x1ad28b) {
          switch (_0x1ad28b) {
            case 'Conda':
              return 'conda';
            case 'VirtualEnvironment':
              return 'venv';
            default:
              return _0x1ad28b;
          }
        }
        async _resolveEnvironment(_0x380308) {
          try {
            const _0x11f0b8 = this._pythonApi.environments.getActiveEnvironmentPath(_0x380308);
            const _0x53148c = await this._pythonApi.environments.resolveEnvironment(_0x11f0b8);
            return {
              activePath: _0x11f0b8,
              details: _0x53148c
            };
          } catch {
            return undefined;
          }
        }
        async _getEnvironmentName(_0x544485) {
          const _0x2d2d7f = await this._resolveEnvironment(_0x544485);
          if (!_0x2d2d7f) {
            return undefined;
          }
          const {
            activePath: _0x77d9b,
            details: _0x2ad9a8
          } = _0x2d2d7f;
          let _0xab6b2e = _0x77d9b.path;
          let _0xc02ea9 = _0x2ad9a8?.version ? _0x2ad9a8.version.major + '.' + _0x2ad9a8.version.minor + '.' + _0x2ad9a8.version.micro : '';
          if (_0x544485 && (_0x544485.path.toLowerCase().endsWith('.ipynb') || _0x544485.path.toLowerCase().endsWith('interactive'))) {
            const _0x1d7576 = _0xd17091.window.visibleNotebookEditors.find(_0x3a2e5a => _0x3a2e5a.notebook.uri.toString() === _0x544485.toString());
            if (_0x1d7576) {
              const _0x353950 = 'custom' in _0x1d7576.notebook.metadata ? _0x1d7576.notebook.metadata.custom : _0x1d7576.notebook.metadata;
              if (_0x353950?.metadata?.kernelspec) {
                _0xc02ea9 = _0x353950.metadata?.language_info?.version || '';
                _0xab6b2e = (_0x353950.metadata.kernelspec.display_name || _0x353950.metadata.kernelspec.name) + ' (Python ' + _0xc02ea9 + ')';
              }
            }
          } else {
            if (_0x2ad9a8 && _0x2ad9a8.environment && _0x2ad9a8.environment.name) {
              _0xab6b2e = _0xc02ea9 + ' (' + _0x2ad9a8.environment.name + ' ' + this._getEnvironmentTypeName(_0x2ad9a8.environment.type) + ')';
            } else {
              if (_0x2ad9a8 && !_0x2ad9a8.environment) {
                if (_0x77d9b.path.includes('WindowsApps')) {
                  _0xab6b2e = _0xc02ea9 + ' (' + _0x2bebb9.Localizer.Messages.windowsStoreEnvironmentName() + ')';
                } else {
                  _0xab6b2e = _0xc02ea9 + ' (' + _0x2bebb9.Localizer.Messages.globalEnvironmentName() + ')';
                }
              }
            }
          }
          return _0xab6b2e;
        }
        async _getPythonPath(_0x7ebc47) {
          var _0x65ed87;
          if (!this._pythonApi.environments) {
            return '';
          }
          const _0x103e6c = await this._resolveEnvironment(_0x7ebc47);
          if ((_0x65ed87 = _0x103e6c?.details?.path) !== null && _0x65ed87 !== undefined) {
            return _0x65ed87;
          } else {
            return '';
          }
        }
        _callNext(_0x4188ec, _0x4bdb64) {
          if (this.notebookAddon && this.notebookAddon[_0x4188ec]) {
            return this.notebookAddon[_0x4188ec](..._0x4bdb64);
          }
          return _0x4bdb64[_0x4bdb64.length - 1](..._0x4bdb64);
        }
        _callNotebooksNext(_0x29a7dc, _0x215bf4) {
          if (this.notebookAddon?.notebooks && this.notebookAddon.notebooks[_0x29a7dc]) {
            return this.notebookAddon.notebooks[_0x29a7dc](..._0x215bf4);
          }
          return _0x215bf4[_0x215bf4.length - 1](..._0x215bf4);
        }
        _callNextAndSendTelemetry(_0x3321b6, _0x135c65, _0x491f82, _0x2e030b, _0x44c96e) {
          let _0x3d297f = false;
          const _0x4ed4d7 = [..._0x491f82];
          _0x4ed4d7[_0x4ed4d7.length - 1] = (..._0x2dc75e) => {
            _0x3d297f = true;
            return _0x491f82[_0x491f82.length - 1](..._0x2dc75e);
          };
          return this._lspTelemetryThrottler.maybeSendTelemetry(_0x3321b6, () => this._callNext(_0x135c65, _0x4ed4d7), () => {
            return _0x3d297f;
          }, (_0x13fbd5, _0x412a7e) => this._telemetryService.sendTelemetryEvent(_0x4ad389.EventName.LANGUAGE_SERVER_REQUEST, _0x13fbd5, _0x412a7e), _0x2e030b, _0x44c96e);
        }
      }
      exports.PylanceMiddlewareBase = _0x635504;
      function _0x51f5bc(_0x44394f) {
        const _0x1b4e3c = [];
        _0x229f54(_0x44394f);
        return _0x1b4e3c;
        function _0x229f54(_0x488f65, _0x76c025 = '') {
          for (const _0x4f7486 of Object.keys(_0x488f65)) {
            const _0xbef6e7 = _0x76c025 ? _0x76c025 + '.' + _0x4f7486 : _0x4f7486;
            const _0x2f9bd6 = _0x488f65[_0x4f7486];
            if (_0x2f9bd6 !== null && typeof _0x2f9bd6 === 'object' && !Array.isArray(_0x2f9bd6)) {
              _0x229f54(_0x2f9bd6, _0xbef6e7);
            } else {
              _0x1b4e3c.push(_0xbef6e7);
            }
          }
        }
      }
    },
    95699: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TelemetryServiceImpl = undefined;
      exports.scrubErrorProperties = _0x4a2c5b;
      const _0x4a64bc = __importDefault(require(81170));
      const _0x293788 = __importStar(require(39023));
      const _0x1e2d98 = require(14906);
      const _0x44bd31 = require(63454);
      class _0x3c496d {
        constructor(_0x32ee19) {
          this._doNotAccessDirectlyReporter = _0x32ee19;
          this._sharedProperties = {};
        }
        sendTelemetryEvent(_0x5e058b, _0x18a938, _0x340913, _0x3f9d0e) {
          const _0x5e9564 = typeof _0x18a938 === 'number' ? {
            duration: _0x18a938
          } : _0x18a938 || undefined;
          const _0x577a6d = {};
          const _0x45ccdd = _0x5e058b;
          if (_0x340913) {
            const _0x147c10 = _0x340913;
            Object.getOwnPropertyNames(_0x147c10).forEach(_0x71c1ea => {
              if (_0x147c10[_0x71c1ea] === undefined || _0x147c10[_0x71c1ea] === null) {
                return;
              }
              try {
                switch (typeof _0x147c10[_0x71c1ea]) {
                  case 'string':
                    _0x577a6d[_0x71c1ea] = _0x147c10[_0x71c1ea];
                    break;
                  case 'object':
                    _0x577a6d[_0x71c1ea] = 'object';
                    break;
                  default:
                    _0x577a6d[_0x71c1ea] = _0x147c10[_0x71c1ea].toString();
                    break;
                }
              } catch (_0x339e5d) {
                _0x44bd31.traceError(_0x293788.format(`Failed to serialize ${_0x71c1ea} for ${_0x45ccdd}`, _0x339e5d));
              }
            });
          }
          Object.assign(_0x577a6d, this._sharedProperties);
          const _0x354e42 = this._getTelemetryReporter();
          if (_0x3f9d0e) {
            const _0x1b728b = {
              errorName: _0x3f9d0e.name,
              errorMessage: _0x3f9d0e.message,
              errorStack: _0x3f9d0e.stack ?? ''
            };
            _0x4a2c5b(_0x1b728b);
            Object.assign(_0x577a6d, _0x1b728b);
            _0x354e42.sendTelemetryErrorEvent(_0x45ccdd, _0x577a6d, _0x5e9564);
          } else {
            _0x354e42.sendTelemetryEvent(_0x45ccdd, _0x577a6d, _0x5e9564);
          }
        }
        setSharedProperty(_0x4cdd80, _0x7a4fc4) {
          const _0x874c02 = _0x4cdd80;
          if (_0x7a4fc4 === undefined) {
            delete this._sharedProperties[_0x874c02];
          } else {
            this._sharedProperties[_0x874c02] = _0x7a4fc4;
          }
        }
        _getTelemetryReporter() {
          if (this._doNotAccessDirectlyReporter) {
            return this._doNotAccessDirectlyReporter;
          }
          this._doNotAccessDirectlyReporter = new _0x4a64bc.default(_0x1e2d98.AppinsightsKey, [{
            lookup: /(errorName|errorMessage|errorStack)/g
          }]);
          return this._doNotAccessDirectlyReporter;
        }
      }
      exports.TelemetryServiceImpl = _0x3c496d;
      function _0x4a2c5b(_0x4bc90d) {
        let _0x2700de = _0x4bc90d.errorStack;
        let _0x3f73e2 = _0x4bc90d.errorMessage;
        if (_0x2700de) {
          _0x2700de = _0x2700de.replace(/(\s+at\s+)(.*?)(\(.*?\))/gm, '$1func $3');
          _0x3f73e2 = _0x3f73e2 === null || _0x3f73e2 === undefined ? undefined : _0x3f73e2.replace(/(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/gim, '**');
          _0x2700de = _0x2700de === null || _0x2700de === undefined ? undefined : _0x2700de.replace(/(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/gim, '**');
          _0x2700de = _0x2700de === null || _0x2700de === undefined ? undefined : _0x2700de.replace(/\((.*?)packages(.*?)\)/gim, '(packages$2)');
          _0x4bc90d.errorStack = _0x2700de;
          _0x4bc90d.errorMessage = _0x3f73e2;
        }
      }
    },
    99599: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.isUserOwnedExecutable = _0x5c591b;
      const _0x417c0d = __importStar(require(70857));
      const _0x203363 = __importStar(require(16928));
      const _0x362c06 = __importDefault(require(77242));
      function _0x5c591b(_0x278b56) {
        var _0x30729e;
        var _0x13c793;
        var _0x397671;
        const _0x79d46f = _0x278b56.toLowerCase();
        const _0x2a1dd7 = _0x203363.basename(_0x278b56);
        const _0x3b1809 = _0x362c06.default.sync(_0x2a1dd7, {
          nothrow: true
        });
        const _0x197900 = _0x3b1809 && _0x3b1809.toLowerCase().includes(_0x79d46f);
        const _0x54b0e9 = process.env.HOME || process.env.USERPROFILE || _0x417c0d.homedir();
        const _0x5761a4 = _0x54b0e9 === null || _0x54b0e9 === undefined ? undefined : _0x54b0e9.toLowerCase();
        const _0x2f0322 = _0x5761a4 && _0x79d46f.startsWith(_0x5761a4);
        const _0x2858a6 = (_0x30729e = process.env.ProgramFiles) === null || _0x30729e === undefined ? undefined : _0x30729e.toLowerCase();
        const _0x7293 = (_0x13c793 = process.env.SystemRoot) === null || _0x13c793 === undefined ? undefined : _0x13c793.toLowerCase();
        const _0x21e9cf = _0x2858a6 && _0x79d46f.startsWith(_0x2858a6);
        const _0x22f7b8 = _0x7293 && _0x79d46f.startsWith(_0x7293);
        const _0x32f087 = (_0x397671 = process.env['ProgramFiles(x86)']) === null || _0x397671 === undefined ? undefined : _0x397671.toLowerCase();
        const _0x4f1c25 = _0x32f087 && _0x79d46f.startsWith(_0x32f087);
        return _0x197900 || _0x2f0322 || _0x21e9cf || _0x22f7b8 || _0x4f1c25;
      }
    },
    60849: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.setExtensionRoot = _0x17ed3a;
      exports.getExtensionRoot = _0x457c56;
      exports.isPylanceDefaultLanguageServer = _0x1e48a1;
      const _0x588055 = __importStar(require(16928));
      const _0x313b2a = __importStar(require(91398));
      const _0x217b64 = require(14906);
      let _0x4c8582;
      function _0x17ed3a(_0x2eb85e) {
        _0x4c8582 = _0x2eb85e;
      }
      function _0x457c56() {
        if (_0x4c8582) {
          return _0x4c8582;
        }
        const _0x482ce0 = _0x588055.basename(__dirname);
        switch (_0x482ce0) {
          case 'tests':
          case 'common':
            return _0x313b2a.Uri.file(_0x588055.join(__dirname, '..', '..'));
          case 'src':
            return _0x313b2a.Uri.file(_0x588055.join(__dirname, '..'));
        }
        throw new Error('Unable to determine extension root.');
      }
      function _0x1e48a1(_0x48d3d8) {
        const _0x5580b7 = _0x48d3d8.getSetting(_0x217b64.pythonName, _0x217b64.languageServerSettingName);
        return _0x5580b7 === _0x217b64.pylanceName || _0x5580b7 === _0x217b64.defaultName;
      }
    },
    81813: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.activate = _0x130928;
      exports.deactivate = _0x4bc144;
      require(92572);
      const _0x2bbf50 = require(98696);
      const _0x56a089 = __importStar(require(79896));
      const _0x244612 = __importStar(require(16928));
      const _0x979d = __importStar(require(91398));
      const _0x333eb2 = require(96353);
      const _0x3fa2fd = require(99);
      const _0x210ddb = require(28167);
      const _0xb798b9 = require(54010);
      const _0xf72d99 = require(71582);
      const _0x100232 = require(23073);
      const _0x595aec = require(3756);
      const _0x285626 = require(96662);
      const _0x201329 = require(95349);
      const _0x1ec0f5 = require(22205);
      const _0x13d9ba = require(462);
      const _0x48be8c = require(14906);
      const _0x58221f = require(17505);
      const _0x54efe3 = require(63454);
      const _0x332ce8 = require(95699);
      const _0x10908d = require(99599);
      const _0x544bc4 = require(3280);
      const _0x750197 = require(83862);
      const _0x23cc34 = require(15741);
      const _0xa086af = require(51265);
      const _0x2f523c = require(6226);
      const _0x19317d = require(64411);
      const _0x5eb3e0 = require(42323);
      const _0x15a12c = require(4649);
      const _0x56fd82 = require(19329);
      let _0xb5325e;
      async function _0x130928(_0x2a40ae) {
        const _0x3a311a = _0x244612.join(_0x2a40ae.extensionPath, 'dist');
        if (_0xb5325e) {
          _0x54efe3.traceError('We don\'t expect re-activation');
          return _0x2f523c.buildApi(_0x3a311a);
        }
        await _0x2f523c.preactivate(_0x2a40ae);
        const _0x454125 = new _0x5eb3e0.ExtensionServiceImpl();
        const _0x242b2e = _0x454125.getPythonExtension();
        if (!_0x242b2e) {
          _0x54efe3.traceError('Pylance require python extension to be installed');
          return _0x2f523c.buildApi(_0x3a311a);
        }
        _0x2f523c.verifyExtensionsMatch(_0x242b2e.exports);
        const {
          version: _0x3e574f,
          config: _0x48614d,
          commandManager: _0x273738,
          appShell: _0x30c2bf
        } = await _0x2f523c.activateShared(_0x2a40ae);
        _0xa086af.registerMoveCommand(_0x2a40ae, _0x273738, _0x30c2bf);
        const _0x4d11dc = new _0x15a12c.JupyterExtensionIntegration();
        _0xb5325e = new _0x13d9ba.LanguageClientManager(() => _0x59726c(_0x2a40ae, _0x48614d, _0x454125, _0x4d11dc, _0x242b2e, _0x3e574f, () => _0xb5325e.restartClient()), _0x5010f7 => _0x4578a6(_0x5010f7));
        _0x2f523c.registerGotoOutputChannel(_0x2a40ae, _0x273738, _0xb5325e);
        _0x2f523c.registerReloadTriggers(_0x2a40ae, _0x454125, _0xb5325e);
        return _0x2f523c.buildApi(_0x3a311a, _0xb5325e, _0x4d11dc);
      }
      async function _0x4bc144() {
        if (!_0xb5325e) {
          return;
        }
        await _0xb5325e.stopClient();
      }
      const _0x45e01c = [];
      async function _0x86e459() {
        _0x45e01c.push(Date.now());
        if (_0x45e01c.length < 5) {
          return {
            action: _0x333eb2.CloseAction.Restart
          };
        } else {
          const _0xac811b = _0x45e01c[_0x45e01c.length - 1] - _0x45e01c[0];
          if (_0xac811b < 180000) {
            return {
              action: _0x333eb2.CloseAction.DoNotRestart,
              message: _0x58221f.ClientLoc.crashTooManyRestarts()
            };
          } else {
            _0x45e01c.shift();
            return {
              action: _0x333eb2.CloseAction.Restart
            };
          }
        }
      }
      async function _0x192f1e(_0x20a1cf, _0x29b7f7, _0x2bed30) {
        const _0x1adc75 = _0x29b7f7.some(_0x518341 => _0x518341.includes('JavaScript heap out of memory'));
        _0x20a1cf.sendTelemetryEvent(_0x48be8c.EventName.LANGUAGE_SERVER_CRASH, undefined, {
          oom: _0x1adc75,
          lsversion: _0x2bed30
        });
        return _0x86e459();
      }
      async function _0x2fbec8(_0x5c21dc, _0x3a2d19, _0xdd9de8, _0x5e69b1, _0x23dea8, _0x524642, _0x3d1130, _0x23c31c, _0x212aaa) {
        const _0x15ea29 = new _0x544bc4.FileBasedCancellationStrategy();
        let _0x1f1c50 = _0x15ea29.getCommandLineArguments();
        let _0x18b72b = _0x979d.workspace.isTrusted ? await _0x3a2d19.getExpandedSetting('python.analysis', 'nodeExecutable') : undefined;
        const _0x17e66 = _0x5c21dc.asAbsolutePath(_0x244612.join('dist', 'server.bundle.js'));
        const _0x1ed27f = _0x5c21dc.asAbsolutePath(_0x244612.join('dist', 'server.js'));
        const _0xaf2afe = process.env.PYLANCE_DEBUG_EXTRA_ARGS ?? _0x3a2d19.getSetting('pylance.development', 'extraDebugArgs');
        if (_0xaf2afe && _0xaf2afe.includes('--cpu-prof')) {
          _0x1f1c50 = [];
        }
        const _0x42014c = _0x23c31c.createGlobalPersistentState('safeNodePath', '');
        const _0x47b6b4 = _0x42014c.value;
        if (_0x18b72b && _0x18b72b.length > 1 && _0x47b6b4 !== _0x18b72b && !_0x10908d.isUserOwnedExecutable(_0x18b72b)) {
          const _0xeb014 = _0x58221f.ClientLoc.askNodeSafetyQuestion().format(_0x18b72b);
          const _0x1a4fd0 = _0x58221f.Common.yes();
          const _0x3d1ec4 = _0x58221f.Common.no();
          const _0x3c97af = await _0x979d.window.showWarningMessage(_0xeb014, _0x1a4fd0, _0x3d1ec4);
          if (_0x3c97af !== _0x1a4fd0) {
            _0x18b72b = undefined;
          } else {
            _0x42014c.updateValue(_0x18b72b);
          }
        }
        if (_0x18b72b && _0x18b72b.length > 1) {
          _0x1f1c50 = ['--max-old-space-size=8192', _0x17e66, '--', `--clientProcessId=${process.pid}`, ..._0x1f1c50];
        }
        const _0xb26d59 = _0x56a089.existsSync(_0x1ed27f) ? _0x1ed27f : _0x17e66;
        const _0x4209eb = {
          execArgv: ['--nolazy', '--inspect=6600']
        };
        if (_0xaf2afe) {
          _0x4209eb.execArgv = _0x4209eb.execArgv.concat(_0xaf2afe.split(' '));
        }
        const _0x14ca8f = {
          run: {
            module: _0x17e66,
            transport: _0x3fa2fd.TransportKind.ipc,
            args: _0x1f1c50
          },
          debug: {
            module: _0xb26d59,
            transport: _0x3fa2fd.TransportKind.ipc,
            options: _0x4209eb,
            args: _0x1f1c50
          }
        };
        const _0x4c65e2 = {
          run: {
            command: _0x18b72b,
            transport: _0x3fa2fd.TransportKind.stdio,
            args: _0x1f1c50,
            options: {
              env: process.env,
              detached: false,
              shell: false
            }
          },
          debug: {
            command: _0x18b72b,
            transport: _0x3fa2fd.TransportKind.stdio,
            args: [..._0x4209eb.execArgv, ..._0x1f1c50],
            options: {
              env: process.env,
              detached: false,
              shell: false
            }
          }
        };
        let _0x9fb96 = undefined;
        const _0x12c7a8 = [];
        const _0x250fed = _0x15c95a();
        const _0x3decdc = _0x250fed ? [{
          language: _0x48be8c.pythonName
        }] : _0x13d9ba.PythonDocumentSelector;
        const _0x4b8876 = _0x2f523c.allowAskingUsersPerformanceReporting(_0x23c31c, _0x5e69b1);
        const _0x4354fc = {
          documentSelector: _0x3decdc,
          synchronize: {
            configurationSection: [_0x48be8c.pythonName, 'editor']
          },
          markdown: {
            supportHtml: true,
            isTrusted: _0x979d.workspace.isTrusted
          },
          connectionOptions: {
            cancellationStrategy: _0x15ea29
          },
          middleware: new _0x750197.LanguageClientMiddleware(() => _0x9fb96, _0xdd9de8, _0x3a2d19, _0x524642, _0x5e69b1, _0x23dea8),
          errorHandler: {
            error: (_0x494c9f, _0x3c0d69, _0x37a834) => {
              return {
                action: _0x333eb2.ErrorAction.Continue
              };
            },
            closed: () => _0x192f1e(_0x524642, _0x12c7a8, _0x5e69b1)
          },
          revealOutputChannelOn: _0x333eb2.RevealOutputChannelOn.Never,
          initializationOptions: {
            experimentationSupport: true,
            trustedWorkspaceSupport: true,
            autoFormatStrings: _0x3a2d19.getSetting('python.analysis', 'autoFormatStrings'),
            resolveInlayHintEdit: _0x2f523c.supportResolveInlayHintEdit(),
            clientVerification: _0x100232.generateVerificationString(),
            autoIndent: _0x3a2d19.getSetting('python.analysis', 'autoIndent') ?? true,
            allowAskingUsersPerformanceReporting: _0x4b8876,
            documentSelector: _0x3decdc,
            regularWorkspace: _0x250fed ? undefined : true
          }
        };
        const _0x22632f = _0x18b72b && _0x18b72b.length > 1 ? _0x4c65e2 : _0x14ca8f;
        let _0x3abb0e;
        if (process.env.PYLANCE_OWNS_CLIENT) {
          const _0x201111 = _0x23dea8.pylance.createClient(_0x22632f, _0x4354fc);
          _0x201111.dispose();
          _0x3abb0e = new _0x3fa2fd.LanguageClient('python', 'Pylance', _0x22632f, _0x4354fc);
        } else {
          _0x3abb0e = _0x23dea8.pylance.createClient(_0x22632f, _0x4354fc);
        }
        _0x9fb96 = _0x3abb0e;
        const _0x30d3f5 = _0x3abb0e.outputChannel.appendLine.bind(_0x3abb0e.outputChannel);
        _0x3abb0e.outputChannel.appendLine = _0x1cf0be => {
          _0x30d3f5(_0x1cf0be);
          _0x12c7a8.push(_0x1cf0be);
          if (_0x12c7a8.length > 40) {
            _0x12c7a8.shift();
          }
        };
        return _0x3abb0e;
      }
      class _0x53a23b extends _0x333eb2.BaseLanguageClient {
        constructor(_0x5e2f72, _0x4c375b, _0x40a5f1, _0x436a16) {
          super(_0x5e2f72, _0x4c375b, _0x40a5f1);
          this._worker = _0x436a16;
        }
        createMessageTransports(_0x3dc0ed) {
          const _0x5c63e4 = new _0x3fa2fd.PortMessageReader(this._worker);
          const _0x48486e = new _0x3fa2fd.PortMessageWriter(this._worker);
          return Promise.resolve({
            reader: _0x5c63e4,
            writer: _0x48486e
          });
        }
      }
      function _0x174a52(_0x441bd0, _0x388d19, _0x520f04, _0x58d51e, _0x1e55f2, _0x13756e, _0x1e34cc, _0x1563dd) {
        const _0x4bc3d1 = {
          sender: new _0x333eb2.SharedArraySenderStrategy(),
          receiver: new _0x333eb2.SharedArrayReceiverStrategy()
        };
        let _0x4dd3cd = undefined;
        const _0x48567f = _0x2f523c.allowAskingUsersPerformanceReporting(_0x1563dd, _0x58d51e);
        const _0x15dc07 = _0x15c95a() ? [{
          language: _0x48be8c.pythonName
        }] : _0x13d9ba.PythonDocumentSelector;
        const _0x27eb0b = {
          documentSelector: _0x15dc07,
          synchronize: {
            configurationSection: [_0x48be8c.pythonName, 'editor']
          },
          markdown: {
            supportHtml: true,
            isTrusted: _0x979d.workspace.isTrusted
          },
          connectionOptions: {
            cancellationStrategy: _0x4bc3d1
          },
          middleware: new _0x750197.LanguageClientMiddleware(() => _0x4dd3cd, _0x520f04, _0x388d19, _0x13756e, _0x58d51e, _0x1e55f2),
          revealOutputChannelOn: _0x333eb2.RevealOutputChannelOn.Never,
          initializationOptions: {
            experimentationSupport: true,
            trustedWorkspaceSupport: true,
            autoFormatStrings: _0x388d19.getSetting('python.analysis', 'autoFormatStrings'),
            resolveInlayHintEdit: _0x2f523c.supportResolveInlayHintEdit(),
            clientVerification: _0x100232.generateVerificationString(),
            autoIndent: _0x388d19.getSetting('python.analysis', 'autoIndent') ?? true,
            allowAskingUsersPerformanceReporting: _0x48567f
          }
        };
        const _0x5520eb = _0x1e55f2.pylance.createClient({}, _0x27eb0b);
        _0x5520eb.dispose();
        const _0x42365e = _0x441bd0.asAbsolutePath(_0x244612.join('dist', 'sync.bundle.js'));
        const _0xf3be9a = new _0x210ddb.Worker(_0x42365e);
        const _0x347700 = new _0x1ec0f5.FilteringWorker(_0xf3be9a, _0x40eaa5 => !!_0x40eaa5.jsonrpc);
        const _0x5be914 = new _0x53a23b('python', 'Pylance', _0x27eb0b, _0x347700);
        _0x4dd3cd = _0x5be914;
        const _0x454d68 = new _0x1ec0f5.FilteringWorker(_0xf3be9a, _0x824a18 => !!_0x824a18.byteLength);
        const _0xf46b4b = new _0x2bbf50.ServiceConnection(_0x454d68);
        Object.defineProperty(_0x5be914, 'syncConnection', {
          value: _0xf46b4b,
          writable: false
        });
        return _0x5be914;
      }
      async function _0x59726c(_0x1cfb76, _0x53b675, _0x39f971, _0x44e11f, _0x1439f6, _0x25c767, _0x225688) {
        await _0x5eb3e0.getActivatedExtension(_0x1439f6);
        const _0x37b550 = _0x1439f6.exports;
        const _0x44e608 = new _0x56fd82.PersistentServiceImpl(_0x1cfb76);
        const _0x20e2e9 = new _0x332ce8.TelemetryServiceImpl(_0x37b550.pylance.getTelemetryReporter());
        const _0x51fe18 = new _0x19317d.ExperimentServiceImpl(_0x53b675, _0x39f971, _0x20e2e9, _0x44e608);
        await _0x51fe18.activate();
        const _0x3e43e4 = [];
        const _0x18497e = !!_0x53b675.getSetting('python.analysis', 'enableSyncServer');
        const _0x3bd202 = _0x18497e ? _0x174a52(_0x1cfb76, _0x53b675, _0x44e11f, _0x25c767, _0x37b550, _0x20e2e9, _0x51fe18, _0x44e608) : await _0x2fbec8(_0x1cfb76, _0x53b675, _0x44e11f, _0x25c767, _0x37b550, _0x20e2e9, _0x51fe18, _0x44e608, _0x225688);
        _0x54efe3.registerOutputChannelForLogging(_0x3bd202.outputChannel);
        if (!_0x3338c8(_0x53b675)) {
          _0x54efe3.traceError(_0x285626.licenseErrorText);
          return {
            client: _0x3bd202,
            start: () => {
              _0x20e2e9.sendTelemetryEvent(_0x48be8c.EventName.LANGUAGE_SERVER_INVALID_CLIENT);
              return Promise.resolve();
            },
            stop: () => Promise.resolve(),
            disposables: _0x3e43e4
          };
        }
        _0x44e11f.setLanguageClient(_0x3bd202);
        const _0x4411dd = new _0x23cc34.ProgressReporting(_0x3bd202);
        _0x3e43e4.push(_0x4411dd);
        _0x3e43e4.push(_0x37b550.environments.onDidChangeActiveEnvironmentPath(() => {
          _0x201329.CustomLSP.sendNotification(_0x3bd202, _0x201329.CustomLSP.Notifications.DidChangeConfiguration, {
            settings: null
          });
        }));
        _0x3e43e4.push(_0x37b550.environments.onDidEnvironmentVariablesChange(() => {
          _0x201329.CustomLSP.sendNotification(_0x3bd202, _0x201329.CustomLSP.Notifications.DidChangeConfiguration, {
            settings: null
          });
        }));
        _0x3e43e4.push(_0x3bd202.onTelemetry(_0xfa7020 => {
          var _0x3cc4aa;
          const _0x434db9 = _0xfa7020.EventName || _0x48be8c.EventName.LANGUAGE_SERVER_TELEMETRY;
          const _0x7eadc7 = {
            ..._0xfa7020.Properties,
            method: (_0x3cc4aa = _0xfa7020.Properties.method) === null || _0x3cc4aa === undefined ? undefined : _0x3cc4aa.replace(/\//g, '.')
          };
          _0x20e2e9.sendTelemetryEvent(_0x434db9, _0xfa7020.Measurements, _0x7eadc7, _0xfa7020.Exception);
        }));
        _0x3e43e4.push(_0x201329.CustomLSP.onRequest(_0x3bd202, _0x201329.CustomLSP.Requests.InExperiment, _0x1ddb43 => {
          const _0x228e35 = _0x51fe18.inExperiment(_0x1ddb43.experimentName);
          return {
            inExperiment: _0x228e35
          };
        }));
        _0x3e43e4.push(_0x201329.CustomLSP.onRequest(_0x3bd202, _0x201329.CustomLSP.Requests.GetExperimentValue, _0x83d123 => {
          const _0x99787c = _0x51fe18.getExperimentValue(_0x83d123.experimentName);
          return {
            value: _0x99787c
          };
        }));
        _0x3e43e4.push(_0x979d.workspace.onDidGrantWorkspaceTrust(() => {
          _0x201329.CustomLSP.sendNotification(_0x3bd202, _0x201329.CustomLSP.Notifications.WorkspaceTrusted, {
            isTrusted: true
          });
        }));
        _0x3e43e4.push(_0x201329.CustomLSP.onRequest(_0x3bd202, _0x201329.CustomLSP.Requests.IsTrustedWorkspace, async () => ({
          isTrusted: _0x979d.workspace.isTrusted
        })));
        _0x2f523c.sharedListenToClient(_0x3e43e4, _0x3bd202, _0x18497e, _0x1cfb76.languageModelAccessInformation);
        _0x20e2e9.sendTelemetryEvent(_0x48be8c.EventName.LANGUAGE_SERVER_READY, undefined, {
          lsVersion: _0x25c767
        });
        const _0x151e5b = _0x1439f6.packageJSON.version ?? 'Unknown';
        if (process.env.PYLANCE_OWNS_CLIENT) {
          return {
            client: _0x3bd202,
            start: async () => {
              await _0x50f44c();
              _0x2f523c.logClientInfo(_0x18497e, _0x25c767, _0x151e5b);
              await _0x3bd202.start();
            },
            stop: async () => {
              await _0x3bd202.stop();
            },
            disposables: _0x3e43e4
          };
        }
        return {
          client: _0x3bd202,
          start: async () => {
            await _0x50f44c();
            _0x2f523c.logClientInfo(_0x18497e, _0x25c767, _0x151e5b);
            await _0x37b550.pylance.start(_0x3bd202);
          },
          stop: async () => {
            await _0x37b550.pylance.stop(_0x3bd202);
          },
          disposables: _0x3e43e4
        };
      }
      async function _0x50f44c() {
        const _0x5530c1 = 10;
        if (await _0x4750d5()) {
          _0x54efe3.traceInfo(`Another instance of Pylance or Pyright has been detected. Waiting up to ${_0x5530c1} seconds for it to cease operation.`);
        }
        const _0x136d4f = new _0xf72d99.Duration();
        while (_0x136d4f.getDurationInSeconds() < _0x5530c1) {
          await _0xdd0a73(500);
          const _0x18b477 = await _0x4750d5();
          if (!_0x18b477) {
            return;
          }
        }
        const _0x42880b = await _0x4750d5();
        if (_0x42880b) {
          _0x54efe3.traceError('The existing extension didn\'t exit within 10 seconds. New instance will start, but you might encounter issues.');
        }
      }
      async function _0x4750d5() {
        const _0x25cde4 = await _0x979d.commands.getCommands();
        return _0x25cde4.includes('pyright.createtypestub');
      }
      function _0x4578a6(_0x2d3a4b) {
        const _0x57d1f9 = _0x2d3a4b.client;
        const _0x34c7e8 = _0x57d1f9.clientOptions.connectionOptions?.cancellationStrategy;
        if (_0x34c7e8 instanceof _0x544bc4.FileBasedCancellationStrategy) {
          _0x34c7e8.dispose();
        }
        const _0xd6b986 = _0x57d1f9.clientOptions.middleware;
        if (_0xd6b986 instanceof _0x750197.LanguageClientMiddleware) {
          _0xd6b986.jupyterExtensionIntegration.setLanguageClient(undefined);
        }
        _0x2d3a4b.disposables.forEach(_0xc19c7d => _0xc19c7d.dispose());
      }
      function _0x3338c8(_0xe72028) {
        const _0x203f72 = ['Visual Studio Code', 'Visual Studio Code - Insiders', 'Visual Studio Code - Exploration'];
        if (!_0x203f72.includes(_0x979d.env.appName)) {
          return false;
        }
        return _0x3dab24(_0xe72028);
      }
      function _0x3dab24(_0x4101a5) {
        var _0x8f08a8;
        return _0x3a25ba(_0x4101a5, ((_0x8f08a8 = require.main) === null || _0x8f08a8 === undefined ? undefined : _0x8f08a8.paths.map(_0x225e5c => _0x225e5c + '.asar.unpacked')) ?? []) || _0x3a25ba(_0x4101a5, [_0xb798b9.combinePaths(_0x979d.env.appRoot, 'node_modules')]);
      }
      function _0x3a25ba(_0x1296f1, _0x5ee2d6) {
        try {
          const _0x213e9a = require.resolve('vsda', {
            paths: _0x5ee2d6
          });
          const _0x1077ed = require(_0x213e9a);
          if (!_0x1077ed['signer'] || !_0x1077ed['validator']) {
            return false;
          }
          return true;
        } catch (_0xb891b5) {
          return false;
        }
      }
      function _0x15c95a() {
        const _0x4d0a7c = _0x979d.workspace.workspaceFolders && _0x979d.workspace.workspaceFolders.every(_0x13793f => _0x13793f.uri.scheme !== 'file');
        return !!_0x4d0a7c;
      }
      async function _0xdd0a73(_0x171201) {
        return new Promise(_0xcff7f8 => {
          setTimeout(() => _0xcff7f8(_0x171201), _0x171201);
        });
      }
    },
    92572: (module, exports) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      String.prototype.splitLines = function (_0x1eaa42 = {
        removeEmptyEntries: true,
        trim: true
      }) {
        let _0x57e1b9 = this.split(/\r?\n/g);
        if (_0x1eaa42 && _0x1eaa42.trim) {
          _0x57e1b9 = _0x57e1b9.map(_0x364bed => _0x364bed.trim());
        }
        if (_0x1eaa42 && _0x1eaa42.removeEmptyEntries) {
          _0x57e1b9 = _0x57e1b9.filter(_0x6c3ba5 => _0x6c3ba5.length > 0);
        }
        return _0x57e1b9;
      };
      String.prototype.toCommandArgument = function () {
        if (!this) {
          return this;
        }
        if (this.indexOf(' ') >= 0 && !this.startsWith('"') && !this.endsWith('"')) {
          return `"${this}"`;
        } else {
          return this.toString();
        }
      };
      String.prototype.fileToCommandArgument = function () {
        if (!this) {
          return this;
        }
        return this.toCommandArgument().replace(/\\/g, '/');
      };
      String.prototype.trimQuotes = function () {
        if (!this) {
          return this;
        }
        return this.replace(/(^['"])|(['"]$)/g, '');
      };
      Promise.prototype.ignoreErrors = function () {
        this.catch(() => {});
      };
      if (!String.prototype.format) {
        String.prototype.format = function () {
          const _0x496fe7 = arguments;
          return this.replace(/{(\d+)}/g, (_0x4570c2, _0x3029e5) => _0x496fe7[_0x3029e5] === undefined ? _0x4570c2 : _0x496fe7[_0x3029e5]);
        };
      }
    },
    3280: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FileBasedCancellationStrategy = undefined;
      const _0x46e355 = __importStar(require(79896));
      const _0x99f36e = __importStar(require(70857));
      const _0x14b127 = __importStar(require(16928));
      const _0x1f21d4 = require(92861);
      const _0x1bed18 = require(77313);
      function _0x5540d7(_0x321f68) {
        return _0x14b127.join(_0x99f36e.tmpdir(), 'python-languageserver-cancellation', _0x321f68);
      }
      function _0x1f08d7(_0x2a4e53, _0x35f361) {
        return _0x14b127.join(_0x5540d7(_0x2a4e53), `cancellation-${String(_0x35f361)}.tmp`);
      }
      function _0x5bafd3(_0x154f23) {
        try {
          _0x154f23();
        } catch (_0x5678c3) {}
      }
      class _0x6827d0 {
        constructor(_0xd7e3a3) {
          this.folderName = _0xd7e3a3;
          const _0x1f0b15 = _0x5540d7(_0xd7e3a3);
          _0x5bafd3(() => _0x46e355.mkdirSync(_0x1f0b15, {
            recursive: true
          }));
        }
        sendCancellation(_0x30b62c, _0xff6209) {
          const _0xed9d69 = _0x1f08d7(this.folderName, _0xff6209);
          _0x5bafd3(() => _0x46e355.writeFileSync(_0xed9d69, '', {
            flag: 'w'
          }));
          return Promise.resolve();
        }
        cleanup(_0x4af3bb) {
          _0x5bafd3(() => _0x46e355.unlinkSync(_0x1f08d7(this.folderName, _0x4af3bb)));
        }
        dispose() {
          const _0x5030a6 = _0x5540d7(this.folderName);
          _0x5bafd3(() => _0x532cc5(_0x5030a6));
          function _0x532cc5(_0x28a4ae) {
            const _0xfde1a5 = _0x46e355.lstatSync(_0x28a4ae);
            if (_0xfde1a5) {
              if (_0xfde1a5.isDirectory() && !_0xfde1a5.isSymbolicLink()) {
                for (const _0x57a2e2 of _0x46e355.readdirSync(_0x28a4ae)) {
                  _0x532cc5(_0x14b127.join(_0x28a4ae, _0x57a2e2));
                }
                _0x46e355.rmdirSync(_0x28a4ae);
              } else {
                _0x46e355.unlinkSync(_0x28a4ae);
              }
            }
          }
        }
      }
      class _0x10c89a {
        constructor() {
          const _0x196954 = _0x1bed18.randomBytesHex(21);
          this._sender = new _0x6827d0(_0x196954);
        }
        get receiver() {
          return _0x1f21d4.CancellationReceiverStrategy.Message;
        }
        get sender() {
          return this._sender;
        }
        getCommandLineArguments() {
          return [`--cancellationReceive=file:${this._sender.folderName}`];
        }
        dispose() {
          this._sender.dispose();
        }
      }
      exports.FileBasedCancellationStrategy = _0x10c89a;
    },
    83992: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.InteractiveWindowAddon = undefined;
      const _0xad59 = require(91398);
      const _0x389d34 = require(99);
      const _0x5cae5b = require(95349);
      class _0x328fdf {
        constructor(_0x100839, _0x587e09) {
          this._getClient = _0x100839;
          this._jupyterExtensionIntegration = _0x587e09;
          this._notebookDocumentMap = new Map();
          this._unlinkedTextDocumentMap = new Map();
          this.notebooks = {
            didOpen: this.didOpenNotebook.bind(this),
            didClose: this.didCloseNotebook.bind(this)
          };
          this.didOpen = this.didOpen.bind(this);
          this.didChange = this.didChange.bind(this);
          this.didClose = this.didClose.bind(this);
        }
        dispose() {}
        async didOpen(_0xcc7b45, _0x9b3267) {
          var _0x3b19a7;
          const _0x33abf4 = this._getNotebookUriForTextDocumentUri(_0xcc7b45.uri);
          if (!_0x33abf4) {
            await _0x9b3267(_0xcc7b45);
            return;
          }
          const _0x1898f2 = this._notebookDocumentMap.get(_0x33abf4.toString());
          if (!_0x1898f2) {
            this._unlinkedTextDocumentMap.set(_0x33abf4.toString(), _0xcc7b45);
            return;
          }
          try {
            const _0x5eb4eb = _0x1898f2.getCells().filter(_0x6dd87d => _0x6dd87d.kind === _0x389d34.NotebookCellKind.Code).length;
            const _0x3683b9 = {
              cells: {
                structure: {
                  array: {
                    start: _0x5eb4eb,
                    deleteCount: 0,
                    cells: [{
                      kind: _0x389d34.NotebookCellKind.Code,
                      document: _0xcc7b45.uri.toString()
                    }]
                  },
                  didOpen: [{
                    uri: _0xcc7b45.uri.toString(),
                    languageId: _0xcc7b45.languageId,
                    version: _0xcc7b45.version,
                    text: _0xcc7b45.getText()
                  }],
                  didClose: undefined
                }
              }
            };
            const _0x473669 = await this._getClient();
            if (_0x473669) {
              _0x5cae5b.CustomLSP.sendNotification(_0x473669, _0x5cae5b.CustomLSP.Notifications.DidChangeNotebookDocument, {
                notebookDocument: {
                  version: _0x1898f2.version,
                  uri: _0x33abf4.toString()
                },
                change: _0x3683b9
              });
            }
          } catch (_0x2ed679) {
            if ((_0x3b19a7 = this._getClient()) === null || _0x3b19a7 === undefined) {
              undefined;
            } else {
              _0x3b19a7.error('Sending DidChangeNotebookDocumentNotification failed', _0x2ed679);
            }
            throw _0x2ed679;
          }
        }
        async didChange(_0x2b7a9e, _0x1596e7) {
          const _0x359770 = this._getNotebookUriForTextDocumentUri(_0x2b7a9e.document.uri);
          if (!_0x359770) {
            await _0x1596e7(_0x2b7a9e);
            return;
          }
          const _0x84c9b6 = this._notebookDocumentMap.get(_0x359770.toString());
          if (_0x84c9b6) {
            const _0x153e25 = this._getClient();
            if (_0x153e25) {
              _0x5cae5b.CustomLSP.sendNotification(_0x153e25, _0x5cae5b.CustomLSP.Notifications.DidChangeNotebookDocument, {
                notebookDocument: {
                  uri: _0x359770.toString(),
                  version: _0x84c9b6.version
                },
                change: {
                  cells: {
                    textContent: [_0x328fdf._asTextContentChange(_0x2b7a9e, _0x153e25.code2ProtocolConverter)]
                  }
                }
              });
            }
          }
        }
        async didClose(_0x15f018, _0x48ec21) {
          const _0x56620a = this._getNotebookUriForTextDocumentUri(_0x15f018.uri);
          if (!_0x56620a) {
            await _0x48ec21(_0x15f018);
            return;
          }
          this._unlinkedTextDocumentMap.delete(_0x56620a.toString());
        }
        async didOpenNotebook(_0x1c8612, _0x560bdf, _0x4cf3e5) {
          this._notebookDocumentMap.set(_0x1c8612.uri.toString(), _0x1c8612);
          const _0x3dda3c = this._unlinkedTextDocumentMap.get(_0x1c8612.uri.toString());
          if (_0x3dda3c) {
            const _0x46948c = [..._0x560bdf, {
              index: _0x1c8612.cellCount,
              notebook: _0x1c8612,
              kind: _0x389d34.NotebookCellKind.Code,
              document: _0x3dda3c,
              metadata: {},
              outputs: [],
              executionSummary: undefined
            }];
            this._unlinkedTextDocumentMap.delete(_0x1c8612.uri.toString());
            await _0x4cf3e5(_0x1c8612, _0x46948c);
          } else {
            await _0x4cf3e5(_0x1c8612, _0x560bdf);
          }
        }
        async didCloseNotebook(_0x22c72c, _0x2a171f, _0x2d91b3) {
          this._notebookDocumentMap.delete(_0x22c72c.uri.toString());
          await _0x2d91b3(_0x22c72c, _0x2a171f);
        }
        static _asTextContentChange(_0x4d06e8, _0x4b3c83) {
          const _0x357811 = _0x4b3c83.asChangeTextDocumentParams(_0x4d06e8.document);
          return {
            document: _0x357811.textDocument,
            changes: _0x357811.contentChanges
          };
        }
        _getNotebookUriForTextDocumentUri(_0x5be57b) {
          const _0x4bc08f = this._getNotebookUriFromInputBoxUri(_0x5be57b);
          if (!_0x4bc08f) {
            return undefined;
          }
          let _0x5156f2 = undefined;
          _0xad59.window.tabGroups.all.find(_0x5ff6fe => {
            _0x5ff6fe.tabs.find(_0x27dfa1 => {
              if (this._isInteractiveInputTab(_0x27dfa1)) {
                const _0x474e02 = _0x27dfa1.input.uri.toString();
                if (_0x27dfa1.input.uri.toString().endsWith(_0x4bc08f.path)) {
                  _0x5156f2 = _0x474e02;
                }
              }
            });
          });
          return _0x5156f2;
        }
        _getNotebookUriFromInputBoxUri(_0x26e2c4) {
          var _0x1638c4;
          if (_0x26e2c4.scheme !== 'vscode-interactive-input') {
            return undefined;
          }
          const _0x6f08b1 = _0x26e2c4.path.replace('InteractiveInput-', 'Interactive-') + '.interactive';
          if ((_0x1638c4 = _0xad59.workspace.notebookDocuments.find(_0x52a6fe => _0x52a6fe.uri.path === _0x6f08b1)) === null || _0x1638c4 === undefined) {
            return undefined;
          } else {
            return _0x1638c4.uri;
          }
        }
        _isInteractiveInputTab(_0x5c44e3) {
          const _0x55780d = _0x5c44e3;
          return _0x55780d && _0x55780d.input && this._isUri(_0x55780d.input.uri) && this._isUri(_0x55780d.input.inputBoxUri);
        }
        _isUri(_0x2c8407) {
          if (!_0x2c8407) {
            return false;
          }
          const _0x558196 = _0x2c8407;
          return typeof _0x558196.path === 'string' && typeof _0x558196.scheme === 'string';
        }
      }
      exports.InteractiveWindowAddon = _0x328fdf;
    },
    83862: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LanguageClientMiddleware = undefined;
      const _0x352ac7 = require(63454);
      const _0x23f6af = require(939);
      const _0x13ccb6 = require(83992);
      class _0x17366c extends _0x23f6af.PylanceMiddlewareBase {
        constructor(_0x21844d, _0x192faf, _0x365917, _0x42ea50, _0x334f4d, _0x3d1407) {
          super(_0x365917, _0x42ea50, _0x334f4d, _0x3d1407);
          this._getClient = _0x21844d;
          this.jupyterExtensionIntegration = _0x192faf;
          if (!this.notebookAddon) {
            this.notebookAddon = new _0x13ccb6.InteractiveWindowAddon(this._getClient, this.jupyterExtensionIntegration);
          }
        }
        async getPythonPathOverride(_0x510c84) {
          if (!_0x510c84) {
            return undefined;
          }
          const _0x219f7c = this.jupyterExtensionIntegration.getJupyterPythonPathFunction();
          if (!_0x219f7c) {
            return undefined;
          }
          const _0x21e22b = await _0x219f7c(_0x510c84);
          if (_0x21e22b) {
            _0x352ac7.traceLog(`Jupyter provided interpreter path override: ${_0x21e22b}`);
          }
          return _0x21e22b;
        }
      }
      exports.LanguageClientMiddleware = _0x17366c;
    },
    15741: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ProgressPart = exports.ProgressReporting = undefined;
      const _0x30149c = require(91398);
      const _0x10e4d6 = __importStar(require(91398));
      const _0x1fd280 = require(98766);
      const _0x194f3b = require(51507);
      const _0x395b00 = require(95349);
      class _0x2d163e {
        constructor(_0x790bda) {
          this._client = _0x790bda;
          _0x395b00.CustomLSP.onNotification(this._client, _0x395b00.CustomLSP.Notifications.SetStatusBarMessage, _0x49d267 => {
            if (this._statusBarMessage) {
              this._statusBarMessage.dispose();
            }
            this._statusBarMessage = _0x30149c.window.setStatusBarMessage(_0x49d267);
          });
          _0x395b00.CustomLSP.onNotification(this._client, _0x395b00.CustomLSP.Notifications.BeginProgress, () => {
            if (this._progressDeferred) {
              return;
            }
            this._beginProgress();
          });
          _0x395b00.CustomLSP.onNotification(this._client, _0x395b00.CustomLSP.Notifications.ReportProgress, _0x4816dd => {
            if (!this._progress) {
              this._beginProgress();
            }
            this._progress.report({
              message: _0x4816dd
            });
          });
          _0x395b00.CustomLSP.onNotification(this._client, _0x395b00.CustomLSP.Notifications.EndProgress, _0x585b9e => {
            if (this._progressDeferred) {
              this._progressDeferred.resolve();
              this._progressDeferred = undefined;
              this._progress = undefined;
            }
          });
        }
        dispose() {
          if (this._statusBarMessage) {
            this._statusBarMessage.dispose();
          }
        }
        _beginProgress() {
          this._progressDeferred = _0x194f3b.createDeferred();
          _0x30149c.window.withProgress({
            location: _0x30149c.ProgressLocation.Window,
            title: ''
          }, _0x2ae7ca => {
            this._progress = _0x2ae7ca;
            return this._progressDeferred.promise;
          });
        }
      }
      exports.ProgressReporting = _0x2d163e;
      function _0x4c9d90(_0x59985a) {
        return typeof _0x59985a === 'string' || _0x59985a instanceof String;
      }
      function _0x12b971(_0x4c3986) {
        return typeof _0x4c3986 === 'number' || _0x4c3986 instanceof Number;
      }
      class _0x10510e {
        constructor(_0x58da46, _0x11b5ff, _0xb5e8b9) {
          this._client = _0x58da46;
          this._token = _0x11b5ff;
          this._reported = 0;
          this._infinite = false;
          this._lspProgressDisposable = this._client.onProgress(_0x1fd280.WorkDoneProgress.type, this._token, _0x52c763 => {
            switch (_0x52c763.kind) {
              case 'begin':
                this._begin(_0x52c763);
                break;
              case 'report':
                this._report(_0x52c763);
                break;
              case 'end':
                this.done();
                if (_0xb5e8b9) {
                  _0xb5e8b9(this);
                }
                break;
            }
          });
        }
        cancel() {
          this._cleanup();
          if (this._reject !== undefined) {
            this._reject();
            this._resolve = undefined;
            this._reject = undefined;
          }
        }
        done() {
          this._cleanup();
          if (this._resolve !== undefined) {
            this._resolve();
            this._resolve = undefined;
            this._reject = undefined;
          }
        }
        _begin(_0x63e544) {
          this._infinite = _0x63e544.percentage === undefined;
          if (this._lspProgressDisposable === undefined) {
            return;
          }
          _0x10e4d6.window.withProgress({
            location: _0x10e4d6.ProgressLocation.Window,
            cancellable: _0x63e544.cancellable,
            title: _0x63e544.title
          }, async (_0x7ba581, _0x2cae63) => {
            if (this._lspProgressDisposable === undefined) {
              return;
            }
            this._progress = _0x7ba581;
            this._cancellationToken = _0x2cae63;
            this._tokenDisposable = this._cancellationToken.onCancellationRequested(() => {
              this._client.sendNotification(_0x1fd280.WorkDoneProgressCancelNotification.type, {
                token: this._token
              });
            });
            this._report(_0x63e544);
            return new Promise((_0x31d1c7, _0x1389c5) => {
              this._resolve = _0x31d1c7;
              this._reject = _0x1389c5;
            });
          });
        }
        _report(_0x1199e8) {
          if (this._infinite && _0x4c9d90(_0x1199e8.message)) {
            if (this._progress !== undefined) {
              this._progress.report({
                message: _0x1199e8.message
              });
            }
          } else {
            if (_0x12b971(_0x1199e8.percentage)) {
              const _0xc04fe2 = Math.max(0, Math.min(_0x1199e8.percentage, 100));
              const _0x4b2646 = Math.max(0, _0xc04fe2 - this._reported);
              this._reported += _0x4b2646;
              if (this._progress !== undefined) {
                this._progress.report({
                  message: _0x1199e8.message,
                  increment: _0x4b2646
                });
              }
            }
          }
        }
        _cleanup() {
          if (this._lspProgressDisposable !== undefined) {
            this._lspProgressDisposable.dispose();
            this._lspProgressDisposable = undefined;
          }
          if (this._tokenDisposable !== undefined) {
            this._tokenDisposable.dispose();
            this._tokenDisposable = undefined;
          }
          this._progress = undefined;
          this._cancellationToken = undefined;
        }
      }
      exports.ProgressPart = _0x10510e;
    },
    51067: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AutoImportCompletionStatusItemProvider = undefined;
      const _0x4c3360 = __importStar(require(91398));
      const _0x1a7b95 = require(27130);
      const _0x5a3003 = require(17505);
      const _0x470084 = require(17448);
      class _0x53bcc1 extends _0x470084.BaseStatusItemProvider {
        constructor() {
          super('autoImportCompletions');
        }
        updateStatusDetails(_0x3120be, _0x62d348, _0x21977b) {
          _0x3120be.command = undefined;
          _0x3120be.name = _0x5a3003.ClientLoc.autoImportCompletionsStatusItem.name();
          _0x3120be.text = _0x5a3003.ClientLoc.autoImportCompletionsStatusItem.textFormatted().format(`${_0x62d348}`);
          _0x3120be.severity = _0x4c3360.LanguageStatusSeverity.Information;
          if (_0x62d348 === false) {
            _0x3120be.command = {
              title: _0x5a3003.ClientLoc.autoImportCompletionsStatusItem.titleOn(),
              command: _0x1a7b95.ClientCommands.setAutoImportCompletions,
              arguments: [true]
            };
          } else {
            _0x3120be.command = {
              title: _0x5a3003.ClientLoc.autoImportCompletionsStatusItem.titleOff(),
              command: _0x1a7b95.ClientCommands.setAutoImportCompletions,
              arguments: [false]
            };
          }
        }
      }
      exports.AutoImportCompletionStatusItemProvider = _0x53bcc1;
    },
    17448: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BaseStatusItemProvider = undefined;
      const _0x4fd0e8 = require(2543);
      const _0x374704 = __importStar(require(91398));
      const _0x5ea4d1 = require(60849);
      const _0x57e09c = require(98707);
      const _0x2e319d = 'python.analysis';
      class _0x1daad2 {
        constructor(_0x198d8b) {
          this._settingName = _0x198d8b;
          this.supportedWorkspaceTypes = {
            untrustedWorkspace: true,
            virtualWorkspace: true
          };
          this.disposables = [];
          this.debouncedUpdateStatusItem = _0x4fd0e8.debounce(this.updateStatusItem.bind(this), 500);
          this._fullSettingName = _0x2e319d + '.' + this._settingName;
          this._appConfig = new _0x57e09c.AppConfigurationImpl();
        }
        activate() {
          this.updateStatusItem();
          this.disposables.push(_0x374704.workspace.onDidChangeConfiguration(_0x1b0271 => {
            if (_0x1b0271.affectsConfiguration(this._fullSettingName) || _0x1b0271.affectsConfiguration('python.languageServer')) {
              this.debouncedUpdateStatusItem();
            }
          }));
          this.disposables.push(_0x374704.window.onDidChangeActiveTextEditor(_0x505478 => {
            if ((_0x505478 === null || _0x505478 === undefined ? undefined : _0x505478.document.languageId) === 'python') {
              this.debouncedUpdateStatusItem();
            }
          }));
        }
        dispose() {
          var _0x2618d3;
          if ((_0x2618d3 = this.statusItem) === null || _0x2618d3 === undefined) {
            undefined;
          } else {
            _0x2618d3.dispose();
          }
          this.statusItem = undefined;
          this.debouncedUpdateStatusItem.cancel();
          this.disposables.forEach(_0x28b2c0 => _0x28b2c0.dispose());
        }
        updateStatusItem() {
          var _0x4ab300;
          var _0x2eb2f4;
          var _0x47521b;
          if (!_0x5ea4d1.isPylanceDefaultLanguageServer(this._appConfig)) {
            if ((_0x4ab300 = this.statusItem) === null || _0x4ab300 === undefined) {
              undefined;
            } else {
              _0x4ab300.dispose();
            }
            this.statusItem = undefined;
            return;
          }
          if (!this.statusItem) {
            this.statusItem = this.createStatusItem();
          }
          const _0x18f827 = (_0x2eb2f4 = _0x374704.window.activeTextEditor) === null || _0x2eb2f4 === undefined ? undefined : _0x2eb2f4.document.uri;
          if (this.statusItem && _0x18f827) {
            const _0x52c555 = this._appConfig.getConfiguration(_0x2e319d, {
              uri: _0x18f827,
              languageId: 'python'
            });
            const _0x7ec9e6 = _0x52c555.inspect(this._settingName);
            let _0x9f75e4 = false;
            let _0x19c5fe = _0x7ec9e6?.defaultValue;
            if (_0x7ec9e6?.workspaceFolderValue !== undefined) {
              _0x19c5fe = _0x7ec9e6.workspaceFolderValue;
            } else {
              if (_0x7ec9e6?.workspaceValue !== undefined) {
                _0x19c5fe = _0x7ec9e6.workspaceValue;
              } else {
                if (_0x7ec9e6?.globalValue !== undefined) {
                  _0x19c5fe = _0x7ec9e6.globalValue;
                } else {
                  _0x9f75e4 = true;
                }
              }
            }
            if (_0x19c5fe !== undefined) {
              this.updateStatusDetails(this.statusItem, _0x19c5fe, _0x9f75e4);
            } else {
              if ((_0x47521b = this.statusItem) === null || _0x47521b === undefined) {
                undefined;
              } else {
                _0x47521b.dispose();
              }
              this.statusItem = undefined;
            }
          }
        }
        updateStatusDetails(_0x2e727e, _0x328b7a, _0x58a3a1) {}
        createStatusItem() {
          if (!('createLanguageStatusItem' in _0x374704.languages)) {
            return undefined;
          }
          return _0x374704.languages.createLanguageStatusItem(this._fullSettingName, {
            language: 'python'
          });
        }
      }
      exports.BaseStatusItemProvider = _0x1daad2;
    },
    4782: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ConfigInfoProvider = undefined;
      const _0x36c5b0 = __importStar(require(91398));
      const _0x4598d5 = require(95349);
      class _0x49f98c {
        constructor(_0x3de33c) {
          this._client = _0x3de33c;
          this._disposables = [];
          this._emitter = new _0x36c5b0.EventEmitter();
          this._disposables.push(_0x4598d5.CustomLSP.onNotification(this._client, _0x4598d5.CustomLSP.Notifications.ConfigOptionsChanged, () => {
            this._emitter.fire();
          }));
          const _0x566df2 = this._client.dispose;
          _0x3de33c.dispose = () => {
            _0x49f98c._instance = undefined;
            return _0x566df2.call(_0x3de33c);
          };
        }
        get onDidChangeConfigInfo() {
          return this._emitter.event;
        }
        static get(_0x2c1f64) {
          if (!this._instance) {
            this._instance = new _0x49f98c(_0x2c1f64);
          }
          return this._instance;
        }
        dispose() {
          for (const _0x7d828e of this._disposables) {
            _0x7d828e.dispose();
          }
        }
        async getConfigInfo(_0x46ff6f) {
          return _0x4598d5.CustomLSP.sendRequest(this._client, _0x4598d5.CustomLSP.Requests.GetConfigInfo, {
            workspaceUri: _0x46ff6f.toString()
          });
        }
      }
      exports.ConfigInfoProvider = _0x49f98c;
    },
    57049: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.parseSettingsJson = _0x167a46;
      const _0x6984d4 = __importStar(require(55211));
      const _0x45da6a = new Set(['python.analysis.typeshedPaths', 'python.analysis.extraPaths', 'python.analysis.autoSearchPaths', 'python.analysis.useLibraryCodeForTypes', 'python.analysis.stubPath', 'python.analysis.include', 'python.analysis.exclude', 'python.analysis.ignore', 'python.analysis.typeCheckingMode', 'python.analysis.diagnosticSeverityOverrides', 'python.analysis.venvPath', 'python.analysis.typeEvaluation.analyzeUnannotatedFunctions', 'python.analysis.typeEvaluation.strictListInference', 'python.analysis.typeEvaluation.strictSetInference', 'python.analysis.typeEvaluation.strictDictionaryInference', 'python.analysis.typeEvaluation.analyzeUnannotatedFunctions', 'python.analysis.typeEvaluation.strictParameterNoneValue', 'python.analysis.typeEvaluation.enableExperimentalFeatures', 'python.analysis.typeEvaluation.deprecateTypingAliases', 'python.analysis.typeEvaluation.disableBytesTypePromotions', 'python.analysis.typeEvaluation.enableTypeIgnoreComments', 'python.analysis.typeEvaluation.enableReachabilityAnalysis']);
      function _0x167a46(_0x356a7d) {
        const _0x2b5383 = [];
        const _0x1dec33 = _0x6984d4.parseTree(_0x356a7d, _0x2b5383, {
          allowTrailingComma: true,
          allowEmptyContent: true
        });
        if (_0x2b5383.length > 0 || !_0x1dec33) {
          return [];
        }
        const _0x8a9de1 = [];
        const _0x2a9108 = _0x356a7d.split('\n');
        let _0x35d037 = 0;
        for (const _0x40914f of _0x2a9108) {
          _0x8a9de1.push(_0x35d037);
          _0x35d037 += _0x40914f.length + 1;
        }
        function _0x576af1(_0x3107e9) {
          let _0x546fcb = 0;
          while (_0x546fcb < _0x8a9de1.length && _0x8a9de1[_0x546fcb] <= _0x3107e9) {
            _0x546fcb += 1;
          }
          return {
            line: _0x546fcb - 1,
            character: _0x3107e9 - _0x8a9de1[_0x546fcb - 1]
          };
        }
        const _0x359405 = [];
        const _0x452623 = _0x1dec33?.children || [];
        for (let _0x27da4c = 0; _0x27da4c < _0x452623.length; _0x27da4c++) {
          const _0x42b45d = _0x452623[_0x27da4c];
          let _0xb69231 = '';
          if (_0x42b45d.type === 'property' && _0x42b45d.children) {
            _0xb69231 = _0x42b45d.children[0]?.value || '';
          } else {
            if (_0x42b45d.type === 'object' && _0x42b45d.children) {
              _0xb69231 = _0x42b45d.children[0].value || '';
            }
          }
          if (_0x45da6a.has(_0xb69231) && _0x42b45d.children) {
            const _0x1edbaa = _0x576af1(_0x42b45d.children[0].offset);
            _0x359405.push({
              setting: _0xb69231,
              line: _0x1edbaa.line,
              col: _0x1edbaa.character + 1
            });
          }
        }
        return _0x359405;
      }
    },
    50704: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SettingsJsonWatcher = undefined;
      const _0x4d73a5 = require(2543);
      const _0x5040e4 = __importStar(require(91398));
      const _0x1bc0bb = require(54010);
      const _0x3adfaa = require(17505);
      const _0x1d0ef2 = require(4782);
      const _0x3b4ce3 = require(57049);
      function _0x47b56b(_0x5e902b) {
        return _0x1bc0bb.getFileName(_0x5e902b.fileName).toLowerCase() === 'settings.json';
      }
      class _0x36657c {
        constructor(_0x2a19c3) {
          this._client = _0x2a19c3;
          this._disposables = [];
          this._updateDiagnostics = _0x4d73a5.debounce(this._updateDiagnosticsInternal, 2000);
          this._diagnosticCollection = _0x5040e4.languages.createDiagnosticCollection('settings');
          this._configInfoProvider = _0x1d0ef2.ConfigInfoProvider.get(_0x2a19c3);
          this._disposables.push(_0x5040e4.workspace.onDidChangeTextDocument(_0xc60968 => {
            if (_0x47b56b(_0xc60968.document)) {
              this._updateDiagnostics(_0xc60968.document);
            }
          }), _0x5040e4.workspace.onDidOpenTextDocument(_0x4e013a => {
            if (_0x47b56b(_0x4e013a)) {
              this._updateDiagnostics(_0x4e013a);
            }
          }), this._configInfoProvider.onDidChangeConfigInfo(() => {
            this._checkOpenDocuments();
          }), this._diagnosticCollection, this._configInfoProvider);
          this._checkOpenDocuments();
        }
        dispose() {
          for (const _0x229d3e of this._disposables) {
            _0x229d3e.dispose();
          }
        }
        _checkOpenDocuments() {
          _0x5040e4.workspace.textDocuments.filter(_0x4fc950 => _0x47b56b(_0x4fc950)).forEach(_0x5eb3c9 => {
            this._updateDiagnostics(_0x5eb3c9);
          });
        }
        async _updateDiagnosticsInternal(_0x547c1c) {
          const _0x1d3d44 = this._getWorkspaceFoldersForSettingsJson(_0x547c1c);
          const _0x3b297c = [];
          for (const _0x4e5bbf of _0x1d3d44) {
            _0x3b297c.push(this._configInfoProvider.getConfigInfo(_0x4e5bbf));
          }
          const _0x267102 = await Promise.all(_0x3b297c);
          if (_0x267102.some(_0x3fae77 => _0x3fae77.configFileSource !== undefined)) {
            this._parseSettingsJson(_0x547c1c);
          } else {
            this._diagnosticCollection.set(_0x547c1c.uri, []);
          }
        }
        _parseSettingsJson(_0x1c60ec) {
          const _0x4d3baa = _0x1c60ec.getText();
          const _0x151da1 = !_0x1c60ec.uri.path.includes('.vscode');
          const _0x2365fa = _0x3b4ce3.parseSettingsJson(_0x4d3baa);
          const _0x3039f0 = _0x2365fa.map(_0x51024d => {
            return {
              message: _0x3adfaa.LanguageServer.settingsNotOverridable().format(_0x51024d.setting),
              range: new _0x5040e4.Range(new _0x5040e4.Position(_0x51024d.line, _0x51024d.col), new _0x5040e4.Position(_0x51024d.line, _0x51024d.col + _0x51024d.setting.length)),
              code: {
                value: 'settingsNotOverridable',
                target: _0x5040e4.Uri.parse('https://aka.ms/AArua4c')
              },
              severity: _0x151da1 ? _0x5040e4.DiagnosticSeverity.Hint : _0x5040e4.DiagnosticSeverity.Warning,
              source: 'settings.json',
              tags: _0x151da1 ? [_0x5040e4.DiagnosticTag.Unnecessary] : []
            };
          });
          this._diagnosticCollection.set(_0x1c60ec.uri, _0x3039f0);
        }
        _getWorkspaceFoldersForSettingsJson(_0x30a759) {
          const _0x5a1f00 = _0x5040e4.workspace.workspaceFolders;
          const _0x4c66cf = _0x30a759.uri.path;
          const _0x4606b4 = _0x4c66cf.indexOf('.vscode');
          if (!_0x5a1f00) {
            if (_0x4606b4 >= 0) {
              return [_0x30a759.uri.with({
                path: _0x4c66cf.substring(0, _0x4606b4)
              })];
            }
            return [];
          }
          if (_0x4606b4 < 0) {
            return _0x5a1f00.map(_0x27d3db => _0x27d3db.uri);
          }
          for (const _0xf274ec of _0x5a1f00) {
            if (_0x30a759.uri.scheme === _0xf274ec.uri.scheme && _0x30a759.uri.path.startsWith(_0xf274ec.uri.path)) {
              return [_0xf274ec.uri];
            }
          }
          return [];
        }
      }
      exports.SettingsJsonWatcher = _0x36657c;
    },
    49000: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TypeCheckingModeStatusItemProvider = undefined;
      const _0x116f15 = __importStar(require(91398));
      const _0xd733cb = require(27130);
      const _0x187ed4 = require(17505);
      const _0x377c99 = require(17448);
      const _0x120660 = require(4782);
      class _0x1dcb31 extends _0x377c99.BaseStatusItemProvider {
        constructor(_0x3906e5) {
          super('typeCheckingMode');
          this._configInfoProvider = _0x120660.ConfigInfoProvider.get(_0x3906e5);
          this.disposables.push(this._configInfoProvider.onDidChangeConfigInfo(() => {
            this.debouncedUpdateStatusItem();
          }));
          this.disposables.push(this._configInfoProvider);
        }
        updateStatusItem() {
          var _0x2b7b45;
          const _0x4aa652 = this._getActiveWorkspaceFolder();
          if (_0x4aa652) {
            if (!this.statusItem) {
              this.statusItem = this.createStatusItem();
            }
            if (this.statusItem) {
              this._configInfoProvider.getConfigInfo(_0x4aa652).then(_0x6e606 => {
                var _0x5e2e17;
                this.statusItem.name = _0x187ed4.ClientLoc.typeCheckingModeStatusItem.name();
                if (_0x6e606.configFileSource) {
                  const _0x4dbaff = ((_0x5e2e17 = _0x6e606.configFileSource) === null || _0x5e2e17 === undefined ? undefined : _0x5e2e17.endsWith('pyrightconfig.json')) ? 'pyrightconfig.json' : 'pyproject.toml';
                  this.statusItem.command = {
                    title: _0x187ed4.ClientLoc.typeCheckingModeStatusItem.titleConfig(),
                    command: _0xd733cb.ClientCommands.openConfig,
                    arguments: [_0x6e606.configFileSource]
                  };
                  this.statusItem.text = _0x187ed4.ClientLoc.typeCheckingModeStatusItem.textFormattedFromConfig().format(_0x6e606.typeCheckingMode, _0x4dbaff);
                  this.statusItem.severity = _0x116f15.LanguageStatusSeverity.Information;
                } else {
                  const _0x26b7a6 = [{
                    label: 'off'
                  }, {
                    label: 'basic'
                  }, {
                    label: 'standard'
                  }, {
                    label: 'strict'
                  }, {
                    label: `\$(gear) ${_0x187ed4.ClientLoc.typeCheckingModeStatusItem.pickerSettingsPage()}`
                  }];
                  this.statusItem.command = {
                    title: _0x187ed4.ClientLoc.typeCheckingModeStatusItem.title(),
                    command: _0xd733cb.ClientCommands.showTypeCheckingPicker,
                    arguments: [_0x26b7a6, _0x6e606.typeCheckingMode]
                  };
                  this.statusItem.text = _0x187ed4.ClientLoc.typeCheckingModeStatusItem.textFormatted().format(_0x6e606.typeCheckingMode);
                  this.statusItem.severity = _0x116f15.LanguageStatusSeverity.Information;
                }
              });
            }
          } else {
            if ((_0x2b7b45 = this.statusItem) === null || _0x2b7b45 === undefined) {
              undefined;
            } else {
              _0x2b7b45.dispose();
            }
            this.statusItem = undefined;
          }
        }
        _getActiveWorkspaceFolder() {
          var _0x4b01e2;
          var _0x5205bd;
          const _0x2c1e67 = _0x116f15.workspace.workspaceFolders;
          const _0x546eed = (_0x4b01e2 = _0x116f15.window.activeTextEditor) === null || _0x4b01e2 === undefined ? undefined : _0x4b01e2.document.uri;
          if (!_0x546eed || !_0x2c1e67 || ((_0x5205bd = _0x116f15.window.activeTextEditor) === null || _0x5205bd === undefined ? undefined : _0x5205bd.document.languageId) !== 'python') {
            return undefined;
          }
          for (const _0x14def0 of _0x2c1e67) {
            if (_0x546eed.scheme === _0x14def0.uri.scheme && _0x546eed.path.startsWith(_0x14def0.uri.path)) {
              return _0x14def0.uri;
            }
          }
          return undefined;
        }
      }
      exports.TypeCheckingModeStatusItemProvider = _0x1dcb31;
    },
    51265: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.registerMoveCommand = _0x3cd04e;
      const _0x2ac3f3 = __importStar(require(79896));
      const _0x5e3d56 = __importStar(require(91398));
      const _0x5d7448 = require(27130);
      const _0x60c72 = require(44657);
      const _0x3f6e2e = require(17505);
      const _0x499759 = require(6226);
      function _0x3cd04e(_0x3762f0, _0x50e618, _0x5bec27) {
        _0x58ced7(_0x3762f0, _0x50e618, _0x5bec27, _0x5d7448.ClientCommands.moveSymbolWithFileSelection, async (_0x26d6fa, _0x1fbc45, _0x3f2f05, _0x225d07, _0x1858ed) => {
          const _0x287d88 = await _0x5da373(_0x50e618, _0x5bec27, _0x3f2f05, _0x26d6fa, _0x225d07, _0x1858ed);
          if (!_0x287d88) {
            return;
          }
          await _0x50e618.executeCommand(_0x5d7448.Commands.moveSymbol, _0x26d6fa, _0x287d88, _0x1fbc45, _0x225d07);
        }, {
          title: _0x3f6e2e.Refactoring.MoveSymbol.progressBarTitle(),
          cancellationIdIndex: 3
        });
      }
      async function _0x5da373(_0x29a452, _0x4b4c13, _0x59a8c6, _0x139b29, _0x36ad2a, _0x1842d5) {
        if (_0x59a8c6 === 'new') {
          return _0x60c72.MoveNewFileMarker;
        }
        const _0x29ce2c = _0x3f6e2e.Refactoring.MoveSymbol.newFileLabel();
        const _0x2ff57a = _0x3f6e2e.Refactoring.MoveSymbol.newFileDetail();
        const _0x98e9d1 = await _0x29a452.executeCommand(_0x5d7448.Commands.getSourceFiles, _0x139b29, _0x36ad2a);
        if (!_0x98e9d1) {
          return undefined;
        }
        const _0x59f52a = [];
        _0x59f52a.push({
          label: _0x29ce2c,
          detail: _0x2ff57a,
          alwaysShow: true
        }, {
          label: _0x3f6e2e.Refactoring.MoveSymbol.separatorText(),
          kind: _0x5e3d56.QuickPickItemKind.Separator
        });
        _0x59f52a.push(..._0x98e9d1.filter(_0x8d94c9 => _0x8d94c9.uri !== _0x139b29).map(_0xa27da0 => ({
          label: _0xa27da0.name,
          description: _0xa27da0.folderAfterRoot,
          fullPath: _0xa27da0.uri
        })).sort((_0x18e4b2, _0x2d1ce6) => _0x18e4b2.label.localeCompare(_0x2d1ce6.label)));
        const _0x3ef774 = await _0x4b4c13.showQuickPick(_0x59f52a, {
          canPickMany: false,
          matchOnDescription: true,
          matchOnDetail: true,
          placeHolder: _0x3f6e2e.Refactoring.MoveSymbol.quickPickPlaceHolder(),
          title: _0x3f6e2e.Refactoring.MoveSymbol.quickPickTitle()
        }, _0x1842d5);
        if (!_0x3ef774) {
          return undefined;
        }
        if (_0x3ef774.fullPath) {
          return _0x3ef774.fullPath;
        }
        const _0xe3d70a = await _0x4b4c13.showOpenDialog({
          canSelectFiles: true,
          canSelectFolders: false,
          canSelectMany: false,
          defaultUri: _0x5e3d56.Uri.parse(_0x139b29),
          filters: {
            Python: ['py', 'pyi']
          },
          openLabel: _0x3f6e2e.Refactoring.MoveSymbol.openDialogOpenLabel(),
          title: _0x3f6e2e.Refactoring.MoveSymbol.openDialogTitle()
        });
        if (!_0xe3d70a) {
          return undefined;
        }
        return _0xe3d70a[0].toString();
      }
      function _0x58ced7(_0x18966f, _0x215ad3, _0xd06e0, _0x7d715d, _0x1c161a, _0x116ded, _0x26b56a) {
        const _0x361935 = {
          location: _0x5e3d56.ProgressLocation.Window,
          cancellable: true,
          title: _0x116ded.title
        };
        _0x499759.registerCommand(_0x18966f, _0x215ad3, _0x7d715d, (..._0x1027cf) => _0xd06e0.withProgress(_0x361935, async (_0xba2e36, _0x4ca71a) => {
          const _0x24744b = _0x1027cf[_0x116ded.cancellationIdIndex];
          const _0x4c2969 = [_0x4ca71a.onCancellationRequested(() => {
            if (_0x24744b) {
              _0x5a7725(() => _0x2ac3f3.writeFileSync(_0x24744b, '', {
                flag: 'w'
              }));
            }
          })];
          try {
            return await _0x1c161a(..._0x1027cf, _0x4ca71a);
          } catch (_0x546faf) {
            if (_0x4ca71a.isCancellationRequested) {
              return;
            }
            throw _0x546faf;
          } finally {
            if (_0x24744b) {
              _0x5a7725(() => _0x2ac3f3.unlinkSync(_0x24744b));
            }
            _0x4c2969.forEach(_0x4e5b17 => _0x4e5b17.dispose());
          }
        }), _0x26b56a);
      }
      function _0x5a7725(_0x44fed7) {
        try {
          _0x44fed7();
        } catch (_0x1d2e76) {}
      }
    },
    89402: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.handleSearchImportCommands = _0x1b7890;
      const _0x336439 = require(46203);
      const _0x5b3951 = require(51507);
      const _0x3e9a59 = require(27130);
      const _0x5988ec = require(93980);
      const _0x5dc508 = require(17505);
      async function _0x1b7890(_0x379d62, _0x34d8eb, _0x1b082a, _0x1e9fbd, _0x51821f) {
        if (!_0x51821f || _0x51821f.trim().length === 0) {
          return;
        }
        const _0x26bfd1 = await _0x2971b6(_0x379d62, _0x34d8eb, _0x1b082a, _0x1e9fbd, _0x51821f);
        if (!_0x26bfd1) {
          return;
        }
        await _0x379d62.executeCommand(_0x3e9a59.Commands.addImport, _0x1b082a, _0x1e9fbd, _0x26bfd1.name, _0x26bfd1.source, _0x26bfd1.alias);
      }
      const _0x441b39 = 200;
      async function _0x2971b6(_0x46c389, _0x31ca5f, _0x1c6d03, _0x5d8524, _0x4c658f) {
        const _0x108dfd = [];
        const _0x14b230 = new _0x5988ec.ThrottledDelayer(_0x441b39);
        _0x108dfd.push(_0x14b230);
        const _0x1f4a77 = _0x31ca5f.createQuickPick();
        _0x108dfd.push(_0x1f4a77);
        _0x1f4a77.title = _0x5dc508.Refactoring.SearchImports.quickPickTitle();
        _0x1f4a77.placeholder = _0x5dc508.Refactoring.SearchImports.quickPickPlaceHolder();
        _0x1f4a77.matchOnDescription = true;
        _0x1f4a77.matchOnDetail = true;
        _0x1f4a77.value = _0x4c658f;
        const _0x5f1e81 = _0x5b3951.createDeferred();
        _0x108dfd.push(_0x1f4a77.onDidAccept(() => {
          const _0x547db7 = _0x1f4a77.selectedItems.length > 0 ? _0x1f4a77.selectedItems[0] : undefined;
          _0x1f4a77.hide();
          _0x5f1e81.resolve(_0x547db7);
        }));
        let _0x4e0540 = undefined;
        _0x108dfd.push(_0x1f4a77.onDidChangeValue(_0xda20d6 => {
          const _0xa9d417 = _0xda20d6.trim();
          if (_0xa9d417.length === 0) {
            _0x28469c(_0x14b230, _0x1f4a77, () => {
              _0x4e0540 = _0xa9d417;
              return Promise.resolve([]);
            });
            return;
          }
          const _0x5619b8 = _0xa9d417.split(' ');
          const _0x2662b6 = _0x5619b8[0];
          if (_0x4e0540 && _0x2662b6.startsWith(_0x4e0540)) {
            return;
          }
          _0x28469c(_0x14b230, _0x1f4a77, async () => {
            const _0x442276 = await _0x46c389.executeCommand(_0x3e9a59.Commands.getAutoImports, _0x1c6d03, _0x5d8524, _0x2662b6);
            _0x4e0540 = _0x2662b6;
            if (!_0x442276) {
              return [];
            }
            const _0x168f7b = [];
            _0x168f7b.push(..._0x442276.map(_0x2ddceb => ({
              label: `\$(${_0x4d675b(_0x2ddceb.kind)}) ${_0x2ddceb.name}`,
              description: _0x2ddceb.source,
              detail: _0x2a933b(_0x2ddceb.name, _0x2ddceb.originalName, _0x2ddceb.source, _0x2ddceb.alias),
              name: _0x2ddceb.name,
              source: _0x2ddceb.source,
              alias: _0x2ddceb.alias
            })));
            return _0x168f7b;
          });
        }));
        _0x108dfd.push(_0x1f4a77.onDidHide(() => {
          _0x14b230.cancel();
          _0x108dfd.forEach(_0x4f063a => _0x4f063a.dispose());
          if (!_0x5f1e81.completed) {
            _0x5f1e81.resolve(undefined);
          }
        }));
        _0x1f4a77.show();
        const _0x48d78f = await _0x5f1e81.promise;
        if (!_0x48d78f) {
          return undefined;
        }
        return _0x48d78f;
      }
      function _0x2a933b(_0x2b0789, _0x2a5e19, _0x53e245, _0x4848b6) {
        let _0x4a8ebd;
        if (!_0x53e245) {
          _0x4a8ebd = `module ${_0x2b0789}`;
        } else {
          if (_0x2b0789 !== _0x2a5e19) {
            _0x2b0789 = _0x2b0789 + ' (' + _0x2a5e19 + ')';
          }
          _0x4a8ebd = _0x2b0789 + ' from ' + _0x53e245;
        }
        if (_0x4848b6) {
          _0x4a8ebd = `alias ${_0x4848b6} of ${_0x4a8ebd}`;
        }
        return _0x4a8ebd;
      }
      function _0x28469c(_0x43c652, _0x2fc482, _0x5c759c) {
        _0x43c652.trigger(_0x5c759c).then(_0x116239 => _0x2fc482.items = _0x116239).ignoreErrors();
      }
      function _0x4d675b(_0x58580d) {
        if (!_0x58580d) {
          return 'symbol-misc';
        }
        switch (_0x58580d) {
          case _0x336439.CompletionItemKind.Text:
            return 'symbol-string';
          case _0x336439.CompletionItemKind.Method:
          case _0x336439.CompletionItemKind.Function:
          case _0x336439.CompletionItemKind.Constructor:
            return 'symbol-method';
          case _0x336439.CompletionItemKind.Field:
            return 'symbol-field';
          case _0x336439.CompletionItemKind.Variable:
            return 'symbol-variable';
          case _0x336439.CompletionItemKind.Class:
            return 'symbol-class';
          case _0x336439.CompletionItemKind.Interface:
            return 'symbol-interface';
          case _0x336439.CompletionItemKind.Module:
            return 'symbol-namespace';
          case _0x336439.CompletionItemKind.Property:
            return 'symbol-property';
          case _0x336439.CompletionItemKind.Value:
          case _0x336439.CompletionItemKind.Constant:
            return 'symbol-constant';
          case _0x336439.CompletionItemKind.Enum:
            return 'symbol-enum';
          case _0x336439.CompletionItemKind.Keyword:
            return 'symbol-keyword';
          case _0x336439.CompletionItemKind.File:
            return 'symbol-file';
          case _0x336439.CompletionItemKind.EnumMember:
            return 'symbol-enum-member';
          case _0x336439.CompletionItemKind.Struct:
            return 'symbol-structure';
          case _0x336439.CompletionItemKind.Event:
            return 'symbol-event';
          case _0x336439.CompletionItemKind.Operator:
            return 'symbol-operator';
          case _0x336439.CompletionItemKind.TypeParameter:
            return 'symbol-parameter';
          default:
            return 'symbol-misc';
        }
      }
    },
    6226: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.buildApi = _0x9b37dc;
      exports.registerReloadTriggers = _0x4c6d79;
      exports.registerCommand = _0xb9cdc0;
      exports.verifyExtensionsMatch = _0x4899be;
      exports.preactivate = _0x8c9601;
      exports.activateShared = _0x27e03f;
      exports.sharedListenToClient = _0x19637b;
      exports.logClientInfo = _0x2aa454;
      exports.registerGotoOutputChannel = _0x33a2da;
      exports.getExtensionVersion = _0x28e707;
      exports.supportResolveInlayHintEdit = _0x82912;
      exports.allowAskingUsersPerformanceReporting = _0x169a2e;
      require(92572);
      const _0x18d4c6 = __importStar(require(99589));
      const _0x4cf330 = __importStar(require(91398));
      const _0x2ae0c0 = require(34455);
      const _0x1f7204 = require(48281);
      const _0x256278 = require(89740);
      const _0x3c5ba4 = require(27130);
      const _0x524dcb = require(99504);
      const _0x472df9 = require(95349);
      const _0x22429a = require(21251);
      const _0x2774df = require(46134);
      const _0x2f55aa = require(60987);
      const _0x58d18b = require(81316);
      const _0x4d9d70 = __importDefault(require(28778));
      const _0x4c253e = require(63765);
      const _0x1df0d1 = require(14906);
      const _0x96aba8 = require(17505);
      const _0x22bfdc = require(63454);
      const _0x332e64 = require(60849);
      const _0x757f73 = require(15741);
      const _0x1e49fa = require(51067);
      const _0x41cc11 = require(50704);
      const _0x53ae6b = require(49000);
      const _0x314ddb = require(89402);
      const _0x256ca5 = require(98707);
      const _0x357429 = require(75510);
      const _0x43829f = require(66016);
      const _0x99415f = require(19329);
      function _0x9b37dc(_0x2909cd, _0x21bb9b, _0x157fb3) {
        const _0x598c0f = _0x28e707();
        if (!_0x21bb9b) {
          return {
            languageServerFolder: async () => ({
              path: _0x2909cd,
              version: _0x598c0f
            }),
            client: {
              isEnabled: () => true,
              start: () => Promise.resolve(),
              stop: () => Promise.resolve(),
              getOutputChannel: () => Promise.resolve(undefined),
              getClient: () => Promise.resolve(undefined)
            }
          };
        }
        return {
          languageServerFolder: async () => ({
            path: _0x2909cd,
            version: _0x598c0f
          }),
          client: {
            isEnabled: () => true,
            start: () => _0x21bb9b.startClient(),
            stop: () => _0x21bb9b.stopClient(),
            getOutputChannel: () => _0x21bb9b.getClient().then(_0x5a1873 => _0x5a1873?.outputChannel),
            getClient: () => _0x21bb9b.getClient().then(_0x42bf33 => _0x42bf33)
          },
          notebook: {
            registerJupyterPythonPathFunction: _0x248769 => _0x157fb3 === null || _0x157fb3 === undefined ? undefined : _0x157fb3.setJupyterPythonPathFunction(_0x248769),
            getReferences: (_0x5bb4ec, _0x41c34d, _0x56ff2f, _0x45cc02) => {
              var _0x125912;
              if ((_0x125912 = _0x157fb3 === null || _0x157fb3 === undefined ? undefined : _0x157fb3.getReferences(_0x5bb4ec, _0x41c34d, _0x56ff2f, _0x45cc02)) !== null && _0x125912 !== undefined) {
                return _0x125912;
              } else {
                return Promise.resolve(undefined);
              }
            },
            getDocumentSymbols: (_0x4db67d, _0x51fdaf) => {
              var _0x1f3b75;
              if ((_0x1f3b75 = _0x157fb3 === null || _0x157fb3 === undefined ? undefined : _0x157fb3.getDocumentSymbols(_0x4db67d, _0x51fdaf)) !== null && _0x1f3b75 !== undefined) {
                return _0x1f3b75;
              } else {
                return Promise.resolve(null);
              }
            }
          }
        };
      }
      function _0x4c6d79(_0x5e172f, _0x3dec67, _0xc04264) {
        const _0x2130bf = _0xc04264;
        _0x5e172f.subscriptions.push(_0x3dec67.onDidChange(() => _0x2130bf.restartClient()));
      }
      function _0xb9cdc0(_0x5e1b0f, _0x2936fa, _0x298c5f, _0x4860a9, _0x18c07d) {
        _0x5e1b0f.subscriptions.push(_0x2936fa.registerCommand(_0x298c5f, _0x4860a9, _0x18c07d));
      }
      let _0x115c00 = false;
      function _0x4899be(_0x5136ee) {
        var _0x19468e;
        if (!_0x115c00) {
          _0x115c00 = true;
          const _0x5a441f = _0x4cf330.extensions.getExtension(_0x524dcb.PYLANCE_EXTENSION_ID)?.packageJSON;
          const _0x7b2729 = _0x4cf330.extensions.getExtension(_0x524dcb.PYTHON_EXTENSION_ID)?.packageJSON;
          const _0x56561a = ['vscode-languageclient', 'vscode-languageserver-protocol', 'vscode-jsonrpc'];
          for (const _0x4a666e of _0x56561a) {
            if (_0x5a441f?.dependencies?.[_0x4a666e] !== _0x7b2729?.dependencies?.[_0x4a666e]) {
              const _0x37b675 = {};
              const _0x39f3da = (_0x19468e = _0x5136ee.pylance) === null || _0x19468e === undefined ? undefined : _0x19468e.createClient({}, _0x37b675);
              const _0xcba778 = _0x37b675.outputChannel;
              if (_0x39f3da === null || _0x39f3da === undefined) {
                undefined;
              } else {
                _0x39f3da.dispose();
              }
              if (_0xcba778) {
                _0x22bfdc.registerOutputChannelForLogging(_0xcba778);
              }
              const _0x55a6d2 = `Warning: Pylance and Python extension have different versions of shared dependencies. 
Pylance Extension: ${_0x5a441f.version}
    vscode-languageclient: ${_0x5a441f.dependencies[_0x56561a[0]]}
    vscode-languageserver-protocol: ${_0x5a441f.dependencies[_0x56561a[1]]}
    vscode-jsonrpc: ${_0x5a441f.dependencies[_0x56561a[2]]}
Python Extension: ${_0x7b2729.version}
    vscode-languageclient: ${_0x7b2729.dependencies[_0x56561a[0]]}
    vscode-languageserver-protocol: ${_0x7b2729.dependencies[_0x56561a[1]]}
    vscode-jsonrpc: ${_0x7b2729.dependencies[_0x56561a[2]]}

This may cause instability in Pylance.`;
              const _0x2302c7 = _0x524dcb.IS_INSIDERS ? 'You are using a Pylance prerelease build. Please make sure you have the latest prerelease Pylance and Python extension versions installed.' : 'You are using a Pylance release build. Please make sure you have the latest release Pylance and Python extensions versions installed.';
              _0x22bfdc.traceError(_0x55a6d2 + '\n\n' + _0x2302c7);
              const _0x5dcc4c = _0x524dcb.IS_INSIDERS ? _0x96aba8.ClientLoc.pylanceAndPythonPrereleaseExtensionMismatch() : _0x96aba8.ClientLoc.pylanceAndPythonStableExtensionMismatch();
              _0x4cf330.window.showWarningMessage(_0x5dcc4c);
              return;
            }
          }
        }
      }
      async function _0x8c9601(_0x291046) {
        _0x332e64.setExtensionRoot(_0x291046.extensionUri);
        await _0x96aba8.loadLocalizedStrings();
      }
      async function _0x27e03f(_0x533033) {
        const _0x364329 = new _0x4c253e.ApplicationShellImpl();
        const _0x1fbf3a = new _0x256ca5.AppConfigurationImpl();
        const _0x36e2b0 = _0x28e707();
        const _0x5a6ed5 = new _0x43829f.CommandManagerImpl();
        const _0x1e0331 = new _0x357429.BrowserServiceImpl();
        const _0x3b51d2 = new _0x99415f.PersistentServiceImpl(_0x533033);
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.runCommands, (..._0x5a977c) => {
          _0x5a977c.forEach(_0x105471 => {
            _0x5a6ed5.executeCommand(_0x105471.command, ...(_0x105471.arguments ?? []));
          });
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.triggerParameterHints, _0x2b8b3a => {
          const _0x2387f9 = _0x4cf330.workspace.getConfiguration('editor.parameterHints', {
            uri: _0x4cf330.Uri.parse(_0x2b8b3a),
            languageId: _0x1df0d1.pythonName
          });
          if (_0x2387f9.get('enabled')) {
            _0x5a6ed5.executeCommand(_0x43829f.EditorCommand.TriggerParameterHints);
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.extractMethodWithRename, (_0x5d59e2, _0x407b1d) => {
          _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.extractMethod, _0x5d59e2, _0x407b1d).then(_0x1078c1 => {
            if (_0x1078c1) {
              _0x58d18b.renameEdit(_0x1078c1);
            }
          });
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.extractVariableWithRename, (_0x4dc08a, _0x16c36c) => {
          _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.extractVariable, _0x4dc08a, _0x16c36c).then(_0x1f57b2 => {
            if (_0x1f57b2) {
              _0x58d18b.renameEdit(_0x1f57b2);
            }
          });
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.reportIssue, async _0x19a6b8 => {
          if (_0x19a6b8 === 'perf_autoDetect') {
            const _0x1a17a5 = _0x30af75(_0x3b51d2);
            _0x1a17a5.updateValue(_0x36e2b0);
          }
          _0x4d9d70.default(_0x1e0331, _0x36e2b0);
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.addToExtraPaths, (_0x45a704, _0x3052f0) => {
          _0x2f55aa.addToExtraPaths(_0x1fbf3a, _0x5a6ed5, _0x45a704, _0x3052f0);
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.dumpTokens, () => {
          var _0xc4594f;
          const _0x57450f = (_0xc4594f = _0x4cf330.window.activeTextEditor) === null || _0xc4594f === undefined ? undefined : _0xc4594f.document.uri.toString();
          if (_0x57450f) {
            _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.dumpFileDebugInfo, _0x57450f, 'tokens');
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.dumpNodes, () => {
          var _0x194618;
          const _0x4c383c = (_0x194618 = _0x4cf330.window.activeTextEditor) === null || _0x194618 === undefined ? undefined : _0x194618.document.uri.toString();
          if (_0x4c383c) {
            _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.dumpFileDebugInfo, _0x4c383c, 'nodes');
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.dumpTypes, () => {
          var _0x4fec19;
          const _0x58e31a = (_0x4fec19 = _0x4cf330.window.activeTextEditor) === null || _0x4fec19 === undefined ? undefined : _0x4fec19.document.uri.toString();
          if (_0x58e31a) {
            const _0x1e2c79 = _0x4cf330.window.activeTextEditor.selection.start;
            const _0xe65ffa = _0x4cf330.window.activeTextEditor.selection.end;
            const _0x1903fe = _0x4cf330.window.activeTextEditor.document.offsetAt(_0x1e2c79);
            const _0x397567 = _0x4cf330.window.activeTextEditor.document.offsetAt(_0xe65ffa);
            _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.dumpFileDebugInfo, _0x58e31a, 'types', _0x1903fe, _0x397567);
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.dumpCachedTypes, () => {
          var _0x5d0c01;
          const _0x4d25c1 = (_0x5d0c01 = _0x4cf330.window.activeTextEditor) === null || _0x5d0c01 === undefined ? undefined : _0x5d0c01.document.uri.toString();
          if (_0x4d25c1) {
            const _0x2ecfc = _0x4cf330.window.activeTextEditor.selection.start;
            const _0x631b57 = _0x4cf330.window.activeTextEditor.selection.end;
            const _0x3d6839 = _0x4cf330.window.activeTextEditor.document.offsetAt(_0x2ecfc);
            const _0x21e1c7 = _0x4cf330.window.activeTextEditor.document.offsetAt(_0x631b57);
            _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.dumpFileDebugInfo, _0x4d25c1, 'cachedtypes', _0x3d6839, _0x21e1c7);
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.dumpCodeFlowGraph, () => {
          var _0x3281bb;
          const _0x2f3f4d = (_0x3281bb = _0x4cf330.window.activeTextEditor) === null || _0x3281bb === undefined ? undefined : _0x3281bb.document.uri.toString();
          if (_0x2f3f4d) {
            const _0xacad46 = _0x4cf330.window.activeTextEditor.selection.start;
            const _0x10074a = _0x4cf330.window.activeTextEditor.document.offsetAt(_0xacad46);
            _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.dumpFileDebugInfo, _0x2f3f4d, 'codeflowgraph', _0x10074a);
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.showTypeCheckingPicker, (_0x26efd6, _0x45e91d) => {
          _0x4cf330.window.showQuickPick(_0x26efd6, {
            placeHolder: _0x96aba8.ClientLoc.typeCheckingModeStatusItem.pickerPlaceholder().format(_0x45e91d)
          }).then(_0x801972 => {
            if (_0x801972) {
              const _0x4eff21 = _0x4cf330.window.activeTextEditor?.document;
              if (_0x4eff21) {
                if (['off', 'basic', 'strict', 'standard'].includes(_0x801972.label)) {
                  _0x1fbf3a.updateSettingAtExistingDocumentScope(_0x4eff21, 'python', 'analysis.typeCheckingMode', _0x801972.label);
                  _0x5a6ed5.executeCommand(_0x3c5ba4.Commands.executedClientCommand, _0x3c5ba4.ClientCommands.showTypeCheckingPicker, _0x801972.label);
                } else {
                  _0x4cf330.commands.executeCommand('workbench.action.openSettings', 'python.analysis.typeCheckingMode');
                }
              }
            }
          });
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.openConfig, _0x3a37c4 => {
          const _0x54126b = _0x4cf330.Uri.parse(_0x3a37c4);
          _0x4cf330.workspace.openTextDocument(_0x54126b.fsPath).then(_0x413dfe => {
            _0x4cf330.window.showTextDocument(_0x413dfe).then(_0x282901 => {
              const _0x1bc57b = _0x413dfe.getText();
              const _0x56e494 = _0x1bc57b.indexOf('typeCheckingMode');
              if (_0x56e494 >= 0) {
                const _0x2e63dd = _0x3a37c4.endsWith('.json') ? ':' : '=';
                const _0x2e18df = _0x1bc57b.indexOf(_0x2e63dd, _0x56e494);
                const _0x521201 = _0x413dfe.positionAt(_0x2e18df + 1);
                const _0x369fb8 = _0x1bc57b.indexOf('\n', _0x2e18df + 1);
                const _0x9039f3 = _0x413dfe.positionAt(_0x369fb8 >= 0 ? _0x369fb8 : _0x1bc57b.length - 1);
                const _0xc742f7 = new _0x4cf330.Range(_0x521201, _0x9039f3);
                _0x282901.selection = new _0x4cf330.Selection(_0xc742f7.start, _0xc742f7.end);
                _0x282901.revealRange(_0xc742f7);
              }
            });
          });
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.setAutoImportCompletions, _0x469952 => {
          const _0x50a0b4 = _0x4cf330.window.activeTextEditor?.document;
          if (_0x50a0b4) {
            _0x1fbf3a.updateSettingAtExistingDocumentScope(_0x50a0b4, 'python', 'analysis.autoImportCompletions', _0x469952);
            _0x5a6ed5.executeCommand(_0x3c5ba4.Commands.executedClientCommand, _0x3c5ba4.ClientCommands.setAutoImportCompletions, _0x469952);
          }
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.openUri, async _0x1d5819 => {
          const _0x3b75ed = _0x2ae0c0.isArray(_0x1d5819) ? _0x1d5819[0] : _0x1d5819;
          return await _0x4cf330.env.openExternal(_0x4cf330.Uri.parse(_0x3b75ed));
        });
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.searchImports, (_0x2814c3, _0x33b04e, _0x1140bd) => _0x314ddb.handleSearchImportCommands(_0x5a6ed5, _0x364329, _0x2814c3, _0x33b04e, _0x1140bd));
        const _0x2cffff = async _0x1d2b0f => {
          var _0x25e1db;
          const _0x21d625 = async _0x4f81d3 => {
            const _0x5524e5 = await _0x4cf330.commands.executeCommand(_0x3c5ba4.Commands.getAllDocstringRanges, _0x4f81d3);
            if (_0x5524e5) {
              await _0x4cf330.commands.executeCommand(_0x1d2b0f, {
                selectionLines: _0x5524e5,
                levels: 1,
                direction: 'down'
              });
            }
          };
          const _0x2c7a1d = (_0x25e1db = _0x4cf330.window.activeTextEditor) === null || _0x25e1db === undefined ? undefined : _0x25e1db.document.uri.toString();
          if (_0x2c7a1d) {
            await _0x21d625(_0x2c7a1d);
          }
        };
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.foldDocstrings, async () => await _0x2cffff('editor.fold'));
        _0xb9cdc0(_0x533033, _0x5a6ed5, _0x3c5ba4.ClientCommands.unfoldDocstrings, async () => await _0x2cffff('editor.unfold'));
        _0x2774df.registerAutoClosing();
        const _0x175d03 = new _0x1e49fa.AutoImportCompletionStatusItemProvider();
        _0x175d03.activate();
        _0x533033.subscriptions.push(_0x175d03);
        return {
          version: _0x36e2b0,
          config: _0x1fbf3a,
          commandManager: _0x5a6ed5,
          appShell: _0x364329
        };
      }
      function _0x19637b(_0x19c3ea, _0x3d1f42, _0x4b7415, _0x3bc1e2) {
        var _0x1eacd7;
        _0x19c3ea.push(_0x472df9.CustomLSP.onRequest(_0x3d1f42, _0x472df9.CustomLSP.Requests.ApplyCursorMovingEdit, async _0x28ee8c => {
          const _0x1a0626 = _0x4cf330.window.activeTextEditor?.document;
          if (_0x4cf330.window.activeTextEditor && _0x1a0626 && _0x256278.compareStringsCaseInsensitive(_0x1a0626 === null || _0x1a0626 === undefined ? undefined : _0x1a0626.uri.toString(), _0x28ee8c.textDocument.uri) === 0 && _0x1a0626.version === _0x28ee8c.textDocument.version) {
            const _0x1d1fc4 = new _0x4cf330.WorkspaceEdit();
            _0x1d1fc4.set(_0x1a0626.uri, await _0x3d1f42.protocol2CodeConverter.asTextEdits(_0x28ee8c.edits));
            await _0x4cf330.workspace.applyEdit(_0x1d1fc4);
            const _0x3559a7 = _0x3d1f42.protocol2CodeConverter.asPosition(_0x28ee8c.cursorPosition);
            const _0x5a7bbf = new _0x4cf330.Selection(_0x3559a7, _0x3559a7);
            _0x4cf330.window.activeTextEditor.selection = _0x5a7bbf;
          }
          return undefined;
        }));
        _0x19c3ea.push(_0x472df9.CustomLSP.onNotification(_0x3d1f42, _0x472df9.CustomLSP.Notifications.ExecuteCommand, _0x26bb73 => {
          _0x4cf330.commands.executeCommand(_0x26bb73.command, ..._0x26bb73.args);
        }));
        _0x19c3ea.push(_0x472df9.CustomLSP.onRequest(_0x3d1f42, _0x472df9.CustomLSP.Requests.ClientShowMessage, async _0x2fa506 => {
          let _0x31a167;
          switch (_0x2fa506.type) {
            case 'error':
              _0x31a167 = _0x4cf330.window.showErrorMessage;
              break;
            case 'warning':
              _0x31a167 = _0x4cf330.window.showWarningMessage;
              break;
            default:
            case 'information':
              _0x31a167 = _0x4cf330.window.showInformationMessage;
              break;
          }
          const _0x10f2ba = await _0x31a167(_0x2fa506.message, ..._0x2fa506.actions);
          if (!_0x10f2ba?.__client__) {
            return _0x10f2ba;
          }
          const _0x51dba7 = _0x2ae0c0.isArray(_0x10f2ba.args) ? _0x10f2ba.args : [];
          await _0x4cf330.commands.executeCommand(_0x10f2ba.id, ..._0x51dba7);
          return undefined;
        }));
        _0x19c3ea.push(_0x472df9.CustomLSP.onRequest(_0x3d1f42, _0x472df9.CustomLSP.Requests.CheckLanguageModel, async (_0x4bab26, _0x3a3e9f) => {
          try {
            const [_0xad85d8] = await _0x4cf330.lm.selectChatModels({
              vendor: 'copilot',
              family: 'gpt-4o'
            });
            if (!_0xad85d8) {
              return false;
            }
            const _0x555edf = _0x3bc1e2.canSendRequest(_0xad85d8);
            if (_0x555edf) {
              return true;
            }
            if (!_0x4bab26.okToShowConsent) {
              return false;
            }
            return _0x555edf === undefined;
          } catch {
            return false;
          }
        }));
        _0x19c3ea.push(_0x472df9.CustomLSP.onRequest(_0x3d1f42, _0x472df9.CustomLSP.Requests.PromptLanguageModel, async (_0x2fc10d, _0x5d6019) => {
          try {
            const [_0x41ddcb] = await _0x4cf330.lm.selectChatModels({
              vendor: 'copilot',
              family: 'gpt-4o'
            });
            if (!_0x41ddcb) {
              return {
                responses: undefined
              };
            }
            const _0x45c97b = _0x3bc1e2.canSendRequest(_0x41ddcb);
            if (_0x45c97b === false) {
              return {
                responses: undefined
              };
            }
            const _0x4d18cd = _0x2fc10d.prompts.map(_0x332ba9 => new _0x4cf330.LanguageModelChatMessage(_0x332ba9.role === 'user' ? _0x4cf330.LanguageModelChatMessageRole.User : _0x332ba9.role === 'assistant' ? _0x4cf330.LanguageModelChatMessageRole.Assistant : _0x1f7204.assertNever(_0x332ba9.role), _0x332ba9.content, _0x332ba9.name));
            const _0x37e777 = await _0x41ddcb.sendRequest(_0x4d18cd, {
              justification: 'enable pylance AI powered features'
            }, _0x5d6019);
            const _0x42b752 = [];
            for await (const _0x262f0b of _0x37e777.text) {
              _0x42b752.push(_0x262f0b);
            }
            return {
              responses: _0x42b752
            };
          } catch {
            return {
              responses: undefined
            };
          }
        }));
        _0x19c3ea.push(new _0x41cc11.SettingsJsonWatcher(_0x3d1f42));
        const _0x327bd8 = new _0x53ae6b.TypeCheckingModeStatusItemProvider(_0x3d1f42);
        _0x19c3ea.push(_0x327bd8);
        _0x327bd8.activate();
        if (_0x4b7415 && _0x3d1f42.syncConnection) {
          const _0x1c1128 = _0x3d1f42.syncConnection;
          const _0x58ae71 = _0x1c1128;
          _0x19c3ea.push(_0x58ae71.onRequest(_0x472df9.CustomLSP.SyncRequests.IsTrustedWorkspace, async () => {
            const _0x3242e7 = _0x4cf330.workspace.isTrusted;
            return {
              errno: 0,
              data: _0x3242e7
            };
          }));
          _0x19c3ea.push(new _0x22429a.SyncListener(_0x1c1128, _0x3d1f42, {
            getConfiguration: (_0x43ec77, _0x15aeb5) => {
              const _0x29bf32 = typeof _0x15aeb5 === 'string' ? _0x4cf330.Uri.parse(_0x15aeb5) : _0x15aeb5?.uri ? _0x4cf330.Uri.parse(_0x15aeb5.uri) : undefined;
              return _0x4cf330.workspace.getConfiguration(_0x43ec77, _0x29bf32);
            },
            fs: {
              readFile: _0x4d4452 => _0x4cf330.workspace.fs.readFile(_0x4cf330.Uri.parse(_0x4d4452)),
              readDirectory: _0x19e184 => _0x4cf330.workspace.fs.readDirectory(_0x4cf330.Uri.parse(_0x19e184)),
              stat: _0x61f6be => _0x4cf330.workspace.fs.stat(_0x4cf330.Uri.parse(_0x61f6be))
            },
            applyEdit: _0x499194 => _0x4cf330.workspace.applyEdit(_0x499194),
            configuration: _0x3d1f42.middleware.workspace?.configuration,
            workspaceFolders: (_0x1eacd7 = _0x4cf330.workspace.workspaceFolders) === null || _0x1eacd7 === undefined ? undefined : _0x1eacd7.map(_0x234e9a => ({
              uri: _0x3d1f42.code2ProtocolConverter.asUri(_0x234e9a.uri),
              name: _0x234e9a.name
            }))
          }, (_0xaf6ad6, _0x1ce983, _0x175c83) => {
            return new _0x757f73.ProgressPart(_0xaf6ad6, _0x1ce983, _0x175c83);
          }));
        }
      }
      function _0x2aa454(_0x11258f, _0x5196b5, _0x25b30d) {
        _0x22bfdc.traceInfo(`Pylance ${_0x11258f ? 'sync' : 'async'} client (${_0x5196b5}) started with python extension (${_0x25b30d})`);
      }
      function _0x33a2da(_0x207443, _0x2fcc89, _0x3a4663) {
        _0xb9cdc0(_0x207443, _0x2fcc89, _0x3c5ba4.ClientCommands.gotoOutputChannel, () => {
          _0x3a4663.getClient().then(_0x4b55c4 => _0x4b55c4 === null || _0x4b55c4 === undefined ? undefined : _0x4b55c4.outputChannel.show());
        });
      }
      function _0x28e707() {
        var _0x24d822;
        const _0x19aa82 = _0x4cf330.extensions.getExtension(_0x524dcb.PYLANCE_EXTENSION_ID);
        if ((_0x24d822 = _0x19aa82 === null || _0x19aa82 === undefined ? undefined : _0x19aa82.packageJSON.version) !== null && _0x24d822 !== undefined) {
          return _0x24d822;
        } else {
          return '9999.0.0-dev';
        }
      }
      function _0x82912() {
        return _0x18d4c6.gte(_0x4cf330.version, '1.86.0-0');
      }
      function _0x30af75(_0x2a4862) {
        return _0x2a4862.createWorkspacePersistentState('perfReport', '');
      }
      function _0x169a2e(_0x1a5083, _0x335d1a) {
        const _0x5c72d8 = _0x30af75(_0x1a5083).value;
        return _0x5c72d8 !== _0x335d1a;
      }
    },
    4649: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.JupyterExtensionIntegration = undefined;
      const _0x2b1638 = require(96353);
      const _0x190c6d = require(95349);
      class _0x4f2bde {
        constructor() {}
        setJupyterPythonPathFunction(_0x86ce44) {
          this._jupyterPythonPathFunction = _0x86ce44;
        }
        setLanguageClient(_0x106c67) {
          this._client = _0x106c67;
        }
        getJupyterPythonPathFunction() {
          return this._jupyterPythonPathFunction;
        }
        async getReferences(_0x344bff, _0x5da8b0, _0x29ed78, _0x3f0003) {
          if (!this._client) {
            return;
          }
          const _0x226f45 = await _0x190c6d.CustomLSP.sendRequest(this._client, _0x190c6d.CustomLSP.Requests.JupyterReferences, this._client.code2ProtocolConverter.asReferenceParams(_0x344bff, _0x5da8b0, _0x29ed78), _0x3f0003);
          const _0x5701de = await this._client.protocol2CodeConverter.asReferences(_0x226f45, _0x3f0003);
          if (_0x226f45 && _0x5701de && _0x226f45.length === _0x5701de.length) {
            _0x5701de.forEach((_0x6ac493, _0x202a91) => {
              _0x6ac493.kind = _0x226f45[_0x202a91].kind;
            });
          }
          return _0x5701de;
        }
        async getDocumentSymbols(_0x2e2e9a, _0x4c5e3f) {
          if (!this._client) {
            return null;
          }
          const _0x44dbf1 = await _0x190c6d.CustomLSP.sendRequest(this._client, _0x190c6d.CustomLSP.Requests.JupyterDocumentSymbols, this._client.code2ProtocolConverter.asDocumentSymbolParams(_0x2e2e9a), _0x4c5e3f);
          if (_0x44dbf1 === null) {
            return null;
          } else {
            if (_0x44dbf1.length === 0) {
              return [];
            } else {
              if (_0x2b1638.DocumentSymbol.is(_0x44dbf1[0])) {
                return await this._client.protocol2CodeConverter.asDocumentSymbols(_0x44dbf1, _0x4c5e3f);
              } else {
                return await this._client.protocol2CodeConverter.asSymbolInformations(_0x44dbf1, _0x4c5e3f);
              }
            }
          }
        }
      }
      exports.JupyterExtensionIntegration = _0x4f2bde;
    },
    98707: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AppConfigurationImpl = undefined;
      const _0x160d53 = require(91398);
      const _0x1b2044 = require(10775);
      const _0x2d1182 = require(27113);
      const _0x575124 = require(17505);
      class _0x4277dc {
        get onDidChangeConfiguration() {
          return _0x160d53.workspace.onDidChangeConfiguration;
        }
        getSetting(_0x4364fc, _0x4fea33) {
          return _0x160d53.workspace.getConfiguration(_0x4364fc).get(_0x4fea33);
        }
        getExpandedSetting(_0x4e4574, _0x4592ea, _0x54d37b) {
          var _0x156604;
          const _0x5a0bdf = _0x160d53.workspace.getConfiguration(_0x4e4574).get(_0x4592ea);
          const _0x4a9d58 = ((_0x156604 = _0x160d53.workspace.workspaceFolders) === null || _0x156604 === undefined ? undefined : _0x156604.map(_0x4d5b3b => {
            return {
              workspaceName: _0x4d5b3b.name,
              rootUri: _0x2d1182.Uri.parse(_0x4d5b3b.uri.toString(), {
                isCaseSensitive: _0x22b727 => false
              })
            };
          })) || [];
          const _0x3da79e = _0x5a0bdf ? _0x1b2044.expandPathVariables(_0x5a0bdf, _0x4a9d58.length === 1 ? _0x4a9d58[0].rootUri : _0x2d1182.Uri.empty(), _0x4a9d58) : undefined;
          return _0x3da79e;
        }
        async updateSetting(_0xf822b4, _0xc8ab1a, _0x27a59f, _0x17cd15) {
          await _0x160d53.workspace.getConfiguration(_0xf822b4).update(_0xc8ab1a, _0x27a59f, _0x17cd15);
        }
        inspect(_0x137aae, _0x1fa52b) {
          return _0x160d53.workspace.getConfiguration(_0x137aae).inspect(_0x1fa52b);
        }
        getConfiguration(_0x55a779, _0x46a550) {
          return _0x160d53.workspace.getConfiguration(_0x55a779, _0x46a550);
        }
        async updateSettingAtExistingDocumentScope(_0x29c455, _0x4c676e, _0x1a940e, _0x14b9b1) {
          const _0x1029bd = _0x29c455.uri;
          const _0x2fef3c = _0x29c455.languageId;
          if (!_0x1029bd || !_0x2fef3c) {
            return;
          }
          const _0x908c7a = this.getConfiguration(_0x4c676e, {
            uri: _0x1029bd,
            languageId: _0x2fef3c
          });
          const _0x3f7468 = _0x908c7a.inspect(_0x1a940e);
          let _0x1165eb;
          let _0x17c458;
          if (_0x3f7468 !== undefined) {
            if (_0x3f7468.workspaceFolderValue !== undefined) {
              _0x1165eb = _0x160d53.ConfigurationTarget.WorkspaceFolder;
              _0x17c458 = _0x3f7468.workspaceFolderValue;
            } else {
              if (_0x3f7468.workspaceValue !== undefined) {
                _0x1165eb = _0x160d53.ConfigurationTarget.Workspace;
                _0x17c458 = _0x3f7468.workspaceValue;
              } else {
                if (_0x3f7468.globalValue !== undefined) {
                  _0x1165eb = _0x160d53.ConfigurationTarget.Global;
                  _0x17c458 = _0x3f7468.globalValue;
                }
              }
            }
            if (_0x17c458 && _0x17c458 === _0x14b9b1) {
              return;
            }
            try {
              await _0x908c7a.update(_0x1a940e, _0x14b9b1, _0x1165eb);
            } catch (_0x42cd7f) {
              const _0x59e2de = _0x575124.ClientLoc.updateSettingsErrorMsgFormatted().format(_0x4c676e, _0x1a940e);
              console.log(_0x59e2de);
              _0x160d53.window.showErrorMessage(`${_0x59e2de}  ${_0x42cd7f}`);
            }
          }
        }
      }
      exports.AppConfigurationImpl = _0x4277dc;
    },
    75510: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BrowserServiceImpl = undefined;
      exports.launch = _0x3cb92b;
      const _0x5af657 = require(91398);
      function _0x3cb92b(_0x3b7d2a) {
        _0x5af657.env.openExternal(_0x5af657.Uri.parse(_0x3b7d2a));
      }
      class _0x37c3e3 {
        launch(_0x445d25) {
          _0x3cb92b(_0x445d25);
        }
      }
      exports.BrowserServiceImpl = _0x37c3e3;
    },
    66016: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CommandManagerImpl = exports.EditorCommand = undefined;
      const _0x52e1a2 = require(91398);
      var _0x178843;
      (function (_0x13342f) {
        _0x13342f.ReloadWindow = 'workbench.action.reloadWindow';
        _0x13342f.InstallExtension = 'workbench.extensions.installExtension';
        _0x13342f.TriggerParameterHints = 'editor.action.triggerParameterHints';
      })(_0x178843 || (exports.EditorCommand = _0x178843 = {}));
      class _0x3184e2 {
        executeCommand(_0x3759b6, ..._0x5405dd) {
          return _0x52e1a2.commands.executeCommand(_0x3759b6, ..._0x5405dd);
        }
        registerCommand(_0x1e9d3a, _0x2626bd, _0x3d0f00) {
          return _0x52e1a2.commands.registerCommand(_0x1e9d3a, _0x2626bd, _0x3d0f00);
        }
      }
      exports.CommandManagerImpl = _0x3184e2;
    },
    64411: (module, exports, require) => {
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TargetPopulation = exports.expMementoKey = exports.ExperimentServiceImpl = undefined;
      const _0x3eea60 = require(41566);
      const _0x652688 = require(99504);
      const _0x5f0528 = require(14906);
      const _0x385811 = require(63454);
      class _0x33e1f9 {
        constructor(_0x57c6b9, _0x6c5c4f, _0x3e43a7, _0xfe2a68) {
          this._config = _0x57c6b9;
          this._extensionService = _0x6c5c4f;
          this._telemetryService = _0x3e43a7;
          this._persistentService = _0xfe2a68;
          this._optInto = [];
          this._optOutFrom = [];
          this._experimentState = this._persistentService.createGlobalPersistentState(exports.expMementoKey, {
            features: []
          });
          this._enabled = false;
          const _0x4f96c1 = this._extensionService.getPythonExtension();
          if (!_0x4f96c1) {
            return;
          }
          const _0x5910af = this._config.getConfiguration(_0x5f0528.pythonName);
          const _0x15499a = _0x5910af.get('experiments.optInto') || [];
          const _0x24812b = _0x5910af.get('experiments.optOutFrom') || [];
          this._optInto = _0x15499a.filter(_0x191c96 => !_0x191c96.endsWith('control'));
          this._optOutFrom = _0x24812b.filter(_0x50ab57 => !_0x50ab57.endsWith('control'));
          if (!this._optOutFrom.includes('All') && _0x5910af.get('experiments.enabled') !== false) {
            this._enabled = true;
          }
          if (!this._enabled) {
            return;
          }
          this._experimentationService = _0x3eea60.getExperimentationService(_0x5f0528.pythonExtensionId, _0x4f96c1.packageJSON.version, _0x652688.IS_RELEASE ? _0x282c8f.Public : _0x282c8f.Insiders, new _0x2757a8(this._telemetryService), this._experimentState.rawStorage);
        }
        async activate() {
          const _0x2c0a40 = this._extensionService.getPythonExtension();
          if (!_0x2c0a40) {
            return;
          }
          if (this._experimentationService) {
            const _0x56f84b = Date.now();
            await this._experimentationService.initializePromise;
            if (this._experimentState.value.features.length === 0) {
              await this._experimentationService.initialFetch;
              this._telemetryService.sendTelemetryEvent(_0x5f0528.EventName.PYTHON_EXPERIMENTS_INIT_PERFORMANCE, Date.now() - _0x56f84b);
            }
            this._logExperiments();
          }
          this._sendOptInOptOutTelemetry(_0x2c0a40.packageJSON);
        }
        inExperiment(_0x20c976) {
          if (!this._experimentationService) {
            return false;
          }
          if (this._optOutFrom.includes('All') || this._optOutFrom.includes(_0x20c976)) {
            return false;
          }
          if (this._optInto.includes('All') || this._optInto.includes(_0x20c976)) {
            this._experimentationService.getTreatmentVariable(_0x335c6c, _0x20c976);
            return true;
          }
          const _0x2f20dc = this._experimentationService.getTreatmentVariable(_0x335c6c, _0x20c976);
          return _0x2f20dc === true;
        }
        getExperimentValue(_0xaaddf8) {
          if (!this._experimentationService || this._optOutFrom.includes('All') || this._optOutFrom.includes(_0xaaddf8)) {
            return undefined;
          }
          return this._experimentationService.getTreatmentVariable(_0x335c6c, _0xaaddf8);
        }
        _sendOptInOptOutTelemetry(_0x2fd524) {
          const _0x459333 = this._readEnumValues('python.experiments.optInto', _0x2fd524);
          const _0x433b50 = this._readEnumValues('python.experiments.optOutFrom', _0x2fd524);
          const _0x6e20b9 = this._optInto.filter(_0x9455e9 => _0x459333.includes(_0x9455e9));
          const _0x477ccd = this._optOutFrom.filter(_0x32088f => _0x433b50.includes(_0x32088f));
          this._telemetryService.sendTelemetryEvent(_0x5f0528.EventName.PYTHON_EXPERIMENTS_OPT_IN_OPT_OUT_SETTINGS, undefined, {
            optedInto: _0x6e20b9,
            optedOutFrom: _0x477ccd
          });
        }
        _readEnumValues(_0x1a5c2e, _0x123045) {
          var _0xfe2a8f;
          const _0x37ec27 = _0x123045.contributes.configuration.properties[_0x1a5c2e];
          if (_0x37ec27) {
            if ((_0xfe2a8f = _0x37ec27.items.enum) !== null && _0xfe2a8f !== undefined) {
              return _0xfe2a8f;
            } else {
              return [];
            }
          }
          return [];
        }
        _logExperiments() {
          const _0x26df3d = this._config.getConfiguration('telemetry');
          let _0x211691 = false;
          if (_0x26df3d && _0x26df3d.get('enableTelemetry') === false) {
            _0x385811.traceLog('Telemetry is disabled');
            _0x211691 = true;
          }
          if (_0x26df3d && _0x26df3d.get('telemetryLevel') === 'off') {
            _0x385811.traceLog('Telemetry level is off');
            _0x211691 = true;
          }
          if (_0x211691) {
            _0x385811.traceLog('Experiments are disabled, only manually opted experiments are active.');
          }
          if (this._optOutFrom.includes('All')) {
            _0x385811.traceLog('Experiment \'All\' is inactive');
            return;
          }
          if (this._optInto.includes('All')) {
            _0x385811.traceLog('Experiment \'All\' is active');
            return;
          }
          this._optOutFrom.filter(_0x4841b0 => _0x4841b0 !== 'All' && _0x4841b0.toLowerCase().startsWith(_0x5f0528.pythonName)).forEach(_0x22e3bc => _0x385811.traceLog(`Experiment '${_0x22e3bc}' is inactive`));
          this._optInto.filter(_0x5dee6a => _0x5dee6a !== 'All' && _0x5dee6a.toLowerCase().startsWith(_0x5f0528.pythonName)).forEach(_0x2437f2 => _0x385811.traceLog(`Experiment '${_0x2437f2}' is active`));
          if (!_0x211691) {
            this._experimentState.value.features.forEach(_0x2c0f71 => {
              if (_0x2c0f71.toLowerCase().startsWith('python') && !this._optOutFrom.includes(_0x2c0f71) && !this._optInto.includes(_0x2c0f71)) {
                _0x385811.traceLog(`Experiment '${_0x2c0f71}' is active`);
              }
            });
          }
        }
      }
      exports.ExperimentServiceImpl = _0x33e1f9;
      class _0x2757a8 {
        constructor(_0xe7a94f) {
          this._telemetryService = _0xe7a94f;
        }
        setSharedProperty(_0x562e9e, _0x28a1d0) {
          this._telemetryService.setSharedProperty(_0x562e9e, _0x28a1d0);
        }
        postEvent(_0x588b78, _0x1bd8db) {
          const _0x26ea23 = {};
          _0x1bd8db.forEach((_0x372516, _0x563b96) => {
            _0x26ea23[_0x563b96] = _0x372516;
          });
          this._telemetryService.sendTelemetryEvent(_0x588b78, undefined, _0x26ea23);
        }
      }
      exports.expMementoKey = 'VSCode.ABExp.FeatureData';
      const _0x335c6c = 'vscode';
      var _0x282c8f;
      (function (_0x2b517f) {
        _0x2b517f.Insiders = 'python-insider';
        _0x2b517f.Public = 'python-public';
      })(_0x282c8f || (exports.TargetPopulation = _0x282c8f = {}));
    },
    42323: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ExtensionServiceImpl = undefined;
      exports.getActivatedExtension = _0x4e9633;
      const _0x18c897 = __importStar(require(91398));
      const _0x1711c4 = require(14906);
      class _0x4df8c0 {
        constructor() {}
        get onDidChange() {
          return _0x18c897.extensions.onDidChange;
        }
        getPythonExtension() {
          return this.getExtension(_0x1711c4.pythonExtensionId);
        }
        getExtension(_0x498454) {
          return _0x18c897.extensions.getExtension(_0x498454);
        }
      }
      exports.ExtensionServiceImpl = _0x4df8c0;
      async function _0x4e9633(_0x37346e) {
        if (!_0x37346e) {
          return undefined;
        }
        if (!_0x37346e.isActive) {
          await _0x37346e.activate();
        }
        return _0x37346e;
      }
    },
    19329: function (module, exports, require) {
      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PersistentServiceImpl = undefined;
      const _0x2b19a7 = __importStar(require(39023));
      const _0x3af11b = require(63454);
      class _0xe9425f {
        constructor(_0x1e77dd) {
          this._context = _0x1e77dd;
        }
        createGlobalPersistentState(_0x69cec4, _0x53ea23) {
          return new _0x5e1241(this._context.globalState, _0x69cec4, _0x53ea23);
        }
        createWorkspacePersistentState(_0x459d88, _0x1b199b) {
          return new _0x5e1241(this._context.workspaceState, _0x459d88, _0x1b199b);
        }
      }
      exports.PersistentServiceImpl = _0xe9425f;
      class _0x5e1241 {
        constructor(_0x4f8365, _0x56a2be, _0xe229d4) {
          this.rawStorage = _0x4f8365;
          this._key = _0x56a2be;
          this._defaultValue = _0xe229d4;
        }
        get value() {
          return this.rawStorage.get(this._key, this._defaultValue);
        }
        async updateValue(_0x350247) {
          try {
            await this.rawStorage.update(this._key, _0x350247);
          } catch (_0x292520) {
            _0x3af11b.traceError(_0x2b19a7.format('Error while updating storage for key:', this._key, _0x292520));
          }
        }
      }
    },
    91398: module => {
      module.exports = require('vscode');
    },
    35317: module => {
      module.exports = require('child_process');
    },
    76982: module => {
      module.exports = require('crypto');
    },
    79896: module => {
      module.exports = require('fs');
    },
    91943: module => {
      module.exports = require('fs/promises');
    },
    65692: module => {
      module.exports = require('https');
    },
    69278: module => {
      module.exports = require('net');
    },
    70857: module => {
      module.exports = require('os');
    },
    16928: module => {
      module.exports = require('path');
    },
    87016: module => {
      module.exports = require('url');
    },
    39023: module => {
      module.exports = require('util');
    },
    11493: module => {
      module.exports = require('v8');
    },
    28167: module => {
      module.exports = require('worker_threads');
    },
    23203: module => {
      module.exports = {
        version: '2024.12.1',
        pyrightCommit: 'ce1325fc36ed42c4f30e0967e5e47c4bb82c88b2',
        pyrightVersion: '1.1.389'
      };
    },
    18721: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Přidat {importText}',
            searchImport: 'Hledat další shody importu'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Změnit pravopis na „{word}“'
          },
          ExtraPath: {
            addExtraPath: 'Přidat „{name}“ do extraPaths'
          },
          Extract: {
            method: 'Extrahovat metodu',
            variable: 'Extrahovat proměnnou'
          },
          FixAll: {
            runFixAll: 'Spustit pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementovat všechny zděděné abstraktní třídy'
          },
          MoveSymbol: {
            commandTitle: 'Přesunout symbol',
            moveSymbolsTo: 'Přesunout symbol do...',
            moveSymbolsToNewFile: 'Přesunout symbol do nového souboru'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Odstranit všechny nepoužívané importy',
            removeUnusedImport: 'Odebrat nepoužitý import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Převést všechny formáty importu',
            convertAllToAbsolutePath: 'Převést všechny importy na absolutní cestu',
            convertAllToRelativePath: 'Převést všechny importy na relativní cestu',
            convertToAbsolutePath: 'Převést na absolutní cestu',
            convertToRelativePath: 'Převést na relativní cestu'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Další informace o řešení importů',
            selectInterpreterTitle: 'Vyberte jiného interpreta',
            selectKernelTitle: 'Vyberte jiné jádro (kernel) Jupyter'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Data protokolování se uložila do umístění [{filePath}]({uri}). Další podrobnosti najdete v podokně výstupu Python Language Server.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Data profilace se uložila do umístění [{filePath}]({uri}). Další podrobnosti najdete v podokně výstupu „Python Language Server.“'
          },
          gotoOutputCommand: 'Zobrazit výstup'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Generovat Docstring pomocí Copilotu',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementovat všechny zděděné abstraktní třídy pomocí Copilotu'
        },
        Diagnostic: {
          importResolveRedirect: 'Import {importName} se v prostředí {venv} nepovedlo najít.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generovat řetězec Docstring',
          description: 'Popis',
          docstringForName: 'Docstring pro {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Výchozí prostředí Pythonu',
          globalEnvironmentName: 'globální',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} soubory/souborů a {cellCount} buňky/buněk k analýze',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} soubory/souborů a 1 buňka k analýze',
          singularFileAndPluralCellsToAnalyze: '1 soubor a {cellCount} buňky/buněk k analýze',
          singularFileAndSingularCellToAnalyze: '1 soubor a 1 buňka k analýze',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Nahlásit problém',
          title: 'Zjistili jsme problém s výkonem rozšíření Pylance. Chcete nahlásit problém pomocí příkazu Pylance: Nahlásit problém?'
        },
        Pytest: {
          addTypeAnnotation: 'Přidat poznámku typu k názvu {name}',
          addTypeAnnotations: 'Přidat poznámky typu pro všechny odkazy fixture v tomto souboru',
          fixtureNotFound: '„{fixture}“ není známý testovací přípravek (fixture). Testovací metody by měly jako parametry přijímat pouze názvy testovacích přípravků (fixture) nebo parametrizace (parametrization).'
        },
        Refactoring: {
          moveFile: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileAbsentSymbol: 'Nepovedlo se najít symbol, který se má přesunout.',
          moveFileDescription: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileExtensionMismatch: 'Pokud chcete přesunout symbol, musí mít zdrojový soubor ({src}) a cílový soubor ({dest}) stejnou příponu souboru.',
          moveFileImportableOnly: 'Přesouvat se můžou jenom objekty, které se dají importovat z jiných modulů, jako jsou třídy nebo funkce.',
          moveFileInsertLocation: 'Nelze najít umístění pro vložení symbolu. Symbol se stejným názvem už může v {name} existovat.',
          moveFileLabel: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileMissingInfo: 'Nelze najít informace o souboru pro {name}.',
          moveFileMultipleDeclarations: 'Tento symbol nelze přesunout, protože je deklarován vícekrát.',
          moveFileNotUserFile: 'Tento symbol nelze přesunout. Podporují se pouze symboly v souboru projektu nebo uživatele.',
          moveFilePrivateSymbol: '{name} se nedá přesunout, protože se jedná o privátní symbol.',
          moveFileSameFile: 'Symbol nelze přesunout do stejného souboru, ve kterém se právě nachází.',
          moveFileSimpleAssignmentsOnly: 'Tento výraz nejde přesunout. Podporují se pouze jednoduchá přiřazení, například proměnná, které se přiřazuje hodnota.',
          moveFileSymbolNotFound: 'Na pozici {position} nelze najít symbol.',
          moveFileUnsupportedSymbol: 'Tento symbol nelze přesunout. Podporují se pouze proměnné, funkce a třídy na úrovni modulu.'
        }
      };
    },
    52420: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" hinzufügen',
            searchImport: 'Nach zusätzlichen Importübereinstimmungen suchen'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Schreibweise in "{word}" ändern'
          },
          ExtraPath: {
            addExtraPath: '"{name}" zu extraPaths hinzufügen'
          },
          Extract: {
            method: 'Methode extrahieren',
            variable: 'Variable extrahieren'
          },
          FixAll: {
            runFixAll: 'Pylance "Alle korrigieren" ausführen'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Alle geerbten abstrakten Klassen implementieren'
          },
          MoveSymbol: {
            commandTitle: 'Symbol verschieben',
            moveSymbolsTo: 'Symbol verschieben nach...',
            moveSymbolsToNewFile: 'Symbol in neue Datei verschieben'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Alle nicht verwendeten Importe entfernen',
            removeUnusedImport: 'Nicht verwendete Importe entfernen'
          },
          ToggleImportPath: {
            convertAllFormat: 'Alle Importformate konvertieren',
            convertAllToAbsolutePath: 'Alle Importe in absoluten Pfad konvertieren',
            convertAllToRelativePath: 'Alle Importe in relativen Pfad konvertieren',
            convertToAbsolutePath: 'In absoluten Pfad konvertieren',
            convertToRelativePath: 'In relativen Pfad konvertieren'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Weitere Informationen zum Auflösen von Importen',
            selectInterpreterTitle: 'Anderen Interpreter auswählen',
            selectKernelTitle: 'Anderen Jupyter-kernel auswählen'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Protokollierungsdaten wurden unter [{filePath}]({uri}) gespeichert. Weitere Informationen finden Sie im Ausgabebereich „Python-Sprachserver“.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profilerstellungsdaten wurden unter [{filePath}]({uri}) gespeichert. Weitere Informationen finden Sie im Ausgabebereich „Python-Sprachserver“.'
          },
          gotoOutputCommand: 'Ausgabe anzeigen'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Docstring mit Copilot generieren',
          implementAllInheritedAbstractClasseswithCopilot: 'Alle geerbten abstrakten Klassen mit Copilot implementieren'
        },
        Diagnostic: {
          importResolveRedirect: 'Der Import "{importName}" wurde in der Umgebung "{venv}" nicht gefunden.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring generieren',
          description: 'Beschreibung',
          docstringForName: 'Docstring für {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Python-Standardumgebung',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} Dateien und {cellCount} Zellen zu analysieren',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} Dateien und 1 Zeile zu analysieren',
          singularFileAndPluralCellsToAnalyze: '1 Datei und {cellCount} Zellen zu analysieren',
          singularFileAndSingularCellToAnalyze: '1 Datei und 1 Zelle zu analysieren',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Problem melden',
          title: 'Wir haben ein Leistungsproblem mit Pylance erkannt. Möchten Sie ein Problem mithilfe des Befehls „Pylance: Problem melden“ melden?'
        },
        Pytest: {
          addTypeAnnotation: 'Typanmerkung zu {name} hinzufügen',
          addTypeAnnotations: 'Typanmerkungen für alle fixture Verweise in dieser Datei hinzufügen',
          fixtureNotFound: '\'{fixture}\' ist keine bekannte Test-fixture. Testmethoden dürfen nur fixture- oder parametrization Namen als Parameter empfangen.'
        },
        Refactoring: {
          moveFile: 'Möchten Sie alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileAbsentSymbol: 'Es wurde kein zu verschiebendes Symbol gefunden.',
          moveFileDescription: 'Alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileExtensionMismatch: 'Um ein Symbol zu verschieben, müssen die Quelldatei („{src}“) und die Zieldatei („{dest}“) dieselbe Dateierweiterung aufweisen.',
          moveFileImportableOnly: 'Nur Objekte, die aus anderen Modulen importiert werden können, z. B. Klassen oder Funktionen, dürfen verschoben werden.',
          moveFileInsertLocation: 'Es wurde keine Position zum Einfügen des Symbols gefunden. In „{name}“ ist möglicherweise bereits ein Symbol mit diesem Namen vorhanden.',
          moveFileLabel: 'Alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileMissingInfo: 'Es wurden keine Dateiinformationen für „{name}“ gefunden.',
          moveFileMultipleDeclarations: 'Dieses Symbol kann nicht verschoben werden, da es mehrmals deklariert ist.',
          moveFileNotUserFile: 'Dieses Symbol kann nicht verschoben werden. Nur Symbole in einer Projekt- oder Benutzerdatei werden unterstützt.',
          moveFilePrivateSymbol: '„{name}“ kann nicht verschoben werden, da es sich um ein privates Symbol handelt.',
          moveFileSameFile: 'Ein Symbol kann nicht in dieselbe Datei verschoben werden, in der es sich aktuell befindet.',
          moveFileSimpleAssignmentsOnly: 'Dieser Ausdruck kann nicht verschoben werden. Es werden nur einfache Zuweisungen unterstützt, z. B. eine Variable, der ein Wert zugewiesen wird.',
          moveFileSymbolNotFound: 'An Position „{position}“ wurde kein Symbol gefunden.',
          moveFileUnsupportedSymbol: 'Dieses Symbol kann nicht verschoben werden. Nur Variablen, Funktionen und Klassen auf Modulebene werden unterstützt.'
        }
      };
    },
    76463: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Add "{importText}"',
            searchImport: 'Search for additional import matches'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Change spelling to "{word}"'
          },
          ExtraPath: {
            addExtraPath: {
              message: 'Add "{name}" to extraPaths',
              comment: '{Locked=\'extraPaths\'}'
            }
          },
          Extract: {
            method: 'Extract method',
            variable: 'Extract variable'
          },
          FixAll: {
            runFixAll: 'Run pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implement all inherited abstract classes'
          },
          MoveSymbol: {
            commandTitle: 'Move symbol',
            moveSymbolsTo: {
              message: 'Move symbol to...',
              comment: '{StrEnds=\'...\'}'
            },
            moveSymbolsToNewFile: 'Move symbol to new file'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Remove all unused imports',
            removeUnusedImport: 'Remove unused import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convert all import formats',
            convertAllToAbsolutePath: 'Convert all imports to absolute path',
            convertAllToRelativePath: 'Convert all imports to relative path',
            convertToAbsolutePath: 'Convert to absolute path',
            convertToRelativePath: 'Convert to relative path'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Learn more about resolving imports',
            selectInterpreterTitle: 'Select a different interpreter',
            selectKernelTitle: {
              message: 'Select a different Jupyter kernel',
              comment: '{Locked=\'Jupyter\',\'kernel\'}'
            }
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Logging data has been saved at [{filePath}]({uri}). See `Python Language Server` output pane for more detail.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profiling data has been saved at [{filePath}]({uri}). See `Python Language Server` output pane for more detail.'
          },
          gotoOutputCommand: 'Show Output'
        },
        Copilot: {
          implementAllInheritedAbstractClasseswithCopilot: {
            message: 'Implement all inherited abstract classes with Copilot',
            comment: '{Locked=\'Copilot\'}'
          },
          GenerateDocstringWithCopilot: {
            message: 'Generate Docstring with Copilot',
            comment: '{Locked=\'Copilot\', \'Docstring\'}'
          }
        },
        Diagnostic: {
          importResolveRedirect: 'Import "{importName}" could not be found in the "{venv}" environment.'
        },
        DocstringTemplate: {
          description: 'Description',
          docstringForName: {
            message: 'Docstring for {name}',
            comment: '{Locked=\'Docstring\'}'
          },
          GenerateDocstring: {
            message: 'Generate Docstring',
            comment: '{Locked=\'Docstring\'}'
          }
        },
        Messages: {
          defaultPythonEnvironmentName: {
            message: 'Default Python Environment',
            comment: '{Locked=\'Python\'}'
          },
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} files and {cellCount} cells to analyze',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} files and 1 cell to analyze',
          singularFileAndPluralCellsToAnalyze: '1 file and {cellCount} cells to analyze',
          singularFileAndSingularCellToAnalyze: '1 file and 1 cell to analyze',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Report issue',
          title: {
            message: 'We have detected a performance issue with Pylance. Would you like to file an issue using the `Pylance: Report Issue` command?',
            comment: '{Locked=\'Pylance\'}'
          }
        },
        Pytest: {
          addTypeAnnotation: 'Add type annotation to {name}',
          addTypeAnnotations: {
            message: 'Add type annotations for all fixture references in this file',
            comment: '{Locked=\'fixture\'}'
          },
          fixtureNotFound: {
            message: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.',
            comment: '{Locked=\'fixture\',\'parametrization\'}'
          }
        },
        Refactoring: {
          moveFile: 'Do you want to update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileAbsentSymbol: 'Cannot find a symbol to move.',
          moveFileDescription: 'Update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileExtensionMismatch: 'To move a symbol, the source file ("{src}") and destination file ("{dest}") must have the same file extension.',
          moveFileImportableOnly: 'Only objects that can be imported from other modules, such as classes or functions, are allowed to be moved.',
          moveFileInsertLocation: 'Cannot find a location to insert the symbol. A symbol with the same name might already exist in "{name}".',
          moveFileLabel: 'Update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileMissingInfo: 'Cannot find file information for "{name}".',
          moveFileMultipleDeclarations: 'This symbol cannot be moved because it is declared multiple times.',
          moveFileNotUserFile: 'This symbol cannot be moved. Only symbols in a project or user file are supported.',
          moveFilePrivateSymbol: '"{name}" cannot be moved because it is a private symbol.',
          moveFileSameFile: 'A symbol cannot be moved to the same file where it is currently located.',
          moveFileSimpleAssignmentsOnly: 'This expression can\'t be moved. Only simple assignments, such as a variable being assigned a value, are supported.',
          moveFileSymbolNotFound: 'Cannot find a symbol at position "{position}".',
          moveFileUnsupportedSymbol: 'This symbol cannot be moved. Only variables, functions, and classes at the module level are supported.'
        }
      };
    },
    32535: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Agregar "{importText}"',
            searchImport: 'Buscar coincidencias de importación adicionales'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Cambiar la ortografía a "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Agregar "{name}" a extraPaths'
          },
          Extract: {
            method: 'Extraer método',
            variable: 'Extraer variable'
          },
          FixAll: {
            runFixAll: 'Ejecutar pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementar todas las clases abstractas heredadas'
          },
          MoveSymbol: {
            commandTitle: 'Mover símbolo',
            moveSymbolsTo: 'Mover símbolo a...',
            moveSymbolsToNewFile: 'Mover el símbolo a un nuevo archivo'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Eliminar todas las importaciones no utilizadas',
            removeUnusedImport: 'Eliminar la importación no utilizada'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convierte todos los formatos de importación',
            convertAllToAbsolutePath: 'Convertir todas las importaciones en rutas absolutas',
            convertAllToRelativePath: 'Convertir todas las importaciones en rutas relativas',
            convertToAbsolutePath: 'Convertir a ruta absoluta',
            convertToRelativePath: 'Convertir en ruta de acceso relativa'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Más información sobre cómo resolver importaciones',
            selectInterpreterTitle: 'Seleccionar otro intérprete',
            selectKernelTitle: 'Seleccionar otro kernel de Jupyter'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Los datos de registro se han guardado en [{filePath}]({uri}). Consulte el panel de salida `Servidor de lenguaje de Python` para obtener más detalles.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Los datos de generación de perfiles se han guardado en [{filePath}]({uri}). Consulte el panel de salida "Servidor de lenguaje de Python" para obtener más detalles.'
          },
          gotoOutputCommand: 'Mostrar salida'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Generar Docstring con Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementación de todas las clases abstractas heredadas con Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'No se encontraron "{importName}" de importación en el entorno de "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generar Docstring',
          description: 'Descripción',
          docstringForName: 'Docstring para {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Entorno de Python predeterminado',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} archivos y {cellCount} celdas para analizar',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} archivos y 1 celda para analizar',
          singularFileAndPluralCellsToAnalyze: '1 archivo y {cellCount} celdas para analizar',
          singularFileAndSingularCellToAnalyze: '1 archivo y 1 celda para analizar',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Notificar el problema',
          title: 'Hemos detectado un problema de rendimiento con Pylance. ¿Desea notificar un problema mediante el comando `Pylance: Report Issue`?'
        },
        Pytest: {
          addTypeAnnotation: 'Agregar anotación de tipo a {name}',
          addTypeAnnotations: 'Agregar anotaciones de tipo para todas las referencias de fixture en este archivo',
          fixtureNotFound: '\'{fixture}\' no es un fixture de prueba conocido. Los métodos de prueba solo deben recibir nombres de fixture o parametrization como parámetros.'
        },
        Refactoring: {
          moveFile: '¿Desea actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileAbsentSymbol: 'No se encuentra un símbolo para mover.',
          moveFileDescription: '¿Actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileExtensionMismatch: 'Para mover un símbolo, el archivo de origen ("{src}") y el archivo de destino ("{dest}") deben tener la misma extensión de archivo.',
          moveFileImportableOnly: 'Solo se pueden mover los objetos que se pueden importar de otros módulos, como clases o funciones.',
          moveFileInsertLocation: 'No se encuentra una ubicación para insertar el símbolo. Es posible que ya exista un símbolo con el mismo nombre en "{name}".',
          moveFileLabel: '¿Actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileMissingInfo: 'No se encuentra información de archivo para "{name}".',
          moveFileMultipleDeclarations: 'Este símbolo no se puede mover porque está declarado varias veces.',
          moveFileNotUserFile: 'No se puede mover este símbolo. Solo se admiten símbolos en un archivo de proyecto o de usuario.',
          moveFilePrivateSymbol: '"{name}" no se puede mover porque es un símbolo privado.',
          moveFileSameFile: 'No se puede mover un símbolo al mismo archivo en el que se encuentra actualmente.',
          moveFileSimpleAssignmentsOnly: 'Esta expresión no se puede mover. Solo se admiten asignaciones simples, como una variable a la que se asigna un valor.',
          moveFileSymbolNotFound: 'No se encuentra un símbolo en la posición "{position}".',
          moveFileUnsupportedSymbol: 'No se puede mover este símbolo. Solo se admiten variables, funciones y clases en el nivel de módulo.'
        }
      };
    },
    47011: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Ajouter « {importText} »',
            searchImport: 'Rechercher d’autres correspondances d’importation'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Changer l’orthographe en « {word} »'
          },
          ExtraPath: {
            addExtraPath: 'Ajouter "{name}" à extraPaths'
          },
          Extract: {
            method: 'Méthode d\'extraction',
            variable: 'Extraire la variable'
          },
          FixAll: {
            runFixAll: 'Exécutez pylance tout réparer'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implémenter toutes les classes abstraites héritées'
          },
          MoveSymbol: {
            commandTitle: 'Déplacer le symbole',
            moveSymbolsTo: 'Déplacer le symbole vers ...',
            moveSymbolsToNewFile: 'Déplacer le symbole vers un nouveau fichier'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Supprimer toutes les importations inutilisées',
            removeUnusedImport: 'Supprimer l’importation inutilisée'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convertir tous les formats d’importation',
            convertAllToAbsolutePath: 'Convertir toutes les importations en chemin absolu',
            convertAllToRelativePath: 'Convertir toutes les importations en chemin d’accès relatif',
            convertToAbsolutePath: 'Convertir en chemin absolu',
            convertToRelativePath: 'Convertir en chemin relatif'
          },
          UnresolvedImports: {
            learnMoreTitle: 'En savoir plus sur la résolution des importations',
            selectInterpreterTitle: 'Sélectionnez un autre interprète',
            selectKernelTitle: 'Sélectionnez un autre Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Les données de journalisation ont été enregistrées sur [{filePath}]({uri}). Pour obtenir plus d’informations, consultez le volet de sortie `Serveur de langage Python`.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Les données de profilage ont été enregistrées sur [{filePath}]({uri}). Pour plus d’informations, consultez le volet de sortie « Serveur de langage Python ».'
          },
          gotoOutputCommand: 'Afficher la sortie'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Générez une Docstring avec Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implémenter toutes les classes abstraites héritées avec Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'L\'importation "{importName}" est introuvable dans l\'environnement "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Générer Docstring',
          description: 'Description',
          docstringForName: 'Docstring pour {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Environnement Python par défaut',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} fichiers et {cellCount} cellules à analyser',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} fichiers et 1 cellule à analyser',
          singularFileAndPluralCellsToAnalyze: '1 fichier et {cellCount} cellules à analyser',
          singularFileAndSingularCellToAnalyze: '1 fichier et 1 cellule à analyser',
          windowsStoreEnvironmentName: 'magasin microsoft'
        },
        PerformanceTracking: {
          button: 'Signaler un problème',
          title: 'Nous avons détecté un problème de performances avec Pylance. Voulez-vous signaler un problème en utilisant la commande `Pylance : signaler un problème` ?'
        },
        Pytest: {
          addTypeAnnotation: 'Ajouter une annotation de type à {name}',
          addTypeAnnotations: 'Ajouter des annotations de type pour toutes les références de fixture dans ce fichier',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Voulez-vous mettre à jour toutes les références d’importation pour « {oldModuleName} » en « {newModuleName} » ?',
          moveFileAbsentSymbol: 'Symbole à déplacer introuvable.',
          moveFileDescription: 'Mettre à jour toutes les références d’importation pour « {oldModuleName} » sur « {newModuleName} » ?',
          moveFileExtensionMismatch: 'Pour déplacer un symbole, le fichier source (« {src} ») et le fichier de destination (« {dest} ») doivent présenter la même extension de fichier.',
          moveFileImportableOnly: 'Seuls les objets pouvant être importés à partir d’autres modules, tels que des classes, peuvent être déplacés.',
          moveFileInsertLocation: 'Impossible de trouver un emplacement où insérer le symbole. Un symbole portant le même nom existe peut-être déjà dans « {name} ».',
          moveFileLabel: 'Mettre à jour toutes les références d’importation pour « {oldModuleName} » sur « {newModuleName} » ?',
          moveFileMissingInfo: 'Impossible de trouver les informations de fichier pour « {name} ».',
          moveFileMultipleDeclarations: 'Impossible de déplacer ce symbole, car il est déclaré plusieurs fois.',
          moveFileNotUserFile: 'Impossible de déplacer ce symbole. Seuls les symboles d’un projet ou d’un fichier utilisateur sont pris en charge.',
          moveFilePrivateSymbol: '« {name} » ne peut pas être déplacé, car il s’agit d’un symbole privé.',
          moveFileSameFile: 'Un symbole ne peut pas être déplacé vers le même fichier dans lequel il est actuellement.',
          moveFileSimpleAssignmentsOnly: 'Impossible de déplacer cette expression. Seules les affectations simples, telles qu’une variable à laquelle une valeur est attribuée, sont prises en charge.',
          moveFileSymbolNotFound: 'Symbole introuvable à la position « {position} ».',
          moveFileUnsupportedSymbol: 'Impossible de déplacer ce symbole. Seules les variables, fonctions et classes au niveau du module sont prises en charge.'
        }
      };
    },
    94814: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Aggiungi "{importText}"',
            searchImport: 'Cercare corrispondenze di importazione aggiuntive'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Cambiare ortografia in "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Aggiungi "{name}" a extraPaths'
          },
          Extract: {
            method: 'Estrai il metodo',
            variable: 'Estrarre variabile'
          },
          FixAll: {
            runFixAll: 'Esegui correggi tutto di pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementare tutte le classi astratte ereditate'
          },
          MoveSymbol: {
            commandTitle: 'Spostare simbolo',
            moveSymbolsTo: 'Sposta simbolo in...',
            moveSymbolsToNewFile: 'Spostare il simbolo in un nuovo file'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Rimuovere tutte le importazioni inutilizzate',
            removeUnusedImport: 'Rimuovere importazioni inutilizzate'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convertire tutti i formati di importazione',
            convertAllToAbsolutePath: 'Converte tutte le importazioni in percorso assoluto',
            convertAllToRelativePath: 'Convertire tutte le importazioni in percorso relativo',
            convertToAbsolutePath: 'Convertire in percorso assoluto',
            convertToRelativePath: 'Converti in percorso relativo'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Altre informazioni sulla risoluzione delle importazioni',
            selectInterpreterTitle: 'Selezionare un interprete diverso',
            selectKernelTitle: 'Selezionare un kernel Jupyter diverso'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'I dati di registrazione sono stati salvati in [{filePath}]({uri}). Per altri dettagli, vedere il riquadro di output del server di linguaggio Python.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'I dati di profilatura sono stati salvati in [{filePath}]({uri}). Per altri dettagli, vedere il riquadro di output del server di linguaggio Python.'
          },
          gotoOutputCommand: 'Mostra output'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Genera Docstring con Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementare tutte le classi astratte ereditate con Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Impossibile trovare l’importazione "{importName}" nell\'ambiente "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Genera Docstring',
          description: 'Descrizione',
          docstringForName: 'Docstring per {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Ambiente Python predefinito',
          globalEnvironmentName: 'globale',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} file e {cellCount} celle da analizzare',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} file e 1 cella da analizzare',
          singularFileAndPluralCellsToAnalyze: '1 file e {cellCount} celle da analizzare',
          singularFileAndSingularCellToAnalyze: '1 file e 1 cella da analizzare',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Segnala problema',
          title: 'È stato rilevato un problema di prestazioni per Pylance. Segnalare un problema usando il comando \'Pylance: Report Issue\'?'
        },
        Pytest: {
          addTypeAnnotation: 'Aggiungi l’annotazione di tipo a {name}',
          addTypeAnnotations: 'Aggiungere annotazioni di tipo per tutti i riferimenti alle fixture in questo file',
          fixtureNotFound: '`{fixture}` non è una fixture di test nota. I metodi di test devono ricevere come parametri solo nomi di fixture o di parametrization.'
        },
        Refactoring: {
          moveFile: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileAbsentSymbol: 'Impossibile trovare un simbolo da spostare.',
          moveFileDescription: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileExtensionMismatch: 'Per spostare un simbolo, il file di origine ("{src}") e il file di destinazione ("{dest}") devono avere la stessa estensione di file.',
          moveFileImportableOnly: 'È possibile spostare solo gli oggetti che possono essere importati da altri moduli, ad esempio classi o funzioni.',
          moveFileInsertLocation: 'Impossibile trovare una posizione in cui inserire il simbolo. Un simbolo con lo stesso nome potrebbe già esistere in "{name}".',
          moveFileLabel: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileMissingInfo: 'Impossibile trovare le informazioni sul file per "{name}".',
          moveFileMultipleDeclarations: 'Impossibile spostare questo simbolo perché è dichiarato più volte.',
          moveFileNotUserFile: 'Impossibile spostare questo simbolo. Sono supportati solo i simboli in un progetto o in un file utente.',
          moveFilePrivateSymbol: 'Impossibile spostare "{name}" perché è un simbolo privato.',
          moveFileSameFile: 'Non è possibile spostare un simbolo nello stesso file in cui si trova attualmente.',
          moveFileSimpleAssignmentsOnly: 'Questa espressione non può essere spostata. Sono supportate solo le assegnazioni semplici, ad esempio una variabile a cui viene assegnato un valore.',
          moveFileSymbolNotFound: 'Impossibile trovare un simbolo nella posizione "{position}".',
          moveFileUnsupportedSymbol: 'Impossibile spostare questo simbolo. Sono supportate solo variabili, funzioni e classi a livello di modulo.'
        }
      };
    },
    29150: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" の追加',
            searchImport: '一致するその他のインポートを検索する'
          },
          ChangeSpelling: {
            changeSpellingTo: 'スペルを "{word}" に変更する'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths に "{name}" を追加する'
          },
          Extract: {
            method: 'メソッドを抽出する',
            variable: '変数の抽出'
          },
          FixAll: {
            runFixAll: 'Pylance fix all を実行する'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '継承されたすべての抽象クラスを実装します'
          },
          MoveSymbol: {
            commandTitle: 'シンボルの移動',
            moveSymbolsTo: 'シンボルを以下に移動...',
            moveSymbolsToNewFile: 'シンボルを新しいファイルに移動する'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '未使用のインポートをすべて削除する',
            removeUnusedImport: '未使用のインポートを削除する'
          },
          ToggleImportPath: {
            convertAllFormat: 'すべてのインポート形式を変換する',
            convertAllToAbsolutePath: 'すべてのインポートを絶対パスに変換する',
            convertAllToRelativePath: 'すべてのインポートを相対パスに変換する',
            convertToAbsolutePath: '絶対パスに変換する',
            convertToRelativePath: '相対パスに変換する'
          },
          UnresolvedImports: {
            learnMoreTitle: 'インポートの解決に関する詳細情報',
            selectInterpreterTitle: '別のインタープリターを選択する',
            selectKernelTitle: '別の Jupyter kernel を選択する'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'ログ データは [{filePath}]({uri}) に保存されました。詳細については、\'Python Language Server\' 出力ウィンドウを参照してください。'
          },
          ProfilingCommand: {
            profilingDataSaved: 'プロファイル データは [{filePath}]({uri}) に保存されました。詳細については、\'Python Language Server\' 出力ウィンドウを参照してください。'
          },
          gotoOutputCommand: '出力の表示'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot で Docstring を生成する',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot を使用して継承されたすべての抽象クラスを実装します'
        },
        Diagnostic: {
          importResolveRedirect: 'インポート "{importName}" が "{venv}" 環境に見つかりませんでした。'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring の生成',
          description: '説明',
          docstringForName: '{name} の Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '既定の Python 環境',
          globalEnvironmentName: 'グローバル',
          pluralFilesAndPluralCellsToAnalyze: '分析する {fileCount} 個のファイルと {cellCount} 個のセル',
          pluralFilesAndSingularCellToAnalyze: '分析する {fileCount} 個ファイルと 1 個のセル',
          singularFileAndPluralCellsToAnalyze: '分析する 1 個のファイルと {cellCount} 個のセル',
          singularFileAndSingularCellToAnalyze: '分析する 1 個のファイルと 1 個のセル',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: '問題の報告',
          title: 'Pylance でパフォーマンスの問題が検出されました。`Pylance: Report Issue` コマンドを使用して問題を報告しますか?'
        },
        Pytest: {
          addTypeAnnotation: '型の注釈を {name} に追加する',
          addTypeAnnotations: 'このファイル内のすべての fixture 参照の型注釈を追加します',
          fixtureNotFound: '\'{fixture}\' は既知のテスト fixture ではありません。テスト メソッドは、fixture 名または parametrization 名のみをパラメーターとして受け取る必要があります。'
        },
        Refactoring: {
          moveFile: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileAbsentSymbol: '移動するシンボルが見つかりません。',
          moveFileDescription: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileExtensionMismatch: 'シンボルを移動するには、移動元ファイル ("{src}") と移動先ファイル ("{dest}") のファイル拡張子が同じである必要があります。',
          moveFileImportableOnly: '他のモジュール (クラスまたは関数など) からインポートできるオブジェクトのみを移動できます。',
          moveFileInsertLocation: 'シンボルを挿入する場所が見つかりません。同じ名前のシンボルが既に "{name}" に存在している可能性があります。',
          moveFileLabel: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileMissingInfo: '"{name}" のファイル情報が見つかりません。',
          moveFileMultipleDeclarations: 'このシンボルは複数回宣言されているため、移動できません。',
          moveFileNotUserFile: 'このシンボルは移動できません。プロジェクトまたはユーザー ファイル内のシンボルのみがサポートされています。',
          moveFilePrivateSymbol: '"{name}" はプライベート シンボルであるため、移動できません。',
          moveFileSameFile: 'シンボルは、現在配置されているファイルと同じファイルに移動できません。',
          moveFileSimpleAssignmentsOnly: 'この式は移動できません。値が割り当てられている変数など、単純な代入のみがサポートされています。',
          moveFileSymbolNotFound: '位置 "{position}" にシンボルが見つかりません。',
          moveFileUnsupportedSymbol: 'このシンボルは移動できません。モジュール レベルの変数、関数、クラスのみがサポートされています。'
        }
      };
    },
    14997: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" 추가',
            searchImport: '추가 가져오기 일치 항목 검색'
          },
          ChangeSpelling: {
            changeSpellingTo: '철자를 "{word}"(으)로 변경'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths에 ‘{name}’ 추가'
          },
          Extract: {
            method: '메서드 추출',
            variable: '변수 추출'
          },
          FixAll: {
            runFixAll: '모두 Pylance 수정 실행'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '상속된 추상 클래스 모두 구현'
          },
          MoveSymbol: {
            commandTitle: '기호 이동',
            moveSymbolsTo: '기호를 다음으로 이동...',
            moveSymbolsToNewFile: '기호를 새 파일로 이동'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '사용되지 않는 가져오기 모두 제거',
            removeUnusedImport: '사용되지 않는 가져오기 제거'
          },
          ToggleImportPath: {
            convertAllFormat: '모든 가져오기 형식 변환',
            convertAllToAbsolutePath: '모든 가져오기를 절대 경로로 변환',
            convertAllToRelativePath: '모든 가져오기를 상대 경로로 변환',
            convertToAbsolutePath: '절대 경로로 변환',
            convertToRelativePath: '상대 경로로 변환'
          },
          UnresolvedImports: {
            learnMoreTitle: '가져오기 해결에 대해 자세히 알아보기',
            selectInterpreterTitle: '다른 인터프리터 선택',
            selectKernelTitle: '다른 Jupyter kernel 선택'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '로깅 데이터가 [{filePath}]({uri})에 저장되었습니다. 자세한 내용은 \'Python 언어 서버\' 출력 창을 참조하세요.'
          },
          ProfilingCommand: {
            profilingDataSaved: '프로파일링 데이터가 [{filePath}]({uri})에 저장되었습니다. 자세한 내용은 \'Python 언어 서버\' 출력 창을 참조하세요.'
          },
          gotoOutputCommand: '출력 표시'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot로 Docstring 생성',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot을 사용하여 상속된 모든 추상 클래스 구현'
        },
        Diagnostic: {
          importResolveRedirect: '"{venv}" 환경에서 "{importName}" 가져오기를 찾을 수 없습니다.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring 생성',
          description: '설명',
          docstringForName: '{name}의 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '기본 Python 환경',
          globalEnvironmentName: '글로벌',
          pluralFilesAndPluralCellsToAnalyze: '분석할 파일 {fileCount}개 및 셀 {cellCount}개',
          pluralFilesAndSingularCellToAnalyze: '분석할 파일 {fileCount}개 및 셀 1개',
          singularFileAndPluralCellsToAnalyze: '분석할 파일 1개 및 셀 {cellCount}개',
          singularFileAndSingularCellToAnalyze: '분석할 파일 1개 및 셀 1개',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '문제 보고',
          title: 'Pylance에서 성능 문제가 발견되었습니다. \'Pylance: Report Issue\' 명령을 사용하여 문제를 제출하시겠습니까?'
        },
        Pytest: {
          addTypeAnnotation: '{name}에 형식 주석 추가',
          addTypeAnnotations: '이 파일의 모든 fixture 참조에 대한 형식 주석 추가',
          fixtureNotFound: '\'{fixture}\'은(는) 알려진 테스트 fixture가 아닙니다. 테스트 메서드는 fixture 또는 parametrization 이름만 매개 변수로 받아야 합니다.'
        },
        Refactoring: {
          moveFile: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileAbsentSymbol: '이동할 기호를 찾을 수 없습니다.',
          moveFileDescription: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileExtensionMismatch: '기호를 이동하려면 원본 파일("{src}") 및 대상 파일("{dest}")의 파일 확장명이 같아야 합니다.',
          moveFileImportableOnly: '클래스 또는 함수와 같은 다른 모듈에서 가져올 수 있는 개체만 이동할 수 있습니다.',
          moveFileInsertLocation: '기호를 삽입할 위치를 찾을 수 없습니다. 이름이 같은 기호가 "{name}"에 이미 있을 수 있습니다.',
          moveFileLabel: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileMissingInfo: '"{name}"에 대한 파일 정보를 찾을 수 없습니다.',
          moveFileMultipleDeclarations: '이 기호는 여러 번 선언되었으므로 이동할 수 없습니다.',
          moveFileNotUserFile: '이 기호를 이동할 수 없습니다. 프로젝트 또는 사용자 파일의 기호만 지원됩니다.',
          moveFilePrivateSymbol: '"{name}"은 프라이빗 기호이므로 이동할 수 없습니다.',
          moveFileSameFile: '기호는 현재 있는 동일한 파일로 이동할 수 없습니다.',
          moveFileSimpleAssignmentsOnly: '이 식을 이동할 수 없습니다. 값이 할당되는 변수와 같은 간단한 할당만 지원됩니다.',
          moveFileSymbolNotFound: '"{position}" 위치에서 기호를 찾을 수 없습니다.',
          moveFileUnsupportedSymbol: '이 기호를 이동할 수 없습니다. 모듈 수준의 변수, 함수, 클래스만 지원됩니다.'
        }
      };
    },
    42235: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Dodaj element „{importText}”',
            searchImport: 'Wyszukaj dodatkowe dopasowania importów'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Zmień pisownię na „{word}”'
          },
          ExtraPath: {
            addExtraPath: 'Dodaj nazwę „{name}” do elementów extraPaths'
          },
          Extract: {
            method: 'Metoda wyodrębniania',
            variable: 'Wyodrębnij zmienną'
          },
          FixAll: {
            runFixAll: 'Uruchom funkcję „Napraw wszystko” rozszerzenia Pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Zaimplementuj wszystkie dziedziczone klasy abstrakcyjne'
          },
          MoveSymbol: {
            commandTitle: 'Przenieś symbol',
            moveSymbolsTo: 'Przenieś symbol do...',
            moveSymbolsToNewFile: 'Przenieś symbol do nowego pliku'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Usuń wszystkie nieużywane importy',
            removeUnusedImport: 'Usuń nieużywany import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Konwertuj wszystkie formaty importu',
            convertAllToAbsolutePath: 'Konwertuj wszystkie importy na ścieżkę bezwzględną',
            convertAllToRelativePath: 'Konwertuj wszystkie importy na ścieżkę względną',
            convertToAbsolutePath: 'Konwertuj na ścieżkę bezwzględną',
            convertToRelativePath: 'Konwertuj na ścieżkę względną'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Dowiedz się więcej o rozwiązywaniu importów',
            selectInterpreterTitle: 'Wybierz inny interpreter',
            selectKernelTitle: 'Select a different Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Dane rejestrowania zostały zapisane w ścieżce [{filePath}]({uri}). Zobacz okienko danych wyjściowych `Python Language Server`, aby uzyskać więcej szczegółów.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Dane profilowania zostały zapisane w ścieżce [{filePath}]({uri}). Zobacz okienko danych wyjściowych „Python Language Server”, aby uzyskać więcej szczegółów.'
          },
          gotoOutputCommand: 'Pokaż dane wyjściowe'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Wygeneruj Docstring za pomocą funkcji Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Zaimplementuj wszystkie dziedziczone klasy abstrakcyjne za pomocą funkcji Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Nie można odnaleźć importu„{importName}” w środowisku „{venv}”.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generuj Docstring',
          description: 'Opis',
          docstringForName: 'Docstring for {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Bieżące środowisko Python',
          globalEnvironmentName: 'globalny',
          pluralFilesAndPluralCellsToAnalyze: 'Pliki ({fileCount}) i komórki ({cellCount}) do przeanalizowania',
          pluralFilesAndSingularCellToAnalyze: '1 komórka i następująca liczba plików do przeanalizowania: {fileCount}',
          singularFileAndPluralCellsToAnalyze: '1 plik i następująca liczba komórek do przeanalizowania: {cellCount}',
          singularFileAndSingularCellToAnalyze: '1 plik i 1 komórka do przeanalizowania',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Zgłoś problem',
          title: 'Wykryliśmy problem z wydajnością usługi Pylance. Czy chcesz zgłosić problem przy użyciu polecenia `Pylance: Problem z raportem`?'
        },
        Pytest: {
          addTypeAnnotation: 'Dodaj adnotację typu do elementu {name}',
          addTypeAnnotations: 'Add type annotations for all fixture references in this file',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Czy chcesz aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileAbsentSymbol: 'Nie można odnaleźć symbolu do przeniesienia.',
          moveFileDescription: 'Aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileExtensionMismatch: 'Aby przenieść symbol, plik źródłowy („{src}”) i plik docelowy („{dest}”) muszą mieć to samo rozszerzenie pliku.',
          moveFileImportableOnly: 'Tylko obiekty, które mogą być importowane z innych modułów, takie jak klasy lub funkcje, mogą być przenoszone.',
          moveFileInsertLocation: 'Nie można odnaleźć lokalizacji do wstawienia symbolu. Symbol o tej samej nazwie może już istnieć w elemencie „{name}”.',
          moveFileLabel: 'Aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileMissingInfo: 'Nie można odnaleźć informacji o pliku dla „{name}”.',
          moveFileMultipleDeclarations: 'Nie można przenieść tego symbolu, ponieważ jest on zadeklarowany wiele razy.',
          moveFileNotUserFile: 'Nie można przenieść tego symbolu. Obsługiwane są tylko symbole w projekcie lub pliku użytkownika.',
          moveFilePrivateSymbol: 'Nie można przenieść elementu „{name}”, ponieważ jest to symbol prywatny.',
          moveFileSameFile: 'Nie można przenieść symbolu do tego samego pliku, w którym się obecnie znajduje.',
          moveFileSimpleAssignmentsOnly: 'Nie można przenieść tego wyrażenia. Obsługiwane są tylko proste przypisania, takie jak zmienna, do których jest przypisywana wartość.',
          moveFileSymbolNotFound: 'Nie można odnaleźć symbolu na pozycji „{position}”.',
          moveFileUnsupportedSymbol: 'Nie można przenieść tego symbolu. Obsługiwane są tylko zmienne, funkcje i klasy na poziomie modułu.'
        }
      };
    },
    6842: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Adicionar "{importText}"',
            searchImport: 'Procure correspondências de importação adicionais'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Alterar a ortografia para "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Adicionar "{name}" a extraPaths'
          },
          Extract: {
            method: 'Extrair método',
            variable: 'Extrair variável'
          },
          FixAll: {
            runFixAll: 'Executar fix all do Pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementar todas as classes abstratas herdadas'
          },
          MoveSymbol: {
            commandTitle: 'Mover símbolo',
            moveSymbolsTo: 'Mover símbolo para...',
            moveSymbolsToNewFile: 'Mover símbolo para novo arquivo'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Excluir todas as importações não usadas',
            removeUnusedImport: 'Remover Importações não utilizadas'
          },
          ToggleImportPath: {
            convertAllFormat: 'Converter todos os formatos de importação',
            convertAllToAbsolutePath: 'Converter todas as importações em caminho absoluto',
            convertAllToRelativePath: 'Converter todas as importações em caminho relativo',
            convertToAbsolutePath: 'Converter em caminho absoluto',
            convertToRelativePath: 'Converter em caminho relativo'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Saiba mais sobre como resolver importações',
            selectInterpreterTitle: 'Selecionar um intérprete diferente',
            selectKernelTitle: 'Selecionar um kernel do Jupyter diferente'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Os dados de registro em log foram salvos em [{filePath}]({uri}). Consulte o painel de saída `Servidor de Linguagem Python` para obter mais detalhes.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Os dados de criação de perfil foram salvos em [{filePath}]({uri}). Consulte o painel de saída "Servidor de Linguagem Python" para obter mais detalhes.'
          },
          gotoOutputCommand: 'Mostrar Saída'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Gerar Docstring com o Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implemente todas as classes abstratas herdadas com o Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Não foi possível localizar a importação "{importName}" no ambiente "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Gerar Docstring',
          description: 'Descrição',
          docstringForName: 'Docstring para {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Ambiente do Python Padrão',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} arquivos e {cellCount} células para analisar',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} arquivos e 1 célula para analisar',
          singularFileAndPluralCellsToAnalyze: '1 arquivo e {cellCount} células para analisar',
          singularFileAndSingularCellToAnalyze: '1 arquivo e 1 célula para analisar',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Relatar problema',
          title: 'Detectamos um problema de desempenho com o Pylance. Deseja relatar um problema usando o comando `Pylance: Report Issue`?'
        },
        Pytest: {
          addTypeAnnotation: 'Adicionar anotação de tipo a {name}',
          addTypeAnnotations: 'Adicionar anotações de tipo para todas as referências de fixture de teste neste arquivo',
          fixtureNotFound: '\'{fixture}\' não é um fixture de teste conhecido. Os métodos de teste só devem receber nomes de fixture ou parametrization como parâmetros.'
        },
        Refactoring: {
          moveFile: 'Deseja atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileAbsentSymbol: 'Não é possível encontrar um símbolo para mover.',
          moveFileDescription: 'Atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileExtensionMismatch: 'Para mover um símbolo, o arquivo de origem ("{src}") e o arquivo de destino ("{dest}") devem ter a mesma extensão de arquivo.',
          moveFileImportableOnly: 'Somente objetos que podem ser importados de outros módulos, como classes ou funções, podem ser movidos.',
          moveFileInsertLocation: 'Não é possível encontrar um local para inserir o símbolo. Um símbolo com o mesmo nome pode já existir em "{name}".',
          moveFileLabel: 'Atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileMissingInfo: 'Não foi possível encontrar informações do arquivo "{name}".',
          moveFileMultipleDeclarations: 'Esse símbolo não pode ser movido porque foi declarado várias vezes.',
          moveFileNotUserFile: 'Esse símbolo não pode ser movido. Somente símbolos em um projeto ou arquivo de usuário são suportados.',
          moveFilePrivateSymbol: '"{name}" não pode ser movido porque é um símbolo privado.',
          moveFileSameFile: 'Um símbolo não pode ser movido para o mesmo arquivo onde está localizado atualmente.',
          moveFileSimpleAssignmentsOnly: 'Essa expressão não pode ser movida. Somente atribuições simples, como a atribuição de um valor a uma variável, são suportadas.',
          moveFileSymbolNotFound: 'Não é possível encontrar um símbolo na posição "{position}".',
          moveFileUnsupportedSymbol: 'Esse símbolo não pode ser movido. Somente variáveis, funções e classes no nível do módulo são suportadas.'
        }
      };
    },
    39452: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '[6EOWN][นั้Æðð "{ïmpørtTëxt}"Ấğ倪İЂҰक्นั้ढूँ]',
            searchImport: '[SEcEV][นั้§ëærçh før æððïtïøñæl ïmpørt mætçhësẤğ倪İЂҰक्र्तिृまนั้ढूँ]'
          },
          ChangeSpelling: {
            changeSpellingTo: '[S2wV8][นั้Çhæñgë spëllïñg tø "{wørð}"Ấğ倪İЂҰक्र्तिृนั้ढूँ]'
          },
          ExtraPath: {
            addExtraPath: '[vPbBT][นั้Æðð "{ñæmë}" tø extraPathsẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          Extract: {
            method: '[6CJmj][นั้Ëxtræçt mëthøðẤğ倪İЂҰนั้ढूँ]',
            variable: '[yAhZ4][นั้Ëxtræçt værïæþlëẤğ倪İЂҰนั้ढूँ]'
          },
          FixAll: {
            runFixAll: '[kBeph][นั้Rµñ pÿlæñçë fïx ællẤğ倪İЂҰक्นั้ढूँ]'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '[jVUSx][นั้Ïmplëmëñt æll ïñhërïtëð æþstræçt çlæssësẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          MoveSymbol: {
            commandTitle: '[tW1Sd][นั้Møvë sÿmþølẤğ倪İนั้ढूँ]',
            moveSymbolsTo: '[jnDNO][นั้Møvë sÿmþøl tøẤğ倪İЂҰนั้ढूँ]...',
            moveSymbolsToNewFile: '[i6bBJ][นั้Møvë sÿmþøl tø ñëw fïlëẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '[ji2Ww][นั้Rëmøvë æll µñµsëð ïmpørtsẤğ倪İЂҰक्र्นั้ढूँ]',
            removeUnusedImport: '[a0K5t][นั้Rëmøvë µñµsëð ïmpørtẤğ倪İЂҰक्นั้ढूँ]'
          },
          ToggleImportPath: {
            convertAllFormat: '[Xa2Zv][นั้Çøñvërt æll ïmpørt førmætsẤğ倪İЂҰक्र्นั้ढूँ]',
            convertAllToAbsolutePath: '[rYYle][นั้Çøñvërt æll ïmpørts tø æþsølµtë pæthẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            convertAllToRelativePath: '[q94B6][นั้Çøñvërt æll ïmpørts tø rëlætïvë pæthẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            convertToAbsolutePath: '[kBV0h][นั้Çøñvërt tø æþsølµtë pæthẤğ倪İЂҰक्र्นั้ढूँ]',
            convertToRelativePath: '[GuQt9][นั้Çøñvërt tø rëlætïvë pæthẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          UnresolvedImports: {
            learnMoreTitle: '[rCXA3][นั้£ëærñ mørë æþøµt rësølvïñg ïmpørtsẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            selectInterpreterTitle: '[v2LhD][นั้§ëlëçt æ ðïffërëñt ïñtërprëtërẤğ倪İЂҰक्र्तिृนั้ढूँ]',
            selectKernelTitle: '[HutRH][นั้§ëlëçt æ ðïffërëñt Jupyter kernelẤğ倪İЂҰक्र्तिृนั้ढूँ]'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '[kNaJm][นั้£øggïñg ðætæ hæs þëëñ sævëð æt [{fïlëPæth}]({µrï}). §ëë `Pÿthøñ £æñgµægë §ërvër` øµtpµt pæñë før mørë ðëtæïl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          ProfilingCommand: {
            profilingDataSaved: '[CpJI3][นั้Prøfïlïñg ðætæ hæs þëëñ sævëð æt [{fïlëPæth}]({µrï}). §ëë `Pÿthøñ £æñgµægë §ërvër` øµtpµt pæñë før mørë ðëtæïl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          gotoOutputCommand: '[xTS0O][นั้§høw ØµtpµtẤğ倪İนั้ढूँ]'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '[mMtFO][นั้Gëñërætë Docstring wïth CopilotẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          implementAllInheritedAbstractClasseswithCopilot: '[jx3Bq][นั้Ïmplëmëñt æll ïñhërïtëð æþstræçt çlæssës wïth CopilotẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]'
        },
        Diagnostic: {
          importResolveRedirect: '[KGYYn][นั้Ïmpørt "{ïmpørtÑæmë}" çøµlð ñøt þë føµñð ïñ thë "{vëñv}" ëñvïrøñmëñt.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまนั้ढूँ]'
        },
        DocstringTemplate: {
          GenerateDocstring: '[A6Ydq][นั้Gëñërætë DocstringẤğ倪İЂҰक्นั้ढूँ]',
          description: '[ab4Nk][นั้ÐësçrïptïøñẤğ倪İนั้ढूँ]',
          docstringForName: '[3r0Lu][นั้Docstring før {ñæmë}Ấğ倪İЂҰक्นั้ढूँ]'
        },
        Messages: {
          defaultPythonEnvironmentName: '[oW2bW][นั้Ðëfæµlt Python ËñvïrøñmëñtẤğ倪İЂҰक्र्นั้ढूँ]',
          globalEnvironmentName: '[H7OID][นั้gløþælẤğนั้ढूँ]',
          pluralFilesAndPluralCellsToAnalyze: '[EP1hA][นั้{fïlëÇøµñt} fïlës æñð {çëllÇøµñt} çëlls tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰนั้ढूँ]',
          pluralFilesAndSingularCellToAnalyze: '[Tg5wq][นั้{fïlëÇøµñt} fïlës æñð 1 çëll tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          singularFileAndPluralCellsToAnalyze: '[rwT7l][นั้1 fïlë æñð {çëllÇøµñt} çëlls tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          singularFileAndSingularCellToAnalyze: '[Lt1RE][นั้1 fïlë æñð 1 çëll tø æñælÿzëẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          windowsStoreEnvironmentName: '[0RfQa][นั้mïçrøsøft størëẤğ倪İЂҰนั้ढूँ]'
        },
        PerformanceTracking: {
          button: '[PhmTE][นั้Rëpørt ïssµëẤğ倪İЂนั้ढूँ]',
          title: '[6XFDs][นั้Wë hævë ðëtëçtëð æ përførmæñçë ïssµë wïth Pylance. Wøµlð ÿøµ lïkë tø fïlë æñ ïssµë µsïñg thë `Pylance: Rëpørt Ïssµë` çømmæñð?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]'
        },
        Pytest: {
          addTypeAnnotation: '[fukwx][นั้Æðð tÿpë æññøtætïøñ tø {ñæmë}Ấğ倪İЂҰक्र्तिृนั้ढूँ]',
          addTypeAnnotations: '[ci8Cb][นั้Æðð tÿpë æññøtætïøñs før æll fixture rëfërëñçës ïñ thïs fïlëẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्นั้ढूँ]',
          fixtureNotFound: '[sIWxh][นั้\'{fixture}\' ïs ñøt æ kñøwñ tëst fixture. Tëst mëthøðs shøµlð øñlÿ rëçëïvë fixture ør parametrization ñæmës æs pæræmëtërs.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰนั้ढूँ]'
        },
        Refactoring: {
          moveFile: '[uzRfT][นั้Ðø ÿøµ wæñt tø µpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]',
          moveFileAbsentSymbol: '[3hHvF][นั้Çæññøt fïñð æ sÿmþøl tø møvë.Ấğ倪İЂҰक्र्तिृนั้ढूँ]',
          moveFileDescription: '[qbSm6][นั้Üpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileExtensionMismatch: '[fpltY][นั้Tø møvë æ sÿmþøl, thë søµrçë fïlë ("{srç}") æñð ðëstïñætïøñ fïlë ("{ðëst}") mµst hævë thë sæmë fïlë ëxtëñsïøñ.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          moveFileImportableOnly: '[CFuY4][นั้Øñlÿ øþjëçts thæt çæñ þë ïmpørtëð frøm øthër møðµlës, sµçh æs çlæssës ør fµñçtïøñs, ærë ælløwëð tø þë møvëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileInsertLocation: '[BJOq2][นั้Çæññøt fïñð æ løçætïøñ tø ïñsërt thë sÿmþøl. Æ sÿmþøl wïth thë sæmë ñæmë mïght ælrëæðÿ ëxïst ïñ "{ñæmë}".Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
          moveFileLabel: '[TMnnY][นั้Üpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileMissingInfo: '[FctQ6][นั้Çæññøt fïñð fïlë ïñførmætïøñ før "{ñæmë}".Ấğ倪İЂҰक्र्तिृまẤğ倪นั้ढूँ]',
          moveFileMultipleDeclarations: '[Icw4C][นั้Thïs sÿmþøl çæññøt þë møvëð þëçæµsë ït ïs ðëçlærëð mµltïplë tïmës.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          moveFileNotUserFile: '[3KMZz][นั้Thïs sÿmþøl çæññøt þë møvëð. Øñlÿ sÿmþøls ïñ æ prøjëçt ør µsër fïlë ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂนั้ढूँ]',
          moveFilePrivateSymbol: '[7EZBN][นั้"{ñæmë}" çæññøt þë møvëð þëçæµsë ït ïs æ prïvætë sÿmþøl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]',
          moveFileSameFile: '[QQSb2][นั้Æ sÿmþøl çæññøt þë møvëð tø thë sæmë fïlë whërë ït ïs çµrrëñtlÿ løçætëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileSimpleAssignmentsOnly: '[4O7iP][นั้Thïs ëxprëssïøñ çæñ\'t þë møvëð. Øñlÿ sïmplë æssïgñmëñts, sµçh æs æ værïæþlë þëïñg æssïgñëð æ vælµë, ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İนั้ढूँ]',
          moveFileSymbolNotFound: '[eCktQ][นั้Çæññøt fïñð æ sÿmþøl æt pøsïtïøñ "{pøsïtïøñ}".Ấğ倪İЂҰक्र्तिृまẤğ倪İนั้ढूँ]',
          moveFileUnsupportedSymbol: '[cwXih][นั้Thïs sÿmþøl çæññøt þë møvëð. Øñlÿ værïæþlës, fµñçtïøñs, æñð çlæssës æt thë møðµlë lëvël ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृนั้ढूँ]'
        }
      };
    },
    53802: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Добавить "{importText}"',
            searchImport: 'Искать дополнительные совпадающие импортированные данные'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Изменить написание на "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Добавить "{name}" в extraPaths'
          },
          Extract: {
            method: 'Извлечь метод',
            variable: 'Извлечь переменную'
          },
          FixAll: {
            runFixAll: 'Выполнить pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Реализовать все унаследованные абстрактные классы'
          },
          MoveSymbol: {
            commandTitle: 'Переместить символ',
            moveSymbolsTo: 'Переместить символ в...',
            moveSymbolsToNewFile: 'Переместить символ в новый файл'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Удалите все неиспользуемые операции импорта',
            removeUnusedImport: 'Удалить неиспользованные операторы импорта'
          },
          ToggleImportPath: {
            convertAllFormat: 'Преобразовать все форматы импорта',
            convertAllToAbsolutePath: 'Изменить все операторы импорта так, чтобы они использовали абсолютный путь',
            convertAllToRelativePath: 'Изменить все операторы импорта так, чтобы они использовали относительный путь',
            convertToAbsolutePath: 'Преобразовать в абсолютный путь',
            convertToRelativePath: 'Преобразовать в относительный путь'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Подробнее о решении проблем с импортом',
            selectInterpreterTitle: 'Выберите другой интерпретатор',
            selectKernelTitle: 'Выберите другое Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Данные ведения журнала сохранены в [{filePath}]({uri}). Дополнительные сведения см. в области вывода "Языковой сервер Python".'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Данные профилирования сохранены в [{filePath}]({uri}). Дополнительные сведения см. в области вывода "Языковой сервер Python".'
          },
          gotoOutputCommand: 'Показать вывод'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Создание Docstring с помощью Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Реализовать все унаследованные абстрактные классы с помощью Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Импорт "{importName}" не найден в среде "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Генерировать Docstring',
          description: 'Описание',
          docstringForName: 'Docstring для {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Среда Python по умолчанию',
          globalEnvironmentName: 'глобальная',
          pluralFilesAndPluralCellsToAnalyze: 'Файлы ({fileCount}) и ячейки ({cellCount}) для анализа',
          pluralFilesAndSingularCellToAnalyze: 'Файлы ({fileCount}) и 1 ячейка для анализа',
          singularFileAndPluralCellsToAnalyze: '1 файл и ячейки ({cellCount}) для анализа',
          singularFileAndSingularCellToAnalyze: '1 файл и 1 ячейка для анализа',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Сообщить о проблеме',
          title: 'Обнаружена проблема производительности с Pylance. Вы хотите отправить сообщение о проблеме с помощью команды "Pylance: сообщить о проблеме"?'
        },
        Pytest: {
          addTypeAnnotation: 'Добавление заметки с типом в {name}',
          addTypeAnnotations: 'Добавить заметки типа для всех fixture на средства в этом файле',
          fixtureNotFound: '"{fixture}" не является известным тестовым fixture тестирования. Методы тестирования должны получать в качестве параметров только имена fixture тестирования или parametrization.'
        },
        Refactoring: {
          moveFile: 'Хотите заменить все импортирующие ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileAbsentSymbol: 'Не удается найти символ для перемещения.',
          moveFileDescription: 'Заменить все ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileExtensionMismatch: 'Для перемещения символа исходный файл ("{src}") и конечный файл ("{dest}") должны иметь одинаковое расширение файла.',
          moveFileImportableOnly: 'Разрешено перемещать только объекты, которые можно импортировать из других модулей, таких как классы или функции.',
          moveFileInsertLocation: 'Не удается найти расположение для вставки символа. Возможно, символ с таким именем уже существует в "{name}".',
          moveFileLabel: 'Заменить все ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileMissingInfo: 'Не удается найти сведения о файле для "{name}".',
          moveFileMultipleDeclarations: 'Невозможно переместить этот символ, так как он объявлен несколько раз.',
          moveFileNotUserFile: 'Этот символ не может быть перемещен. Поддерживаются только символы в проекте или пользовательском файле.',
          moveFilePrivateSymbol: '"{name}" невозможно переместить, так как это закрытый символ.',
          moveFileSameFile: 'Символ нельзя переместить в тот же файл, где он находится в данный момент.',
          moveFileSimpleAssignmentsOnly: 'Невозможно переместить это выражение. Поддерживаются только простые присвоения, например присвоение значения переменной.',
          moveFileSymbolNotFound: 'Не удается найти символ в позиции "{position}".',
          moveFileUnsupportedSymbol: 'Этот символ не может быть перемещен. Поддерживаются только переменные, функции и классы на уровне модуля.'
        }
      };
    },
    49381: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Şunu ekle: "{importText}"',
            searchImport: 'Ek içeri aktarma eşleşmelerini ara'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Yazımı "{word}" olarak değiştir'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths içine "{name}" ekle'
          },
          Extract: {
            method: 'Metodu ayıkla',
            variable: 'Değişken ayıkla'
          },
          FixAll: {
            runFixAll: 'Pylance tümünü düzeltmeyi çalıştır'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Devralınan tüm soyut sınıfları uygula'
          },
          MoveSymbol: {
            commandTitle: 'Simgeyi taşı',
            moveSymbolsTo: 'Simgeyi taşı...',
            moveSymbolsToNewFile: 'Simgeyi yeni dosyaya taşı'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Kullanılmayan tüm içeri aktarmaları kaldır',
            removeUnusedImport: 'Kullanılmayan içeri aktarmaları kaldır'
          },
          ToggleImportPath: {
            convertAllFormat: 'Tüm içeri aktarma biçimlerini dönüştür',
            convertAllToAbsolutePath: 'Tüm içeri aktarmaları mutlak yola dönüştür',
            convertAllToRelativePath: 'Tüm içeri aktarmaları göreli yola dönüştür',
            convertToAbsolutePath: 'Mutlak yola dönüştür',
            convertToRelativePath: 'Göreli yola dönüştür'
          },
          UnresolvedImports: {
            learnMoreTitle: 'İçeri aktarmaları çözümleme hakkında daha fazla bilgi edinin',
            selectInterpreterTitle: 'Farklı bir yorumlayıcı seçin',
            selectKernelTitle: 'Select a different Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Günlük verileri [{filePath}]({uri}) konumuna kaydedildi. Daha fazla ayrıntı için `Python Dil Sunucusu` çıkış bölmesine bakın.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profil oluşturma verileri [{filePath}]({uri}) konumuna kaydedildi. Daha fazla ayrıntı için `Python Language Server` çıkış bölmesine bakın.'
          },
          gotoOutputCommand: 'Çıkışı Göster'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot ile Docstring oluşturma',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot ile devralınan tüm soyut sınıfları uygula'
        },
        Diagnostic: {
          importResolveRedirect: '"{importName}", "{venv}" ortamında bulunamadı.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring Oluşturma',
          description: 'Açıklama',
          docstringForName: 'Docstring for {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Varsayılan Python Ortamı',
          globalEnvironmentName: 'genel',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} dosya ve {cellCount} hücre analiz edilecek',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} dosya ve 1 hücre analiz edilecek',
          singularFileAndPluralCellsToAnalyze: '1 dosya ve {cellCount} hücre analiz edilecek',
          singularFileAndSingularCellToAnalyze: '1 dosya ve 1 hücre analiz edilecek',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Sorun bildir',
          title: 'Pylance ile ilgili bir performans sorunu algılandı. \'Pylance: Sorun Bildir\' komutunu kullanarak bir sorun kaydetmek ister misiniz?'
        },
        Pytest: {
          addTypeAnnotation: '{name} içine tür ek açıklaması ekle',
          addTypeAnnotations: 'Add type annotations for all fixture references in this file',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Tüm içeri aktarma başvurularını "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirmek istiyor musunuz?',
          moveFileAbsentSymbol: 'Taşınacak simge bulunamıyor.',
          moveFileDescription: 'Tüm içeri aktarma başvuruları "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirilsin mi?',
          moveFileExtensionMismatch: 'Bir simgeyi taşımak için kaynak dosya ("{src}") ile hedef dosyanın ("{dest}") uzantısı aynı olmalıdır.',
          moveFileImportableOnly: 'Yalnızca sınıflar veya işlevler gibi diğer modüllerden içeri aktarılabilen nesnelerin taşınmasına izin verilir.',
          moveFileInsertLocation: 'Simgenin ekleneceği konum bulunamıyor. "{name}" konumunda aynı ada sahip bir simge zaten var olabilir.',
          moveFileLabel: 'Tüm içeri aktarma başvuruları "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirilsin mi?',
          moveFileMissingInfo: '"{name}" için dosya bilgileri bulunamıyor.',
          moveFileMultipleDeclarations: 'Birden çok kez bildirildiği için bu simge taşınamaz.',
          moveFileNotUserFile: 'Bu simge taşınamıyor. Yalnızca bir projedeki veya kullanıcı dosyasındaki simgeler desteklenir.',
          moveFilePrivateSymbol: 'Özel simge olduğundan "{name}" taşınamıyor.',
          moveFileSameFile: 'Simge şu anda bulunduğu dosyaya taşınamıyor.',
          moveFileSimpleAssignmentsOnly: 'Bu ifade taşınamıyor. Yalnızca bir değer atanan değişken gibi basit atamalar desteklenir.',
          moveFileSymbolNotFound: '"{position}" konumunda simge bulunamıyor.',
          moveFileUnsupportedSymbol: 'Bu simge taşınamıyor. Yalnızca modül düzeyindeki değişkenler, işlevler ve sınıflar desteklenir.'
        }
      };
    },
    70417: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '添加“{importText}”',
            searchImport: '搜索其他导入匹配项'
          },
          ChangeSpelling: {
            changeSpellingTo: '将拼写更改为“{word}”'
          },
          ExtraPath: {
            addExtraPath: '将“{name}”添加到 extraPaths'
          },
          Extract: {
            method: '提取方法',
            variable: '提取变量'
          },
          FixAll: {
            runFixAll: '运行 pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '实现继承的所有抽象类'
          },
          MoveSymbol: {
            commandTitle: '移动符号',
            moveSymbolsTo: '将符号移动到...',
            moveSymbolsToNewFile: '将符号移动到新文件'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '删除所有未使用的导入',
            removeUnusedImport: '删除未使用的导入'
          },
          ToggleImportPath: {
            convertAllFormat: '转换所有导入格式',
            convertAllToAbsolutePath: '将所有导入转换为绝对路径',
            convertAllToRelativePath: '将所有导入转换为相对路径',
            convertToAbsolutePath: '转换为绝对路径',
            convertToRelativePath: '转换为相对路径'
          },
          UnresolvedImports: {
            learnMoreTitle: '详细了解如何解析导入',
            selectInterpreterTitle: '选择其他解释器',
            selectKernelTitle: '选择其他 Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '日志记录数据已保存在 [{filePath}]({uri})。有关更多详细信息，请参阅 `Python 语言服务器` 输出窗格。'
          },
          ProfilingCommand: {
            profilingDataSaved: '分析数据已保存在 [{filePath}]({uri})。有关更多详细信息，请参阅 `Python 语言服务器` 输出窗格。'
          },
          gotoOutputCommand: '显示输出'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '使用 Copilot 生成 Docstring',
          implementAllInheritedAbstractClasseswithCopilot: '通过 Copilot 实现继承的所有抽象类'
        },
        Diagnostic: {
          importResolveRedirect: '在“{venv}”环境中找不到导入“{importName}”。'
        },
        DocstringTemplate: {
          GenerateDocstring: '生成 Docstring',
          description: '说明',
          docstringForName: '{name} 的 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '默认 Python 环境',
          globalEnvironmentName: '全局',
          pluralFilesAndPluralCellsToAnalyze: '要分析的 {fileCount} 个文件和 {cellCount} 个单元格',
          pluralFilesAndSingularCellToAnalyze: '要分析的 {fileCount} 个文件和 1 个单元格',
          singularFileAndPluralCellsToAnalyze: '要分析的 1 个文件和 {cellCount} 个单元格',
          singularFileAndSingularCellToAnalyze: '要分析的 1 个文件和 1 个单元格',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '报告问题',
          title: '我们检测到 Pylance 存在性能问题。是否要使用 `Pylance: Report Issue` 命令提交问题?'
        },
        Pytest: {
          addTypeAnnotation: '将类型批注添加到 {name}',
          addTypeAnnotations: '为此文件中的所有 fixture 引用添加类型注释',
          fixtureNotFound: '\'{fixture}\' 不是已知的测试 fixture。测试方法应只接收 fixture 或 parametrization 名称作为参数。'
        },
        Refactoring: {
          moveFile: '是否要将“{oldModuleName}”的所有导入引用更新为“{newModuleName}”?',
          moveFileAbsentSymbol: '找不到要移动的符号。',
          moveFileDescription: '是否将 “{oldModuleName}” 的所有导入引用更新为 “{newModuleName}”?',
          moveFileExtensionMismatch: '要移动符号，源文件(“{src}”)和目标文件(“{dest}”)必须具有相同的文件扩展名。',
          moveFileImportableOnly: '仅允许移动可从其他模块导入的对象，例如类或函数。',
          moveFileInsertLocation: '找不到要插入符号的位置。“{name}”中可能已存在同名符号。',
          moveFileLabel: '是否将 “{oldModuleName}” 的所有导入引用更新为 “{newModuleName}”?',
          moveFileMissingInfo: '找不到“{name}”的文件信息。',
          moveFileMultipleDeclarations: '无法移动此符号，因为已多次声明它。',
          moveFileNotUserFile: '无法移动此符号。仅支持项目或用户文件中的符号。',
          moveFilePrivateSymbol: '无法移动“{name}”，因为它是专用符号。',
          moveFileSameFile: '无法将符号移动到其当前所在的同一文件。',
          moveFileSimpleAssignmentsOnly: '无法移动此表达式。仅支持简单的赋值，例如为变量赋值。',
          moveFileSymbolNotFound: '在位置“{position}”处找不到符号。',
          moveFileUnsupportedSymbol: '无法移动此符号。仅支持模块级别的变量、函数和类。'
        }
      };
    },
    41101: module => {
      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '新增 "{importText}"',
            searchImport: '搜尋其他匯入相符項目'
          },
          ChangeSpelling: {
            changeSpellingTo: '將拼字變更為 "{word}"'
          },
          ExtraPath: {
            addExtraPath: '新增 "{name}" 至 extraPaths'
          },
          Extract: {
            method: '擷取方法',
            variable: '擷取變數'
          },
          FixAll: {
            runFixAll: '執行 pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '實作所有繼承的抽象類別'
          },
          MoveSymbol: {
            commandTitle: '移動符號',
            moveSymbolsTo: '移動符號至...',
            moveSymbolsToNewFile: '移動符號至新檔案'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '移除所有未使用的匯入',
            removeUnusedImport: '移除未使用的匯入'
          },
          ToggleImportPath: {
            convertAllFormat: '轉換所有匯入格式',
            convertAllToAbsolutePath: '將所有匯入轉換為絕對路徑',
            convertAllToRelativePath: '將所有匯入轉換為相對路徑',
            convertToAbsolutePath: '轉換為絕對路徑',
            convertToRelativePath: '轉換成相對路徑'
          },
          UnresolvedImports: {
            learnMoreTitle: '深入了解如何解析匯入',
            selectInterpreterTitle: '選取其他解譯器',
            selectKernelTitle: '選取其他 Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '記錄資料已儲存在 [{filePath}]({uri})。如需詳細資料，請參閱 [Python 語言伺服器] 輸出窗格。'
          },
          ProfilingCommand: {
            profilingDataSaved: '分析資料已儲存在 [{filePath}]({uri})。如需詳細資料，請參閱 [Python 語言伺服器] 輸出窗格。'
          },
          gotoOutputCommand: '顯示輸出'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '使用 Copilot 產生 Docstring',
          implementAllInheritedAbstractClasseswithCopilot: '使用 Copilot 來實作所有繼承的抽象類別'
        },
        Diagnostic: {
          importResolveRedirect: '在 "{venv}" 環境中找不到匯入 "{importName}"。'
        },
        DocstringTemplate: {
          GenerateDocstring: '產生 Docstring',
          description: '說明',
          docstringForName: '{name} 的 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '預設 Python 環境',
          globalEnvironmentName: '全域',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} 個檔案和 {cellCount} 個儲存格要分析',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} 個檔案和 1 個儲存格要分析',
          singularFileAndPluralCellsToAnalyze: '1 個檔案和 {cellCount} 個儲存格要分析',
          singularFileAndSingularCellToAnalyze: '1 的檔案和 1 個儲存格要分析',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '回報問題',
          title: '偵測到 Pylance 發生效能問題。要使用 `Pylance: Report Issue` 命令提出問題嗎?'
        },
        Pytest: {
          addTypeAnnotation: '新增型別註解至 {name}',
          addTypeAnnotations: '新增此檔案中所有 fixture 參考的類型註釋',
          fixtureNotFound: '\'{fixture}\' 不是已知的測試 fixture。測試方法應該只接收 fixture 或 parametrization 名稱作為參數。'
        },
        Refactoring: {
          moveFile: '是否要將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileAbsentSymbol: '找不到要移動的符號。',
          moveFileDescription: '將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileExtensionMismatch: '若要移動符號，來源檔案 ("{src}") 與目的檔案 ("{dest}") 必須具有相同的檔案副檔名。',
          moveFileImportableOnly: '＝只允許移動可以從其他模組匯入的物件，例如類別或函數。',
          moveFileInsertLocation: '找不到要插入符號的位置。"{name}" 中可能已存在相同名稱的符號。',
          moveFileLabel: '將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileMissingInfo: '找不到 "{name}" 的檔案資訊。',
          moveFileMultipleDeclarations: '無法移動此符號，因為它已遭多次宣告。',
          moveFileNotUserFile: '無法移動此符號。只支援專案或使用者檔案中的符號。',
          moveFilePrivateSymbol: '無法移動 "{name}"，因為它是私人符號。',
          moveFileSameFile: '無法將符號移至其目前所在的同一個檔案中。',
          moveFileSimpleAssignmentsOnly: '無法移動此運算式。只支援例如為變數指派值等簡單的指派。',
          moveFileSymbolNotFound: '在位置 "{position}" 找不到符號。',
          moveFileUnsupportedSymbol: '無法移動此符號。僅支援模組層級的變數、函式和類別。'
        }
      };
    }
  };
  var _0x629f2c = {};
  function _0x243e96(_0x51afed) {
    var _0x4469bb = _0x629f2c[_0x51afed];
    if (_0x4469bb !== undefined) {
      return _0x4469bb.exports;
    }
    var _0x34a047 = _0x629f2c[_0x51afed] = {
      id: _0x51afed,
      loaded: false,
      exports: {}
    };
    _0x28cc3c[_0x51afed].call(_0x34a047.exports, _0x34a047, _0x34a047.exports, _0x243e96);
    _0x34a047.loaded = true;
    return _0x34a047.exports;
  }
  _0x243e96.m = _0x28cc3c;
  _0x243e96.x = () => {
    var _0x41b339 = _0x243e96.O(undefined, [121, 344], () => _0x243e96(81813));
    _0x41b339 = _0x243e96.O(_0x41b339);
    return _0x41b339;
  };
  (() => {
    var _0x441770 = [];
    _0x243e96.O = (_0x3e361e, _0x57dcb5, _0x22edd1, _0x3d0df5) => {
      if (_0x57dcb5) {
        _0x3d0df5 = _0x3d0df5 || 0;
        for (var _0x112754 = _0x441770.length; _0x112754 > 0 && _0x441770[_0x112754 - 1][2] > _0x3d0df5; _0x112754--) {
          _0x441770[_0x112754] = _0x441770[_0x112754 - 1];
        }
        _0x441770[_0x112754] = [_0x57dcb5, _0x22edd1, _0x3d0df5];
        return;
      }
      var _0x3c7c78 = Infinity;
      for (var _0x112754 = 0; _0x112754 < _0x441770.length; _0x112754++) {
        var [_0x57dcb5, _0x22edd1, _0x3d0df5] = _0x441770[_0x112754];
        var _0x3dd3c6 = true;
        for (var _0x54f642 = 0; _0x54f642 < _0x57dcb5.length; _0x54f642++) {
          if ((_0x3d0df5 & 1 === 0 || _0x3c7c78 >= _0x3d0df5) && Object.keys(_0x243e96.O).every(_0x4991b3 => _0x243e96.O[_0x4991b3](_0x57dcb5[_0x54f642]))) {
            _0x57dcb5.splice(_0x54f642--, 1);
          } else {
            _0x3dd3c6 = false;
            if (_0x3d0df5 < _0x3c7c78) {
              _0x3c7c78 = _0x3d0df5;
            }
          }
        }
        if (_0x3dd3c6) {
          _0x441770.splice(_0x112754--, 1);
          var _0x4cc4be = _0x22edd1();
          if (_0x4cc4be !== undefined) {
            _0x3e361e = _0x4cc4be;
          }
        }
      }
      return _0x3e361e;
    };
  })();
  (() => {
    _0x243e96.n = _0x1c7113 => {
      var _0x397ffa = _0x1c7113 && _0x1c7113.__esModule ? () => _0x1c7113.default : () => _0x1c7113;
      _0x243e96.d(_0x397ffa, {
        a: _0x397ffa
      });
      return _0x397ffa;
    };
  })();
  (() => {
    _0x243e96.d = (_0x5ed330, _0x4d5a76) => {
      for (var _0x4b6d1f in _0x4d5a76) {
        if (_0x243e96.o(_0x4d5a76, _0x4b6d1f) && !_0x243e96.o(_0x5ed330, _0x4b6d1f)) {
          Object.defineProperty(_0x5ed330, _0x4b6d1f, {
            enumerable: true,
            get: _0x4d5a76[_0x4b6d1f]
          });
        }
      }
    };
  })();
  (() => {
    _0x243e96.f = {};
    _0x243e96.e = _0x447399 => {
      return Promise.all(Object.keys(_0x243e96.f).reduce((_0x5da940, _0x32053d) => {
        _0x243e96.f[_0x32053d](_0x447399, _0x5da940);
        return _0x5da940;
      }, []));
    };
  })();
  (() => {
    _0x243e96.u = _0xbd4d8b => {
      return `${{
        '121': 'vendor',
        '344': 'pyright'
      }[_0xbd4d8b]}.bundle.js`;
    };
  })();
  (() => {
    _0x243e96.o = (_0x168399, _0x249ec8) => Object.prototype.hasOwnProperty.call(_0x168399, _0x249ec8);
  })();
  (() => {
    _0x243e96.r = _0x2b6e34 => {
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        Object.defineProperty(_0x2b6e34, Symbol.toStringTag, {
          value: 'Module'
        });
      }
      Object.defineProperty(_0x2b6e34, '__esModule', {
        value: true
      });
    };
  })();
  (() => {
    _0x243e96.nmd = _0x9e16c7 => {
      _0x9e16c7.paths = [];
      if (!_0x9e16c7.children) {
        _0x9e16c7.children = [];
      }
      return _0x9e16c7;
    };
  })();
  (() => {
    _0x243e96.j = 606;
  })();
  (() => {
    var _0x4088aa = {
      606: 1
    };
    _0x243e96.O.require = _0x15e116 => _0x4088aa[_0x15e116];
    var _0x352f80 = _0x240c07 => {
      var _0x10cd83 = _0x240c07.modules;
      var _0x29474a = _0x240c07.ids;
      var _0x37b4fb = _0x240c07.runtime;
      for (var _0xa05705 in _0x10cd83) {
        if (_0x243e96.o(_0x10cd83, _0xa05705)) {
          _0x243e96.m[_0xa05705] = _0x10cd83[_0xa05705];
        }
      }
      if (_0x37b4fb) {
        _0x37b4fb(_0x243e96);
      }
      for (var _0xe2c351 = 0; _0xe2c351 < _0x29474a.length; _0xe2c351++) {
        _0x4088aa[_0x29474a[_0xe2c351]] = 1;
      }
      _0x243e96.O();
    };
    _0x243e96.f.require = (_0x328757, _0x3d9952) => {
      if (!_0x4088aa[_0x328757]) {
        if (true) {
          _0x352f80(require(`./${_0x243e96.u(_0x328757)}`));
        } else {
          _0x4088aa[_0x328757] = 1;
        }
      }
    };
  })();
  (() => {
    var _0x321322 = _0x243e96.x;
    _0x243e96.x = () => {
      _0x243e96.e(121);
      _0x243e96.e(344);
      return _0x321322();
    };
  })();
  var _0x5eb1ca = _0x243e96.x();
  module.exports = _0x5eb1ca;
})(); //# sourceMappingURL=extension.bundle.js.map
//# sourceMappingURL=extension.bundle.js.map