(() => {
  var _0x187ed8 = {
    69338: module => {
      function _0x1093d4(_0x1d26c1) {
        var _0x5ed807 = new Error(`Cannot find module '${_0x1d26c1}'`);
        _0x5ed807.code = 'MODULE_NOT_FOUND';
        throw _0x5ed807;
      }
      _0x1093d4.keys = () => [];
      _0x1093d4.resolve = _0x1093d4;
      _0x1093d4.id = 69338;
      module.exports = _0x1093d4;
    },
    54861: module => {
      function _0x201501(_0x10747a) {
        var _0x35b3bc = new Error(`Cannot find module '${_0x10747a}'`);
        _0x35b3bc.code = 'MODULE_NOT_FOUND';
        throw _0x35b3bc;
      }
      _0x201501.keys = () => [];
      _0x201501.resolve = _0x201501;
      _0x201501.id = 54861;
      module.exports = _0x201501;
    },
    85417: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BackgroundAnalysisRunner = exports.BackgroundAnalysis = undefined;
      exports.runBackgroundThread = _0x173937;
      exports.isPushRequest = _0xa2ef45;
      exports.deepCopy = _0x3828d4;
      exports.deepRestore = _0x2e33e5;
      exports.serialize = _0x283d0d;
      exports.deserialize = _0xfd96b3;
      exports.clone = _0x166088;
      require(23070);
      const _0x364ad9 = require(56911);
      const _0x11628b = require(28167);
      const _0x5f74e1 = require(82695);
      const _0x25c7cb = require(1371);
      const _0x2f4a57 = require(94953);
      const _0x520338 = require(91426);
      const _0x1c2b1e = require(12522);
      const _0x5cedf9 = require(25075);
      const _0x34d107 = require(34455);
      const _0x409f0b = require(34487);
      const _0x35dd30 = require(63808);
      const _0xb24756 = require(27643);
      const _0x4b9078 = require(71745);
      const _0x34af72 = require(71582);
      const _0x4a7df2 = require(27113);
      const _0x3168a9 = require(5884);
      const _0x31238c = require(67703);
      const _0xf7e06b = require(99504);
      const _0x564a12 = require(24122);
      const _0x168e3f = require(16589);
      const _0x512c4 = require(44889);
      const _0x59deaf = require(52471);
      const _0x2df517 = require(79524);
      const _0x5a31bc = require(94818);
      const _0x54cd81 = require(30048);
      const _0x17dc6c = require(69482);
      const _0x203603 = require(77001);
      const _0x4dc8c5 = require(66609);
      const _0x35e081 = require(68021);
      const _0x71f235 = require(21575);
      const _0x366c30 = require(96285);
      const _0x1b3b9a = require(22205);
      const _0x25ee2f = require(89750);
      const _0x9789d2 = require(72412);
      const _0x2a03d1 = require(59198);
      const _0x27b6e7 = require(48316);
      const _0xf71899 = require(7587);
      const _0x45c9f0 = require(83868);
      const _0x1402c8 = require(77907);
      const _0xf9a032 = require(74899);
      class _0x550d47 extends _0x25c7cb.BackgroundAnalysisBase {
        constructor(_0x29eeb9, _0x49e004) {
          super(_0x49e004.console());
          this._serviceId = _0x29eeb9;
          this._serviceProvider = _0x49e004;
          this._openFiles = new Set();
          this._createdWorker = false;
          this._indexOptions = _0x564a12.getEmptyIndexOptions();
        }
        dispose() {
          var _0x4ad2bc;
          var _0x32a17f;
          super.dispose();
          this.cancelIndexing();
          if ((_0x4ad2bc = this._workerRef) === null || _0x4ad2bc === undefined) {
            undefined;
          } else {
            _0x4ad2bc.terminate();
          }
          this._workerRef = undefined;
          if ((_0x32a17f = this._fileHandler) === null || _0x32a17f === undefined) {
            undefined;
          } else {
            _0x32a17f.dispose();
          }
        }
        setFileOpened(_0xc2f661, _0x37b595, _0x3fd396, _0x242f80) {
          this._openFiles.add(_0xc2f661.key);
          super.setFileOpened(_0xc2f661, _0x37b595, _0x3fd396, _0x242f80);
          if (this._pendingIndexingRequest) {
            _0xf71899.Indexer.requestIndexingFromBackgroundThread(this._pendingIndexingRequest.type, this._serviceId, this._serviceProvider, this._indexOptions, this._pendingIndexingRequest.configOptions, this._pendingIndexingRequest.importResolver, this._pendingIndexingRequest.kind);
            this._pendingIndexingRequest = undefined;
          }
        }
        setFileClosed(_0x11cb4f, _0x5dcea9) {
          this._openFiles.delete(_0x11cb4f.key);
          super.setFileClosed(_0x11cb4f, _0x5dcea9);
        }
        refreshWorkspaceSymbols(_0xb7e5be) {
          this.enqueueRequest({
            requestType: 'indexWorkspaceSymbols',
            data: _0x283d0d({
              token: _0xb7e5be
            })
          });
        }
        startIndexing(_0x56a876, _0x40f840, _0x42b888, _0x192182) {
          this._indexOptions = _0x56a876;
          this.analysisRequest('setIndexOptions', _0x56a876);
          if (this._openFiles.size === 0) {
            this._pendIndexingRequest('index', _0x40f840, _0x42b888, _0x192182);
            return;
          }
          _0xf71899.Indexer.requestIndexingFromBackgroundThread('index', this._serviceId, this._serviceProvider, this._indexOptions, _0x40f840, _0x42b888, _0x192182);
        }
        refreshIndexing(_0x1e3c71, _0x15f7c3, _0x209270, _0x476dc7) {
          if (this._openFiles.size === 0) {
            this._pendIndexingRequest('refresh', _0x1e3c71, _0x15f7c3, _0x209270);
            return;
          }
          _0xf71899.Indexer.requestIndexingFromBackgroundThread('refresh', this._serviceId, this._serviceProvider, this._indexOptions, _0x1e3c71, _0x15f7c3, _0x209270, _0x476dc7);
        }
        cancelIndexing() {
          return _0xf71899.Indexer.cancelIndexingRequest(this._serviceId);
        }
        async analysisRequest(_0x45ca7f, _0x2e7fdd) {
          const {
            port1: _0x4ec64a,
            port2: _0x52452a
          } = new _0x11628b.MessageChannel();
          const _0x9b8bc3 = _0x2f4a57.getBackgroundWaiter(_0x4ec64a);
          this.enqueueRequest({
            requestType: _0x45ca7f,
            data: _0x283d0d(_0x2e7fdd),
            port: _0x52452a
          });
          const _0x520771 = await _0x9b8bc3;
          _0x52452a.close();
          _0x4ec64a.close();
          return _0x520771;
        }
        enqueueRequest(_0x2dc84c) {
          this._ensureWorkerStarted();
          super.enqueueRequest(_0x2dc84c);
        }
        onMessage(_0x56f31b) {
          switch (_0x56f31b.requestType) {
            case 'telemetry':
              {
                this._telemetry.sendTelemetry(_0xfd96b3(_0x56f31b.data));
                break;
              }
            default:
              {
                super.onMessage(_0x56f31b);
              }
          }
        }
        handleBackgroundResponse(_0x4432c4) {
          switch (_0x4432c4.requestType) {
            case 'indexWorkspaceResult':
              {
                if (this.program) {
                  const _0x5d6bc0 = _0xfd96b3(_0x4432c4.data);
                  const _0x234b19 = this._serviceProvider.get(_0x54cd81.PylanceServiceKeys.globalIndices).getIndices(this.program);
                  if (_0x234b19 === null || _0x234b19 === undefined) {
                    undefined;
                  } else {
                    _0x234b19.setWorkspaceIndex(_0x5d6bc0.uri, _0x5d6bc0);
                  }
                }
                break;
              }
            default:
              {
                super.handleBackgroundResponse(_0x4432c4);
              }
          }
        }
        get _telemetry() {
          return this._serviceProvider.get(_0x54cd81.PylanceServiceKeys.telemetry);
        }
        _ensureWorkerStarted() {
          var _0x4f552e;
          var _0x368631;
          if (!this._createdWorker) {
            this._createdWorker = true;
            const _0x415734 = {
              rootUri: ((_0x4f552e = _0x3168a9.getRootUri(this._serviceProvider)) === null || _0x4f552e === undefined ? undefined : _0x4f552e.toString()) ?? '',
              serviceId: this._serviceId,
              cancellationFolderName: _0x520338.getCancellationFolderName(),
              runner: undefined,
              workerIndex: ++_0x550d47._workerIndex
            };
            this._workerRef = new _0x11628b.Worker(_0x168e3f.mainFilename, {
              workerData: _0x415734
            });
            this.setup(new _0x1b3b9a.FilteringWorker(this._workerRef, _0x155fba => !!_0x155fba.requestType));
            this._fileHandler = new _0x9789d2.ForegroundFileRequestHandler(this._workerRef, this._serviceProvider.fs());
            if ((_0x368631 = this._serviceProvider.cacheManager()) === null || _0x368631 === undefined) {
              undefined;
            } else {
              _0x368631.addWorker(_0x415734.workerIndex, this._workerRef);
            }
          }
        }
        _pendIndexingRequest(_0x28db0e, _0x48bab3, _0x3dc594, _0x531f55) {
          this.cancelIndexing();
          this._pendingIndexingRequest = {
            type: _0x28db0e,
            configOptions: _0x48bab3,
            importResolver: _0x3dc594,
            kind: _0x531f55
          };
        }
      }
      exports.BackgroundAnalysis = _0x550d47;
      _0x550d47._workerIndex = 0;
      class _0x48d044 extends _0x25c7cb.BackgroundAnalysisRunnerBase {
        constructor(_0x4aeb66) {
          _0x4aeb66.add(_0x4b9078.ServiceKeys.sourceFileFactory, new _0x35e081.DiagnosticsRemapper());
          _0x4aeb66.add(_0x4b9078.ServiceKeys.debugInfoInspector, new _0x59deaf.PylanceDebugInfoInspector());
          super(_0x4aeb66);
          this._openFiles = new Set();
          _0x4aeb66.add(_0x54cd81.PylanceServiceKeys.profilingService, new _0x1402c8.ProfilingService(_0x4aeb66, this.logTracker.prefix));
          _0x54cd81.registerServices(this.program.serviceProvider, new _0x27b6e7.DeclarationFinder(this.program), _0x54cd81.PylanceServiceKeys.declarationFinder, _0x4b9078.ServiceKeys.stateMutationListeners);
          this._telemetryDuration = new _0x34af72.Duration();
          this._lastTelemetryReported = -Infinity;
          this._indexTrackingMap = new WeakMap();
          this._startupDuration = new _0x34af72.Duration();
          this._startupTelemetry = this._initialStartupTelemetry();
          this._fileOpenedSinceLastTelemetry = false;
          this._programMutator = {
            addInterimFile: _0x460f47 => this.program.addInterimFile(_0x460f47),
            setFileOpened: (_0x5f0183, _0x440407, _0x30f822, _0x28872b, _0x162a91) => {
              this.program.setFileOpened(_0x5f0183, _0x440407, _0x30f822, {
                isTracked: this.program.owns(_0x5f0183),
                ipythonMode: _0x28872b,
                chainedFileUri: _0x162a91
              });
            },
            updateOpenFileContents: (_0x4c598f, _0x3e6953, _0x578aaa, _0x503feb) => {
              this.program.setFileOpened(_0x4c598f, _0x3e6953, _0x578aaa, {
                isTracked: this.program.owns(_0x4c598f),
                ipythonMode: _0x503feb,
                chainedFileUri: undefined
              });
            }
          };
          this._telemetry = {
            sendTelemetry(_0x32c699) {
              if (_0x11628b.parentPort === null || _0x11628b.parentPort === undefined) {
                undefined;
              } else {
                _0x11628b.parentPort.postMessage({
                  requestType: 'telemetry',
                  data: _0x283d0d(_0x32c699)
                });
              }
            },
            addPropertyToNextEvent(_0x4eb06e, _0x1edb62, _0x1408a8) {}
          };
          const _0x111095 = new _0x4412e0();
          _0x111095.addHandler('getSemanticTokens', _0x42f33c => this._getSemanticTokensHandler(_0x42f33c.fileUri, _0x42f33c.range, _0x42f33c.includeSyntaxToken, _0x42f33c.previousResultId, _0x42f33c.cancellationToken));
          _0x111095.addHandler('getInlayHints', _0x7a46bc => this._getInlayHintsHandler(_0x7a46bc.fileUri, _0x7a46bc.range, _0x7a46bc.options, _0x7a46bc.cancellationToken));
          _0x111095.addHandler('setExperimentOptions', async _0x298c32 => this._setExperimentOptionsHandler(_0x298c32));
          _0x111095.addHandler('setIndexOptions', async _0x2ca6ed => {
            this._indexOptions = _0x2ca6ed;
          });
          _0x111095.addHandler('setNotebookData', _0x44db59 => this._setNotebookDataHandler(_0x44db59.kind, _0x44db59.fileUri, _0x44db59.data));
          _0x111095.addHandler('startProfiling', _0x550b87 => this._startProfiling(_0x550b87));
          _0x111095.addHandler('stopProfiling', () => this._stopProfiling());
          _0x111095.addHandler('indexWorkspaceSymbols', (_0x2ee387, _0x155448) => this._handleIndexWorkspaceSymbols(_0x155448, _0x2ee387.token));
          this._pylanceMsgHandlers = _0x111095.build();
        }
        start() {
          super.start();
        }
        onMessage(_0x55f711) {
          const _0x2fcae0 = _0x55f711.requestType;
          const _0x3bf440 = this._pylanceMsgHandlers[_0x2fcae0];
          if (_0x3bf440) {
            if (_0xa2ef45(_0x2fcae0)) {
              const _0x2b8970 = _0xfd96b3(_0x55f711.data);
              _0x3bf440(_0x2b8970, this.responsePort);
            } else {
              _0x2f4a57.run(() => {
                const _0x1181a7 = _0xfd96b3(_0x55f711.data);
                return _0x3bf440(_0x1181a7, _0x55f711.port);
              }, _0x55f711.port, _0x283d0d);
            }
          } else {
            super.onMessage(_0x55f711);
          }
          const _0x536b1d = process.memoryUsage();
          if (_0x536b1d.rss !== 0) {
            this._startupTelemetry.peakRss = Math.max(_0x536b1d.rss, this._startupTelemetry.peakRss ?? 0);
          }
        }
        handleAnalyze(_0xc7fc10, _0x1d081a) {
          this._analysisDuration = this._analysisDuration ?? new _0x34af72.Duration();
          super.handleAnalyze(_0xc7fc10, _0x1d081a);
        }
        handleSetImportResolver(_0x227a50) {
          this._hostKind = _0x227a50;
          super.handleSetImportResolver(_0x227a50);
        }
        handleSetConfigOptions(_0x37532f) {
          this._resetStartupTelemetry();
          super.handleSetConfigOptions(_0x37532f);
        }
        handleSetFileOpened(_0x566a8c, _0x1cf51b, _0x28a064, _0x192a29) {
          var _0x4f2db0;
          this._openFiles.add(_0x566a8c.key);
          if (!this._fileOpenedSinceLastTelemetry) {
            if (this._startupDuration && this._startupTelemetry.preSetFileOpenMs === 0) {
              this._startupTelemetry.preSetFileOpenMs = (_0x4f2db0 = this._startupDuration) === null || _0x4f2db0 === undefined ? undefined : _0x4f2db0.getDurationInMilliseconds();
            }
            this._startupDuration = new _0x34af72.Duration();
            this._fileOpenedSinceLastTelemetry = true;
          }
          this._setIndexingNeeded(_0x566a8c, true);
          super.handleSetFileOpened(_0x566a8c, _0x1cf51b, _0x28a064, _0x192a29);
        }
        handleSetFileClosed(_0x37a2be, _0x492d10) {
          this._openFiles.delete(_0x37a2be.key);
          this._setIndexingNeeded(_0x37a2be, true);
          super.handleSetFileClosed(_0x37a2be, _0x492d10);
        }
        handleSetTrackedFiles(_0x35784c) {
          _0x35784c.forEach(_0x4a7cef => this._setIndexingNeeded(_0x4a7cef, true));
          super.handleSetTrackedFiles(_0x35784c);
        }
        handleMarkFilesDirty(_0x4c7d42, _0x5270e2) {
          _0x4c7d42.forEach(_0x41e991 => this._setIndexingNeeded(_0x41e991, true));
          super.handleMarkFilesDirty(_0x4c7d42, _0x5270e2);
        }
        handleMarkAllFilesDirty(_0x14b6d4) {
          this.program.getUserFiles().forEach(_0x4f8b7e => this._indexTrackingMap.delete(_0x4f8b7e));
          super.handleMarkAllFilesDirty(_0x14b6d4);
        }
        handleInvalidateAndForceReanalysis(_0x178e71) {
          if (_0x178e71 === _0x5f74e1.InvalidatedReason.SourceWatcherChanged && this._indexOptions?.includeAliasesFromUserFiles) {
            this.program.getUserFiles().forEach(_0x79cb6f => this._indexTrackingMap.delete(_0x79cb6f));
          }
          super.handleInvalidateAndForceReanalysis(_0x178e71);
        }
        handleRestart() {
          this._resetStartupTelemetry();
          super.handleRestart();
        }
        analysisDone(_0x4d6460, _0x492d44) {
          super.analysisDone(_0x4d6460, _0x492d44);
          const _0x3ff2a4 = this._telemetryDuration.getDurationInSeconds();
          if (_0x3ff2a4 - this._lastTelemetryReported > _0x17dc6c.TelemetryWaitTimeSeconds) {
            this.importResolver.sendTelemetry();
            this._lastTelemetryReported = _0x3ff2a4;
          }
          if (this._startupDuration && this._analysisDuration) {
            this._startupTelemetry.totalMs = this._startupDuration.getDurationInMilliseconds();
            this._startupTelemetry.analysisMs = this._analysisDuration.getDurationInMilliseconds() - this._startupTelemetry.userIndexMs;
            const _0x27abf7 = new _0x17dc6c.TelemetryEvent(_0x17dc6c.TelemetryEventName.STARTUP_METRICS);
            _0x27abf7.Measurements.tokenRangeMs = this._startupTelemetry.tokenRangeMs;
            _0x27abf7.Measurements.tokenFullMs = this._startupTelemetry.tokenFullMs;
            _0x27abf7.Measurements.tokenDeltaMs = this._startupTelemetry.tokenDeltaMs;
            _0x27abf7.Measurements.analysisMs = this._startupTelemetry.analysisMs;
            _0x27abf7.Measurements.userIndexMs = this._startupTelemetry.userIndexMs;
            _0x27abf7.Measurements.totalMs = this._startupTelemetry.totalMs;
            _0x27abf7.Measurements.preSetFileOpenMs = this._startupTelemetry.preSetFileOpenMs;
            if (this._startupTelemetry.peakRss !== undefined) {
              _0x27abf7.Measurements.peakRssMB = this._startupTelemetry.peakRss / 1024 / 1024;
            }
            this._telemetry.sendTelemetry(_0x27abf7);
            this._startupDuration = undefined;
            this._analysisDuration = undefined;
            this._startupTelemetry = this._initialStartupTelemetry();
          }
        }
        onAnalysisCompletion(_0x68f991, _0x30bbf7) {
          _0x30bbf7.diagnosticsSeen = _0x4dc8c5.getDiagnosticsSeen(_0x30bbf7.diagnostics);
          super.onAnalysisCompletion(_0x68f991, _0x30bbf7);
        }
        createHost() {
          return _0x5a31bc.PylanceFullAccessHost.createHost(this._hostKind ?? 1, this.serviceProvider);
        }
        createImportResolver(_0x3b561c, _0x5d1e1f, _0xc99d68) {
          return _0x25ee2f.createPylanceImportResolver(_0x3b561c, _0x5d1e1f, _0xc99d68, this._telemetry);
        }
        _setExperimentOptionsHandler(_0x1339e0) {
          _0x31238c.setForceEnglishDiagnostics(!!_0x1339e0.displayEnglishDiagnostics);
          const _0x3a17cb = _0x2a03d1.tryAddFixtureFinder(this.program.serviceProvider, _0x1339e0, this.program, this._programMutator);
          if (_0x3a17cb === null || _0x3a17cb === undefined) {
            undefined;
          } else {
            _0x3a17cb.onUpdateSettings(_0x1339e0);
          }
          const _0x55540e = this.getConsole();
          if (_0x55540e instanceof _0x2f4a57.BackgroundConsole) {
            _0x55540e.level = _0xf7e06b.IS_INSIDERS ? _0x5cedf9.LogLevel.Log : _0x1339e0.logLevel ?? _0x5cedf9.LogLevel.Info;
          }
        }
        _getSemanticTokensHandler(_0x438894, _0x1037b8, _0x1119b0, _0x213107, _0x1406f6) {
          const _0x4ab7db = _0x1037b8 !== undefined ? 'range' : _0x34d107.isString(_0x213107) ? 'delta' : 'full';
          const _0xa84339 = new _0x34af72.Duration();
          const _0x23d617 = _0x17dc6c.trackPerf(this._telemetry, _0x17dc6c.TelemetryEventName.SEMANTICTOKENS_SLOW, _0x27601b => {
            const _0x5f5d0b = _0x137186(_0x4ab7db, _0x1037b8, _0x213107);
            const _0x216c67 = this.logTracker.log(`SemanticTokens ${_0x5f5d0b} at ${_0x438894}`, _0x43ef6f => {
              return _0x366c30.getSemanticTokens(this.program, _0x438894, _0x1037b8, _0x1119b0, _0x213107, _0x1406f6);
            });
            _0x27601b.addCustomProperty('type', _0x4ab7db);
            if (_0x364ad9.SemanticTokens.is(_0x216c67)) {
              _0x27601b.addCustomMeasure('count', _0x216c67.data.length);
            } else {
              _0x27601b.addCustomMeasure('count', _0x216c67.edits.length);
            }
            return _0x216c67;
          }, _0x1a15d2);
          if (_0x4ab7db === 'range') {
            this._startupTelemetry.tokenRangeMs += _0xa84339.getDurationInMilliseconds();
          } else {
            if (_0x4ab7db === 'full') {
              this._startupTelemetry.tokenFullMs += _0xa84339.getDurationInMilliseconds();
            } else {
              if (_0x4ab7db === 'delta') {
                this._startupTelemetry.tokenDeltaMs += _0xa84339.getDurationInMilliseconds();
              }
            }
          }
          return _0x23d617;
        }
        _setIndexingNeeded(_0x38d206, _0x222580) {
          const _0x195285 = this.program.getSourceFileInfo(_0x38d206);
          if (_0x195285) {
            this._indexTrackingMap.set(_0x195285, !_0x222580);
            if (_0x222580 && this._indexOptions?.includeAliasesFromUserFiles) {
              this._markIndexingNeededRecursive(_0x195285, new Set());
            }
          }
        }
        _markIndexingNeededRecursive(_0x50431d, _0x43b013) {
          const _0x41bf82 = _0x50431d.sourceFile.getUri();
          if (_0x43b013.has(_0x41bf82.key)) {
            return;
          }
          this._indexTrackingMap.set(_0x50431d, false);
          _0x43b013.add(_0x41bf82.key);
          _0x50431d.importedBy.forEach(_0x57e7e7 => {
            this._markIndexingNeededRecursive(_0x57e7e7, _0x43b013);
          });
        }
        _getMaxUserFilesIndexCount() {
          if (this._indexOptions?.userFileIndexingLimit === undefined) {
            return _0x9d8fcd;
          }
          if (this._indexOptions.userFileIndexingLimit >= 0) {
            return this._indexOptions.userFileIndexingLimit;
          } else {
            return Number.MAX_SAFE_INTEGER;
          }
        }
        _handleIndexWorkspaceSymbols(_0x5e7465, _0x1f330) {
          if (this._openFiles.size === 0) {
            return;
          }
          try {
            const _0x2471a8 = new _0x34af72.Duration();
            _0x17dc6c.trackPerf(this._telemetry, _0x17dc6c.TelemetryEventName.WORKSPACEINDEX_SLOW, _0x5f5a99 => {
              const _0x56303b = this._getMaxUserFilesIndexCount();
              const _0x4a6b63 = _0xf9a032.SymbolIndexer.indexWorkspace(this.logTracker, this.program, this._indexTrackingMap, _0x56303b, this._indexOptions?.includeAliasesFromUserFiles ?? false, (_0x30db16, _0x10609e) => {
                this.log(_0x5cedf9.LogLevel.Log, `Workspace indexing done: ${_0x30db16}`);
                this._reportIndex(_0x5e7465, _0x10609e);
              }, _0x1f330);
              if (_0x4a6b63 >= _0x56303b) {
                this.log(_0x5cedf9.LogLevel.Warn, `Workspace indexing has hit its upper limit: ${_0x56303b} files`);
                const _0x1ca40f = new _0x17dc6c.TelemetryEvent(_0x17dc6c.TelemetryEventName.WORKSPACEINDEX_THRESHOLD_REACHED);
                _0x1ca40f.Measurements.index_count = _0x4a6b63;
                this._telemetry.sendTelemetry(_0x1ca40f);
              }
              _0x5f5a99.addCustomMeasure('count', _0x4a6b63);
            }, _0x110e59);
            this._startupTelemetry.userIndexMs = _0x2471a8.getDurationInMilliseconds();
          } catch (_0x46fef0) {
            if (_0x520338.OperationCanceledException.is(_0x46fef0)) {
              return;
            }
            this.log(_0x5cedf9.LogLevel.Error, _0x46fef0.message);
          }
        }
        _reportIndex(_0x152076, _0x5df452) {
          _0x152076.postMessage({
            requestType: 'indexWorkspaceResult',
            data: _0x283d0d(_0x5df452)
          });
        }
        _resetStartupTelemetry() {
          this._startupDuration = new _0x34af72.Duration();
          this._analysisDuration = undefined;
          this._fileOpenedSinceLastTelemetry = false;
          this._startupTelemetry = this._initialStartupTelemetry();
        }
        _initialStartupTelemetry() {
          return {
            preSetFileOpenMs: 0,
            tokenRangeMs: 0,
            tokenFullMs: 0,
            tokenDeltaMs: 0,
            analysisMs: 0,
            userIndexMs: 0,
            totalMs: 0
          };
        }
        _getInlayHintsHandler(_0x1e60ab, _0x4b50e9, _0x244188, _0x31b98a) {
          return _0x17dc6c.trackPerf(this._telemetry, _0x17dc6c.TelemetryEventName.INLAYHINTS_SLOW, () => {
            const _0xa2f41b = this.logTracker.log(`InlayHints range ${_0x4b50e9.start.line}:${_0x4b50e9.start.character} - ${_0x4b50e9.end.line}:${_0x4b50e9.end.character} at ${_0x1e60ab}`, () => {
              return _0x71f235.getInlayHints(this.program, _0x1e60ab, _0x4b50e9, _0x244188, _0x31b98a);
            });
            return _0xa2f41b;
          }, _0xccaf67);
        }
        _setNotebookDataHandler(_0x3ecf11, _0xb1f53, _0x18d64f) {
          const _0x2d23a5 = this.program.serviceProvider.tryGet(_0x4b9078.ServiceKeys.debugInfoInspector);
          if (_0x2d23a5) {
            const _0x8bec42 = {
              kind: _0x3ecf11,
              fileUri: _0xb1f53,
              data: _0x18d64f
            };
            _0x2d23a5.setNotebookData(_0x8bec42);
          }
        }
        async _startProfiling(_0x5a19b6) {
          const _0x1d459f = this.program.serviceProvider.tryGet(_0x54cd81.PylanceServiceKeys.profilingService);
          if (!_0x1d459f) {
            return undefined;
          }
          return await _0x1d459f.startProfiling(_0x5a19b6);
        }
        async _stopProfiling() {
          const _0x1ef0f1 = this.program.serviceProvider.tryGet(_0x54cd81.PylanceServiceKeys.profilingService);
          if (!_0x1ef0f1) {
            return undefined;
          }
          return await _0x1ef0f1.stopProfiling();
        }
      }
      exports.BackgroundAnalysisRunner = _0x48d044;
      function _0x173937() {
        const _0x24f843 = _0x11628b.workerData;
        const _0x55702c = new _0x2f4a57.BackgroundConsole();
        const _0x5b7869 = new _0xb24756.RealTempFile();
        const _0x22371b = new _0x512c4.NotebookUriMapper(_0x5b7869);
        const _0x16529b = _0x4ad3a3(_0x24f843.runner, _0x22371b, _0x5b7869, _0x55702c);
        const _0x61dd65 = _0x54cd81.createPylanceServiceProvider(_0x55702c, _0x16529b, _0x22371b, _0x5b7869);
        if (!_0x24f843.runner) {
          const _0x463828 = new _0x48d044(_0x61dd65);
          _0x463828.start();
        }
        if (_0x24f843.runner === 'indexer') {
          const _0x33951e = new _0xf71899.BackgroundIndexRunner(_0x61dd65);
          _0x33951e.start();
        }
      }
      function _0x4ad3a3(_0x4c9ab2, _0x3369d7, _0x133212, _0x89019f) {
        if (_0x4c9ab2 === 'indexer') {
          const _0x51a784 = _0x45c9f0.createIndexerFileSystem(_0x133212, _0x89019f);
          return _0x2df517.PylanceFileSystem.createWithoutRemote(_0x51a784, _0x3369d7);
        }
        const _0x187f65 = _0xb24756.createFromRealFileSystem(_0x133212, _0x89019f);
        const _0x1b2c7b = new _0x9789d2.BackgroundRemoteFileSystem();
        return _0x2df517.PylanceFileSystem.createFromFileSystem(_0x187f65, _0x1b2c7b, _0x3369d7);
      }
      function _0x137186(_0x21f889, _0x26c204, _0x539440) {
        let _0x5dda28 = `${_0x21f889}`;
        if (_0x26c204) {
          _0x5dda28 += ` ${_0x26c204.start.line}:${_0x26c204.start.character} - ${_0x26c204.end.line}:${_0x26c204.end.character}`;
        }
        if (_0x539440) {
          _0x5dda28 += ` previousResultId:${_0x539440}`;
        }
        return _0x5dda28;
      }
      const _0xccaf67 = 2000;
      const _0x1a15d2 = 2000;
      const _0x110e59 = 10000;
      const _0x9d8fcd = 2000;
      function _0xa2ef45(_0x43aad3) {
        return _0x43aad3 === 'indexWorkspaceSymbols';
      }
      class _0x4412e0 {
        constructor() {
          this._handlers = {};
        }
        addHandler(_0xf96d99, _0x4c322a) {
          this._handlers[_0xf96d99] = _0x4c322a;
          return this;
        }
        build() {
          return this._handlers;
        }
      }
      function _0x51c52b(_0x2da41c) {
        if (_0x2da41c instanceof _0x203603.UriMap) {
          return {
            uri_map_val: [..._0x2da41c]
          };
        }
        return _0x2f4a57.serializeReplacer(_0x2da41c);
      }
      function _0x378bc8(_0x213331) {
        if (_0x213331 && typeof _0x213331 === 'object') {
          if (_0x213331.uri_map_val) {
            const _0x334af9 = new _0x203603.UriMap();
            for (const [_0x32c71a, _0x374dff] of _0x213331.uri_map_val) {
              _0x334af9.set(_0x32c71a, _0x374dff);
            }
            return _0x334af9;
          }
        }
        return _0x2f4a57.deserializeReviver(_0x213331);
      }
      function _0x3828d4(_0x2a9865, _0x58c10e = new Set()) {
        if (_0x2a9865 === undefined) {
          return _0x2a9865;
        }
        if (_0x4a7df2.Uri.is(_0x2a9865) && _0x2a9865.toJsonObj !== undefined) {
          return {
            __serialized_uri_val: _0x2a9865.toJsonObj()
          };
        }
        if (_0x364ad9.CancellationToken.is(_0x2a9865)) {
          return {
            cancellation_token_val: _0x520338.getCancellationTokenId(_0x2a9865)
          };
        }
        if (_0x35dd30.PythonVersion.is(_0x2a9865)) {
          return _0x2a9865;
        }
        if (_0x2a9865 instanceof RegExp) {
          return {
            __serialized_regexp_val: {
              source: _0x2a9865.source,
              flags: _0x2a9865.flags
            }
          };
        }
        if (_0x2a9865 instanceof _0x1c2b1e.ConfigOptions) {
          return {
            __serialized_config_options: _0xe78a17(_0x2a9865)
          };
        }
        if (_0x2a9865 instanceof _0x203603.UriMap) {
          return {
            uri_map_val: _0x3828d4([..._0x2a9865])
          };
        }
        if (_0x2a9865 instanceof Map) {
          return {
            __serialized_map_val: _0x3828d4([..._0x2a9865])
          };
        }
        if (_0x2a9865 instanceof Set) {
          return {
            __serialized_set_val: _0x3828d4([..._0x2a9865])
          };
        }
        if (Array.isArray(_0x2a9865)) {
          return _0x2a9865.map(_0x5c5e9f => _0x3828d4(_0x5c5e9f, _0x58c10e));
        }
        if (typeof _0x2a9865 !== 'object') {
          return _0x2a9865;
        }
        _0x4b714f();
        return _0xe78a17(_0x2a9865);
        function _0xe78a17(_0x462ae2) {
          const _0x53e54b = Object.keys(_0x462ae2);
          const _0x4178e7 = Object.create(null);
          for (const _0x1f191c of _0x53e54b) {
            _0x4178e7[_0x1f191c] = _0x3828d4(_0x462ae2[_0x1f191c], _0x58c10e);
          }
          return _0x4178e7;
        }
        function _0x4b714f() {
          if (_0x58c10e.has(_0x2a9865)) {
            throw new Error('Can\'t deep copy cyclic structures.');
          }
          _0x58c10e.add(_0x2a9865);
        }
      }
      function _0x2e33e5(_0x59d316) {
        return _0x4200ef(_0x59d316);
      }
      function _0x4200ef(_0x295724) {
        if (_0x295724 === undefined) {
          return _0x295724;
        }
        if (_0x295724.cancellation_token_val) {
          return _0x409f0b.getCancellationTokenFromId(_0x295724.cancellation_token_val);
        }
        if (_0x295724.__serialized_uri_val !== undefined) {
          return _0x4a7df2.Uri.fromJsonObj(_0x295724.__serialized_uri_val);
        }
        if (_0x295724.__serialized_regexp_val) {
          return new RegExp(_0x295724.__serialized_regexp_val.source, _0x295724.__serialized_regexp_val.flags);
        }
        if (_0x295724.__serialized_config_options) {
          const _0x522b5c = new _0x1c2b1e.ConfigOptions(_0x4a7df2.Uri.empty());
          Object.assign(_0x522b5c, _0x4200ef(_0x295724.__serialized_config_options));
          return _0x522b5c;
        }
        if (_0x295724.uri_map_val) {
          const _0x4a9d5e = new _0x203603.UriMap();
          for (const _0x4961c3 of _0x295724.uri_map_val) {
            const [_0x2d7cae, _0xca9df2] = _0x4200ef(_0x4961c3);
            _0x4a9d5e.set(_0x2d7cae, _0xca9df2);
          }
          return _0x4a9d5e;
        }
        if (_0x295724.__serialized_map_val) {
          return new Map(_0x4200ef(_0x295724.__serialized_map_val));
        }
        if (_0x295724.__serialized_set_val) {
          return new Set(_0x4200ef(_0x295724.__serialized_set_val));
        }
        if (Array.isArray(_0x295724)) {
          return _0x295724.map(_0x1a3e88 => _0x4200ef(_0x1a3e88));
        }
        if (typeof _0x295724 !== 'object') {
          return _0x295724;
        }
        const _0x1f55a2 = Object.keys(_0x295724);
        const _0x4721e8 = Object.create(null);
        for (const _0x4cc9d3 of _0x1f55a2) {
          _0x4721e8[_0x4cc9d3] = _0x4200ef(_0x295724[_0x4cc9d3]);
        }
        return _0x4721e8;
      }
      function _0x283d0d(_0x5d583d) {
        return JSON.stringify(_0x5d583d, (_0x2564d1, _0x16214a) => _0x51c52b(_0x16214a));
      }
      function _0xfd96b3(_0x32ae4c) {
        if (!_0x32ae4c) {
          return undefined;
        }
        if (_0x34d107.isString(_0x32ae4c)) {
          return JSON.parse(_0x32ae4c, (_0x4a5d41, _0x7780e3) => _0x378bc8(_0x7780e3));
        } else {
          return _0x378bc8(_0x32ae4c);
        }
      }
      function _0x166088(_0x2426bc) {
        return _0xfd96b3(_0x283d0d(_0x2426bc));
      }
    },
    61569: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BackgroundAnalysisFactory = undefined;
      const _0x4280e6 = require(85417);
      class _0x47ab84 {
        constructor(_0x38d2c2) {
          this._serviceProvider = _0x38d2c2;
        }
        createBackgroundAnalysis(_0x1e0110) {
          return new _0x4280e6.BackgroundAnalysis(_0x1e0110, this._serviceProvider);
        }
      }
      exports.BackgroundAnalysisFactory = _0x47ab84;
    },
    88335: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AddImportCommand = undefined;
      const _0x91ad0b = require(91426);
      const _0x431d79 = require(27113);
      const _0x1edde2 = require(74382);
      const _0x42b37c = require(78031);
      const _0x1bacb8 = require(13259);
      const _0x35c0eb = require(30048);
      const _0x4a3ecc = require(86615);
      const _0x3d5fa7 = require(74899);
      class _0x499544 {
        execute(_0x2930ec, _0x2115d1, _0x5e2a03) {
          _0x91ad0b.throwIfCancellationRequested(_0x5e2a03);
          if (!_0x2115d1.arguments || _0x2115d1.arguments.length < 3) {
            return [];
          }
          const _0x3a45d0 = _0x431d79.Uri.parse(_0x2115d1.arguments[0], _0x2930ec.service.serviceProvider);
          const _0x5319ed = _0x2115d1.arguments[1];
          const _0x24a2e2 = _0x2115d1.arguments[2];
          const _0x3e5b0d = this._getArguments(_0x2115d1.arguments, 3);
          const _0x46a1ab = this._getArguments(_0x2115d1.arguments, 4);
          const _0x195350 = _0x2930ec.service.run(_0x418b7b => {
            const _0x450937 = 1;
            return _0x4a3ecc.getAutoImports(_0x418b7b, _0x3a45d0, _0x5319ed, _0x450937, _0x1bacb8.wellKnownAbbreviationMap, {
              lazyEdit: false,
              importFormat: _0x2930ec.importFormat,
              indices: _0x3d5fa7.SymbolIndexer.getIndices(_0x2930ec),
              nameToSearch: _0x46a1ab ?? _0x24a2e2,
              includeAliasesFromUserFiles: _0x2930ec.indexOptions?.includeAliasesFromUserFiles,
              allowDuplicatedAliasesFromUserFiles: true
            }, _0x5e2a03);
          }, _0x5e2a03);
          const _0x3036b6 = _0x195350.find(_0x1ac04b => _0x1ac04b.name === _0x24a2e2 && _0x1ac04b.source === _0x3e5b0d);
          if (!_0x3036b6) {
            return [];
          }
          const _0x5c6f9e = _0x2930ec.service.serviceProvider.tryGet(_0x35c0eb.PylanceServiceKeys.mruQueues);
          if (_0x5c6f9e) {
            _0x5c6f9e.getGlobalMRUQueue(_0x42b37c.addImportMRUKey).enqueue(_0x3036b6);
          }
          return _0x1edde2.convertToWorkspaceEdit(_0x2930ec.service.fs, [..._0x3036b6.edits.map(_0x5b8699 => {
            return {
              fileUri: _0x3a45d0,
              range: _0x5b8699.range,
              replacementText: _0x5b8699.replacementText
            };
          }), {
            fileUri: _0x3a45d0,
            range: _0x5319ed,
            replacementText: _0x3036b6.insertionText
          }]);
        }
        getFile(_0x1dfb6f) {
          if (_0x1dfb6f.arguments) {
            return _0x1dfb6f.arguments[0];
          } else {
            return undefined;
          }
        }
        _getArguments(_0x342cca, _0x4a6592) {
          var _0x456acb;
          if (_0x342cca.length <= _0x4a6592) {
            return undefined;
          } else {
            if ((_0x456acb = _0x342cca[_0x4a6592]) !== null && _0x456acb !== undefined) {
              return _0x456acb;
            } else {
              return undefined;
            }
          }
        }
      }
      exports.AddImportCommand = _0x499544;
    },
    29725: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ChangeSpellingCommand = undefined;
      const _0x3c25ee = require(91426);
      const _0x1d2f1d = require(27113);
      const _0x353706 = require(74382);
      class _0x4f08c4 {
        execute(_0x396de9, _0x22c72a, _0x656fbb) {
          _0x3c25ee.throwIfCancellationRequested(_0x656fbb);
          if (!_0x22c72a.arguments || _0x22c72a.arguments.length < 3) {
            return [];
          }
          const _0x15d10a = _0x1d2f1d.Uri.parse(_0x22c72a.arguments[0], _0x396de9.service.serviceProvider);
          const _0x17e09c = _0x22c72a.arguments[1];
          const _0x101cbc = _0x22c72a.arguments[2];
          return _0x353706.convertToWorkspaceEdit(_0x396de9.service.fs, [{
            fileUri: _0x15d10a,
            range: _0x17e09c,
            replacementText: _0x101cbc
          }]);
        }
        getFile(_0x3e007f) {
          if (_0x3e007f.arguments) {
            return _0x3e007f.arguments[0];
          } else {
            return undefined;
          }
        }
      }
      exports.ChangeSpellingCommand = _0x4f08c4;
    },
    73117: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ClearPersistedIndicesCommand = undefined;
      const _0xbac909 = require(91426);
      const _0x302789 = require(49137);
      class _0x563f12 {
        constructor(_0x29d381) {
          this._ls = _0x29d381;
        }
        execute(_0x686759, _0x10f89b, _0x32c305) {
          _0xbac909.throwIfCancellationRequested(_0x32c305);
          const _0x2dccbb = _0x686759.service.fs;
          const _0x81a9d = _0x302789.getSpecialFolder(_0x2dccbb, _0x302789.SpecialFoldersKind.GlobalIndices);
          this._deleteFolder(_0x2dccbb, _0x81a9d);
          const _0x38ff23 = _0x302789.getSpecialFolder(_0x2dccbb, _0x302789.SpecialFoldersKind.LocalIndices);
          this._deleteFolder(_0x2dccbb, _0x38ff23);
        }
        getFile(_0x512527) {
          return undefined;
        }
        _deleteFolder(_0x1675f6, _0x734799) {
          if (!_0x1675f6.existsSync(_0x734799)) {
            return;
          }
          _0x1675f6.readdirEntriesSync(_0x734799).forEach(_0x29b600 => {
            const _0x1cc2e8 = _0x734799.combinePaths(_0x29b600.name);
            if (_0x29b600.isDirectory()) {
              this._deleteFolder(_0x1675f6, _0x1cc2e8);
            }
            this._delete(_0x1675f6, _0x1cc2e8, _0x29b600.isDirectory());
          });
        }
        _delete(_0x5d6f38, _0x453f61, _0x318d9e) {
          try {
            if (_0x318d9e) {
              _0x5d6f38.rmdirSync(_0x453f61);
            } else {
              _0x5d6f38.unlinkSync(_0x453f61);
            }
          } catch (_0x599f5d) {}
        }
      }
      exports.ClearPersistedIndicesCommand = _0x563f12;
    },
    67299: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncCommandController = exports.AsyncCommandController = undefined;
      const _0x497965 = require(34455);
      const _0x2866c7 = require(48281);
      const _0x2cfe3c = require(27113);
      const _0x2e62a8 = require(69482);
      const _0x98ae1d = require(25283);
      const _0x403c74 = require(56910);
      const _0x4b75fd = require(89644);
      const _0x551900 = require(29725);
      const _0x5c0672 = require(73117);
      const _0xa84832 = require(27130);
      const _0x19b8fa = require(84754);
      const _0x4a1cd1 = require(99482);
      const _0x22bedc = require(21628);
      const _0x17f92b = require(16904);
      const _0x49b9b7 = require(79765);
      const _0x5bbe26 = require(41097);
      const _0x55859a = require(18106);
      const _0x49347c = require(15091);
      const _0x248334 = require(94473);
      const _0x1f74ae = require(32662);
      const _0x511dcf = require(13355);
      const _0x4fe420 = require(54991);
      const _0x3a8720 = require(5174);
      const _0x31fc9f = require(63216);
      const _0xc08167 = require(48783);
      const _0x43260a = require(14054);
      const _0x30aa09 = require(94614);
      const _0x58da2b = new Set(['pyright.createtypestub', 'pyright.organizeimports', _0xa84832.Commands.createTypeStub, _0xa84832.Commands.orderImports, _0xa84832.Commands.addMissingOptionalToParam, _0xa84832.Commands.removeUnusedImport, _0xa84832.Commands.addImport, _0xa84832.Commands.changeSpelling, _0xa84832.Commands.extractMethod, _0xa84832.Commands.extractVariable, _0xa84832.Commands.executedClientCommand, _0xa84832.Commands.convertImportFormat, _0xa84832.Commands.moveSymbol, _0xa84832.Commands.fixAll, _0xa84832.Commands.addFixtureTypeAnnotation, _0xa84832.Commands.addAllFixtureTypeAnnotations, _0xa84832.Commands.clearPersistedIndices, _0xa84832.Commands.startProfiling, _0xa84832.Commands.stopProfiling, _0xa84832.Commands.startLogging, _0xa84832.Commands.stopLogging, _0xa84832.Commands.implementAllAbstractClasses, _0xa84832.Commands.implementAllAbstractClassesWithCopilot, _0xa84832.Commands.getAllDocstringRanges, _0xa84832.Commands.generateDocstring, _0xa84832.Commands.fixupCopilotDocstringOutput]);
      class _0x308e75 {
        constructor(_0x4c412c, _0x481221, _0x318e8b, _0x8141c6) {
          this.ls = _0x4c412c;
          this._telemetry = _0x318e8b;
          this._pylanceQuickAction = new _0x43260a.QuickActionCommand(_0x4c412c);
          this._extractMethod = new _0x49b9b7.ExtractMethodCommand(_0x8141c6);
          this._extractVariable = new _0x49b9b7.ExtractVariableCommand(_0x8141c6);
          this._completionAccepted = new _0x19b8fa.CompletionAcceptedCommand(_0x318e8b);
          this._convertImportFormat = new _0x4a1cd1.ConvertImportFormatCommand();
          this._moveSymbol = new _0x31fc9f.MoveSymbolCommand(_0x4c412c);
          this._getSourceFiles = new _0x511dcf.GetSourceFilesCommand();
          this._getAutoImports = new _0x1f74ae.GetAutoImportsCommand();
          this._changeSpelling = new _0x551900.ChangeSpellingCommand();
          this._fixAll = new _0x5bbe26.FixAllCommand(_0x318e8b);
          this._createTypeStub = new _0x22bedc.CreateTypeStubCommand(_0x4c412c);
          this._restartServer = new _0x30aa09.RestartServerCommand(_0x4c412c);
          this._dumpFileDebugInfo = new _0x17f92b.DumpFileDebugInfoCommand(_0x4c412c);
          this._clearPersistedIndices = new _0x5c0672.ClearPersistedIndicesCommand(_0x4c412c);
          this._addFixtureTypeAnnotationCommand = new _0x4b75fd.AddFixtureTypeAnnotationCommand();
          this._addAllFixtureTypeAnnotationsCommand = new _0x403c74.AddAllFixtureTypeAnnotationsCommand();
          this._intelliCodeCommand = new _0x98ae1d.IntelliCodeCommand(_0x481221, this._telemetry);
          this._startProfilingCommand = new _0xc08167.StartProfilingCommand(_0x4c412c);
          this._stopProfilingCommand = new _0xc08167.StopProfilingCommand(_0x4c412c);
          this._implementAllAbstractClasses = new _0x4fe420.implementAllAbstractClassesCommand();
          this._generateDocstring = new _0x49347c.GenerateDocstringCommand();
          this._fixupCopilotDocstringOutput = new _0x55859a.FixupCopilotDocstringOutput();
          const _0x447a01 = new _0x3a8720.LoggingCommandHandler(_0x4c412c);
          this._startLoggingCommand = new _0x3a8720.StartLoggingCommand(_0x447a01);
          this._stopLoggingCommand = new _0x3a8720.StopLoggingCommand(_0x447a01);
          this._getAllDocstringRanges = new _0x248334.GetAllDocstringRangesCommand(_0x4c412c);
        }
        static supportedCommands() {
          return ['pyright.createtypestub', 'pyright.organizeimports', 'pyright.dumpFileDebugInfo', _0xa84832.Commands.createTypeStub, _0xa84832.Commands.orderImports, _0xa84832.Commands.addMissingOptionalToParam, _0xa84832.Commands.removeUnusedImport, _0xa84832.Commands.addImport, _0xa84832.Commands.changeSpelling, _0xa84832.Commands.intelliCodeCompletionItemCommand, _0xa84832.Commands.intelliCodeLoadExtension, _0xa84832.Commands.extractMethod, _0xa84832.Commands.extractVariable, _0xa84832.Commands.completionAccepted, _0xa84832.Commands.executedClientCommand, _0xa84832.Commands.moveSymbol, _0xa84832.Commands.getSourceFiles, _0xa84832.Commands.getAutoImports, _0xa84832.Commands.convertImportFormat, _0xa84832.Commands.fixAll, _0xa84832.Commands.addAllFixtureTypeAnnotations, _0xa84832.Commands.addFixtureTypeAnnotation, _0xa84832.Commands.clearPersistedIndices, _0xa84832.Commands.startProfiling, _0xa84832.Commands.stopProfiling, _0xa84832.Commands.startLogging, _0xa84832.Commands.stopLogging, _0xa84832.Commands.implementAllAbstractClasses, _0xa84832.Commands.implementAllAbstractClassesWithCopilot, _0xa84832.Commands.getAllDocstringRanges, _0xa84832.Commands.generateDocstring, _0xa84832.Commands.fixupCopilotDocstringOutput];
        }
        isLongRunningCommand(_0x24ae5e) {
          switch (_0x24ae5e) {
            case _0xa84832.Commands.createTypeStub:
            case _0xa84832.Commands.fixAll:
            case _0xa84832.Commands.restartServer:
              return true;
            case _0xa84832.Commands.moveSymbol:
              return false;
          }
          return false;
        }
        isRefactoringCommand(_0x5b4651) {
          switch (_0x5b4651) {
            case _0xa84832.Commands.addFixtureTypeAnnotation:
            case _0xa84832.Commands.addAllFixtureTypeAnnotations:
            case _0xa84832.Commands.convertImportFormat:
            case _0xa84832.Commands.extractMethod:
            case _0xa84832.Commands.extractVariable:
            case _0xa84832.Commands.moveSymbol:
            case _0xa84832.Commands.implementAllAbstractClasses:
            case _0xa84832.Commands.implementAllAbstractClassesWithCopilot:
              return true;
          }
          return false;
        }
        executeCommand(_0x4fb091, _0x139462, _0x2a8b6d) {
          const _0x5764c4 = this.getCommand(_0x139462.command);
          if (_0x5764c4) {
            const _0x5f499e = _0x5764c4.execute(_0x4fb091, _0x139462, _0x2a8b6d);
            if (_0x497965.isThenable(_0x5f499e)) {
              return _0x5f499e.then(_0x55fb8b => this.stringifyUris(_0x55fb8b));
            }
            return this.stringifyUris(_0x5f499e);
          }
        }
        stringifyUris(_0xa3b533) {
          if (_0xa3b533 === undefined) {
            return _0xa3b533;
          }
          const _0x120922 = (_0x330c5d, _0x2b27e6) => {
            if (_0x2b27e6 && typeof _0x2b27e6 === 'object' && _0x2cfe3c.Uri.is(_0x2b27e6)) {
              return _0x2b27e6.toString();
            }
            return _0x2b27e6;
          };
          return JSON.parse(JSON.stringify(_0xa3b533, _0x120922));
        }
        getFileFromCommand(_0x1585ba) {
          const _0x2c3251 = this.getCommand(_0x1585ba.command);
          const _0x225d84 = _0x2c3251 === null || _0x2c3251 === undefined ? undefined : _0x2c3251.getFile(_0x1585ba);
          if (!_0x225d84) {
            return undefined;
          }
          if (_0x497965.isString(_0x225d84)) {
            return _0x2cfe3c.Uri.parse(_0x225d84, this.ls.serviceProvider);
          }
          return _0x225d84;
        }
        getCommand(_0x58f810) {
          switch (_0x58f810) {
            case _0xa84832.Commands.removeUnusedImport:
            case _0xa84832.Commands.addImport:
              return this._pylanceQuickAction;
            case _0xa84832.Commands.extractMethod:
              return this._extractMethod;
            case _0xa84832.Commands.extractVariable:
              return this._extractVariable;
            case _0xa84832.Commands.completionAccepted:
              return this._completionAccepted;
            case _0xa84832.Commands.convertImportFormat:
              return this._convertImportFormat;
            case _0xa84832.Commands.moveSymbol:
              return this._moveSymbol;
            case _0xa84832.Commands.getSourceFiles:
              return this._getSourceFiles;
            case _0xa84832.Commands.getAutoImports:
              return this._getAutoImports;
            case _0xa84832.Commands.changeSpelling:
              return this._changeSpelling;
            case _0xa84832.Commands.fixAll:
              return this._fixAll;
            case _0xa84832.Commands.restartServer:
              return this._restartServer;
            case 'pyright.createtypestub':
            case _0xa84832.Commands.createTypeStub:
              return this._createTypeStub;
            case _0xa84832.Commands.dumpFileDebugInfo:
              return this._dumpFileDebugInfo;
            case _0xa84832.Commands.clearPersistedIndices:
              return this._clearPersistedIndices;
            case _0xa84832.Commands.addFixtureTypeAnnotation:
              return this._addFixtureTypeAnnotationCommand;
            case _0xa84832.Commands.addAllFixtureTypeAnnotations:
              return this._addAllFixtureTypeAnnotationsCommand;
            case _0xa84832.Commands.intelliCodeCompletionItemCommand:
            case _0xa84832.Commands.intelliCodeLoadExtension:
              return this._intelliCodeCommand;
            case _0xa84832.Commands.startProfiling:
              return this._startProfilingCommand;
            case _0xa84832.Commands.stopProfiling:
              return this._stopProfilingCommand;
            case _0xa84832.Commands.startLogging:
              return this._startLoggingCommand;
            case _0xa84832.Commands.stopLogging:
              return this._stopLoggingCommand;
            case _0xa84832.Commands.implementAllAbstractClasses:
              return this._implementAllAbstractClasses;
            case _0xa84832.Commands.getAllDocstringRanges:
              return this._getAllDocstringRanges;
            case _0xa84832.Commands.generateDocstring:
              return this._generateDocstring;
            case _0xa84832.Commands.fixupCopilotDocstringOutput:
              return this._fixupCopilotDocstringOutput;
          }
          return undefined;
        }
        sendUserInitiatedCommandTelemetry(_0x159a1c) {
          if (this._telemetry && _0x58da2b.has(_0x159a1c.command)) {
            const _0x29e120 = new _0x2e62a8.TelemetryEvent(_0x2e62a8.TelemetryEventName.EXECUTE_COMMAND);
            if (_0x159a1c.command === _0xa84832.Commands.executedClientCommand) {
              const _0x167ed0 = _0x159a1c.arguments ? _0x159a1c.arguments[0] : undefined;
              _0x2866c7.assert(typeof _0x167ed0 === 'string');
              _0x2866c7.assert(Object.values(_0xa84832.ClientCommands).includes(_0x167ed0));
              _0x29e120.Properties.name = _0x167ed0;
            } else {
              _0x29e120.Properties.name = _0x159a1c.command;
            }
            this._telemetry.sendTelemetry(_0x29e120);
          }
        }
      }
      class _0xff4c75 extends _0x308e75 {
        async execute(_0x44bd53, _0xc46d77) {
          this.sendUserInitiatedCommandTelemetry(_0x44bd53);
          const _0xb21a95 = this.ls;
          const _0x10db17 = this.getFileFromCommand(_0x44bd53) ?? _0x2cfe3c.Uri.empty();
          const _0x2bc4c4 = await _0xb21a95.getWorkspaceForFile(_0x10db17);
          return this.executeCommand(_0x2bc4c4, _0x44bd53, _0xc46d77);
        }
      }
      exports.AsyncCommandController = _0xff4c75;
      class _0x402354 extends _0x308e75 {
        execute(_0x3254e3, _0x180e3f) {
          this.sendUserInitiatedCommandTelemetry(_0x3254e3);
          const _0x1d4cc8 = this.getFileFromCommand(_0x3254e3) ?? _0x2cfe3c.Uri.empty();
          const _0x1a770b = this.ls.getWorkspaceForFileSync(_0x1d4cc8);
          return this.executeCommand(_0x1a770b, _0x3254e3, _0x180e3f);
        }
      }
      exports.SyncCommandController = _0x402354;
    },
    27130: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ClientCommands = exports.Commands = undefined;
      exports.createCommandResult = _0x4b6cc6;
      var _0x5b03af;
      (function (_0xfac53f) {
        _0xfac53f.createTypeStub = 'python.createTypeStub';
        _0xfac53f.orderImports = 'python.orderImports';
        _0xfac53f.addMissingOptionalToParam = 'python.addOptionalForParam';
        _0xfac53f.removeUnusedImport = 'python.removeUnusedImport';
        _0xfac53f.addImport = 'python.addImport';
        _0xfac53f.intelliCodeCompletionItemCommand = 'python.intellicode.completionItemSelected';
        _0xfac53f.intelliCodeLoadExtension = 'python.intellicode.loadLanguageServerExtension';
        _0xfac53f.changeSpelling = 'pylance.changeSpelling';
        _0xfac53f.extractMethod = 'pylance.extractMethod';
        _0xfac53f.extractVariable = 'pylance.extractVariable';
        _0xfac53f.dumpFileDebugInfo = 'pyright.dumpFileDebugInfo';
        _0xfac53f.completionAccepted = 'pylance.completionAccepted';
        _0xfac53f.executedClientCommand = 'pylance.executedClientCommand';
        _0xfac53f.convertImportFormat = 'pylance.convertImportFormat';
        _0xfac53f.moveSymbol = 'pylance.moveSymbol';
        _0xfac53f.getSourceFiles = 'pylance.getSourceFiles';
        _0xfac53f.getAutoImports = 'pylance.getAutoImports';
        _0xfac53f.fixAll = 'pylance.fixAll';
        _0xfac53f.addFixtureTypeAnnotation = 'pylance.pytest.addFixtureTypeAnnotation';
        _0xfac53f.addAllFixtureTypeAnnotations = 'pylance.pytest.addAllFixtureTypeAnnotations';
        _0xfac53f.restartServer = 'pyright.restartserver';
        _0xfac53f.clearPersistedIndices = 'pylance.indexing.clearPersistedIndices';
        _0xfac53f.startProfiling = 'pylance.profiling.start';
        _0xfac53f.stopProfiling = 'pylance.profiling.stop';
        _0xfac53f.startLogging = 'pylance.logging.start';
        _0xfac53f.stopLogging = 'pylance.logging.stop';
        _0xfac53f.implementAllAbstractClasses = 'pylance.implementAllAbstractClasses';
        _0xfac53f.implementAllAbstractClassesWithCopilot = 'pylance.implementAllAbstractClassesWithCopilot';
        _0xfac53f.getAllDocstringRanges = 'pylance.getAllDocstringRanges';
        _0xfac53f.generateDocstring = 'pylance.generateDocstring';
        _0xfac53f.fixupCopilotDocstringOutput = 'pylance.fixupCopilotDocstringOutput';
      })(_0x5b03af || (exports.Commands = _0x5b03af = {}));
      var _0x3e4015;
      (function (_0x124bc3) {
        _0x124bc3.reportIssue = 'pylance.reportIssue';
        _0x124bc3.triggerParameterHints = 'pylance.triggerParameterHints';
        _0x124bc3.runCommands = 'pylance.runCommands';
        _0x124bc3.extractMethodWithRename = 'pylance.extractMethodWithRename';
        _0x124bc3.extractVariableWithRename = 'pylance.extractVariableWithRename';
        _0x124bc3.moveSymbolWithFileSelection = 'pylance.moveSymbolWithFileSelection';
        _0x124bc3.addToExtraPaths = 'pylance.addToExtraPaths';
        _0x124bc3.dumpTokens = 'pylance.dumpTokens';
        _0x124bc3.dumpNodes = 'pylance.dumpNodes';
        _0x124bc3.dumpTypes = 'pylance.dumpTypes';
        _0x124bc3.dumpCachedTypes = 'pylance.dumpCachedTypes';
        _0x124bc3.setAutoImportCompletions = 'pylance.setAutoImportCompletions';
        _0x124bc3.dumpCodeFlowGraph = 'pylance.dumpCodeFlowGraph';
        _0x124bc3.pythonSetInterpeter = 'python.setInterpreter';
        _0x124bc3.notebookSelectKernel = '_notebook.selectKernel';
        _0x124bc3.openUri = 'pylance.openUri';
        _0x124bc3.searchImports = 'pylance.searchImports';
        _0x124bc3.gotoOutputChannel = 'pylance.gotoOutputChannel';
        _0x124bc3.openConfig = 'pylance.openConfig';
        _0x124bc3.startEditorChat = 'vscode.editorChat.start';
        _0x124bc3.showTypeCheckingPicker = 'pylance.showTypeCheckingPicker';
        _0x124bc3.foldDocstrings = 'pylance.foldDocstrings';
        _0x124bc3.unfoldDocstrings = 'pylance.unfoldDocstrings';
      })(_0x3e4015 || (exports.ClientCommands = _0x3e4015 = {}));
      function _0x4b6cc6(_0x435360, _0x3c96e5, _0x54a350) {
        if (_0x3c96e5) {
          return _0x54a350;
        }
        return {
          label: _0x435360,
          edits: _0x54a350
        };
      }
    },
    84754: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CompletionAcceptedCommand = exports.indexValueAcceptedCommand = exports.autoImportAcceptedCommand = exports.normalMemberAccessCompletionAcceptedCommand = exports.normalKeywordCompletionAcceptedCommand = exports.normalCompletionAcceptedCommand = undefined;
      const _0x29a7f8 = require(56412);
      const _0x12db6b = require(27130);
      const _0x62ff11 = require(69482);
      exports.normalCompletionAcceptedCommand = {
        title: '',
        command: _0x12db6b.Commands.completionAccepted,
        arguments: []
      };
      exports.normalKeywordCompletionAcceptedCommand = {
        title: '',
        command: _0x12db6b.Commands.completionAccepted,
        arguments: [_0x29a7f8.toLSPAny({
          keyword: true
        })]
      };
      exports.normalMemberAccessCompletionAcceptedCommand = {
        title: '',
        command: _0x12db6b.Commands.completionAccepted,
        arguments: [_0x29a7f8.toLSPAny({
          memberAccess: true
        })]
      };
      const _0x3183cb = {
        autoImport: true
      };
      exports.autoImportAcceptedCommand = {
        title: '',
        command: _0x12db6b.Commands.completionAccepted,
        arguments: [_0x29a7f8.toLSPAny(_0x3183cb)]
      };
      const _0x30d0e3 = {
        indexValue: true
      };
      exports.indexValueAcceptedCommand = {
        title: '',
        command: _0x12db6b.Commands.completionAccepted,
        arguments: [_0x29a7f8.toLSPAny(_0x30d0e3)]
      };
      class _0x51a444 {
        constructor(_0x145754) {
          this._telemetry = _0x145754;
        }
        execute(_0x5186eb, _0x3da99f, _0x1a3fa8) {
          if (!this._telemetry) {
            return;
          }
          const _0x3bd1f1 = _0x29a7f8.fromLSPAny(_0x3da99f.arguments?.[0]);
          const _0xb1a856 = new _0x62ff11.TelemetryEvent(_0x62ff11.TelemetryEventName.COMPLETION_ACCEPTED);
          if (_0x3bd1f1?.autoImport) {
            _0xb1a856.Properties.autoImport = `${_0x3bd1f1.autoImport}`;
          }
          if (_0x3bd1f1?.indexValue) {
            _0xb1a856.Properties.indexValue = `${_0x3bd1f1.indexValue}`;
          }
          if (_0x3bd1f1?.memberAccess) {
            _0xb1a856.Properties.memberAccess = `${_0x3bd1f1.memberAccess}`;
          }
          if (_0x3bd1f1?.keyword) {
            _0xb1a856.Properties.keyword = `${_0x3bd1f1.keyword}`;
          }
          this._telemetry.sendTelemetry(_0xb1a856);
        }
        getFile(_0xc1f4b) {
          return undefined;
        }
      }
      exports.CompletionAcceptedCommand = _0x51a444;
    },
    99482: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ConvertImportFormatCommand = undefined;
      exports.getImportPathInfo = _0x57abbb;
      exports.getAbsoluteModuleName = _0x51d131;
      const _0x4f81cf = require(26687);
      const _0x22fffd = require(75130);
      const _0x5ee657 = require(47610);
      const _0x329ffc = require(41557);
      const _0x26914b = require(91426);
      const _0x6ce554 = require(56814);
      const _0x241166 = require(88754);
      const _0x128621 = require(27113);
      const _0x332b66 = require(74382);
      const _0x74262 = require(27130);
      function _0x57abbb(_0x5dfa8f, _0x4bd53d, _0x43ddbf, _0x2003b8) {
        if (!_0x4bd53d) {
          return;
        }
        const _0x1a3c11 = _0x241166.Range.is(_0x2003b8) ? _0x6ce554.convertRangeToTextRange(_0x2003b8, _0x43ddbf.tokenizerOutput.lines) : _0x2003b8;
        if (!_0x1a3c11) {
          return;
        }
        const _0x2814b9 = _0x329ffc.findNodeByOffset(_0x43ddbf.parserOutput.parseTree, _0x1a3c11.start);
        const _0x32cc57 = _0x329ffc.getFirstAncestorOrSelfOfKind(_0x2814b9, 25);
        if (!_0x32cc57 || !_0x241166.TextRange.overlapsRange(_0x32cc57.d.module, _0x1a3c11)) {
          return;
        }
        const _0x4410e7 = _0x4f81cf.getImportInfo(_0x32cc57.d.module);
        const _0x383813 = _0x4f81cf.getFileInfo(_0x43ddbf.parserOutput.parseTree);
        const _0x2bb015 = _0x5ee657.getResolvedFilePath(_0x4410e7);
        if (!_0x2bb015 || !_0x485132(_0x5dfa8f, _0x4bd53d, _0x383813.fileUri, _0x2bb015)) {
          return;
        }
        return {
          targetPath: _0x2bb015,
          importFrom: _0x32cc57
        };
      }
      function _0x51d131(_0x1e742f, _0x1d1a22, _0x58f6a1) {
        const _0x573dca = _0x1e742f.importResolver;
        const _0x532a5d = _0x1e742f.configOptions.findExecEnvironment(_0x1d1a22);
        const _0x5b00eb = _0x573dca.getModuleNameForImport(_0x58f6a1, _0x532a5d);
        if (!_0x5b00eb.moduleName) {
          return;
        }
        const _0x250c25 = _0x573dca.resolveImport(_0x1d1a22, _0x532a5d, _0x22fffd.createImportedModuleDescriptor(_0x5b00eb.moduleName));
        const _0x4857a9 = _0x5ee657.getResolvedFilePath(_0x250c25);
        if (_0x4857a9 !== _0x58f6a1) {
          return;
        }
        return _0x5b00eb.moduleName;
      }
      class _0x1ce1ba {
        execute(_0x28356e, _0x1c8a10, _0x2fb7b8) {
          _0x26914b.throwIfCancellationRequested(_0x2fb7b8);
          if (!_0x28356e.rootUri || _0x1c8a10.command !== _0x74262.Commands.convertImportFormat || _0x1c8a10.arguments?.length !== 2 && _0x1c8a10.arguments?.length !== 3) {
            return;
          }
          const _0x13ef38 = _0x128621.Uri.parse(_0x1c8a10.arguments[0], _0x28356e.service.serviceProvider);
          const _0x662db3 = _0x1c8a10.arguments[1];
          const _0x471d00 = _0x1c8a10.arguments.length === 3 ? _0x1c8a10.arguments[2] : undefined;
          const _0x5ab4b7 = _0x28356e.service.run(_0xeddeed => {
            return this.convertImportFormat(_0xeddeed, _0x28356e.rootUri, _0x13ef38, _0x662db3, _0x471d00);
          }, _0x2fb7b8);
          return _0x74262.createCommandResult('Command: Convert all import format', _0x471d00, _0x5ab4b7);
        }
        getFile(_0x55541f) {
          if (_0x55541f.arguments) {
            return _0x55541f.arguments[0];
          } else {
            return undefined;
          }
        }
        convertImportFormat(_0x346f72, _0x4fb63c, _0x5f4804, _0x2b2cbc, _0xa28840) {
          const _0x1ddb20 = _0x346f72.getParseResults(_0x5f4804);
          if (!_0x1ddb20) {
            return undefined;
          }
          if (_0xa28840) {
            const _0x4cd964 = _0x57abbb(_0x346f72, _0x4fb63c, _0x1ddb20, _0xa28840);
            if (!_0x4cd964) {
              return undefined;
            }
            const _0x440da2 = this._createFileEditAction(_0x346f72, _0x5f4804, _0x1ddb20, _0x4cd964, _0x2b2cbc);
            if (!_0x440da2) {
              return undefined;
            }
            return _0x332b66.convertToWorkspaceEdit(_0x346f72.fileSystem, [_0x440da2]);
          }
          const _0x17c8c1 = {
            changes: {}
          };
          const _0xe16092 = _0x5ee657.getTopLevelImports(_0x1ddb20.parserOutput.parseTree).orderedImports.filter(_0x325b80 => _0x325b80.node.nodeType === 25).map(_0x47fa60 => _0x47fa60.node);
          for (const _0x5961ee of _0xe16092) {
            if (_0x2b2cbc === 'relative' && _0x5961ee.d.module.d.leadingDots > 0 || _0x2b2cbc === 'absolute' && _0x5961ee.d.module.d.leadingDots === 0) {
              continue;
            }
            const _0x59e85b = _0x4f81cf.getImportInfo(_0x5961ee.d.module);
            const _0x21991d = _0x5ee657.getResolvedFilePath(_0x59e85b);
            if (!_0x21991d || !_0x485132(_0x346f72, _0x4fb63c, _0x5f4804, _0x21991d)) {
              continue;
            }
            const _0x5370c8 = this._createFileEditAction(_0x346f72, _0x5f4804, _0x1ddb20, {
              importFrom: _0x5961ee,
              targetPath: _0x21991d
            }, _0x2b2cbc);
            if (!_0x5370c8) {
              return;
            }
            _0x332b66.appendToWorkspaceEdit(_0x346f72.fileSystem, [_0x5370c8], _0x17c8c1);
          }
          return _0x17c8c1;
        }
        _createFileEditAction(_0x383e80, _0x20c96a, _0x1e4820, _0x1b2790, _0x3f8294) {
          const _0x323ceb = _0x6ce554.convertTextRangeToRange(_0x1b2790.importFrom.d.module, _0x1e4820.tokenizerOutput.lines);
          if (_0x3f8294 === 'relative') {
            const _0x13fe8e = _0x5ee657.getRelativeModuleName(_0x383e80.fileSystem, _0x20c96a, _0x1b2790.targetPath, _0x383e80.configOptions);
            if (_0x13fe8e) {
              return {
                fileUri: _0x20c96a,
                range: _0x323ceb,
                replacementText: _0x13fe8e
              };
            }
          }
          const _0x18c66a = _0x51d131(_0x383e80, _0x20c96a, _0x1b2790.targetPath);
          if (!_0x18c66a) {
            return;
          }
          return {
            fileUri: _0x20c96a,
            range: _0x323ceb,
            replacementText: _0x18c66a
          };
        }
      }
      exports.ConvertImportFormatCommand = _0x1ce1ba;
      function _0x485132(_0x7a65d8, _0x10ef0c, _0x141c80, _0x466e7b) {
        return _0x466e7b.startsWith(_0x10ef0c) && _0x7a65d8.getSourceFileInfo(_0x466e7b)?.isTracked && !_0x7a65d8.configOptions.findExecEnvironment(_0x141c80).extraPaths.some(_0x27adc2 => _0x466e7b.startsWith(_0x27adc2));
      }
    },
    21628: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CreateTypeStubCommand = undefined;
      const _0x5cb2e5 = require(76737);
      class _0x5b9a4b {
        constructor(_0x4e1ebd) {
          this._ls = _0x4e1ebd;
        }
        execute(_0x4c8edd, _0x5188a7, _0xff3cdc) {
          if (!_0x5188a7.arguments || _0x5188a7.arguments.length < 2) {
            return undefined;
          }
          const _0x5cbefa = _0x5188a7.arguments[1];
          return new _0x5cb2e5.TypeStubCreator(this._ls).create(_0x4c8edd, _0x5cbefa, _0xff3cdc);
        }
        getFile(_0x4f6027) {
          if (_0x4f6027.arguments && _0x4f6027.arguments.length >= 2) {
            if (_0x4f6027.arguments[2]) {
              return _0x4f6027.arguments[2];
            } else {
              return _0x4f6027.arguments[0];
            }
          }
          return undefined;
        }
      }
      exports.CreateTypeStubCommand = _0x5b9a4b;
    },
    16904: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DumpFileDebugInfoCommand = undefined;
      const _0x203a4c = require(89577);
      const _0x2363f8 = require(91426);
      const _0x39b3d1 = require(27113);
      class _0x4e59df {
        constructor(_0x284ca6) {
          this._ls = _0x284ca6;
        }
        execute(_0x3293f8, _0x50d4d1, _0x3ea573) {
          _0x2363f8.throwIfCancellationRequested(_0x3ea573);
          if (!_0x50d4d1.arguments || _0x50d4d1.arguments.length < 2) {
            return [];
          }
          const _0x461201 = _0x39b3d1.Uri.parse(_0x50d4d1.arguments[0], this._ls.serviceProvider);
          return new _0x203a4c.DumpFileDebugInfo().dump(_0x3293f8, _0x461201, _0x50d4d1.arguments, _0x3ea573);
        }
        getFile(_0x5b80ee) {
          if (!_0x5b80ee.arguments || _0x5b80ee.arguments.length < 1) {
            return undefined;
          }
          return _0x5b80ee.arguments[0];
        }
      }
      exports.DumpFileDebugInfoCommand = _0x4e59df;
    },
    79765: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ExtractVariableCommand = exports.ExtractMethodCommand = undefined;
      const _0x17bd49 = require(91426);
      const _0x1a47d9 = require(27113);
      const _0x57120e = require(74382);
      const _0x58d7be = require(76966);
      class _0x2de136 {
        constructor(_0x3d32ef) {
          this._hasVSCodeExtension = _0x3d32ef;
        }
        execute(_0x5b8ffa, _0x31f332, _0x3083e4) {
          _0x17bd49.throwIfCancellationRequested(_0x3083e4);
          if (_0x31f332.arguments?.length !== 2) {
            return;
          }
          const _0x32516d = _0x1a47d9.Uri.parse(_0x31f332.arguments[0], _0x5b8ffa.service.serviceProvider);
          const _0x23dfa2 = _0x31f332.arguments[1];
          return _0x5b8ffa.service.run(_0x7e63fb => {
            const _0x23bb87 = _0x58d7be.ExtractMethodProvider.extractMethod(_0x7e63fb, _0x32516d, _0x23dfa2, _0x3083e4);
            if (!_0x23bb87) {
              return;
            }
            if (!this._hasVSCodeExtension) {
              return _0x57120e.convertToWorkspaceEdit(_0x5b8ffa.service.fs, _0x23bb87.actions);
            }
            const _0x2027b6 = _0x15b890(_0x5b8ffa.service.fs, _0x23bb87);
            return _0x2027b6;
          }, _0x3083e4);
        }
        getFile(_0x5628c4) {
          if (_0x5628c4.arguments?.length !== 2) {
            return undefined;
          }
          return _0x5628c4.arguments[0];
        }
      }
      exports.ExtractMethodCommand = _0x2de136;
      class _0x1691d7 {
        constructor(_0xadbb21) {
          this._hasVSCodeExtension = _0xadbb21;
        }
        execute(_0x48993e, _0xe1027d, _0x30a694) {
          _0x17bd49.throwIfCancellationRequested(_0x30a694);
          if (_0xe1027d.arguments?.length !== 2) {
            return;
          }
          const _0x2e05a0 = _0x1a47d9.Uri.parse(_0xe1027d.arguments[0], _0x48993e.service.serviceProvider);
          const _0x3fd1aa = _0xe1027d.arguments[1];
          const _0x88141c = _0x48993e.service.getParseResults(_0x2e05a0);
          if (!_0x88141c) {
            return;
          }
          const _0x19561d = _0x58d7be.ExtractMethodProvider.extractVariable(_0x2e05a0, _0x88141c, _0x3fd1aa, _0x30a694);
          if (!_0x19561d) {
            return;
          }
          if (!this._hasVSCodeExtension) {
            return _0x57120e.convertToWorkspaceEdit(_0x48993e.service.fs, _0x19561d.actions);
          }
          const _0x51a986 = _0x15b890(_0x48993e.service.fs, _0x19561d);
          return _0x51a986;
        }
        getFile(_0x61a098) {
          if (_0x61a098.arguments?.length !== 2) {
            return undefined;
          }
          return _0x61a098.arguments[0];
        }
      }
      exports.ExtractVariableCommand = _0x1691d7;
      function _0x15b890(_0x20ad8e, _0x120fb5) {
        const _0x315d56 = _0x57120e.convertToWorkspaceEdit(_0x20ad8e, _0x120fb5.actions);
        const _0x50d150 = {
          newSymbolName: _0x120fb5.newSymbolName
        };
        const _0x8128a5 = {
          label: 'Extract Method',
          data: _0x50d150,
          edits: _0x315d56
        };
        return _0x8128a5;
      }
    },
    41097: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FixAllCommand = undefined;
      const _0x547420 = require(91426);
      const _0xd22279 = require(27113);
      const _0x5c5ab2 = require(74382);
      const _0x1269fc = require(45210);
      const _0x201131 = require(69482);
      const _0x265d21 = require(27130);
      const _0x59dbdd = require(99482);
      const _0x4aafa7 = require(33474);
      class _0x590d49 {
        constructor(_0x37637b) {
          this._telemetry = _0x37637b;
        }
        execute(_0x4e9953, _0x14f0bb, _0x4083b9) {
          _0x547420.throwIfCancellationRequested(_0x4083b9);
          if (!_0x4e9953.rootUri || !_0x4e9953.fixAll || _0x14f0bb.command !== _0x265d21.Commands.fixAll || _0x14f0bb.arguments?.length !== 1) {
            return;
          }
          const _0x5d273d = _0xd22279.Uri.parse(_0x14f0bb.arguments[0], _0x4e9953.service.serviceProvider);
          return _0x201131.trackPerf(this._telemetry, _0x201131.TelemetryEventName.FIX_ALL, () => {
            const _0x4fe708 = _0x4e9953.service.runEditMode(_0x567504 => {
              const _0x3d59e0 = new Map();
              if (_0x4e9953.fixAll && _0x4e9953.fixAll.some(_0x5d156b => _0x5d156b === _0x1269fc.PylanceCodeActionKind.Source.UnusedImports)) {
                const _0x176260 = new _0x4aafa7.RemoveUnusedImportCommand();
                const _0x59c31d = _0x176260.removeUnusedImports(_0x567504, _0x5d273d, undefined, _0x4083b9);
                if (_0x59c31d) {
                  _0x5c5ab2.applyWorkspaceEdit(_0x567504, _0x59c31d, _0x3d59e0);
                }
              }
              if (_0x4e9953.fixAll && _0x4e9953.fixAll.some(_0x40ed40 => _0x40ed40 === _0x1269fc.PylanceCodeActionKind.Source.ConvertImportFormat) && !!_0x4e9953.importFormat) {
                const _0x2c942f = new _0x59dbdd.ConvertImportFormatCommand();
                const _0x26096c = _0x2c942f.convertImportFormat(_0x567504, _0x4e9953.rootUri, _0x5d273d, _0x4e9953.importFormat, undefined);
                if (_0x26096c) {
                  _0x5c5ab2.applyWorkspaceEdit(_0x567504, _0x26096c, _0x3d59e0);
                }
              }
            }, _0x4083b9);
            const _0x47576a = _0x5c5ab2.convertToWorkspaceEdit(_0x4e9953.service.fs, _0x4fe708);
            return _0x265d21.createCommandResult('Command: \'Fix All\'', undefined, _0x47576a);
          }, 0);
        }
        getFile(_0x398de6) {
          if (_0x398de6.command !== _0x265d21.Commands.fixAll || _0x398de6.arguments?.length !== 1) {
            return undefined;
          }
          return _0x398de6.arguments[0];
        }
      }
      exports.FixAllCommand = _0x590d49;
    },
    18106: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FixupCopilotDocstringOutput = undefined;
      const _0x4e63e5 = require(41557);
      const _0x3e4de7 = require(91426);
      const _0x1edde8 = require(93779);
      const _0x527fa9 = require(27113);
      const _0x4ae919 = require(74382);
      class _0x4207af {
        execute(_0x10c16d, _0x528be6, _0x3659f0) {
          _0x3e4de7.throwIfCancellationRequested(_0x3659f0);
          if (!_0x528be6.arguments || _0x528be6.arguments.length !== 2) {
            return [];
          }
          const _0x54e7b2 = _0x528be6.arguments[1];
          const _0x5b213a = _0x527fa9.Uri.parse(_0x528be6.arguments[0], _0x10c16d.service.serviceProvider);
          const _0x45564a = _0x10c16d.service.run(_0x5e8451 => {
            const _0x5ced21 = _0x5e8451.getParseResults(_0x5b213a);
            if (!_0x5ced21) {
              return;
            }
            return this._getTripleQuotesRange(_0x5e8451, _0x5ced21, _0x54e7b2, _0x3659f0);
          }, _0x3659f0);
          if (_0x45564a) {
            return _0x45564a;
          }
        }
        getFile(_0x3ee77a) {
          if (_0x3ee77a.arguments) {
            return _0x3ee77a.arguments[0];
          } else {
            return undefined;
          }
        }
        _getTripleQuotesRange(_0x2b13f7, _0x212193, _0x5ca1ee, _0x23480d) {
          const _0x5b5abc = _0x4e63e5.findNodeByPosition(_0x212193.parserOutput.parseTree, _0x5ca1ee.start, _0x212193.tokenizerOutput.lines);
          if (!_0x5b5abc || _0x5b5abc.nodeType !== 49) {
            return undefined;
          }
          const _0x4e5ca1 = new _0x1edde8.TextEditTracker();
          _0x4e5ca1.removeNodes({
            node: _0x5b5abc,
            parseFileResults: _0x212193
          });
          return _0x4ae919.convertToWorkspaceEdit(_0x2b13f7.fileSystem, _0x4e5ca1.getEdits(_0x23480d));
        }
      }
      exports.FixupCopilotDocstringOutput = _0x4207af;
    },
    15091: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GenerateDocstringCommand = undefined;
      const _0x71d617 = require(91426);
      const _0x15b3e5 = require(27113);
      const _0x516877 = require(74382);
      const _0x47844a = require(59133);
      const _0x4c8856 = require(4449);
      class _0x2c3843 {
        execute(_0x46db56, _0x2f5f2e, _0x2499aa) {
          _0x71d617.throwIfCancellationRequested(_0x2499aa);
          if (!_0x2f5f2e.arguments || _0x2f5f2e.arguments.length !== 2) {
            return [];
          }
          const _0x167a50 = _0x15b3e5.Uri.parse(_0x2f5f2e.arguments[0], _0x46db56.service.serviceProvider);
          const _0x1f92e8 = _0x2f5f2e.arguments[1];
          const _0x3aedf8 = _0x46db56.service.run(_0x14c9c8 => {
            const _0x242d96 = _0x14c9c8.getParseResults(_0x167a50);
            if (!_0x242d96) {
              return;
            }
            return this._getDocstringTemplatesinCodeAction(_0x242d96, _0x1f92e8, _0x14c9c8.evaluator, _0x167a50, new _0x47844a.IndentationUtils(_0x46db56.editorIndentConfig ?? _0x47844a.DefaultEditorIndentConfig));
          }, _0x2499aa);
          if (!_0x3aedf8) {
            return;
          }
          return _0x516877.convertToWorkspaceEdit(_0x46db56.service.fs, _0x3aedf8);
        }
        getFile(_0x4b880a) {
          if (_0x4b880a.arguments) {
            return _0x4b880a.arguments[0];
          } else {
            return undefined;
          }
        }
        _getDocstringTemplatesinCodeAction(_0x30784b, _0xf1c0a9, _0x129060, _0x44536b, _0x380681) {
          const _0x54c5a6 = _0x4c8856.getDocstringTemplatesinString(_0x30784b, _0xf1c0a9.start, _0x129060, _0x380681);
          if (!_0x54c5a6) {
            return undefined;
          }
          const _0x21f0da = [];
          _0x21f0da.push({
            fileUri: _0x44536b,
            range: _0xf1c0a9,
            replacementText: _0x54c5a6
          });
          return _0x21f0da;
        }
      }
      exports.GenerateDocstringCommand = _0x2c3843;
    },
    94473: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GetAllDocstringRangesCommand = undefined;
      const _0x3ad139 = require(91426);
      const _0x500cbf = require(71745);
      const _0x14210b = require(30048);
      const _0x887de = require(84014);
      const _0x1e8a75 = require(8398);
      class _0x4c1a9e {
        constructor(_0x5191ec) {
          this._ls = _0x5191ec;
          const _0x46d75b = this._ls.serviceProvider;
          this._uriMapper = _0x46d75b.tryGet(_0x14210b.PylanceServiceKeys.uriMapper);
          this._caseSensitivityDetector = _0x46d75b.tryGet(_0x500cbf.ServiceKeys.caseSensitivityDetector);
        }
        execute(_0x582a21, _0x2007b9, _0xc22741) {
          _0x3ad139.throwIfCancellationRequested(_0xc22741);
          if (_0x2007b9.arguments?.length !== 1) {
            return [];
          }
          const _0x1befca = this.getFile(_0x2007b9);
          if (!_0x1befca) {
            return [];
          }
          const _0x2bd111 = _0x582a21.service.getParseResults(_0x1befca);
          if (!_0x2bd111) {
            return [];
          }
          const _0xc602b1 = _0x887de.FoldingRangeProvider.getFoldingRanges(_0x2bd111, _0xc22741);
          if (!_0xc602b1) {
            return [];
          }
          return _0xc602b1.filter(_0x496367 => _0x496367.kind === _0x887de.PylanceFoldingRangeKind.PylanceDocstring).map(_0x4712b0 => _0x4712b0.startLine);
        }
        getFile(_0x4f3ea1) {
          if (_0x4f3ea1.arguments?.length !== 1) {
            return undefined;
          }
          if (this._uriMapper === undefined) {
            return undefined;
          }
          if (this._caseSensitivityDetector === undefined) {
            return undefined;
          }
          return _0x1e8a75.convertLspUriStringToUri(_0x4f3ea1.arguments[0], this._caseSensitivityDetector, this._uriMapper);
        }
      }
      exports.GetAllDocstringRangesCommand = _0x4c1a9e;
    },
    32662: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GetAutoImportsCommand = undefined;
      const _0x3f74ed = require(41557);
      const _0x19240d = require(91426);
      const _0x161fbc = require(56814);
      const _0x447392 = require(27113);
      const _0xa89b5e = require(13259);
      const _0x15be3b = require(86615);
      const _0xb14ce1 = require(74899);
      const _0x4f63bc = require(27130);
      class _0x5e9ca5 {
        execute(_0x2468da, _0x183039, _0x2af1de) {
          _0x19240d.throwIfCancellationRequested(_0x2af1de);
          if (_0x183039.command !== _0x4f63bc.Commands.getAutoImports || _0x183039.arguments?.length !== 3) {
            return;
          }
          const _0x5018a1 = _0x183039.arguments[0];
          const _0x2326bc = _0x183039.arguments[1];
          const _0x185f48 = _0x183039.arguments[2];
          return _0x2468da.service.run(_0xa2feb0 => {
            const _0x2db0aa = 0;
            const _0x55208c = _0x447392.Uri.parse(_0x5018a1, _0xa2feb0.serviceProvider);
            const _0x2dfa2f = _0xa2feb0.getParseResults(_0x55208c);
            if (!_0x2dfa2f) {
              return [];
            }
            const _0x450484 = _0x161fbc.convertRangeToTextRange(_0x2326bc, _0x2dfa2f.tokenizerOutput.lines);
            if (!_0x450484) {
              return [];
            }
            const _0xab5a72 = _0x3f74ed.findNodeByOffset(_0x2dfa2f.parserOutput.parseTree, _0x450484.start);
            if (!_0xab5a72) {
              return [];
            }
            const _0x65d42f = {
              lazyEdit: true,
              importFormat: _0x2468da.importFormat,
              indices: _0xb14ce1.SymbolIndexer.getIndices(_0x2468da),
              includeAliasesFromUserFiles: _0x2468da.indexOptions?.includeAliasesFromUserFiles,
              allowDuplicatedAliasesFromUserFiles: true
            };
            const _0x5822e9 = _0x15be3b.createAutoImporter(_0xa2feb0, _0x55208c, _0x2326bc.start, _0x65d42f, _0x2af1de);
            if (!_0x5822e9) {
              return [];
            }
            const _0x5403d1 = _0x15be3b.getMatchingAutoImports(_0x5822e9, _0xab5a72, _0x185f48, _0x2db0aa, _0xa89b5e.wellKnownAbbreviationMap, _0x2af1de);
            return _0x5403d1.map(_0x15bfcd => ({
              name: _0x15bfcd.name,
              originalName: _0x15bfcd.originalName,
              alias: _0x15bfcd.alias,
              source: _0x15bfcd.source
            }));
          }, _0x2af1de);
        }
        getFile(_0x584d1d) {
          if (_0x584d1d.command !== _0x4f63bc.Commands.getAutoImports || _0x584d1d.arguments?.length !== 3) {
            return undefined;
          }
          return _0x584d1d.arguments[0];
        }
      }
      exports.GetAutoImportsCommand = _0x5e9ca5;
    },
    13355: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GetSourceFilesCommand = undefined;
      const _0x4bf1d4 = require(91426);
      const _0x40eab9 = require(27130);
      class _0x256972 {
        execute(_0x532547, _0x3ae8cd, _0x569920) {
          _0x4bf1d4.throwIfCancellationRequested(_0x569920);
          if (_0x3ae8cd.command !== _0x40eab9.Commands.getSourceFiles || _0x3ae8cd.arguments?.length !== 2) {
            return;
          }
          const _0x230b13 = _0x3ae8cd.arguments[1];
          _0x569920 = new _0x4bf1d4.FileBasedToken(_0x230b13, _0x532547.service.fs);
          const _0x5d908b = _0x532547.service.getConfigOptions();
          const _0x38daaf = [];
          for (const _0x4abd8a of _0x532547.service.getUserFiles()) {
            const _0x595f81 = _0x4abd8a.getDirectory();
            _0x38daaf.push({
              name: _0x4abd8a.fileName,
              folderAfterRoot: _0x5d908b.projectRoot.getRelativePathComponents(_0x595f81).join('/'),
              uri: _0x4abd8a.toString()
            });
          }
          return _0x38daaf;
        }
        getFile(_0x1dac46) {
          if (_0x1dac46.command !== _0x40eab9.Commands.getSourceFiles || _0x1dac46.arguments?.length !== 2) {
            return undefined;
          }
          return _0x1dac46.arguments[0];
        }
      }
      exports.GetSourceFilesCommand = _0x256972;
    },
    54991: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.implementAllAbstractClassesCommand = undefined;
      const _0xebedb9 = require(91426);
      const _0x541da2 = require(27113);
      const _0x1d401b = require(74382);
      const _0x550454 = require(58093);
      class _0x3f08a5 {
        execute(_0x402b1f, _0x4f37db, _0x8a16fa) {
          _0xebedb9.throwIfCancellationRequested(_0x8a16fa);
          if (_0x4f37db.arguments?.length !== 2) {
            return;
          }
          const _0x12fb4a = _0x541da2.Uri.parse(_0x4f37db.arguments[0], _0x402b1f.service.serviceProvider);
          const _0x503b06 = _0x4f37db.arguments[1];
          return _0x402b1f.service.run(_0x5b7b43 => {
            const _0x32793c = new _0x550454.ImplementAbstractClassProvider(_0x5b7b43, _0x12fb4a, _0x503b06, _0x8a16fa, {
              editorIndentConfig: _0x402b1f.editorIndentConfig,
              dontAddTypeAnnotation: !_0x402b1f.generateWithTypeAnnotation
            }).implementAllAbstractClasses();
            if (!_0x32793c) {
              return;
            }
            return _0x1d401b.convertToWorkspaceEdit(_0x402b1f.service.fs, _0x32793c);
          }, _0x8a16fa);
        }
        getFile(_0x4c9dc3) {
          if (_0x4c9dc3.arguments?.length !== 2) {
            return undefined;
          }
          return _0x4c9dc3.arguments[0];
        }
      }
      exports.implementAllAbstractClassesCommand = _0x3f08a5;
    },
    5174: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StopLoggingCommand = exports.StartLoggingCommand = exports.LoggingCommandHandler = undefined;
      const _0x95acb8 = require(74118);
      const _0x2e632e = require(91426);
      const _0x1c335e = require(25075);
      const _0x39f8d1 = require(71745);
      const _0x1600ff = require(99504);
      const _0x1c0ffb = require(30048);
      const _0x2c1cb3 = require(15986);
      class _0x134b42 {
        constructor(_0x222116) {
          this._ls = _0x222116;
          this._loggingId = 0;
        }
        get outputFileUri() {
          var _0x34d330;
          if ((_0x34d330 = this._logger) === null || _0x34d330 === undefined) {
            return undefined;
          } else {
            return _0x34d330.outputFileUri;
          }
        }
        async execute(_0x52c13d, _0xfe3b40, _0x140051) {
          _0x2e632e.throwIfCancellationRequested(_0x140051);
          const _0x140bbe = _0x52c13d.service.serviceProvider;
          const _0x158125 = _0x140bbe.tryGet(_0x39f8d1.ServiceKeys.console);
          if (!_0x158125 || !_0x1c335e.Chainable.is(_0x158125)) {
            return;
          }
          if (_0xfe3b40 === 'start') {
            await this._startLogging(_0x140bbe, _0x158125);
            return;
          }
          if (_0xfe3b40 === 'stop') {
            await this._stopLogging(_0x140bbe, _0x158125);
            return;
          }
        }
        async _startLogging(_0x100418, _0x58e3ae) {
          var _0x45f5b0;
          if (this._logger) {
            await this._stopLogging(_0x100418, _0x58e3ae);
          }
          this._logger = new _0x175f4a(this._loggingId++, _0x100418);
          _0x58e3ae.addChain(this._logger);
          this._ls.restart();
          for (const _0x93242b of await this._ls.getWorkspaces()) {
            await this._ls.getSettings(_0x93242b);
            if ((_0x45f5b0 = _0x100418.tryGet(_0x1c0ffb.PylanceServiceKeys.packageDiscoverer)) === null || _0x45f5b0 === undefined) {
              undefined;
            } else {
              _0x45f5b0.logInstalledModuleInfo(_0x93242b.service.backgroundAnalysisProgram.program);
            }
          }
        }
        async _stopLogging(_0x3443e7, _0xe47f23) {
          if (!this._logger) {
            return;
          }
          const _0x1ffcc4 = this._logger;
          _0xe47f23.removeChain(_0x1ffcc4);
          this._logger = undefined;
          _0x1ffcc4.done();
          const _0x3061e3 = _0x3443e7.tryGet(_0x39f8d1.ServiceKeys.windowService);
          if (!_0x1ffcc4.loggingFolderUri || !_0x1ffcc4.outputFileUri || !_0x3061e3) {
            return;
          }
          const _0x21e55a = _0x95acb8.URI.file(_0x1ffcc4.outputFileUri.getFilePath());
          const _0x545060 = _0x2c1cb3.Localizer.Commands.LoggingCommand.loggingDataSaved().format({
            filePath: _0x1ffcc4.loggingFolderUri.getFilePath(),
            uri: `command:revealFileInOS?${encodeURIComponent(JSON.stringify(_0x21e55a.toJSON()))}`
          });
          const _0x478634 = _0x3061e3.createGoToOutputAction();
          await _0x3061e3.showInformationMessage(_0x545060, _0x478634);
        }
      }
      exports.LoggingCommandHandler = _0x134b42;
      class _0x250e7f {
        constructor(_0x454503) {
          this._handler = _0x454503;
        }
        execute(_0x55c472, _0x3494b9, _0x4aa702) {
          return this._handler.execute(_0x55c472, 'start', _0x4aa702);
        }
        getFile(_0x441a96) {
          return undefined;
        }
      }
      exports.StartLoggingCommand = _0x250e7f;
      class _0x4913f7 {
        constructor(_0x4c08b5) {
          this._handler = _0x4c08b5;
        }
        execute(_0x270199, _0x348516, _0x5cbba8) {
          return this._handler.execute(_0x270199, 'stop', _0x5cbba8);
        }
        getFile(_0x1b7096) {
          return undefined;
        }
      }
      exports.StopLoggingCommand = _0x4913f7;
      class _0x175f4a {
        constructor(_0x1a9139, _0x420816) {
          var _0x2450ca;
          this._loggerId = _0x1a9139;
          this._sp = _0x420816;
          this._sb = [];
          const _0x3b3799 = (_0x2450ca = this._sp.tryGet(_0x39f8d1.ServiceKeys.tempFile)) === null || _0x2450ca === undefined ? undefined : _0x2450ca.tmpdir();
          if (!_0x3b3799) {
            return;
          }
          this.loggingFolderUri = _0x3b3799;
          this.outputFileUri = this.loggingFolderUri.combinePaths(`pylance_${_0x1600ff.VERSION}_${this._getTitle()}.txt`);
          const _0x5d2675 = this._sp.tryGet(_0x39f8d1.ServiceKeys.console);
          if (_0x5d2675 === null || _0x5d2675 === undefined) {
            undefined;
          } else {
            _0x5d2675.info(`[${this._getTitle()}] Logging started`);
          }
        }
        error(_0x5e9b6a) {
          this._sb.push(`[Error] ${_0x5e9b6a}`);
        }
        warn(_0x3de2b3) {
          this._sb.push(`[Warn] ${_0x3de2b3}`);
        }
        info(_0x9cfac6) {
          this._sb.push(`[Info] ${_0x9cfac6}`);
        }
        log(_0x148bfc) {
          this._sb.push(`[Log] ${_0x148bfc}`);
        }
        done() {
          const _0x222048 = this._sp.tryGet(_0x39f8d1.ServiceKeys.console);
          try {
            const _0x391571 = this._getTitle();
            if (!this.loggingFolderUri) {
              if (_0x222048 === null || _0x222048 === undefined) {
                undefined;
              } else {
                _0x222048.info(`[${_0x391571}] Logging stopped but there is no place to save data.`);
              }
              return;
            }
            const _0x22c002 = this._sp.get(_0x39f8d1.ServiceKeys.fs);
            _0x22c002.writeFileSync(this.outputFileUri, this._sb.join('\n'), 'utf8');
            if (_0x222048 === null || _0x222048 === undefined) {
              undefined;
            } else {
              _0x222048.info(`[${_0x391571}] Logging stopped at ${this.outputFileUri.getFilePath()}`);
            }
          } catch (_0x16ccf5) {
            if (_0x222048 === null || _0x222048 === undefined) {
              undefined;
            } else {
              _0x222048.error(`There was an error saving logging data: ${_0x16ccf5}`);
            }
            return;
          }
        }
        _getTitle() {
          return `id_${this._loggerId}`;
        }
      }
    },
    63216: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MoveSymbolCommand = undefined;
      const _0xab91c1 = require(41557);
      const _0x52ec9a = require(91426);
      const _0x14d28c = require(56814);
      const _0x58fb26 = require(27113);
      const _0x2f4bff = require(54267);
      const _0x30523e = require(31605);
      const _0x227f3b = require(44657);
      const _0x4122de = require(27130);
      class _0x2e7e3c {
        constructor(_0x266b85) {
          this._ls = _0x266b85;
        }
        execute(_0x356e09, _0x1be95d, _0x4acf0c) {
          _0x52ec9a.throwIfCancellationRequested(_0x4acf0c);
          if (_0x1be95d.command !== _0x4122de.Commands.moveSymbol || _0x1be95d.arguments?.length !== 4) {
            return;
          }
          const _0x491961 = _0x58fb26.Uri.parse(_0x1be95d.arguments[0], this._ls.serviceProvider);
          const _0x1c2f58 = _0x1be95d.arguments[2];
          const _0x20ce4d = _0x1be95d.arguments[3];
          _0x4acf0c = new _0x52ec9a.FileBasedToken(_0x20ce4d, _0x356e09.service.fs);
          const _0x57ed1e = this._getDestinationFile(_0x356e09, _0x491961, _0x1be95d.arguments[1], _0x1c2f58.start, _0x4acf0c);
          if (!_0x57ed1e) {
            return;
          }
          const _0x515958 = this._moveSymbolToFile(_0x356e09, _0x491961, _0x57ed1e, _0x1c2f58.start, _0x4acf0c);
          if (_0x515958.edits === null && _0x515958.failedReason) {
            this._ls.window.showErrorMessage(_0x515958.failedReason);
          }
          return _0x515958.edits;
        }
        getFile(_0x2b68e5) {
          if (_0x2b68e5.arguments?.length !== 4) {
            return undefined;
          }
          return _0x2b68e5.arguments[0];
        }
        _getDestinationFile(_0x3f29a4, _0x598165, _0x4b2d08, _0x1bb913, _0x49c31d) {
          if (_0x4b2d08 !== _0x227f3b.MoveNewFileMarker) {
            return _0x58fb26.Uri.parse(_0x4b2d08, this._ls.serviceProvider);
          }
          const _0x419ff6 = _0x3f29a4.service.getParseResults(_0x598165);
          if (!_0x419ff6) {
            return undefined;
          }
          const _0x48fef0 = _0x14d28c.convertPositionToOffset(_0x1bb913, _0x419ff6.tokenizerOutput.lines);
          if (_0x48fef0 === undefined) {
            return undefined;
          }
          const _0x9d0bc = _0xab91c1.findNodeByOffset(_0x419ff6.parserOutput.parseTree, _0x48fef0);
          if (_0x9d0bc === undefined) {
            return undefined;
          }
          if (_0x9d0bc.nodeType !== 38) {
            return undefined;
          }
          const _0x97f85c = _0x598165.getDirectory();
          const _0x1fcdfd = _0x598165.lastExtension;
          return _0x2f4bff.getUniqueUri(_0x3f29a4, _0x97f85c.combinePaths(`${_0x9d0bc.d.value.trim()}${_0x1fcdfd}`), _0x49c31d);
        }
        _moveSymbolToFile(_0xce0069, _0x91e95e, _0x9e028, _0xfa6774, _0x54d38e) {
          return _0xce0069.service.run(_0x2ca2a9 => {
            return new _0x30523e.MoveSymbolProvider(_0x2ca2a9, _0x91e95e, _0x9e028, _0xfa6774, {
              importFormat: _0xce0069.importFormat ?? 'absolute'
            }, _0x54d38e).moveSymbol();
          }, _0x54d38e);
        }
      }
      exports.MoveSymbolCommand = _0x2e7e3c;
    },
    23898: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.mergeCommands = _0x38791a;
      const _0x59d1bf = require(27130);
      function _0x2540b5(_0x310f5b) {
        return _0x310f5b.command === _0x59d1bf.ClientCommands.runCommands;
      }
      function _0x38791a(..._0x119972) {
        const _0xa758d5 = [];
        _0x119972.forEach(_0xcbc04e => {
          if (_0xcbc04e) {
            if (_0x2540b5(_0xcbc04e)) {
              _0xa758d5.push(..._0xcbc04e.arguments);
            } else {
              _0xa758d5.push(_0xcbc04e);
            }
          }
        });
        if (_0xa758d5.length === 0) {
          return undefined;
        }
        if (_0xa758d5.length === 1) {
          return _0xa758d5[0];
        }
        return {
          title: '',
          command: _0x59d1bf.ClientCommands.runCommands,
          arguments: _0xa758d5
        };
      }
    },
    48783: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StopProfilingCommand = exports.StartProfilingCommand = undefined;
      const _0x3db062 = require(74118);
      const _0xe837ad = require(91426);
      const _0x1ff14c = require(58147);
      const _0x2d9c73 = require(71745);
      const _0x40f139 = require(24122);
      const _0x2746d1 = require(30048);
      const _0x18f7e1 = require(15986);
      class _0x115929 {
        constructor(_0x20c0a3) {
          this.ls = _0x20c0a3;
        }
        async execute(_0x575d4f, _0x570cc0, _0x8758ff) {
          _0xe837ad.throwIfCancellationRequested(_0x8758ff);
          if (!_0x570cc0.arguments || _0x570cc0.arguments.length < 1) {
            return;
          }
          const _0x53c874 = _0x575d4f.service.serviceProvider.tryGet(_0x2746d1.PylanceServiceKeys.profilingService);
          if (!_0x53c874) {
            return;
          }
          if (_0x570cc0.arguments[0] === 'start') {
            await this._startProfiling(_0x53c874);
            return;
          }
          if (_0x570cc0.arguments[0] === 'stop') {
            await this._stopProfiling(_0x53c874);
            return;
          }
        }
        getFile(_0x2d359a) {
          return undefined;
        }
        async _startProfiling(_0x513ea0) {
          const _0x1856b2 = await _0x513ea0.startProfiling();
          if (!_0x1856b2) {
            return;
          }
          for (const _0x21d720 of await this.ls.getWorkspaces()) {
            await _0x40f139.getBackgroundAnalysisProgram(_0x21d720).startProfiling(_0x1856b2);
          }
        }
        async _stopProfiling(_0x1b7709) {
          const _0x4931a9 = [];
          const _0x333028 = _0x1b7709.currentProfilingInfo;
          _0x1ff14c.addIfNotNull(_0x4931a9, await _0x1b7709.stopProfiling());
          const _0x5d79d6 = this.ls.serviceProvider.tryGet(_0x2d9c73.ServiceKeys.windowService);
          if (!_0x5d79d6) {
            return;
          }
          for (const _0x2ba680 of await this.ls.getWorkspaces()) {
            _0x1ff14c.addIfNotNull(_0x4931a9, await _0x40f139.getBackgroundAnalysisProgram(_0x2ba680).stopProfiling());
          }
          if (_0x4931a9.length > 0) {
            const _0x1f5f48 = _0x3db062.URI.file(_0x4931a9[0].getFilePath());
            const _0x41edd2 = _0x18f7e1.Localizer.Commands.ProfilingCommand.profilingDataSaved().format({
              filePath: _0x333028.profilingFolderUri.getFilePath(),
              uri: `command:revealFileInOS?${encodeURIComponent(JSON.stringify(_0x1f5f48.toJSON()))}`
            });
            const _0x1b6c7a = _0x5d79d6.createGoToOutputAction();
            await _0x5d79d6.showInformationMessage(_0x41edd2, _0x1b6c7a);
          }
        }
      }
      class _0x3cebcb extends _0x115929 {
        constructor(_0x19c4e2) {
          super(_0x19c4e2);
        }
        execute(_0x1c4e1f, _0x9e458, _0x4ce963) {
          return super.execute(_0x1c4e1f, {
            command: _0x9e458.command,
            arguments: ['start']
          }, _0x4ce963);
        }
      }
      exports.StartProfilingCommand = _0x3cebcb;
      class _0x580289 extends _0x115929 {
        constructor(_0x585ff6) {
          super(_0x585ff6);
        }
        execute(_0x5ac5d4, _0x2f6ef7, _0x4eeddf) {
          return super.execute(_0x5ac5d4, {
            command: _0x2f6ef7.command,
            arguments: ['stop']
          }, _0x4eeddf);
        }
      }
      exports.StopProfilingCommand = _0x580289;
    },
    14054: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.QuickActionCommand = undefined;
      const _0x109263 = require(88335);
      const _0x5f43b4 = require(27130);
      const _0x20cfd3 = require(33474);
      class _0xdf47e {
        constructor(_0x4275ed) {
          this._ls = _0x4275ed;
          this._removeUnusedImportCommand = new _0x20cfd3.RemoveUnusedImportCommand();
          this._addImportCommand = new _0x109263.AddImportCommand();
        }
        execute(_0x17ee49, _0x25f096, _0x353a38) {
          switch (_0x25f096.command) {
            case _0x5f43b4.Commands.removeUnusedImport:
              {
                return this._removeUnusedImportCommand.execute(_0x17ee49, _0x25f096, _0x353a38);
              }
            case _0x5f43b4.Commands.addImport:
              {
                return this._addImportCommand.execute(_0x17ee49, _0x25f096, _0x353a38);
              }
            default:
              this._ls.console.info(`unknown command: ${_0x25f096.command}`);
              return [];
          }
        }
        getFile(_0x505885) {
          switch (_0x505885.command) {
            case _0x5f43b4.Commands.removeUnusedImport:
              {
                return this._removeUnusedImportCommand.getFile(_0x505885);
              }
            case _0x5f43b4.Commands.addImport:
              {
                return this._addImportCommand.getFile(_0x505885);
              }
          }
          return undefined;
        }
      }
      exports.QuickActionCommand = _0xdf47e;
    },
    33474: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RemoveUnusedImportCommand = undefined;
      exports.getUnusedImportDiagnosticsForRangeFromService = _0x1e5f67;
      exports.getUnusedImportDiagnosticsForRange = _0x554c3d;
      exports.getUnusedImportDiagnostics = _0x4e9a1f;
      const _0x788168 = __importStar(require(41557));
      const _0x2c925c = require(91426);
      const _0xc5b400 = require(56814);
      const _0x11e0b7 = require(93779);
      const _0x498562 = require(27113);
      const _0x4e6367 = require(74382);
      const _0x13f6e9 = require(54700);
      const _0x332145 = require(27130);
      async function _0x1e5f67(_0xb037ac, _0x5eb0b4, _0xaf0f65, _0xe5c8a6) {
        const _0x206484 = await _0xb037ac.getDiagnosticsForRange(_0x5eb0b4, _0xaf0f65, _0xe5c8a6);
        return _0x4e9a1f(_0x206484);
      }
      function _0x554c3d(_0x38ccb0, _0x8e77d9, _0x482627) {
        const _0x40792a = _0x38ccb0.getDiagnosticsForRange(_0x8e77d9, _0x482627);
        return _0x4e9a1f(_0x40792a);
      }
      function _0x4e9a1f(_0x4a57d9) {
        return _0x4a57d9.filter(_0x5dc3bc => {
          var _0x1adf29;
          return _0x5dc3bc.category === 3 && ((_0x1adf29 = _0x5dc3bc.getActions()) === null || _0x1adf29 === undefined ? undefined : _0x1adf29.some(_0x39b9be => _0x39b9be.action === 'pyright.unusedImport'));
        });
      }
      class _0xa7ec29 {
        execute(_0x4ae87c, _0x3fcafc, _0x1532ed) {
          _0x2c925c.throwIfCancellationRequested(_0x1532ed);
          if (_0x3fcafc.arguments?.length !== 1 && _0x3fcafc.arguments?.length !== 2) {
            return;
          }
          const _0x29fc91 = _0x498562.Uri.parse(_0x3fcafc.arguments[0], _0x4ae87c.service.serviceProvider);
          const _0x4fbc2d = _0x3fcafc.arguments.length === 2 ? _0x3fcafc.arguments[1] : undefined;
          const _0x2a3761 = _0x4ae87c.service.run(_0x1402ca => {
            return this.removeUnusedImports(_0x1402ca, _0x29fc91, _0x4fbc2d, _0x1532ed);
          }, _0x1532ed);
          return _0x332145.createCommandResult('Command: \'Remove All Unused Imports\'', _0x4fbc2d, _0x2a3761);
        }
        getFile(_0x255bf3) {
          if (_0x255bf3.arguments) {
            return _0x255bf3.arguments[0];
          } else {
            return undefined;
          }
        }
        removeUnusedImports(_0xa827e0, _0x3b502e, _0x47ebc9, _0x54442e) {
          const _0x2ce3e1 = _0xa827e0.getParseResults(_0x3b502e);
          if (!_0x2ce3e1) {
            return undefined;
          }
          _0xa827e0.analyzeFile(_0x3b502e, _0x54442e);
          const _0x4796ef = [];
          if (_0x47ebc9) {
            _0x13f6e9.AddIfNotNull(_0x4796ef, this._getUnusedImportNameNode(_0x2ce3e1, _0x47ebc9));
          } else {
            const _0x5e93dc = _0xc5b400.convertTextRangeToRange(_0x2ce3e1.parserOutput.parseTree, _0x2ce3e1.tokenizerOutput.lines);
            const _0x4db19f = _0x554c3d(_0xa827e0, _0x3b502e, _0x5e93dc);
            for (const _0x237772 of _0x4db19f) {
              const _0x2a4792 = this._getUnusedImportNameNode(_0x2ce3e1, _0x237772.range);
              if (_0x2a4792) {
                const _0x1a3679 = _0x788168.getFirstAncestorOrSelf(_0x2a4792, _0x57de5b => _0x57de5b.nodeType === 23 || _0x57de5b.nodeType === 25);
                if (!_0x1a3679) {
                  continue;
                }
                if (_0x1a3679.parent?.parent?.nodeType !== 36) {
                  continue;
                }
              }
              _0x13f6e9.AddIfNotNull(_0x4796ef, _0x2a4792);
            }
          }
          const _0x2cf691 = new _0x11e0b7.TextEditTracker();
          _0x2cf691.removeNodes(..._0x4796ef.map(_0x1a5aa2 => ({
            node: _0x1a5aa2,
            parseFileResults: _0x2ce3e1
          })));
          return _0x4e6367.convertToWorkspaceEdit(_0xa827e0.fileSystem, _0x2cf691.getEdits(_0x54442e));
        }
        _getUnusedImportNameNode(_0x48922c, _0x445102) {
          const _0x121716 = _0x788168.findNodeByPosition(_0x48922c.parserOutput.parseTree, _0x445102.start, _0x48922c.tokenizerOutput.lines);
          if (_0x121716?.nodeType !== 38) {
            return undefined;
          }
          return _0x121716;
        }
      }
      exports.RemoveUnusedImportCommand = _0xa7ec29;
    },
    94614: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RestartServerCommand = undefined;
      class _0x12cfee {
        constructor(_0x156820) {
          this._ls = _0x156820;
        }
        execute(_0x53e8db, _0x400427) {
          this._ls.restart();
        }
        getFile(_0x4a9bdd) {
          return undefined;
        }
      }
      exports.RestartServerCommand = _0x12cfee;
    },
    30048: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BulkServiceRegistrationService = exports.PylanceServiceKeys = undefined;
      exports.createPylanceServiceProvider = _0x5b3139;
      exports.registerServices = _0x353210;
      const _0x534b40 = require(42856);
      const _0x4cb67e = require(23070);
      const _0x37a769 = require(39619);
      const _0x49715e = require(8398);
      const _0x560147 = require(1044);
      const _0x229b4f = require(53062);
      const _0x215760 = require(31756);
      const _0x5728da = require(65409);
      const _0x4505aa = require(44889);
      const _0x25a9d2 = require(84590);
      const _0xacd845 = require(3777);
      const _0x43aa05 = require(69482);
      var _0x259440;
      (function (_0x3f1937) {
        function _0x290cdd(_0x2bd1eb) {
          return _0x2bd1eb && !!_0x2bd1eb.sendRequest;
        }
        _0x3f1937.is = _0x290cdd;
      })(_0x259440 ||= {});
      var _0x120c75;
      (function (_0x4f83e1) {
        _0x4f83e1.telemetry = new _0x534b40.ServiceKey();
        _0x4f83e1.logger = new _0x534b40.ServiceKey();
        _0x4f83e1.platform = new _0x534b40.ServiceKey();
        _0x4f83e1.globalIndices = new _0x534b40.ServiceKey();
        _0x4f83e1.intelliCode = new _0x534b40.ServiceKey();
        _0x4f83e1.fixtureFinder = new _0x534b40.ServiceKey();
        _0x4f83e1.stringDefinitionFinder = new _0x534b40.ServiceKey();
        _0x4f83e1.bulkServiceRegistration = new _0x534b40.ServiceKey();
        _0x4f83e1.constructorUsageProviderFactory = new _0x534b40.ServiceKey();
        _0x4f83e1.overrideUsageProviderFactory = new _0x534b40.ServiceKey();
        _0x4f83e1.uriMapper = new _0x534b40.ServiceKey();
        _0x4f83e1.backgroundAnalysisFactory = new _0x534b40.ServiceKey();
        _0x4f83e1.hostFactory = new _0x534b40.ServiceKey();
        _0x4f83e1.settingTransformer = new _0x534b40.ServiceKey();
        _0x4f83e1.declarationFinder = new _0x534b40.ServiceKey();
        _0x4f83e1.mruQueues = new _0x534b40.ServiceKey();
        _0x4f83e1.profilingService = new _0x534b40.ServiceKey();
        _0x4f83e1.completionListConverter = new _0x534b40.ServiceKey();
        _0x4f83e1.packageDiscoverer = new _0x534b40.ServiceKey();
        _0x4f83e1.languageModelService = new _0x534b40.ServiceKey();
      })(_0x120c75 || (exports.PylanceServiceKeys = _0x120c75 = {}));
      function _0x5b3139(..._0x1f95da) {
        const _0x1dacce = _0x4cb67e.createServiceProvider(..._0x1f95da);
        _0x1f95da.forEach(_0x13b1ea => {
          if (_0x43aa05.TelemetryInterface.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.telemetry, _0x13b1ea);
          }
          if (_0x5728da.LogService.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.logger, _0x13b1ea);
          }
          if (_0x25a9d2.Platform.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.platform, _0x13b1ea);
          }
          if (_0x560147.IndicesManager.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.globalIndices, _0x13b1ea);
          }
          if (_0x37a769.IntelliCodeInterface.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.intelliCode, _0x13b1ea);
          }
          if (_0x4505aa.INotebookUriMapper.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.uriMapper, _0x13b1ea);
          }
          if (_0x49715e.IHostFactory.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.hostFactory, _0x13b1ea);
          }
          if (_0xacd845.ISettingTransformer.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.settingTransformer, _0x13b1ea);
          }
          if (_0x229b4f.MRUQueues.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.mruQueues, _0x13b1ea);
          }
          if (_0x215760.PackageDiscoverer.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.packageDiscoverer, _0x13b1ea);
          }
          if (_0x259440.is(_0x13b1ea)) {
            _0x1dacce.add(_0x120c75.languageModelService, _0x13b1ea);
          }
        });
        const _0x121247 = _0x1dacce.tryGet(_0x120c75.bulkServiceRegistration);
        if (!_0x121247) {
          _0x1dacce.add(_0x120c75.bulkServiceRegistration, new _0x10f280());
        }
        return _0x1dacce;
      }
      function _0x353210(_0x2d1eab, _0x13794f, _0xaa6836, ..._0x3cb4e2) {
        const _0xdc3517 = _0x2d1eab.get(_0x120c75.bulkServiceRegistration);
        if (_0x13794f === undefined) {
          _0xdc3517.unregister(_0xaa6836, _0x2d1eab);
          return;
        }
        _0xdc3517.register(_0xaa6836, _0x2d1eab, _0x13794f, _0xaa6836, ..._0x3cb4e2);
      }
      class _0x10f280 {
        constructor() {
          this._map = new Map();
        }
        register(_0x16bb9e, _0x53a2b5, _0x4dd10b, ..._0x5750bf) {
          this.unregister(_0x16bb9e, _0x53a2b5);
          this._map.set(_0x16bb9e, {
            serviceKeys: _0x5750bf,
            value: _0x4dd10b
          });
          _0x5750bf.forEach(_0x59c410 => _0x53a2b5.add(_0x59c410, _0x4dd10b));
        }
        unregister(_0x46dc03, _0x44bfe6) {
          const _0x515e55 = this._map.get(_0x46dc03);
          if (!_0x515e55) {
            return;
          }
          _0x515e55.serviceKeys.forEach(_0x1062bb => _0x44bfe6.remove(_0x1062bb, _0x515e55.value));
          this._map.delete(_0x46dc03);
        }
      }
      exports.BulkServiceRegistrationService = _0x10f280;
      _0x534b40.ServiceProvider.prototype.uriMapper = function () {
        return this.get(_0x120c75.uriMapper);
      };
    },
    78031: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.UriRanker = exports.UsedImportRanker = exports.MRUUsedRanker = exports.MRURanker = exports.addImportMRUKey = undefined;
      exports.addImportsEquals = _0x428083;
      exports.applyRankerToItemsInPlace = _0x190a3e;
      const _0x4e8619 = require(3433);
      const _0x293f23 = require(91426);
      const _0x332209 = require(58147);
      const _0x5061df = require(89740);
      const _0x5af5f3 = require(53062);
      const _0x290d00 = require(30048);
      function _0x428083(_0x14f84d, _0x3fb626) {
        return _0x14f84d.name === _0x3fb626.name && _0x14f84d.source === _0x3fb626.source;
      }
      exports.addImportMRUKey = new _0x5af5f3.MRUQueueKey('addImport', _0x49daf7 => _0x49daf7.name, _0x428083, 100);
      function _0x190a3e(_0xfa3adf, _0x46d308, _0x42f9c8, _0x3be1d6, _0x56c230) {
        let _0x23cf98 = 0;
        for (const _0x1ac4ca of _0xfa3adf) {
          _0x23cf98 += _0x1ac4ca.setSortKeys(_0x46d308, _0x3be1d6, _0x56c230);
          if (_0x23cf98 >= _0x42f9c8) {
            break;
          }
        }
        _0x3be1d6.sort(_0xb200de);
      }
      class _0xe461a7 {
        constructor(_0x269443, _0x1ead2f) {
          var _0x395e12;
          this._workspace = _0x269443;
          this._maxItems = _0x1ead2f;
          this._mruQueue = (_0x395e12 = this._workspace.service.serviceProvider.tryGet(_0x290d00.PylanceServiceKeys.mruQueues)) === null || _0x395e12 === undefined ? undefined : _0x395e12.getGlobalMRUQueue(exports.addImportMRUKey);
        }
        setSortKeys(_0x1392a0, _0x435df1, _0x3a343b) {
          if (!this._mruQueue) {
            return 0;
          }
          const _0x5c3b70 = this._mruQueue.get(_0x1392a0);
          if (_0x5c3b70.length === 0) {
            return 0;
          }
          return _0x5edc70(_0x5c3b70, _0x435df1, (_0xce533b, _0x5edc21) => `0_${_0x5edc21}_${_0x44cae6(_0xce533b.name, _0xce533b.source)}`, this._maxItems, _0x3a343b);
        }
      }
      exports.MRURanker = _0xe461a7;
      class _0x110dc5 {
        constructor(_0x5f1037, _0x55a412) {
          var _0x3f28e5;
          this._workspace = _0x5f1037;
          this._maxMruCount = _0x55a412;
          this._mruQueue = (_0x3f28e5 = this._workspace.service.serviceProvider.tryGet(_0x290d00.PylanceServiceKeys.mruQueues)) === null || _0x3f28e5 === undefined ? undefined : _0x3f28e5.getGlobalMRUQueue(exports.addImportMRUKey);
        }
        setSortKeys(_0x25a9c3, _0x17fb7d, _0x431848) {
          if (!this._mruQueue) {
            return 0;
          }
          const _0x225a68 = this._mruQueue.take(this._maxMruCount);
          if (_0x225a68.length === 0) {
            return 0;
          }
          return _0x5edc70(_0x225a68, _0x17fb7d, (_0x2239ad, _0x5f08f3) => `0_${_0x5f08f3}_${_0x44cae6(_0x2239ad.name, _0x2239ad.source)}`, _0x225a68.length, _0x431848);
        }
      }
      exports.MRUUsedRanker = _0x110dc5;
      const _0x41282b = 'n';
      const _0x38979a = 's';
      class _0x53bd17 {
        constructor(_0x2db20d, _0x37a3a9, _0xc9ad7a, _0x549479) {
          this._workspace = _0x2db20d;
          this._maxFiles = _0x37a3a9;
          this._maxStatements = _0xc9ad7a;
          this._maxItems = _0x549479;
        }
        setSortKeys(_0xbd0acc, _0x1e2e52, _0x2a7d99) {
          const _0x34c604 = this._collectsImportUsed(_0x1e2e52, _0xbd0acc, _0x2a7d99);
          if (_0x34c604.length === 0) {
            return 0;
          }
          return _0x5edc70(_0x34c604, _0x1e2e52, (_0x222923, _0x322fbc) => {
            return `1_${_0x222923.sortKey ?? ''}_${_0x44cae6(_0x222923.name, _0x222923.source)}`;
          }, this._maxItems, _0x2a7d99);
        }
        _collectsImportUsed(_0x440e09, _0x26e57e, _0x13e027) {
          return this._workspace.service.run(_0x909cc9 => {
            const _0x5107e1 = [];
            const _0x561da5 = _0x909cc9.getSourceFileInfoList().filter(_0x391342 => _0x391342.isOpenByClient && _0x4e8619.isUserCode(_0x391342));
            for (let _0x1eea82 = 0; _0x1eea82 < _0x561da5.length; _0x1eea82++) {
              _0x293f23.throwIfCancellationRequested(_0x13e027);
              if (_0x1eea82 > this._maxFiles) {
                return _0x5107e1;
              }
              const _0x4c018c = _0x561da5[_0x1eea82];
              const _0x42ff78 = _0x909cc9.getParseResults(_0x4c018c.sourceFile.getUri());
              if (!_0x42ff78) {
                continue;
              }
              const _0x5cc043 = _0x42ff78.parserOutput.parseTree;
              for (let _0x50cdf1 = 0; _0x50cdf1 < _0x5cc043.d.statements.length; _0x50cdf1++) {
                if (_0x50cdf1 > this._maxStatements) {
                  return _0x5107e1;
                }
                const _0x15a192 = _0x5cc043.d.statements[_0x50cdf1];
                if (_0x15a192.nodeType !== 47) {
                  continue;
                }
                _0x15a192.d.statements.forEach(_0x349957 => {
                  if (_0x349957.nodeType === 23) {
                    _0x349957.d.list.forEach(_0x5e657d => {
                      if (_0x5e657d.d.module.d.nameParts.length === 0) {
                        return;
                      }
                      const _0x12b63c = _0x5e657d.d.module.d.nameParts[_0x5e657d.d.module.d.nameParts.length - 1].d.token.value;
                      if (_0x12b63c === _0x26e57e) {
                        const _0x42a529 = _0x5e657d.d.module.d.nameParts.length > 1 ? _0x39eb31(_0x5e657d.d.module.d.nameParts.map(_0x66363e => _0x66363e.d.token.value)).join('.') : undefined;
                        _0x332209.addIfUnique(_0x5107e1, {
                          name: _0x12b63c,
                          source: _0x42a529,
                          sortKey: _0x41282b
                        }, _0x428083);
                        return;
                      }
                      const _0x1374c8 = _0x5e657d.d.module.d.nameParts.length === 1 ? _0x5e657d.d.module.d.nameParts[0].d.value : _0x5e657d.d.module.d.nameParts[0].d.value + '.';
                      const _0xca6a1e = _0x440e09.find(_0x1ba259 => {
                        var _0x29d9d9;
                        if ((_0x29d9d9 = _0x1ba259.source) === null || _0x29d9d9 === undefined) {
                          return undefined;
                        } else {
                          return _0x29d9d9.startsWith(_0x1374c8);
                        }
                      });
                      if (_0xca6a1e) {
                        _0x332209.addIfUnique(_0x5107e1, {
                          name: _0xca6a1e.name,
                          source: _0xca6a1e.source,
                          alias: _0xca6a1e.alias,
                          sortKey: _0x38979a
                        }, _0x428083);
                      }
                    });
                    return;
                  }
                  if (_0x349957.nodeType === 25) {
                    const _0xe3c6cb = _0x349957.d.module.d.nameParts.map(_0x4d9892 => _0x4d9892.d.token.value).join('.');
                    _0x349957.d.imports.forEach(_0x34486c => {
                      const _0x93b38a = _0x34486c.d.name.d.token.value;
                      if (_0x93b38a === _0x26e57e) {
                        _0x332209.addIfUnique(_0x5107e1, {
                          name: _0x93b38a,
                          source: _0xe3c6cb,
                          sortKey: _0x41282b
                        }, _0x428083);
                        return;
                      }
                      const _0x3bb273 = _0x440e09.find(_0x1135f3 => _0x1135f3.source === _0xe3c6cb);
                      if (_0x3bb273) {
                        _0x332209.addIfUnique(_0x5107e1, {
                          name: _0x3bb273.name,
                          source: _0x3bb273.source,
                          alias: _0x3bb273.alias,
                          sortKey: _0x38979a
                        }, _0x428083);
                      }
                    });
                    return;
                  }
                });
              }
            }
            return _0x5107e1;
          }, _0x13e027);
        }
      }
      exports.UsedImportRanker = _0x53bd17;
      class _0x266136 {
        constructor(_0x2e7101) {
          this._workspace = _0x2e7101;
        }
        setSortKeys(_0xd61de5, _0x371ab1, _0x3e8eee) {
          return this._workspace.service.run(_0x426370 => {
            let _0x119039 = 0;
            for (const _0x153e30 of _0x371ab1) {
              _0x293f23.throwIfCancellationRequested(_0x3e8eee);
              if (_0x153e30.sortKey !== undefined) {
                continue;
              }
              const _0x114e07 = this._getImportKind(_0x426370, _0x153e30.declUri);
              _0x153e30.sortKey = _0x114e07 + '_' + _0x44cae6(_0x153e30.name, _0x153e30.source);
              _0x119039++;
            }
            return _0x119039;
          }, _0x3e8eee);
        }
        _getImportKind(_0x2995cb, _0x1991de) {
          const _0x5bec86 = _0x2995cb.importResolver.getTypeshedStdLibPath(_0x2995cb.configOptions.findExecEnvironment(_0x1991de));
          const _0x49bef7 = _0x2995cb.getSourceFileInfo(_0x1991de);
          if (_0x49bef7) {
            if (_0x4e8619.isUserCode(_0x49bef7)) {
              return 4;
            }
            if (_0x49bef7.sourceFile.isTypingStubFile()) {
              return 2;
            }
            if (_0x1991de.startsWith(_0x5bec86)) {
              return 3;
            }
            return 5;
          }
          if (_0x1991de.pathEndsWith('stdlib/typing.pyi') || _0x1991de.pathEndsWith('stdlib/typing_extensions.pyi')) {
            return 2;
          }
          if (_0x1991de.startsWith(_0x5bec86)) {
            return 3;
          }
          return 5;
        }
      }
      exports.UriRanker = _0x266136;
      function _0x44cae6(_0x49768e, _0x3e5d28) {
        const _0x39ad43 = _0x3e5d28 ? _0x5061df.getCharacterCount(_0x3e5d28, '.') + '_' + _0x3e5d28 : '';
        return _0x49768e + '_' + _0x39ad43;
      }
      function _0x5edc70(_0x3c0d4a, _0x146feb, _0x29fba7, _0x5ca5c6, _0x58c069) {
        let _0x3d414a = 0;
        for (let _0x207413 = 0; _0x207413 < _0x3c0d4a.length; _0x207413++) {
          for (const _0x29aa2b of _0x146feb) {
            _0x293f23.throwIfCancellationRequested(_0x58c069);
            if (_0x29aa2b.sortKey !== undefined) {
              continue;
            }
            if (_0x428083(_0x29aa2b, _0x3c0d4a[_0x207413])) {
              _0x29aa2b.sortKey = _0x29fba7(_0x3c0d4a[_0x207413], _0x207413);
              if (++_0x3d414a >= _0x5ca5c6) {
                return _0x3d414a;
              }
              break;
            }
          }
        }
        return _0x3d414a;
      }
      function _0x39eb31(_0x558736) {
        _0x558736.pop();
        return _0x558736;
      }
      function _0xb200de(_0x1ab2fa, _0x55638f) {
        if (_0x1ab2fa.sortKey === _0x55638f.sortKey) {
          return 0;
        }
        if (_0x1ab2fa.sortKey && !_0x55638f.sortKey) {
          return -1;
        }
        if (!_0x1ab2fa.sortKey && _0x55638f.sortKey) {
          return 1;
        }
        return _0x1ab2fa.sortKey.localeCompare(_0x55638f.sortKey);
      }
    },
    23073: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.verifyClient = _0x5a7a0b;
      exports.generateVerificationString = _0x3f7ad5;
      const _0x3b2175 = require(96662);
      function _0x5a7a0b(_0x46bd81) {
        return;
      }
      function _0x3f7ad5() {
        return JSON.stringify(_0x3b2175.licenseErrorText);
      }
    },
    54700: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.deleteElement = _0x40117e;
      exports.AddIfNotNull = _0x1d8621;
      exports.tryGetStringValues = _0x3aaee6;
      exports.tryCast = _0xd2e767;
      const _0x30d4e4 = require(34455);
      function _0x40117e(_0x2048a4, _0x1b8ec3) {
        const _0x2f7b04 = _0x2048a4.findIndex(_0x4f709c => _0x4f709c === _0x1b8ec3);
        if (_0x2f7b04 < 0) {
          return;
        }
        _0x2048a4.splice(_0x2f7b04, 1);
      }
      function _0x1d8621(_0x518e5d, _0x2339fb) {
        if (_0x2339fb === undefined || _0x2339fb === null) {
          return;
        }
        _0x518e5d.push(_0x2339fb);
      }
      function _0x3aaee6(_0x4bf16b) {
        if (!_0x4bf16b || !Array.isArray(_0x4bf16b) || _0x4bf16b.length === 0) {
          return [];
        }
        return _0x4bf16b.filter(_0x1eea6d => _0x1eea6d && _0x30d4e4.isString(_0x1eea6d));
      }
      function _0xd2e767(_0x28f000) {
        if (_0x28f000 === undefined) {
          return undefined;
        } else {
          return _0x28f000;
        }
      }
    },
    99504: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PYTHON_EXTENSION_ID = exports.PYLANCE_EXTENSION_ID = exports.IS_INTERNAL = exports.IS_RELEASE = exports.IS_PR = exports.IS_DEV = exports.IS_INSIDERS = exports.PYRIGHT_VERSION = exports.PYRIGHT_COMMIT = exports.VERSION = undefined;
      const _0x319f41 = __importStar(require(69216));
      const _0x197e55 = require(23203);
      exports.VERSION = _0x197e55.version || '';
      exports.PYRIGHT_COMMIT = _0x197e55.pyrightCommit || 'unknown';
      exports.PYRIGHT_VERSION = _0x197e55.pyrightVersion || 'unknown';
      exports.IS_INSIDERS = _0x38844e(exports.VERSION);
      exports.IS_DEV = exports.VERSION.indexOf('-dev') !== -1;
      exports.IS_PR = exports.VERSION.indexOf('-pr.') !== -1;
      exports.IS_RELEASE = !exports.IS_INSIDERS && !exports.IS_DEV && !exports.IS_PR;
      exports.IS_INTERNAL = exports.IS_DEV || exports.IS_PR;
      exports.PYLANCE_EXTENSION_ID = 'ms-python.vscode-pylance';
      exports.PYTHON_EXTENSION_ID = 'ms-python.python';
      function _0x38844e(_0x524563) {
        try {
          const _0x468a0b = new _0x319f41.SemVer(_0x524563).patch;
          return _0x468a0b >= 100;
        } catch (_0x418d1b) {
          return false;
        }
      }
    },
    24122: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getEmptyIndexOptions = _0x3afbf7;
      exports.getBackgroundAnalysisProgram = _0x5277a2;
      exports.getWorkspace = _0x598435;
      exports.getBackgroundAnalysis = _0x34e67c;
      exports.cloneSimpleObject = _0x961767;
      function _0x3afbf7() {
        return {
          packageDepths: [],
          regenerateStdLibIndices: false
        };
      }
      function _0x5277a2(_0x37ecef) {
        if (_0x37ecef === null || _0x37ecef === undefined) {
          return undefined;
        } else {
          return _0x37ecef.service.backgroundAnalysisProgram;
        }
      }
      function _0x598435(_0x7ce14f) {
        return _0x7ce14f;
      }
      function _0x34e67c(_0x1c8a11) {
        return _0x1c8a11;
      }
      function _0x961767(_0x4f49f7) {
        return JSON.parse(JSON.stringify(_0x4f49f7));
      }
    },
    95756: function (module, exports, require) {
      'use strict';

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.sha256 = _0x6a8460;
      let _0x296133;
      try {
        _0x296133 = require(76982);
        if (!_0x296133?.createHash) {
          _0x296133 = undefined;
        }
      } catch {}
      const _0x49fd4d = __importDefault(require(23729));
      const _0x4ec490 = _0x296133?.createHash || _0x49fd4d.default;
      function _0x6a8460(_0x1ec485) {
        return _0x4ec490('sha256').update(_0x1ec485).digest('hex');
      }
    },
    8527: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.tryGetDirectDependencies = _0x48da39;
      const _0x29db4e = require(8745);
      const _0x5d5283 = require(75130);
      const _0x4ea439 = require(48281);
      const _0x3ffcc7 = require(4883);
      const _0x48c68c = require(54010);
      const _0x4e6f54 = require(71745);
      const _0x2af855 = __importStar(require(33351));
      function _0x48da39(_0x24a1dd, _0x2570d0) {
        const _0x423c2e = _0x24a1dd.serviceProvider.tryGet(_0x4e6f54.ServiceKeys.console);
        try {
          const _0x77406f = _0x2570d0.pathEndsWith(_0x3ffcc7.requirementsFileName);
          const _0x94eec = _0x2570d0.pathEndsWith(_0x3ffcc7.pyprojectTomlName);
          if (_0x77406f) {
            return _0x112281(_0x24a1dd, _0x4d4e98(_0x24a1dd.fileSystem, _0x2570d0), _0x423c2e);
          }
          if (_0x94eec) {
            return _0x112281(_0x24a1dd, _0x382149(_0x24a1dd.fileSystem, _0x2570d0), _0x423c2e);
          }
          return undefined;
        } catch (_0x24c509) {
          if (_0x423c2e === null || _0x423c2e === undefined) {
            undefined;
          } else {
            _0x423c2e.log(`Failed to get direct dependencies: ${_0x24c509}`);
          }
          return undefined;
        }
      }
      function _0x4d4e98(_0x46877a, _0x481d71, _0x435527 = new Set()) {
        if (!_0x46877a.existsSync(_0x481d71)) {
          return _0x435527;
        }
        const _0x343492 = _0x46877a.readFileSync(_0x481d71, 'utf8');
        const _0x48076d = _0x29db4e.parseFile(_0x343492, true);
        for (const _0x5557a2 of _0x48076d) {
          const _0x42386e = _0x37ec29(_0x5557a2);
          if (_0x42386e) {
            _0x435527.add(_0x42386e);
            continue;
          }
          if (_0x5557a2.type === 'CommandLineFlag' && _0x5557a2.args && _0x5557a2.args.length > 0 && _0x5557a2.flag === '-r') {
            _0x4d4e98(_0x46877a, _0x481d71.getDirectory().combinePaths(_0x5557a2.args[0]), _0x435527);
            continue;
          }
        }
        return _0x435527;
      }
      function _0x382149(_0x43937c, _0xb78986) {
        const _0x3f7274 = new Set();
        if (!_0x43937c.existsSync(_0xb78986)) {
          return _0x3f7274;
        }
        const _0x4c1ea2 = _0x43937c.readFileSync(_0xb78986, 'utf8');
        const _0x3b3baa = _0x2af855.parse(_0x4c1ea2);
        if (_0x3b3baa.project?.dependencies) {
          _0x3b3baa.project.dependencies.forEach(_0x2f4d5d => _0x2e8320(_0x3f7274, _0x563c10(_0x2f4d5d)));
        }
        if (_0x3b3baa.project?.['optional-dependencies']) {
          Object.values(_0x3b3baa.project['optional-dependencies']).forEach(_0x2bc2bb => {
            _0x2bc2bb.forEach(_0x31fc1d => _0x2e8320(_0x3f7274, _0x563c10(_0x31fc1d)));
          });
        }
        if (_0x3b3baa.tool?.poetry?.dependencies) {
          Object.keys(_0x3b3baa.tool.poetry.dependencies).forEach(_0x459ff2 => _0x2e8320(_0x3f7274, _0x563c10(_0x459ff2)));
        }
        if (_0x3b3baa.tool?.poetry?.extras) {
          Object.values(_0x3b3baa.tool.poetry.extras).forEach(_0x4be060 => {
            _0x4be060.forEach(_0x41c228 => _0x2e8320(_0x3f7274, _0x563c10(_0x41c228)));
          });
        }
        if (_0x3b3baa.tool?.flit?.dependencies?.requires) {
          _0x3b3baa.tool.flit.dependencies.requires.forEach(_0x373209 => _0x2e8320(_0x3f7274, _0x563c10(_0x373209)));
        }
        if (_0x3b3baa.tool?.flit?.extra?.requires) {
          Object.values(_0x3b3baa.tool.flit.extra.requires).forEach(_0x5c814f => {
            _0x5c814f.forEach(_0x146007 => _0x2e8320(_0x3f7274, _0x563c10(_0x146007)));
          });
        }
        return _0x3f7274;
      }
      function _0x2e8320(_0x35f91d, _0x2d1cc3) {
        if (!_0x2d1cc3) {
          return;
        }
        _0x35f91d.add(_0x2d1cc3);
      }
      function _0x563c10(_0x134cbf) {
        const _0x2f1993 = _0x29db4e.parseLine(_0x134cbf, true);
        if (!_0x2f1993) {
          return undefined;
        }
        return _0x37ec29(_0x2f1993);
      }
      function _0x37ec29(_0x1c114f) {
        if (_0x1c114f.type === 'Requirement') {
          switch (_0x1c114f.subtype) {
            case 'URL':
            case 'Path':
            case 'PackageURL':
              {
                const _0x3afde4 = _0x1c114f.subtype === 'Path' ? _0x1c114f.path : _0x1c114f.url;
                return _0x2a0bf4(_0x3afde4);
              }
            case 'Package':
              return _0x1c114f.package;
          }
          _0x4ea439.assertNever(_0x1c114f.subtype);
        }
        if (!_0x1c114f.args || _0x1c114f.args.length === 0) {
          return undefined;
        }
        if (_0x1c114f.flag === '-e') {
          return _0x2a0bf4(_0x1c114f.args[0]);
        }
        return undefined;
      }
      function _0x112281(_0x4f0f86, _0x17ab46, _0x48e8f6) {
        const _0x3b6197 = [..._0x17ab46];
        if (_0x48e8f6 === null || _0x48e8f6 === undefined) {
          undefined;
        } else {
          _0x48e8f6.log(`Dependency Discovered: ${_0x3b6197.join(' ,')}`);
        }
        const _0x4948d9 = _0x3b6197.map(_0x299edb => _0xf6792f(_0x299edb));
        const _0x38f47f = new Set();
        for (const _0x3ab6b1 of _0x4f0f86.getPythonSearchPaths([])) {
          if (!_0x4f0f86.fileSystem.existsSync(_0x3ab6b1)) {
            continue;
          }
          const _0x3833f1 = _0x4f0f86.fileSystem.readdirEntriesSync(_0x3ab6b1).filter(_0x3b8d1f => _0x3b8d1f.isDirectory() && _0x3b8d1f.name.endsWith('.dist-info')).map(_0x20f49f => _0x20f49f.name);
          for (const _0x2367aa of _0x4948d9) {
            const _0x1ec178 = _0x3833f1.find(_0xfbd8d1 => _0x2367aa.test(_0xfbd8d1));
            if (!_0x1ec178) {
              continue;
            }
            _0x2574d7(_0x4f0f86, _0x3ab6b1, _0x1ec178, _0x38f47f);
          }
        }
        return _0x38f47f;
      }
      function _0x2574d7(_0x112493, _0x35538e, _0x28fcc3, _0x1fc4c9) {
        const _0x1f2de2 = _0x35538e.combinePaths(_0x28fcc3);
        if (!_0x112493.fileSystem.existsSync(_0x1f2de2)) {
          return;
        }
        const _0x4643c9 = _0x1f2de2.combinePaths('top_level.txt');
        if (_0x112493.fileSystem.existsSync(_0x4643c9)) {
          const _0x256c32 = _0x112493.fileSystem.readFileSync(_0x4643c9, 'utf8').split(/\r\n|\r|\n/);
          for (const _0x2fdf1f of _0x256c32) {
            const _0x4b953a = _0x2fdf1f.trim();
            if (_0x4b953a) {
              _0x1fc4c9.add(_0x4b953a);
            }
          }
        }
        const _0x4dbb7c = _0x1f2de2.combinePaths('RECORD');
        if (_0x112493.fileSystem.existsSync(_0x4dbb7c)) {
          const _0x8a5c36 = _0x112493.fileSystem.readFileSync(_0x4dbb7c, 'utf8').split(/\r\n|\r|\n/);
          for (const _0x5a8aa7 of _0x8a5c36) {
            const [_0x39a2f2] = _0x5a8aa7.split(',');
            const _0x5f19ba = _0x48c68c.getFileExtension(_0x39a2f2).toLowerCase();
            if (_0x5d5283.supportedFileExtensions.some(_0x27a8f3 => _0x27a8f3 === _0x5f19ba)) {
              const _0xb8de3b = _0x39a2f2.split('/');
              if (_0xb8de3b.length === 1) {
                _0x1fc4c9.add(_0x48c68c.stripFileExtension(_0xb8de3b[0]));
              } else {
                if (_0xb8de3b.length > 1) {
                  _0x1fc4c9.add(_0xb8de3b[0]);
                }
              }
            }
          }
        }
      }
      function _0x23d3f1(_0x51f6cb) {
        let _0x55fc2f = _0x51f6cb.toLocaleLowerCase('en-US');
        _0x55fc2f = _0x51f6cb.replace(/[^_\p{L}\p{N}]+/gu, '-');
        _0x55fc2f = _0x55fc2f.replace(/^-+|-+$/g, '');
        return _0x55fc2f;
      }
      function _0xf6792f(_0x55f4d4) {
        const _0x350634 = _0x23d3f1(_0x55f4d4);
        const _0x134674 = _0x350634.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const _0x70bfe5 = `^${_0x134674.replace(/-/g, '[-_]')}(?:[-].+)?\\.dist-info\$`;
        return new RegExp(_0x70bfe5, 'i');
      }
      function _0x2a0bf4(_0x471e36) {
        if (!_0x471e36) {
          return undefined;
        }
        const _0x119de4 = _0x3f0d5e(_0x471e36);
        if (_0x119de4) {
          return _0x119de4;
        }
        return _0x263044(_0x471e36);
      }
      function _0x3f0d5e(_0x286843) {
        const _0x563efe = _0x286843.match(/#egg=([^&]+)/);
        if (_0x563efe) {
          return _0x563efe[1];
        } else {
          return undefined;
        }
      }
      function _0x263044(_0x260899) {
        const _0x16383d = _0x260899.match(/\/([^/]+\.whl)$/);
        if (!_0x16383d) {
          return undefined;
        }
        const _0x555068 = _0x16383d[1];
        const _0x2fcd37 = _0x555068.split('-');
        if (_0x2fcd37.length > 0) {
          return _0x2fcd37[0];
        } else {
          return undefined;
        }
      }
    },
    48256: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BaseFormatter = undefined;
      const _0x2b6de5 = require(17490);
      class _0x21f3cf extends _0x2b6de5.BaseWalker {
        constructor(_0xe40d64) {
          super(_0xe40d64);
          this._result = '';
          this._originalText = '';
        }
        get originalText() {
          return this._originalText;
        }
        walk(_0x2e4fb8) {
          this._originalText = _0x2e4fb8.rootNode.text;
          this._result = '';
          super.walk(_0x2e4fb8);
        }
        appendText(_0x1f2251) {
          this._result += _0x1f2251;
        }
        insertText(_0x108d19, _0x1937c7) {
          if (_0x108d19 < 0) {
            _0x108d19 = this._result.length + _0x108d19;
          }
          this._result = this._result.slice(0, _0x108d19) + _0x1937c7 + this._result.slice(_0x108d19);
        }
        getCurrentIndentation() {
          const _0x496b33 = this._result.lastIndexOf('\n');
          if (_0x496b33 >= 0) {
            const _0x48e488 = this._result.slice(_0x496b33 + 1);
            const _0xcb266e = _0x48e488.match(/^(\s+|[&nbsp;]+)/);
            if (_0xcb266e) {
              return _0xcb266e[0].replace(/&nbsp;/g, ' ');
            }
          }
          return '';
        }
        removeIndentationOnCurrentLine() {
          const _0x587385 = this._result.lastIndexOf('\n');
          if (_0x587385 >= 0) {
            const _0x55bbbe = this._result.slice(_0x587385 + 1);
            const _0x518517 = _0x55bbbe.match(/^(\s+|[&nbsp;]+)/);
            if (_0x518517) {
              this._result = this._result.slice(0, _0x587385 + 1) + _0x55bbbe.slice(_0x518517[0].length);
              return _0x518517[0].replace(/&nbsp;/g, ' ');
            }
          }
          return '';
        }
        removeUpToLastLineFeed() {
          const _0x2d6ea0 = this._result.lastIndexOf('\n');
          if (_0x2d6ea0 >= 0) {
            this._result = this._result.slice(0, _0x2d6ea0);
          }
        }
        replaceText(_0x50a925, _0x459567) {
          this._result = this._result.replace(_0x50a925, _0x459567);
        }
        getResult() {
          return this._result;
        }
        extractNodeText(_0x1cb7e2) {
          if (_0x1cb7e2.childCount > 0) {
            const _0x1066b4 = this._result;
            this._result = '';
            if (this.currentNode?.id !== _0x1cb7e2.id) {
              this.visitNode(_0x1cb7e2);
            } else {
              this.walkChildren(_0x1cb7e2);
            }
            const _0x3be68d = this._result;
            this._result = _0x1066b4;
            return _0x3be68d;
          } else {
            return _0x1cb7e2.text;
          }
        }
        handleError(_0x56600c) {
          const _0x553b19 = this._originalText.slice(_0x56600c.startIndex);
          this.appendText(_0x553b19);
          return false;
        }
        visitText(_0x2bee6d) {
          this.appendText(_0x2bee6d.text);
          return true;
        }
        visitAdornment(_0x55c4cf) {
          this.appendText(_0x55c4cf.text);
          return true;
        }
        visitLineFeed(_0x3d126d) {
          this.appendText('\n');
          return true;
        }
        visitSpace(_0x5cf510) {
          if (this.currentNode?.type !== '|') {
            this.appendText(_0x5cf510);
          }
          return true;
        }
        visitIndent(_0x70c8e1) {
          this.appendText(_0x70c8e1);
          return true;
        }
        visitInterpretedText(_0x4c916d) {
          this.appendText(_0x4c916d.text);
          return true;
        }
        visitEmphasis(_0x28ba62) {
          this.appendText(_0x28ba62.text);
          return true;
        }
        visitStrong(_0x5b8793) {
          this.appendText(_0x5b8793.text);
          return true;
        }
      }
      exports.BaseFormatter = _0x21f3cf;
    },
    17490: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BaseWalker = undefined;
      class _0x1c9772 {
        constructor(_0x238076) {
          this.console = _0x238076;
          this._errors = [];
        }
        get text() {
          var _0x319f46;
          return ((_0x319f46 = this._document) === null || _0x319f46 === undefined ? undefined : _0x319f46.rootNode.text) || '';
        }
        get currentNode() {
          return this._currentNode;
        }
        get previousNode() {
          return this._previousNode;
        }
        get root() {
          var _0x585f82;
          if ((_0x585f82 = this._document) === null || _0x585f82 === undefined) {
            return undefined;
          } else {
            return _0x585f82.rootNode;
          }
        }
        walk(_0x1bfdb7) {
          this._document = _0x1bfdb7;
          this._currentNode = _0x1bfdb7.rootNode;
          this.walkChildren(this._currentNode);
        }
        getNodeIndentation(_0x38db3f) {
          if (_0x38db3f) {
            for (let _0x57ab43 = _0x38db3f.startIndex; _0x57ab43 >= 0; _0x57ab43--) {
              if (this.text[_0x57ab43] === '\n' || _0x57ab43 === 0) {
                const _0x41f382 = this.text.slice(_0x57ab43 + 1, _0x38db3f.startIndex).match(/^\s+/);
                if (_0x41f382) {
                  return _0x41f382[0];
                } else {
                  break;
                }
              }
            }
          }
          return '';
        }
        getWhitespaceBetween(_0x58dc68, _0x56bcc6) {
          const _0x2e2c9e = this.text.slice(_0x58dc68.endIndex, _0x56bcc6.startIndex);
          return _0x2e2c9e;
        }
        getCurrentIndentation(_0x43b990) {
          const _0x462664 = _0x43b990 ?? this.currentNode;
          if (_0x462664) {
            return this.getNodeIndentation(_0x462664);
          }
          return '';
        }
        visitNode(_0x4f33e2) {
          const _0x2931d1 = this._document;
          this._currentNode = _0x4f33e2;
          let _0xb407c8 = true;
          switch (_0x4f33e2.type) {
            case 'content':
              _0xb407c8 = this.visitContent(_0x4f33e2);
              break;
            case 'comment':
              _0xb407c8 = this.visitComment(_0x4f33e2);
              break;
            case 'section':
              _0xb407c8 = this.visitSection(_0x4f33e2);
              break;
            case 'directive':
              _0xb407c8 = this.visitDirective(_0x4f33e2);
              break;
            case 'definition':
              _0xb407c8 = this.visitDefinition(_0x4f33e2);
              break;
            case 'field':
              _0xb407c8 = this.visitField(_0x4f33e2);
              break;
            case 'options':
              _0xb407c8 = this.visitOptions(_0x4f33e2);
              break;
            case 'field_list':
              _0xb407c8 = this.visitFieldList(_0x4f33e2);
              break;
            case 'field_name':
              _0xb407c8 = this.visitFieldName(_0x4f33e2);
              break;
            case 'field_body':
              _0xb407c8 = this.visitFieldBody(_0x4f33e2);
              break;
            case 'line_block':
              _0xb407c8 = this.visitLineBlock(_0x4f33e2);
              break;
            case 'line':
              _0xb407c8 = this.visitLine(_0x4f33e2);
              break;
            case '|':
              _0xb407c8 = this.visitPipe(_0x4f33e2);
              break;
            case 'definition_list':
              _0xb407c8 = this.visitDefinitionList(_0x4f33e2);
              break;
            case 'bullet_list':
              _0xb407c8 = this.visitBulletList(_0x4f33e2);
              break;
            case 'list_item':
              _0xb407c8 = this.visitListItem(_0x4f33e2);
              break;
            case 'body':
              _0xb407c8 = this.visitBody(_0x4f33e2);
              break;
            case 'block_quote':
              _0xb407c8 = this.visitBlockQuote(_0x4f33e2);
              break;
            case 'arguments':
              _0xb407c8 = this.visitArguments(_0x4f33e2);
              break;
            case 'bullet':
              _0xb407c8 = this.visitBullet(_0x4f33e2);
              break;
            case 'type':
              _0xb407c8 = this.visitType(_0x4f33e2);
              break;
            case 'literal_block':
              _0xb407c8 = this.visitLiteralBlock(_0x4f33e2);
              break;
            case 'classifier':
              _0xb407c8 = this.visitClassifier(_0x4f33e2);
              break;
            case ':':
              _0xb407c8 = this.visitColon(_0x4f33e2);
              break;
            case '..':
              _0xb407c8 = this.visitDirectiveIdentifier(_0x4f33e2);
              break;
            case '::':
              _0xb407c8 = this.visitDirectiveSeparator(_0x4f33e2);
              break;
            case 'title':
              _0xb407c8 = this.visitTitle(_0x4f33e2);
              break;
            case 'adornment':
              _0xb407c8 = this.visitAdornment(_0x4f33e2);
              break;
            case 'text':
              _0xb407c8 = this.visitText(_0x4f33e2);
              break;
            case 'paragraph':
              _0xb407c8 = this.visitParagraph(_0x4f33e2);
              break;
            case 'literal':
              _0xb407c8 = this.visitLiteral(_0x4f33e2);
              break;
            case 'term':
              _0xb407c8 = this.visitTerm(_0x4f33e2);
              break;
            case 'standalone_hyperlink':
              _0xb407c8 = this.visitStandaloneHyperlink(_0x4f33e2);
              break;
            case 'reference':
              _0xb407c8 = this.visitReference(_0x4f33e2);
              break;
            case 'target':
              _0xb407c8 = this.visitTarget(_0x4f33e2);
              break;
            case 'name':
              _0xb407c8 = this.visitName(_0x4f33e2);
              break;
            case 'link':
              _0xb407c8 = this.visitLink(_0x4f33e2);
              break;
            case 'emphasis':
              _0xb407c8 = this.visitEmphasis(_0x4f33e2);
              break;
            case 'interpreted_text':
              _0xb407c8 = this.visitInterpretedText(_0x4f33e2);
              break;
            case 'strong':
              _0xb407c8 = this.visitStrong(_0x4f33e2);
              break;
            case 'role':
              _0xb407c8 = this.visitRole(_0x4f33e2);
              break;
            case 'doctest_block':
              _0xb407c8 = this.visitDocTestBlock(_0x4f33e2);
              break;
            case 'footnote':
              _0xb407c8 = this.visitFootNote(_0x4f33e2);
              break;
            case 'footnote_reference':
              _0xb407c8 = this.visitFootNoteReference(_0x4f33e2);
              break;
            case 'label':
              _0xb407c8 = this.visitLabel(_0x4f33e2);
              break;
            case 'enumerated_list':
              _0xb407c8 = this.visitEnumeratedList(_0x4f33e2);
              break;
            case 'citation':
              _0xb407c8 = this.visitCitation(_0x4f33e2);
              break;
            case 'citation_reference':
              _0xb407c8 = this.visitCitationReference(_0x4f33e2);
              break;
            case 'substitution':
              _0xb407c8 = this.visitSubstitution(_0x4f33e2);
              break;
            case 'substitution_definition':
              _0xb407c8 = this.visitSubstitutionDefinition(_0x4f33e2);
              break;
            case 'substitution_reference':
              _0xb407c8 = this.visitSubstitutionReference(_0x4f33e2);
              break;
            case 'ERROR':
              _0xb407c8 = this.handleError(_0x4f33e2);
              break;
            case ' ':
              _0xb407c8 = this.visitSpace(' ');
              break;
            case 'transition':
              _0xb407c8 = this.visitTransition(_0x4f33e2);
              break;
            default:
              this.console.error(`Unknown node type: ${_0x4f33e2.parent?.type}:${_0x4f33e2.type}`);
              break;
          }
          this._previousNode = _0x4f33e2;
          if (_0xb407c8 && this._document === _0x2931d1) {
            this.walkChildren(_0x4f33e2);
          }
        }
        handleError(_0x444454) {
          this._errors.push(_0x444454);
          return false;
        }
        visitTransition(_0x2833b8) {
          return true;
        }
        visitComment(_0x58cc6f) {
          return true;
        }
        visitSubstitution(_0x2defdf) {
          return true;
        }
        visitSubstitutionReference(_0x3f0825) {
          return true;
        }
        visitSubstitutionDefinition(_0x1995c6) {
          return true;
        }
        visitCitation(_0x54fe31) {
          return true;
        }
        visitCitationReference(_0x10ab55) {
          return true;
        }
        visitField(_0x1b8085) {
          return true;
        }
        visitFieldList(_0x35647c) {
          return true;
        }
        visitOptions(_0x3e3c13) {
          return true;
        }
        visitFieldName(_0x204dc0) {
          return true;
        }
        visitFieldBody(_0x16ab8b) {
          return true;
        }
        visitLineBlock(_0x4f94e4) {
          return true;
        }
        visitLine(_0x4a40fd) {
          return true;
        }
        visitPipe(_0x20015d) {
          return true;
        }
        visitBlockQuote(_0x247591) {
          return true;
        }
        visitEnumeratedList(_0x2c0a9f) {
          return true;
        }
        visitLabel(_0x2d279a) {
          return true;
        }
        visitFootNoteReference(_0x355d56) {
          return true;
        }
        visitFootNote(_0x419a0b) {
          return true;
        }
        visitContent(_0x1a7b59) {
          return true;
        }
        visitText(_0x359ae6) {
          return true;
        }
        visitDocTestBlock(_0x5be39f) {
          return true;
        }
        visitClassifier(_0x4990de) {
          return true;
        }
        visitColon(_0x12462c) {
          return true;
        }
        visitRole(_0x4affb6) {
          return true;
        }
        visitStrong(_0x1a94d1) {
          return true;
        }
        visitInterpretedText(_0x3ad7bf) {
          return true;
        }
        visitEmphasis(_0x19294d) {
          return true;
        }
        visitLink(_0x155b1c) {
          return true;
        }
        visitName(_0x39d8c7) {
          return true;
        }
        visitTarget(_0x3a0d24) {
          return true;
        }
        visitReference(_0x1a62a4) {
          return true;
        }
        visitStandaloneHyperlink(_0x27bbc4) {
          return true;
        }
        visitLiteralBlock(_0x170b3a) {
          return true;
        }
        visitArguments(_0x29942c) {
          return true;
        }
        visitLiteral(_0x4ab15a) {
          return true;
        }
        visitTerm(_0x113f65) {
          return true;
        }
        visitType(_0x15d6a4) {
          switch (_0x15d6a4.parent?.type) {
            case 'directive':
              return this.visitDirectiveType(_0x15d6a4);
              break;
            default:
              break;
          }
          return true;
        }
        visitDirective(_0x381ade) {
          const _0x456ab8 = _0x381ade.namedChildren.find(_0x4a8a15 => _0x4a8a15.type === 'type')?.text;
          switch (_0x456ab8) {
            case 'figure':
            case 'image':
              return this.visitImageDirective(_0x381ade);
            case 'contents':
              return this.visitTableOfContentsDirective(_0x381ade);
            case 'code':
            case 'code-block':
            case 'sourcecode':
              return this.visitCodeBlockDirective(_0x381ade);
            case 'versionadded':
              return this.visitVersionAddedDirective(_0x381ade);
            case 'seealso':
              return this.visitSeeAlsoDirective(_0x381ade);
            case 'list-table':
              return this.visitListTableDirective(_0x381ade);
            default:
              return this.visitDefaultDirective(_0x381ade, _0x456ab8);
          }
        }
        visitVersionAddedDirective(_0x207f22) {
          return true;
        }
        visitListTableDirective(_0x30d7e7) {
          return true;
        }
        visitSeeAlsoDirective(_0x5c0fa2) {
          return true;
        }
        visitDirectiveIdentifier(_0x554c50) {
          return true;
        }
        visitDirectiveSeparator(_0x3032b2) {
          return true;
        }
        visitDefinition(_0xa341bb) {
          return true;
        }
        visitBody(_0x3da61b) {
          return true;
        }
        visitBullet(_0x16b4ad) {
          return true;
        }
        visitBulletList(_0x3c6059) {
          return true;
        }
        visitDefinitionList(_0x3029c8) {
          return true;
        }
        visitListItem(_0x1ebf82) {
          return true;
        }
        visitSection(_0x34d855) {
          return true;
        }
        visitTitle(_0x344ae7) {
          return true;
        }
        visitParagraph(_0x1397cf) {
          return true;
        }
        visitDirectiveType(_0x57ca68) {
          return true;
        }
        visitDefaultDirective(_0x4fd818, _0x305856) {
          return true;
        }
        visitImageDirective(_0x2bd38b) {
          return true;
        }
        visitTableOfContentsDirective(_0x4ab331) {
          return true;
        }
        visitCodeBlockDirective(_0x19881a) {
          return true;
        }
        walkChildren(_0x114e2c) {
          if (_0x114e2c.childCount > 0) {
            this.walkSiblings(_0x114e2c.firstChild);
          }
        }
        walkSiblings(_0x293716) {
          const _0x1cede7 = this._document;
          while (_0x293716 && _0x1cede7 === this._document) {
            this.visitNode(_0x293716);
            this.walkWhitespace(_0x293716);
            _0x293716 = _0x293716.nextSibling;
          }
        }
        walkWhitespace(_0x238433) {
          if (_0x238433 && _0x238433.nextSibling && _0x238433.nextSibling.startIndex > _0x238433.endIndex) {
            const _0x514a90 = this.text.slice(_0x238433.endIndex, _0x238433.nextSibling.startIndex);
            let _0x2859ee = '';
            let _0x33ecf3 = false;
            const _0x5a95dc = _0xaeadaa => {
              if (_0xaeadaa.length > 0) {
                if (_0x33ecf3) {
                  this.visitIndent(_0xaeadaa);
                } else {
                  this.visitSpace(_0xaeadaa);
                }
              }
              _0x33ecf3 = false;
            };
            for (let _0xef68d9 = 0; _0xef68d9 < _0x514a90.length; _0xef68d9++) {
              if (_0x514a90[_0xef68d9] === '\n') {
                const _0x653ed = _0x33ecf3;
                _0x5a95dc(_0x2859ee);
                this.visitLineFeed(_0x653ed);
                _0x33ecf3 = true;
                _0x2859ee = '';
              } else {
                _0x2859ee += _0x514a90[_0xef68d9];
              }
            }
            _0x5a95dc(_0x2859ee);
          }
        }
        findSiblingOfType(_0x1580b5, _0x4769f0) {
          while (_0x1580b5) {
            if (_0x1580b5.type === _0x4769f0) {
              return _0x1580b5;
            }
            _0x1580b5 = _0x1580b5.nextSibling;
          }
          return undefined;
        }
        findParent(_0x123685, _0x2fe413) {
          let _0x1e9eb2 = _0x123685.parent;
          while (_0x1e9eb2) {
            if (_0x2fe413(_0x1e9eb2)) {
              return _0x1e9eb2;
            }
            _0x1e9eb2 = _0x1e9eb2.parent;
          }
          return undefined;
        }
        findPreviousSection(_0x1a0d8e) {
          var _0x5e575b;
          let _0x2fecb7 = _0x1a0d8e;
          while (_0x2fecb7 && _0x2fecb7.parent?.id !== ((_0x5e575b = this._document) === null || _0x5e575b === undefined ? undefined : _0x5e575b.rootNode.id)) {
            _0x2fecb7 = _0x2fecb7.parent;
          }
          while (_0x2fecb7) {
            if (_0x2fecb7.type === 'transition') {
              return undefined;
            }
            if (_0x2fecb7.type === 'section') {
              return _0x2fecb7;
            }
            _0x2fecb7 = _0x2fecb7.previousSibling;
          }
          return undefined;
        }
        findFirstDescendantWithType(_0x480dc4, _0x4ebff) {
          return this.findFirstDescendant(_0x480dc4, _0x45ddf2 => _0x45ddf2.type === _0x4ebff);
        }
        findMatchingDescendants(_0x3a2b03, _0x5a9035, _0x515f1b = 100) {
          const _0x5f3ba9 = _0x3a2b03 ? _0x3a2b03.children.map(_0x321cd3 => ({
            node: _0x321cd3,
            depth: 0
          })) : [];
          const _0x1dcc37 = [];
          let _0x82d62 = 0;
          while (_0x5f3ba9.length > 0 && _0x82d62 <= _0x515f1b) {
            const _0x2b6eb6 = _0x5f3ba9.shift();
            if (_0x2b6eb6) {
              if (_0x5a9035(_0x2b6eb6.node)) {
                _0x1dcc37.push(_0x2b6eb6.node);
              }
              for (const _0x377d9f of _0x2b6eb6.node.children) {
                _0x5f3ba9.push({
                  node: _0x377d9f,
                  depth: _0x2b6eb6.depth + 1
                });
              }
              _0x82d62 = _0x2b6eb6.depth;
            }
          }
          return _0x1dcc37;
        }
        findFirstDescendant(_0x5548af, _0x5cca29) {
          const _0x2dd3ec = _0x5548af ? [..._0x5548af.children] : [];
          while (_0x2dd3ec.length > 0) {
            const _0x2217bd = _0x2dd3ec.shift();
            if (_0x2217bd) {
              if (_0x5cca29(_0x2217bd)) {
                return _0x2217bd;
              }
              for (const _0x4373f0 of _0x2217bd.children) {
                _0x2dd3ec.push(_0x4373f0);
              }
            }
          }
          return undefined;
        }
        visitAdornment(_0xd0dcd2) {
          return true;
        }
        visitLineFeed(_0x1cf321) {
          return true;
        }
        visitSpace(_0x28b2a5) {
          return true;
        }
        visitIndent(_0xff1ab4) {
          return true;
        }
      }
      exports.BaseWalker = _0x1c9772;
    },
    17189: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Fixer = undefined;
      const _0x28c5 = require(17490);
      const _0x4bdefb = require(62104);
      const _0x399ed0 = require(40804);
      const _0xe58f0b = require(36984);
      const _0x425c0a = /@(brief|anchor|type|param|rtype|return)\s+/;
      class _0x47bba8 extends _0x28c5.BaseWalker {
        constructor(_0x47517b, _0x1532a5) {
          super(_0x1532a5);
          this._parser = _0x47517b;
          this._insideErrorNode = '';
          this._currentFieldList = '';
          this._paramToTypeName = new Map();
          this._varToTypeName = new Map();
          this._returnTypes = [];
          this._rewalkDepth = 0;
        }
        static fix(_0xd6fa66, _0x40fe9e, _0x8f6757) {
          try {
            const _0x19bd5e = _0x4bdefb.fixupGoogleDoc(_0xd6fa66);
            const _0x4d7ad2 = _0xe58f0b.fixupCommonMarkdownLiterals(_0x19bd5e);
            const _0x458c3f = _0x40fe9e.parse(_0x4d7ad2, _0x8f6757);
            if (_0x458c3f) {
              const _0x21a40c = new _0x47bba8(_0x40fe9e, _0x8f6757);
              _0x21a40c.walk(_0x458c3f);
              return _0x21a40c.text;
            }
          } catch (_0x5042e6) {
            _0x8f6757.error(`Error fixing docstring: ${_0x5042e6}`);
          }
          return _0xd6fa66;
        }
        visitFieldList(_0xb06144) {
          var _0x21dfef;
          var _0x2cca78;
          var _0x39e99f;
          const _0x16bb3e = _0xb06144.nextNamedSibling;
          if (_0x16bb3e?.type === 'field_list') {
            const _0x4b1bba = this.text.slice(_0xb06144.endIndex, _0x16bb3e.startIndex);
            if (_0x4b1bba.trim().length === 0) {
              const _0x33142a = this.text.slice(0, _0xb06144.endIndex) + '\n' + this.text.slice(_0x16bb3e.startIndex);
              this.rewalk(_0x33142a);
              return false;
            }
          }
          if (_0x16bb3e?.type === 'paragraph' && this.getCurrentIndentation(_0xb06144) === this.getCurrentIndentation(_0x16bb3e) && this.getWhitespaceBetween(_0xb06144, _0x16bb3e).split('\n').length === 2) {
            const _0x8eac33 = _0x16bb3e.text.split('\n');
            const _0x4c88ae = [];
            let _0x2d2799 = false;
            for (const _0x3f0948 of _0x8eac33) {
              if (_0x3f0948.trim().startsWith(':') || _0x2d2799) {
                _0x4c88ae.push(_0x3f0948);
                _0x2d2799 = true;
              } else {
                _0x4c88ae.push(`   ${_0x3f0948}`);
              }
            }
            const _0x58b10d = this.getNodeIndentation(_0xb06144);
            _0x4c88ae[0] = _0x58b10d + '    ' + _0x4c88ae[0];
            this._replaceNodeAndRewalk(_0x16bb3e, _0x4c88ae);
            return false;
          }
          const _0x1faf6d = this.findMatchingDescendants(_0xb06144, _0xdf167e => _0xdf167e.type === 'field_name', 2);
          const _0x161455 = _0x1faf6d.map(_0x5d7cc3 => _0x5d7cc3.text);
          let _0x2ebaaf = false;
          let _0x4b47c0 = false;
          let _0x26fa53 = false;
          let _0x3b5bbc = false;
          let _0x2bb9a4 = false;
          if (_0x161455.some(_0x395168 => _0x395168.startsWith('param') || _0x395168.startsWith('type'))) {
            const _0x524a3d = this.findFirstDescendant(this.root, _0x1b1532 => {
              return _0x1b1532.type === 'section' && _0xe58f0b.isParameters(_0x1b1532?.firstChild?.text || '');
            });
            _0x2ebaaf = !_0x524a3d;
            _0x3b5bbc = true;
          }
          if (_0x161455.some(_0x1a00e0 => _0x1a00e0.startsWith('return'))) {
            const _0x239914 = this.findFirstDescendant(this.root, _0x372670 => {
              return _0x372670.type === 'section' && _0xe58f0b.isReturns(_0x372670?.firstChild?.text || '');
            });
            _0x4b47c0 = !_0x239914;
            _0x3b5bbc = true;
          }
          if (_0x161455.some(_0x2719d0 => _0x2719d0.startsWith('raise'))) {
            const _0xdda15b = this.findFirstDescendant(this.root, _0x47439e => {
              return _0x47439e.type === 'section' && _0xe58f0b.isRaises(_0x47439e?.firstChild?.text || '');
            });
            _0x26fa53 = !_0xdda15b;
            _0x3b5bbc = true;
          }
          if (_0x161455.some(_0x3ee4ac => _0x3ee4ac.startsWith('var') || _0x3ee4ac.startsWith('vartype'))) {
            const _0x16f322 = this.findFirstDescendant(this.root, _0x494a4f => {
              return _0x494a4f.type === 'section' && _0xe58f0b.isVar(_0x494a4f?.firstChild?.text || '');
            });
            _0x2bb9a4 = !_0x16f322;
            _0x3b5bbc = true;
          }
          if (_0x3b5bbc && this._currentFieldList !== _0xb06144.text) {
            this._currentFieldList = _0xb06144.text;
            const _0x3c8c95 = [];
            if (_0x2ebaaf) {
              _0x3c8c95.push('');
              _0x3c8c95.push('Parameters');
              _0x3c8c95.push('----------');
              _0x3c8c95.push('');
            }
            const _0x2e8740 = _0x1faf6d.filter(_0x1f0ed2 => _0x1f0ed2.text.startsWith('type'));
            for (const _0x99b3f8 of _0x2e8740) {
              const _0x4fb36b = ((_0x21dfef = _0x99b3f8.nextNamedSibling) === null || _0x21dfef === undefined ? undefined : _0x21dfef.text.replace(/\n\s+/g, ' ')) || _0x399ed0.EmptyClassifier;
              const _0x2e3a35 = this._splitField(_0x99b3f8.text).name;
              this._paramToTypeName.set(_0x2e3a35, _0x4fb36b);
            }
            const _0x1c20dc = _0x1faf6d.filter(_0x53a0b8 => _0x53a0b8.text.startsWith('rtype'));
            for (const _0x480221 of _0x1c20dc) {
              const _0x5141d1 = ((_0x2cca78 = _0x480221.nextNamedSibling) === null || _0x2cca78 === undefined ? undefined : _0x2cca78.text.replace(/\n\s+/g, ' ')) || _0x399ed0.EmptyClassifier;
              this._returnTypes.push(_0x5141d1);
            }
            const _0x345a76 = (_0x275c13, _0x2963e4, _0x5abbda) => {
              _0x3c8c95.push(_0x275c13 + ' : ' + _0x2963e4);
              const _0x4a41f3 = (_0x5abbda === null || _0x5abbda === undefined ? undefined : _0x5abbda.text.split('\n')) || [];
              let _0x2924ca = _0x4a41f3[0];
              let _0x271ad1 = false;
              let _0x3f9788 = '';
              for (let _0x470c80 = 1; _0x470c80 < _0x4a41f3.length; _0x470c80++) {
                const _0x4c736e = _0x4a41f3[_0x470c80];
                if (_0x4c736e.trim().length > 0 && !_0x271ad1) {
                  _0x2924ca += ` ${_0x4c736e.trimStart()}`;
                  _0x3f9788 = _0x4c736e.slice(0, _0x4c736e.search(/\S/));
                } else {
                  if (!_0x271ad1) {
                    _0x2924ca += '\n';
                    _0x271ad1 = true;
                    _0x3f9788 = _0x3f9788.length >= 0 ? _0x3f9788 : _0xe58f0b.medianIndent(_0x4a41f3.slice(_0x470c80 + 1));
                  } else {
                    _0x2924ca += `
${_0x4c736e}`;
                  }
                }
              }
              _0x3c8c95.push(`${_0x3f9788.length > 0 ? _0x3f9788 : '    '}${_0x2924ca || ''}`);
            };
            const _0x151743 = _0x1faf6d.filter(_0x26746b => _0x26746b.text.startsWith('param') || _0x26746b.text.startsWith('arg'));
            for (const _0x241505 of _0x151743) {
              const _0x3bab69 = this._splitField(_0x241505.text);
              const _0x377b24 = _0x3bab69.name;
              const _0x12c764 = _0x3bab69.type !== _0x399ed0.EmptyClassifier ? _0x3bab69.type : this._paramToTypeName.get(_0x377b24) || _0x399ed0.EmptyClassifier;
              _0x345a76(_0x377b24, _0x12c764, _0x241505.nextNamedSibling);
            }
            if (_0x4b47c0) {
              _0x3c8c95.push('');
              _0x3c8c95.push('Returns');
              _0x3c8c95.push('-------');
              _0x3c8c95.push('');
            }
            const _0x2f5325 = _0x1faf6d.filter(_0x52b12c => _0x52b12c.text.startsWith('return'));
            for (const _0x4d67d8 of _0x2f5325) {
              const _0x21db2c = this._splitField(_0x4d67d8.text);
              const _0x45c49a = _0x21db2c.type !== _0x399ed0.EmptyClassifier ? _0x21db2c.type : this._returnTypes.shift() || _0x399ed0.EmptyClassifier;
              const _0x1c8444 = _0x45c49a === _0x399ed0.EmptyClassifier ? 'out' : _0x45c49a;
              _0x345a76(_0x1c8444, _0x399ed0.EmptyClassifier, _0x4d67d8.nextNamedSibling);
            }
            if (_0x26fa53) {
              _0x3c8c95.push('');
              _0x3c8c95.push('Raises');
              _0x3c8c95.push('------');
              _0x3c8c95.push('');
            }
            const _0x1b0819 = _0x1faf6d.filter(_0x118601 => _0x118601.text.startsWith('raise'));
            for (const _0xb6f18f of _0x1b0819) {
              const _0x9b9052 = this._splitField(_0xb6f18f.text);
              _0x345a76(_0x9b9052.name, _0x9b9052.type, _0xb6f18f.nextNamedSibling);
            }
            if (_0x2bb9a4) {
              _0x3c8c95.push('');
              _0x3c8c95.push('Attributes');
              _0x3c8c95.push('----');
              _0x3c8c95.push('');
            }
            const _0x3bdfa4 = _0x1faf6d.filter(_0x361ba8 => _0x361ba8.text.startsWith('vartype'));
            for (const _0x3b01cd of _0x3bdfa4) {
              const _0x506d98 = ((_0x39e99f = _0x3b01cd.nextNamedSibling) === null || _0x39e99f === undefined ? undefined : _0x39e99f.text.replace(/\n\s+/g, ' ')) || _0x399ed0.EmptyClassifier;
              const _0x1d090c = this._splitField(_0x3b01cd.text).name;
              this._varToTypeName.set(_0x1d090c, _0x506d98);
            }
            const _0x1633a2 = _0x1faf6d.filter(_0x20fff6 => _0x20fff6.text.startsWith('var '));
            for (const _0x24b4e2 of _0x1633a2) {
              const _0x43da8f = this._splitField(_0x24b4e2.text);
              const _0x3d3006 = _0x43da8f.name;
              const _0x64256a = _0x43da8f.type !== _0x399ed0.EmptyClassifier ? _0x43da8f.type : this._varToTypeName.get(_0x3d3006) || _0x399ed0.EmptyClassifier;
              _0x345a76(_0x3d3006, _0x64256a, _0x24b4e2.nextNamedSibling);
            }
            this._replaceNodeAndRewalk(_0xb06144, _0x3c8c95);
            return false;
          }
          return true;
        }
        visitDefinitionList(_0x4b4502) {
          if (_0x425c0a.test(_0x4b4502.text)) {
            this._fixEpytextParagraph(_0x4b4502);
            return false;
          }
          return true;
        }
        visitListItem(_0x455bce) {
          const _0x5b8eaf = _0x455bce.firstChild;
          switch (_0x5b8eaf?.type) {
            case 'term':
              {
                return this.visitTermListItem(_0x5b8eaf);
              }
            default:
              break;
          }
          return true;
        }
        visitClassifier(_0x3688a5) {
          if (_0x3688a5.text.includes('\n') && !_0x3688a5.text.includes(_0x399ed0.EmptyDefinitionDirective)) {
            const _0x446d09 = this.getNodeIndentation(_0x3688a5);
            this._replaceNodeAndRewalk(_0x3688a5, [_0x3688a5.text.replace(/\n/, `
${_0x446d09}    ${_0x399ed0.EmptyDefinitionDirective}
`)]);
            return false;
          } else {
            if (this.text.slice(_0x3688a5.endIndex).trim().length === 0 && !_0x3688a5.text.endsWith(_0x399ed0.EmptyDefinitionDirective)) {
              const _0x262cd1 = this.getNodeIndentation(_0x3688a5);
              this._insertAfterNodeAndRewalk(_0x3688a5, [`
${_0x262cd1}    ${_0x399ed0.EmptyDefinitionDirective}`]);
              return false;
            }
          }
          return true;
        }
        visitTermListItem(_0xd4c6bb) {
          if (_0xd4c6bb.text.includes('\n') && !_0xd4c6bb.text.includes(_0x399ed0.EmptyDefinitionDirective)) {
            const _0x2bc01b = this.getNodeIndentation(_0xd4c6bb);
            this._replaceNodeAndRewalk(_0xd4c6bb, [_0xd4c6bb.text.replace(/\n/, `
${_0x2bc01b}    ${_0x399ed0.EmptyDefinitionDirective}
`)]);
            return false;
          }
          return true;
        }
        visitListTableDirective(_0x4dacd5) {
          const _0x3fb3f1 = /:header-rows:\s*(\d+)/.exec(_0x4dacd5.text);
          const _0x55c612 = _0x3fb3f1 ? parseInt(_0x3fb3f1[1]) : 1;
          const _0x91fef = /:widths:\s*(.*)/.exec(_0x4dacd5.text);
          const _0x122aaa = _0x91fef ? _0x91fef[1].split(' ').map(_0x4f14c0 => parseInt(_0x4f14c0)) : [];
          const _0x1cfd19 = this.findFirstDescendantWithType(_0x4dacd5, 'body');
          const _0x2bc682 = this.findFirstDescendantWithType(_0x1cfd19, 'content');
          if (_0x2bc682 && _0x122aaa.length > 0) {
            const _0x345f87 = _0x2bc682.text.split('\n').map(_0xb70083 => _0xb70083.trim());
            const _0x4822fe = [];
            let _0x1405c9 = '| ';
            let _0x546ea6 = '';
            let _0x3e4d43 = 0;
            const _0x49cd4b = _0x522b21 => {
              const _0x14afb5 = _0x122aaa[_0x3e4d43] ?? 1;
              _0x1405c9 = `${_0x1405c9}${_0x546ea6.padEnd(_0x14afb5)} | `;
              _0x546ea6 = _0x522b21;
              _0x3e4d43++;
            };
            const _0x3c9617 = () => {
              if (_0x1405c9.length > 2 || _0x546ea6.length > 0) {
                _0x49cd4b('');
                _0x4822fe.push(_0x1405c9);
              }
              _0x1405c9 = '| ';
              _0x3e4d43 = 0;
            };
            for (let _0x34dfdb = 0; _0x34dfdb < _0x345f87.length; _0x34dfdb++) {
              const _0x7d0cca = _0x345f87[_0x34dfdb];
              if (_0x7d0cca.startsWith('* -')) {
                _0x3c9617();
                _0x546ea6 = _0x7d0cca.slice(3).trim();
              } else {
                if (_0x7d0cca.startsWith('-')) {
                  _0x49cd4b(_0x7d0cca.slice(1).trim());
                }
              }
            }
            _0x3c9617();
            const _0x5d282e = `+${_0x122aaa.map(_0x517a68 => '-'.repeat(_0x517a68 + 2)).join('+')}+`;
            const _0x4bad5a = `+${_0x122aaa.map(_0x38289c => '='.repeat(_0x38289c + 2)).join('+')}+`;
            const _0x2508cf = [];
            for (let _0x41277d = 0; _0x41277d < _0x4822fe.length; _0x41277d++) {
              const _0x4cfdd7 = _0x4822fe[_0x41277d];
              if (_0x41277d !== _0x55c612) {
                _0x2508cf.push(_0x5d282e);
                _0x2508cf.push(_0x4cfdd7);
              } else {
                if (_0x41277d === _0x55c612) {
                  _0x2508cf.push(_0x4bad5a);
                  _0x2508cf.push(_0x4cfdd7);
                } else {
                  _0x2508cf.push(_0x4cfdd7);
                }
              }
            }
            _0x2508cf.push(_0x5d282e);
            this._replaceNodeAndRewalk(_0x4dacd5, _0x2508cf);
            return false;
          }
          return true;
        }
        visitDirective(_0x84d88) {
          const _0x2cc3ff = _0x84d88.text.split('\n');
          if (_0x2cc3ff.slice(1).some(_0x364bc5 => /^\s+\.\. /.test(_0x364bc5))) {
            const _0x30e064 = this.findFirstDescendantWithType(_0x84d88, 'directive');
            if (!_0x30e064) {
              const _0x216e19 = _0x2cc3ff.map(_0x444248 => /^\s+\.\. /.test(_0x444248) ? _0x444248.trim() : _0x444248);
              this._replaceNodeAndRewalk(_0x84d88, _0x216e19);
              return false;
            }
          }
          return super.visitDirective(_0x84d88);
        }
        visitParagraph(_0xb6f447) {
          if (_0x425c0a.test(_0xb6f447.text)) {
            this._fixEpytextParagraph(_0xb6f447);
            return false;
          }
          if (_0xb6f447.text.startsWith('$ ') && _0xb6f447.text.split('\n').length === 1) {
            const _0x5488a1 = this.text.slice(0, _0xb6f447.startIndex) + '.. code-block:: bash\n   ' + this.text.slice(_0xb6f447.startIndex + 1);
            this.rewalk(_0x5488a1);
            return false;
          }
          if (/\s+\w+\s*\(.*?\):/.test(_0xb6f447.text) && this.getCurrentIndentation(_0xb6f447).length !== 0 && this.findParent(_0xb6f447, _0x3f12fc => _0x3f12fc.type.includes('list')) === undefined) {
            this._replaceNodeAndRewalk(_0xb6f447, [_0xb6f447.text.replace(/\):/g, ') :')]);
            return false;
          }
          if (_0xb6f447.text.trim().endsWith(':') && this.getCurrentIndentation(_0xb6f447).length === 0 && !_0xb6f447.text.endsWith('::') && _0xb6f447.nextNamedSibling?.type === 'block_quote') {
            this._replaceNodeAndRewalk(_0xb6f447, [_0xb6f447.text + ':']);
            return false;
          }
          if ((_0xb6f447.text.includes('\n>>>') || _0xb6f447.text.includes('\n.. ')) && this.getCurrentIndentation(_0xb6f447).length === 0) {
            const _0x496453 = _0xb6f447.text.split('\n');
            let _0x3020f5 = false;
            const _0x1fd789 = [];
            for (let _0x509d80 = 0; _0x509d80 < _0x496453.length; _0x509d80++) {
              const _0x1d31a0 = _0x496453[_0x509d80];
              if ((_0x1d31a0.startsWith('>>>') || _0x1d31a0.startsWith('.. ')) && _0x509d80 > 0 && _0x496453[_0x509d80 - 1].trim().length > 0) {
                _0x1fd789.push('');
                _0x1fd789.push(_0x1d31a0);
                _0x3020f5 = true;
              } else {
                _0x1fd789.push(_0x1d31a0);
              }
            }
            if (_0x3020f5) {
              this._replaceNodeAndRewalk(_0xb6f447, _0x1fd789);
              return false;
            }
          }
          return true;
        }
        rewalk(_0x4de4d9) {
          this._rewalkDepth += 1;
          if (this._rewalkDepth <= 30) {
            const _0x38e0d4 = this._parser.parse(_0x4de4d9, this.console);
            if (_0x38e0d4) {
              this.walk(_0x38e0d4);
            }
          }
        }
        handleError(_0xff3982) {
          var _0x23a3ae;
          if (this._insideErrorNode === _0xff3982.text) {
            return false;
          }
          this._insideErrorNode = _0xff3982.text;
          if (_0xff3982.namedChildren.some(_0x18512e => _0x18512e.type === 'list_item')) {
            const _0x2cc241 = _0xff3982.namedChildren.filter(_0x3d4d70 => _0x3d4d70.type === 'list_item');
            for (const _0x18d071 of _0x2cc241) {
              const _0x32cdc3 = _0x18d071.previousNamedSibling;
              if (_0x18d071 && _0x32cdc3) {
                const _0x5d41c5 = this.getNodeIndentation(_0x18d071);
                const _0x3e89da = this.getNodeIndentation(_0x32cdc3);
                const _0x15659e = this.text.slice(_0x32cdc3.endIndex, _0x18d071.startIndex);
                if (_0x5d41c5.length > 0 && _0x5d41c5.length !== _0x3e89da.length && _0x15659e.split('\n').length > 2) {
                  this._insertAfterNodeAndRewalk(_0x32cdc3, ['::']);
                  return false;
                }
              }
            }
            if (_0xff3982.lastNamedChild && _0xff3982.endIndex > _0xff3982.lastNamedChild.endIndex && _0xff3982.lastNamedChild.type === 'list_item' && !_0xff3982.text.includes('\n\n')) {
              const _0x21da11 = this.getNodeIndentation(_0xff3982.lastChild);
              const _0x501cc4 = `${this.text.slice(0, _0xff3982.endIndex)}
${_0x21da11}    ${_0x399ed0.EmptyDefinitionDirective}
`;
              this.rewalk(_0x501cc4);
              return false;
            }
          }
          if (((_0x23a3ae = this.previousNode) === null || _0x23a3ae === undefined ? undefined : _0x23a3ae.text.endsWith(':')) && !this.previousNode.text.endsWith('::')) {
            const _0x3bbc35 = this.text.slice(0, this.previousNode.endIndex) + ':' + this.text.slice(this.previousNode.endIndex);
            this.rewalk(_0x3bbc35);
            return false;
          }
          return true;
        }
        visitSeeAlsoDirective(_0x45642c) {
          return this.visitDefaultDirective(_0x45642c, 'seealso');
        }
        visitVersionAddedDirective(_0x351d3b) {
          return this.visitDefaultDirective(_0x351d3b, 'versionadded');
        }
        visitDefaultDirective(_0x2a990b, _0x35a498) {
          const _0x41d747 = this.getCurrentIndentation(_0x2a990b);
          const _0x13c136 = _0x2a990b.namedChildren.find(_0x148ca5 => _0x148ca5.type === 'body');
          const _0x187f53 = (_0x13c136 === null || _0x13c136 === undefined ? undefined : _0x13c136.namedChildren.length) === 1 && _0x13c136.namedChildren[0].type === 'content';
          if (_0x187f53 && !_0x2a990b.text.includes(_0x399ed0.ChildFieldMarker)) {
            const _0x2b566c = _0x2a990b.text.split('\n');
            const _0x4c6c67 = _0xe58f0b.medianIndent(_0x2b566c.slice(1));
            const _0x2e6ac2 = [];
            for (let _0x50a50e = 0; _0x50a50e < _0x2b566c.length; _0x50a50e++) {
              const _0x572224 = _0x2b566c[_0x50a50e];
              if (_0x50a50e === 0) {
                _0x2e6ac2.push(_0x572224);
                _0x2e6ac2.push(`${_0x41d747}${_0x4c6c67}:${_0x399ed0.ChildFieldMarker}:  `);
              } else {
                _0x2e6ac2.push(`${_0x4c6c67}${_0x572224}`);
              }
            }
            this._replaceNodeAndRewalk(_0x2a990b, _0x2e6ac2);
            return false;
          }
          return true;
        }
        _insertAfterNodeAndRewalk(_0x416809, _0x2b4124) {
          const _0x26c389 = this.text.slice(0, _0x416809.endIndex) + _0x2b4124.join('\n') + this.text.slice(_0x416809.endIndex);
          this.rewalk(_0x26c389);
        }
        _replaceNodeAndRewalk(_0x39a116, _0x374198) {
          const _0x110659 = _0x374198.join('\n');
          const _0x52a7f6 = this.text.slice(0, _0x39a116.startIndex) + _0x110659 + this.text.slice(_0x39a116.endIndex);
          this.rewalk(_0x52a7f6);
        }
        _fixEpytextParagraph(_0x552f9f) {
          const _0x258c8d = _0x552f9f.text.split('\n');
          const _0x3af641 = [];
          const _0xb694c3 = new Map();
          let _0x4cfad5 = '';
          for (const _0x5f047e of _0x258c8d) {
            if (_0x5f047e.startsWith('@brief')) {
              _0x3af641.push('');
              _0x3af641.push(_0x5f047e.slice(6).trim());
              _0x3af641.push('');
            } else {
              if (_0x5f047e.startsWith('@anchor')) {
                const _0x2fc08d = _0x5f047e.slice(7).trim();
                _0x3af641.push(_0x2fc08d);
                _0x3af641.push('='.repeat(_0x2fc08d.length));
              } else {
                if (_0x5f047e.startsWith('@type')) {
                  const _0x2bacb2 = /^@type\s+(\w+)\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                  if (_0x2bacb2) {
                    _0xb694c3.set(_0x2bacb2[1], _0x2bacb2[2]);
                  }
                } else {
                  if (_0x5f047e.startsWith('@param')) {
                    const _0x58f76a = /^@param\s+(\w+)\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                    if (_0x58f76a) {
                      _0x3af641.push(`:param ${_0x58f76a[1]}: ${_0x58f76a[2]}`);
                      const _0x4ca18e = _0xb694c3.get(_0x58f76a[1]);
                      if (_0x4ca18e) {
                        _0x3af641.push(`:type ${_0x58f76a[1]}: ${_0x4ca18e}`);
                      }
                    }
                    const _0x1de11e = /^@param\s+('.*')\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                    if (_0x1de11e) {
                      const _0x2edee8 = _0x1de11e[1].split(' or ').map(_0x4b3510 => _0x4b3510.trim());
                      const _0x4fa876 = [];
                      let _0x3d9305 = '';
                      for (const _0x5d04ac of _0x2edee8) {
                        const _0x5bab0c = /^'(\w+):(.*)'$/.exec(_0x5d04ac);
                        if (_0x5bab0c) {
                          _0x3d9305 = _0x5bab0c[1];
                          _0x4fa876.push(_0x5bab0c[2]);
                        }
                      }
                      _0x3af641.push(`:param ${_0x3d9305}: ${_0x1de11e[2]}`);
                      if (_0x4fa876.length > 0) {
                        _0x3af641.push(`:type ${_0x3d9305}: ${_0x4fa876.join(' or ')}`);
                      }
                    }
                  } else {
                    if (_0x5f047e.startsWith('@rtype')) {
                      const _0x1baa2c = /^@rtype\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                      if (_0x1baa2c) {
                        _0x4cfad5 = _0x1baa2c[1];
                      }
                    } else {
                      if (_0x5f047e.startsWith('@return')) {
                        const _0x4be121 = /^@return\w*\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                        if (_0x4be121) {
                          _0x3af641.push(`:returns: ${_0x4be121[1]}`);
                          _0x3af641.push(`:rtype: ${_0x4cfad5}`);
                        }
                        const _0x16327c = /^@return\s+'(\w+)'\s*:\s*(.*)\s*$/.exec(_0x5f047e);
                        if (_0x16327c) {
                          _0x3af641.push(`:returns: ${_0x16327c[2]}`);
                          _0x3af641.push(`:rtype: ${_0x16327c[1]}`);
                        }
                      } else {
                        _0x3af641.push(_0x5f047e);
                      }
                    }
                  }
                }
              }
            }
          }
          this._replaceNodeAndRewalk(_0x552f9f, _0x3af641);
        }
        _splitField(_0x2f40d2) {
          if (_0x2f40d2.startsWith('return')) {
            const _0x44a551 = _0x2f40d2.match(/^(\w+)\s*(.*)$/);
            if (_0x44a551) {
              return {
                name: 'out',
                type: _0x44a551[2] || _0x399ed0.EmptyClassifier
              };
            }
          }
          if (_0x2f40d2.startsWith('raise')) {
            const _0x1f5718 = _0x2f40d2.match(/^(\w+)\s*(.*)$/);
            if (_0x1f5718) {
              return {
                name: _0x1f5718[2] || '',
                type: _0x399ed0.EmptyClassifier
              };
            }
          }
          const _0x396cdb = _0x2f40d2.match(/^(\w+)\s*(.*)\s+(\S+)$/);
          if (_0x396cdb) {
            return {
              name: _0x396cdb[3],
              type: _0x396cdb[2] || _0x399ed0.EmptyClassifier
            };
          }
          return {
            name: '',
            type: _0x399ed0.EmptyClassifier
          };
        }
      }
      exports.Fixer = _0x47bba8;
    },
    99800: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Docstring = exports.DocstringTodo = exports.DocstringExample = exports.DocstringDeprecated = exports.DocstringRaises = exports.DocstringReturns = exports.DocstringParam = exports.DocstringMeta = exports.RenderingStyle = exports.DocstringStyle = exports.ParseError = exports.TODO_KEYWORDS = exports.EXAMPLES_KEYWORDS = exports.YIELDS_KEYWORDS = exports.RETURNS_KEYWORDS = exports.DEPRECATION_KEYWORDS = exports.RAISES_KEYWORDS = exports.PARAM_KEYWORDS = undefined;
      exports.title = _0xd00a83;
      exports.splitWithLimit = _0x33f36b;
      exports.matchAll = _0x80bdbe;
      exports.trimLineFeeds = _0x40091a;
      exports.PARAM_KEYWORDS = new Set(['param', 'parameter', 'arg', 'argument', 'attribute', 'key', 'keyword']);
      exports.RAISES_KEYWORDS = new Set(['raises', 'raise', 'except', 'exception']);
      exports.DEPRECATION_KEYWORDS = new Set(['deprecation', 'deprecated']);
      exports.RETURNS_KEYWORDS = new Set(['return', 'returns']);
      exports.YIELDS_KEYWORDS = new Set(['yield', 'yields']);
      exports.EXAMPLES_KEYWORDS = new Set(['example', 'examples']);
      exports.TODO_KEYWORDS = new Set(['todo', 'todos']);
      class _0x2f9e26 extends Error {}
      exports.ParseError = _0x2f9e26;
      var _0x30a1a6;
      (function (_0x466cff) {
        _0x466cff[_0x466cff.REST = 1] = 'REST';
        _0x466cff[_0x466cff.GOOGLE = 2] = 'GOOGLE';
        _0x466cff[_0x466cff.NUMPYDOC = 3] = 'NUMPYDOC';
        _0x466cff[_0x466cff.EPYDOC = 4] = 'EPYDOC';
        _0x466cff[_0x466cff.AUTO = 255] = 'AUTO';
      })(_0x30a1a6 || (exports.DocstringStyle = _0x30a1a6 = {}));
      var _0xcaf981;
      (function (_0xcfee2e) {
        _0xcfee2e[_0xcfee2e.COMPACT = 1] = 'COMPACT';
        _0xcfee2e[_0xcfee2e.CLEAN = 2] = 'CLEAN';
        _0xcfee2e[_0xcfee2e.EXPANDED = 3] = 'EXPANDED';
      })(_0xcaf981 || (exports.RenderingStyle = _0xcaf981 = {}));
      class _0x221254 {
        constructor(_0x5e20df, _0x3d44e8, _0x3b0041, _0x2e5ee9) {
          this.kind = _0x5e20df;
          this.args = _0x3d44e8;
          this.description = _0x3b0041;
          this.unknown = _0x2e5ee9;
        }
        get section() {
          return _0xd00a83(this.args[0]) || 'Unknown';
        }
      }
      exports.DocstringMeta = _0x221254;
      class _0x10a2ed extends _0x221254 {
        constructor(_0x2beff6, _0x1fd795, _0x540d03, _0x391011, _0x58d67c, _0x401e7c, _0x5216c1, _0x14be54) {
          super(1, _0x2beff6, _0x1fd795, _0x5216c1);
          this.argName = _0x540d03;
          this.typeName = _0x391011;
          this.isOptional = _0x58d67c;
          this.defaultValue = _0x401e7c;
          this.sectionTitle = _0x14be54;
        }
        get section() {
          if (this.sectionTitle) {
            return this.sectionTitle;
          }
          const _0x5f5986 = this.args[0];
          switch (_0x5f5986) {
            case 'param':
              return 'Parameters';
            case 'arg':
              return 'Args';
            case 'attribute':
              return 'Attributes';
            default:
              return _0xd00a83(_0x5f5986) || 'Unknown';
          }
        }
      }
      exports.DocstringParam = _0x10a2ed;
      class _0x301ec2 extends _0x221254 {
        constructor(_0x423b8f, _0x25ac26, _0xba4871, _0x3639df, _0x1f91e0 = null, _0x27018a = null) {
          super(2, _0x423b8f, _0x25ac26, _0x27018a);
          this.typeName = _0xba4871;
          this.isGenerator = _0x3639df;
          this.returnName = _0x1f91e0;
        }
        get section() {
          if (this.isGenerator) {
            return 'Yields';
          } else {
            return 'Returns';
          }
        }
      }
      exports.DocstringReturns = _0x301ec2;
      class _0x3c1569 extends _0x221254 {
        constructor(_0x48b5ca, _0x28de8f, _0x3df3ef, _0x190e48 = null) {
          super(4, _0x48b5ca, _0x28de8f, _0x190e48);
          this.typeName = _0x3df3ef;
        }
        get section() {
          return 'Raises';
        }
      }
      exports.DocstringRaises = _0x3c1569;
      class _0x54fd0b extends _0x221254 {
        constructor(_0x27133f, _0x4e3bb4, _0x6ed3bd, _0x376dd6) {
          super(5, _0x27133f, _0x4e3bb4, _0x376dd6);
          this.version = _0x6ed3bd;
        }
        get section() {
          return 'Deprecated';
        }
      }
      exports.DocstringDeprecated = _0x54fd0b;
      class _0x5188f6 extends _0x221254 {
        constructor(_0xa0dee7, _0x32a13c, _0x255e2a, _0x4eed2a) {
          super(6, _0xa0dee7, _0x255e2a, _0x4eed2a);
          this.snippet = _0x32a13c;
        }
        get section() {
          return 'Examples';
        }
      }
      exports.DocstringExample = _0x5188f6;
      class _0x5800eb extends _0x221254 {
        constructor(_0x3817e9, _0x23a9b8, _0x485d4e) {
          super(7, _0x3817e9, _0x23a9b8, _0x485d4e);
        }
        get section() {
          return 'Todos';
        }
      }
      exports.DocstringTodo = _0x5800eb;
      class _0x189b9b {
        constructor(_0x8b70dc = null) {
          this.shortDescription = null;
          this.longDescription = null;
          this.hasBlankAfterShortDescription = false;
          this.hasBlankAfterLongDescription = false;
          this.meta = [];
          this.style = _0x8b70dc;
        }
        get description() {
          const _0x1deaba = [];
          if (this.shortDescription) {
            _0x1deaba.push(this.shortDescription);
            if (this.hasBlankAfterShortDescription) {
              _0x1deaba.push('');
            }
          }
          if (this.longDescription) {
            _0x1deaba.push(this.longDescription);
          }
          if (_0x1deaba.length === 0) {
            return null;
          }
          return _0x1deaba.join('\n');
        }
        get params() {
          return this.meta.filter(_0x5739e4 => _0x5739e4 instanceof _0x10a2ed);
        }
        get raises() {
          return this.meta.filter(_0x195c9a => _0x195c9a instanceof _0x3c1569);
        }
        get returns() {
          for (const _0x2c2120 of this.meta) {
            if (_0x2c2120 instanceof _0x301ec2) {
              return _0x2c2120;
            }
          }
          return null;
        }
        get manyReturns() {
          return this.meta.filter(_0x3d8e05 => _0x3d8e05 instanceof _0x301ec2);
        }
        get deprecation() {
          for (const _0x1adedd of this.meta) {
            if (_0x1adedd instanceof _0x54fd0b) {
              return _0x1adedd;
            }
          }
          return null;
        }
        get examples() {
          return this.meta.filter(_0x36db1a => _0x36db1a instanceof _0x5188f6);
        }
        get todo() {
          return this.meta.filter(_0x2891a4 => _0x2891a4 instanceof _0x5800eb);
        }
      }
      exports.Docstring = _0x189b9b;
      function _0xd00a83(_0x576145) {
        if (_0x576145) {
          return _0x576145.replace(/\w\S*/g, _0x3826a2 => {
            return _0x3826a2.charAt(0).toUpperCase() + _0x3826a2.substr(1).toLowerCase();
          });
        } else {
          return undefined;
        }
      }
      function _0x33f36b(_0x935129, _0xc5d905, _0x2ee70d) {
        const _0x325ee7 = _0x935129.split(_0xc5d905);
        if (_0x325ee7.length <= _0x2ee70d) {
          return _0x325ee7;
        }
        const _0x4fc0c0 = _0x325ee7.slice(0, _0x2ee70d - 1);
        _0x4fc0c0.push(_0x325ee7.slice(_0x2ee70d - 1).join(_0xc5d905));
        return _0x4fc0c0;
      }
      function _0x80bdbe(_0x13d704, _0x3c64a8) {
        _0x3c64a8.lastIndex = 0;
        const _0x1115d5 = [];
        const _0x35d931 = [..._0x13d704.matchAll(_0x3c64a8)];
        for (let _0x353cf6 = 0; _0x353cf6 < _0x35d931.length; _0x353cf6++) {
          const _0x4b59b7 = _0x35d931[_0x353cf6];
          const _0x4e1e2b = (_0x4b59b7.index ?? 0) + _0x4b59b7[0].length;
          const _0xd42848 = _0x353cf6 < _0x35d931.length - 1 ? _0x35d931[_0x353cf6 + 1].index ?? 0 : _0x13d704.length;
          _0x1115d5.push({
            start: _0x4e1e2b,
            end: _0xd42848,
            text: _0x4b59b7[0]
          });
        }
        return _0x1115d5;
      }
      function _0x40091a(_0x5eef38) {
        return _0x5eef38.replace(/^\n+|\n+$/g, '');
      }
    },
    62104: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GoogleParser = undefined;
      exports.fixupGoogleDoc = _0x45bd22;
      const _0xc6b3f9 = require(40804);
      const _0x2c9c8f = require(36984);
      const _0x25f14d = require(99800);
      var _0x4ab537;
      (function (_0x4479ad) {
        _0x4479ad[_0x4479ad.SINGULAR = 0] = 'SINGULAR';
        _0x4479ad[_0x4479ad.MULTIPLE = 1] = 'MULTIPLE';
        _0x4479ad[_0x4479ad.SINGULAR_OR_MULTIPLE = 2] = 'SINGULAR_OR_MULTIPLE';
      })(_0x4ab537 ||= {});
      class _0x1081e5 {
        constructor(_0x5d9977, _0x24bdb2, _0x506615) {
          this.title = _0x5d9977;
          this.key = _0x24bdb2;
          this.type = _0x506615;
        }
      }
      const _0x563e98 = /\s*(.+?)\s*\(\s*(.*[^\s]+)\s*\)/;
      const _0x103658 = /.*\. Defaults to (.+)\./;
      const _0x4dc650 = /^(\s*[^:\s]+.*:)|([^:]*\]:.*)/;
      const _0x4f2f1f = /(\s*[^:\s]*\s*(\(.*?\))?\s*)(:)/;
      const _0x52e724 = [new _0x1081e5('Arguments', 'param', _0x4ab537.MULTIPLE), new _0x1081e5('Args', 'param', _0x4ab537.MULTIPLE), new _0x1081e5('Parameters', 'param', _0x4ab537.MULTIPLE), new _0x1081e5('Params', 'param', _0x4ab537.MULTIPLE), new _0x1081e5('Raises', 'raises', _0x4ab537.MULTIPLE), new _0x1081e5('Exceptions', 'raises', _0x4ab537.MULTIPLE), new _0x1081e5('Except', 'raises', _0x4ab537.MULTIPLE), new _0x1081e5('Attributes', 'attribute', _0x4ab537.MULTIPLE), new _0x1081e5('Example', 'examples', _0x4ab537.SINGULAR), new _0x1081e5('Examples', 'examples', _0x4ab537.SINGULAR), new _0x1081e5('Returns', 'returns', _0x4ab537.SINGULAR_OR_MULTIPLE), new _0x1081e5('Yields', 'yields', _0x4ab537.SINGULAR_OR_MULTIPLE), new _0x1081e5('Todo', 'todo', _0x4ab537.SINGULAR)];
      class _0x28f263 {
        constructor(_0x301d30 = _0x52e724, _0x3bee1a = true) {
          this.titlesRegex = new RegExp('');
          this.isGoogleDocString = new RegExp('');
          this.sections = _0x301d30.reduce((_0x549238, _0x286231) => {
            _0x549238[_0x286231.title] = _0x286231;
            return _0x549238;
          }, {});
          this.titleColon = _0x3bee1a;
          this._setup();
        }
        addSection(_0x55a31a) {
          this.sections[_0x55a31a.title] = _0x55a31a;
          this._setup();
        }
        parse(_0x4a2c42) {
          const _0x3a1dad = new _0x25f14d.Docstring(_0x25f14d.DocstringStyle.GOOGLE);
          if (!_0x4a2c42) {
            return _0x3a1dad;
          }
          const _0x5ef212 = this.titlesRegex.exec(_0x4a2c42);
          let _0x2cbe0b;
          let _0x10c958;
          if (_0x5ef212) {
            _0x2cbe0b = _0x4a2c42.slice(0, _0x5ef212.index);
            _0x10c958 = _0x4a2c42.slice(_0x5ef212.index);
          } else {
            _0x2cbe0b = _0x4a2c42;
            _0x10c958 = '';
          }
          this.titlesRegex.lastIndex = 0;
          const _0x2f722b = _0x25f14d.splitWithLimit(_0x2cbe0b, '\n', 2);
          _0x3a1dad.shortDescription = _0x2f722b[0] || null;
          if (_0x2f722b.length > 1) {
            const _0x4b223c = _0x2f722b[1] || '';
            _0x3a1dad.hasBlankAfterShortDescription = _0x4b223c.startsWith('\n');
            _0x3a1dad.hasBlankAfterLongDescription = _0x4b223c.endsWith('\n\n');
            _0x3a1dad.longDescription = _0x4b223c.trim() || null;
          }
          const _0x5975ec = _0x25f14d.matchAll(_0x10c958, this.titlesRegex);
          if (_0x5975ec.length === 0) {
            return _0x3a1dad;
          }
          const _0x123f03 = {};
          for (let _0x3e31c3 = 0; _0x3e31c3 < _0x5975ec.length; _0x3e31c3++) {
            const _0x353094 = _0x5975ec[_0x3e31c3];
            const _0x5eb2c3 = _0x353094.text.slice(0, -1);
            if (!(_0x5eb2c3 in this.sections)) {
              continue;
            }
            let _0x53e529 = _0x10c958.slice(_0x353094.start, _0x353094.end);
            const _0x57ab7e = /\n\S/.exec(_0x53e529);
            let _0x46f6c3 = null;
            if (_0x57ab7e) {
              _0x53e529 = _0x53e529.slice(0, _0x57ab7e.index);
              _0x46f6c3 = _0x10c958.slice(_0x353094.start + _0x57ab7e.index, _0x353094.end);
            }
            _0x123f03[_0x5eb2c3] = {
              details: _0x25f14d.trimLineFeeds(_0x53e529),
              unknown: _0x46f6c3 ? _0x25f14d.trimLineFeeds(_0x46f6c3) : null
            };
          }
          for (const _0x21c634 in _0x123f03) {
            const _0x253905 = _0x123f03[_0x21c634];
            const _0x210644 = _0x253905.details.match(/^\s*/);
            if (!_0x210644) {
              throw new _0x25f14d.ParseError(`Can't infer indent from "${_0x253905}"`);
            }
            const _0x300107 = _0x210644[0];
            if ([_0x4ab537.SINGULAR, _0x4ab537.SINGULAR_OR_MULTIPLE].includes(this.sections[_0x21c634].type)) {
              _0x3a1dad.meta.push(this._buildMeta(_0x2c9c8f.cleanIndent(_0x253905.details), _0x21c634, _0x253905.unknown));
              continue;
            }
            const _0x42a674 = _0x25f14d.matchAll(_0x253905.details, new RegExp(`^${_0x300107}(?=\\S)`, 'mg'));
            for (let _0x167675 = 0; _0x167675 < _0x42a674.length; _0x167675++) {
              const _0x2ae96c = _0x42a674[_0x167675];
              const _0x1e9fe6 = _0x167675 === _0x42a674.length - 1 ? _0x253905.unknown : null;
              const _0x1b0287 = _0x25f14d.trimLineFeeds(_0x253905.details.slice(_0x2ae96c.start, _0x2ae96c.end));
              _0x3a1dad.meta.push(this._buildMeta(_0x1b0287, _0x21c634, _0x1e9fe6));
            }
          }
          return _0x3a1dad;
        }
        _setup() {
          const _0x277ade = this.titleColon ? ':' : '';
          const _0x649713 = Object.keys(this.sections).map(_0x5f47dd => `(${_0x5f47dd})`).join('|');
          this.titlesRegex = new RegExp(`^(${_0x649713})${_0x277ade}[ \t\r]*\$`, 'mg');
          const _0x528171 = Object.keys(this.sections).filter(_0x2eaf68 => !_0x2eaf68.includes('xample')).map(_0x446779 => `(${_0x446779})`).join('|');
          this.isGoogleDocString = new RegExp(`^(${_0x528171})${_0x277ade}[ \t\r]*\$`, 'mg');
        }
        _buildMeta(_0x97d77a, _0x48fb52, _0x2e8b3d) {
          const _0x358a33 = this.sections[_0x48fb52];
          if (_0x358a33.type === _0x4ab537.SINGULAR_OR_MULTIPLE && !_0x4dc650.test(_0x97d77a) || _0x358a33.type === _0x4ab537.SINGULAR) {
            return this._buildSingleMeta(_0x358a33, _0x2c9c8f.cleanIndent(_0x97d77a.trimStart()), _0x2e8b3d);
          }
          const _0x2beed0 = _0x4f2f1f.exec(_0x97d77a);
          if (!_0x2beed0) {
            throw new _0x25f14d.ParseError(`Expected a colon in "${_0x97d77a}".`);
          }
          const _0x4d9ec7 = _0x2beed0[1].length;
          const _0x2480e0 = _0x25f14d.trimLineFeeds(_0x97d77a.slice(0, _0x4d9ec7));
          const _0x110493 = _0x25f14d.trimLineFeeds(_0x97d77a.slice(_0x4d9ec7 + 1));
          const _0x2725d9 = _0x2c9c8f.cleanIndent(_0x110493.trimStart());
          return this._buildMultiMeta(_0x358a33, _0x2480e0.trim(), _0x2725d9, _0x2e8b3d);
        }
        _buildSingleMeta(_0x1d4246, _0x5256b2, _0x46871d) {
          if (_0x25f14d.RETURNS_KEYWORDS.has(_0x1d4246.key) || _0x25f14d.YIELDS_KEYWORDS.has(_0x1d4246.key)) {
            return new _0x25f14d.DocstringReturns([_0x1d4246.key], _0x5256b2, null, _0x25f14d.YIELDS_KEYWORDS.has(_0x1d4246.key), null, _0x46871d);
          } else {
            if (_0x25f14d.RAISES_KEYWORDS.has(_0x1d4246.key)) {
              return new _0x25f14d.DocstringRaises([_0x1d4246.key], _0x5256b2, null, _0x46871d);
            } else {
              if (_0x25f14d.EXAMPLES_KEYWORDS.has(_0x1d4246.key)) {
                return new _0x25f14d.DocstringExample([_0x1d4246.key], null, _0x5256b2, _0x46871d);
              } else {
                if (_0x25f14d.TODO_KEYWORDS.has(_0x1d4246.key)) {
                  return new _0x25f14d.DocstringTodo([_0x1d4246.key], _0x5256b2, _0x46871d);
                } else {
                  if (_0x25f14d.PARAM_KEYWORDS.has(_0x1d4246.key)) {
                    throw new _0x25f14d.ParseError('Expected parameter name.');
                  } else {
                    return new _0x25f14d.DocstringMeta(0, [_0x1d4246.key], _0x5256b2, _0x46871d);
                  }
                }
              }
            }
          }
        }
        _buildMultiMeta(_0x2cf664, _0x4ce646, _0x11b9ee, _0x34148) {
          if (_0x25f14d.PARAM_KEYWORDS.has(_0x2cf664.key) || _0x25f14d.RETURNS_KEYWORDS.has(_0x2cf664.key) || _0x25f14d.YIELDS_KEYWORDS.has(_0x2cf664.key)) {
            const _0x5da738 = _0x563e98.exec(_0x4ce646);
            let _0x418bcf;
            let _0x3cd231;
            let _0x25c2e8;
            if (_0x5da738) {
              [_0x418bcf, _0x3cd231] = _0x5da738.slice(1);
              if (_0x3cd231.endsWith(', optional')) {
                _0x25c2e8 = true;
                _0x3cd231 = _0x3cd231.slice(0, -10);
              } else {
                if (_0x3cd231.endsWith('?')) {
                  _0x25c2e8 = true;
                  _0x3cd231 = _0x3cd231.slice(0, -1);
                } else {
                  _0x25c2e8 = false;
                }
              }
            } else {
              _0x418bcf = _0x4ce646;
              _0x3cd231 = null;
              _0x25c2e8 = null;
            }
            const _0xf08624 = _0x103658.exec(_0x11b9ee);
            const _0x1acd5d = _0xf08624 ? _0xf08624[1] : null;
            if (_0x25f14d.PARAM_KEYWORDS.has(_0x2cf664.key)) {
              return new _0x25f14d.DocstringParam([_0x2cf664.key, _0x4ce646], _0x11b9ee, _0x418bcf, _0x3cd231, _0x25c2e8, _0x1acd5d, _0x34148, _0x2cf664.title);
            } else {
              if (_0x25f14d.RETURNS_KEYWORDS.has(_0x2cf664.key) || _0x25f14d.YIELDS_KEYWORDS.has(_0x2cf664.key)) {
                return new _0x25f14d.DocstringReturns([_0x2cf664.key, _0x4ce646], _0x11b9ee, _0x3cd231, _0x25f14d.YIELDS_KEYWORDS.has(_0x2cf664.key), _0x418bcf, _0x34148);
              }
            }
          } else {
            if (_0x25f14d.RAISES_KEYWORDS.has(_0x2cf664.key)) {
              return new _0x25f14d.DocstringRaises([_0x2cf664.key, _0x4ce646], _0x11b9ee, _0x4ce646, _0x34148);
            }
          }
          return new _0x25f14d.DocstringMeta(0, [_0x2cf664.key, _0x4ce646], _0x11b9ee, _0x34148);
        }
      }
      exports.GoogleParser = _0x28f263;
      function _0x40bcb8(_0x5f2273, _0x57689e) {
        if (_0x57689e.unknown) {
          _0x5f2273.push('');
          _0x5f2273.push('----');
          _0x5f2273.push('');
          _0x5f2273.push(_0x57689e.unknown);
          _0x5f2273.push('');
        }
      }
      function _0x4123ee(_0x1a75e5, _0xbdb8cb) {
        const _0x44c91c = _0xbdb8cb ? _0xbdb8cb.split('\n') : '';
        let _0x4ade81 = 0;
        for (const _0x934e95 of _0x44c91c) {
          if (_0x934e95.trim().length === 0) {
            _0x1a75e5.push('');
            _0x4ade81 = Math.max(0, _0x4ade81 - 1);
          } else {
            if (_0x4ade81 > 0) {
              _0x1a75e5.push(`${_0xc6b3f9.DefaultIndent}${_0xc6b3f9.DefaultIndent}${_0x934e95}`);
            } else {
              if (_0x934e95.trim().endsWith(':') && !_0x934e95.trim().endsWith('::')) {
                _0x1a75e5.push(`${_0xc6b3f9.DefaultIndent}${_0x934e95}`);
                _0x1a75e5.push('');
                _0x1a75e5.push('.. code-block:: python');
                _0x4ade81 = 2;
              } else {
                _0x1a75e5.push(`${_0xc6b3f9.DefaultIndent}${_0x934e95}`);
              }
            }
          }
        }
      }
      function _0x45bd22(_0x458afc) {
        try {
          const _0x4089b6 = new _0x28f263();
          if (_0x4089b6.isGoogleDocString.test(_0x458afc)) {
            _0x4089b6.isGoogleDocString.lastIndex = 0;
            const _0x14dff2 = _0x4089b6.parse(_0x458afc);
            const _0x446f15 = [];
            if (_0x14dff2.description) {
              _0x446f15.push(_0x14dff2.description);
            }
            const _0x3607fc = new Map([[1, 'Parameters'], [2, 'Returns'], [4, 'Raises'], [6, 'Examples'], [7, 'Todo'], [5, 'Deprecated']]);
            for (let _0x4cd02f = 0; _0x4cd02f < _0x14dff2.meta.length; _0x4cd02f++) {
              const _0x20abc0 = _0x14dff2.meta[_0x4cd02f];
              const _0x453a73 = _0x3607fc.get(_0x20abc0.kind);
              if (_0x453a73) {
                const _0x74f2d = _0x20abc0.section ?? _0x453a73;
                _0x446f15.push('');
                _0x446f15.push(_0x74f2d);
                _0x446f15.push('-'.repeat(_0x453a73.length));
                _0x3607fc.delete(_0x20abc0.kind);
              }
              if (_0x20abc0 instanceof _0x25f14d.DocstringParam) {
                const _0xa480fe = `${_0x20abc0.typeName ?? _0xc6b3f9.EmptyClassifier}${_0x20abc0.isOptional ? ', optional' : ''}`;
                _0x446f15.push(_0x20abc0.argName + ' : ' + _0xa480fe);
                _0x4123ee(_0x446f15, _0x20abc0.description);
                _0x40bcb8(_0x446f15, _0x20abc0);
              } else {
                if (_0x20abc0 instanceof _0x25f14d.DocstringReturns) {
                  _0x446f15.push((_0x20abc0.returnName ?? 'out') + ' : ' + (_0x20abc0.typeName ?? _0xc6b3f9.EmptyClassifier));
                  _0x4123ee(_0x446f15, _0x20abc0.description);
                  _0x40bcb8(_0x446f15, _0x20abc0);
                } else {
                  if (_0x20abc0 instanceof _0x25f14d.DocstringRaises) {
                    _0x446f15.push(_0x20abc0.typeName + ' : ' + _0xc6b3f9.EmptyClassifier);
                    _0x4123ee(_0x446f15, _0x20abc0.description);
                    _0x40bcb8(_0x446f15, _0x20abc0);
                  } else {
                    _0x446f15.push(_0x20abc0.description ?? '');
                    _0x40bcb8(_0x446f15, _0x20abc0);
                  }
                }
              }
            }
            return _0x446f15.join('\n');
          }
        } catch (_0x3e6c48) {
          return _0x458afc;
        }
        return _0x458afc;
      }
    },
    52820: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MarkdownFormatter = undefined;
      const _0x5ab51c = require(12670);
      const _0xcadfbc = require(48256);
      const _0x5917eb = require(40804);
      const _0x35ab5a = require(36984);
      const _0x144477 = /`(.*?\s*.*?)<(.*?)>`_/;
      const _0x41358f = 'https://peps.python.org/pep-';
      const _0x408abf = /:pep:`(\d+)(.*)`/;
      var _0x121691;
      (function (_0x4a4826) {
        _0x4a4826[_0x4a4826.Normal = 0] = 'Normal';
        _0x4a4826[_0x4a4826.SkipBlankLines = 1] = 'SkipBlankLines';
        _0x4a4826[_0x4a4826.Literal = 2] = 'Literal';
      })(_0x121691 ||= {});
      var _0x3eec49;
      (function (_0x53da2f) {
        _0x53da2f[_0x53da2f.Normal = 0] = 'Normal';
        _0x53da2f[_0x53da2f.Empty = 1] = 'Empty';
        _0x53da2f[_0x53da2f.Literal = 2] = 'Literal';
      })(_0x3eec49 ||= {});
      class _0x13fc94 extends _0xcadfbc.BaseFormatter {
        constructor(_0x3a0578, _0x113889) {
          super(_0x3a0578);
          this._forceLiteral = _0x113889;
          this._references = new Map();
          this._substitutions = new Map();
          this._indentMode = [_0x3eec49.Normal];
          this._lineFeedMode = [_0x121691.Normal];
          this._insideSpecialTermListItem = false;
          this._blockIndents = [0];
          this._foundError = false;
          if (this._forceLiteral) {
            this.pushIndentMode(_0x3eec49.Literal);
            this.pushLineFeedMode(_0x121691.Literal);
          }
        }
        static convertToMarkdown(_0x5c61a2, _0x15a1cc, _0x41fb6a) {
          const _0x16576a = new _0x13fc94(_0x15a1cc, !!_0x41fb6a);
          _0x16576a.walk(_0x5c61a2);
          const _0x212881 = _0x16576a.getResult();
          if (_0x16576a._foundError && _0x41fb6a) {
            return _0x5ab51c.convertDocStringToMarkdown(_0x16576a.text);
          }
          return _0x212881.replace(/%(\w+?)%/g, '$1');
        }
        pushIndentMode(_0x190e84) {
          this._indentMode.push(_0x190e84);
        }
        popIndentMode() {
          this._indentMode.pop();
        }
        pushLineFeedMode(_0x32a88c) {
          this._lineFeedMode.push(_0x32a88c);
        }
        popLineFeedMode() {
          this._lineFeedMode.pop();
        }
        visitTransition(_0x3988d1) {
          this.appendText('\n');
          return false;
        }
        visitDocTestBlock(_0xc6df5e) {
          this.appendText('``` python\n');
          this.appendText(_0xc6df5e.text);
          this.appendText('\n```\n  ');
          return false;
        }
        visitSection(_0x21df8b) {
          const _0x53bab7 = _0x21df8b.lastChild;
          let _0x218119 = 1;
          const _0x40da2f = _0x53bab7 ? _0x53bab7.text[0] : '#';
          switch (_0x40da2f) {
            case '#':
            case '*':
            case '=':
              _0x218119 = 1;
              break;
            case '-':
              _0x218119 = 2;
              break;
            case '^':
              _0x218119 = 3;
              break;
            default:
              _0x218119 = 4;
              break;
          }
          this.appendText('#'.repeat(_0x218119) + ' ');
          const _0x12b861 = _0x21df8b.namedChildren.find(_0x145cba => _0x145cba.type === 'title');
          if (_0x12b861) {
            this.walkChildren(_0x12b861);
          }
          this.appendText('\n');
          return false;
        }
        visitColon(_0x3784d2) {
          if (this._forceLiteral) {
            this.appendText(_0x3784d2.text);
          }
          return true;
        }
        visitListItem(_0x1f7ad2) {
          if (this._forceLiteral) {
            return super.visitListItem(_0x1f7ad2);
          }
          const _0x6f3609 = _0x1f7ad2.firstChild;
          switch (_0x6f3609?.type) {
            case 'bullet':
              if (_0x1f7ad2.text.startsWith('*') || _0x1f7ad2.text.startsWith('-') || _0x1f7ad2.text.startsWith('+')) {
                this.appendText('*');
              } else {
                this.appendText(_0x6f3609.text);
              }
              break;
            case 'enumerated':
              this.appendText('1. ');
              break;
            case 'term':
              {
                return this.visitTermListItem(_0x6f3609);
              }
            default:
              break;
          }
          return true;
        }
        visitSpecialTermListItem(_0x3b12cb) {
          const _0x15dd38 = this.extractNodeText(_0x3b12cb);
          const _0x4c30bd = this.findSiblingOfType(_0x3b12cb, 'classifier');
          let _0x365289 = this.findSiblingOfType(_0x4c30bd || _0x3b12cb, 'definition');
          let _0x4e76f2 = _0x15dd38;
          let _0x357702 = _0x4c30bd?.text || '';
          let _0x200a86 = '';
          if (_0x365289?.type !== 'definition') {
            return true;
          }
          if (this._insideSpecialTermListItem) {
            return true;
          }
          this._insideSpecialTermListItem = true;
          this.removeIndentationOnCurrentLine();
          const _0x226ffa = /^(.*?)\s+\((.*?)\)\s*(.*)/.exec(_0x15dd38);
          if (_0x226ffa) {
            _0x4e76f2 = _0x226ffa[1];
            _0x357702 = _0x226ffa[2];
            _0x200a86 = _0x226ffa[3];
            _0x365289 = _0x4c30bd && _0x4c30bd.text !== _0x5917eb.EmptyClassifier ? _0x4c30bd : _0x365289;
          } else {
            if (_0x4e76f2.includes(':') && _0x357702.length === 0) {
              _0x357702 = _0x4e76f2.split(':')[1].trim();
              _0x4e76f2 = _0x4e76f2.split(':')[0].trim();
              _0x365289 = _0x4c30bd && _0x4c30bd.text !== _0x5917eb.EmptyClassifier ? _0x4c30bd : _0x365289;
            }
          }
          const _0x1ad1ea = this.currentBlockIndent() === 0;
          if (_0x1ad1ea) {
            this.blockIndent();
          }
          this.appendText(`**${_0x4e76f2}**`);
          if (_0x357702?.length > 0 && _0x357702 !== _0x5917eb.EmptyClassifier) {
            this.appendText(` : _${_0x357702}_ ${_0x200a86}  `);
          } else {
            this.appendText('  ');
          }
          this.pushIndentMode(_0x3eec49.Empty);
          this.appendText('\n');
          let _0x481ef9 = _0x365289;
          while (_0x481ef9 && _0x481ef9.text !== _0x5917eb.EmptyDefinitionDirective) {
            this.visitNode(_0x481ef9);
            this.walkWhitespace(_0x481ef9);
            _0x481ef9 = _0x481ef9.nextSibling;
          }
          this.popIndentMode();
          this.appendText('\n');
          if (_0x1ad1ea) {
            this.blockDedent();
          }
          this._insideSpecialTermListItem = false;
          return false;
        }
        visitNormalTermListItem(_0x555e6d) {
          const _0x7c20dd = this.extractNodeText(_0x555e6d);
          const _0x57531e = this.findSiblingOfType(_0x555e6d, 'classifier');
          const _0x5cce38 = this.findSiblingOfType(_0x57531e || _0x555e6d, 'definition');
          const _0x3adb1c = _0x7c20dd;
          if (_0x5cce38?.type !== 'definition') {
            return true;
          }
          this.removeIndentationOnCurrentLine();
          let _0x687a81 = !_0x57531e && (!_0x3adb1c.includes(':') || _0x3adb1c.endsWith(':') || _0x3adb1c.includes(':') && _0x3adb1c.split(':')[1].split(' ').length <= 1);
          const _0xe43f15 = _0x555e6d.parent;
          let _0x3e638a = _0xe43f15?.previousSibling;
          while (_0x3e638a) {
            if (this.findFirstDescendantWithType(_0x3e638a, 'classifier')) {
              _0x687a81 = false;
              break;
            }
            _0x3e638a = _0x3e638a.previousSibling;
          }
          if (!_0x687a81) {
            this.blockIndent();
            this.pushIndentMode(_0x3eec49.Empty);
            this.pushLineFeedMode(_0x121691.SkipBlankLines);
          }
          this.appendText(_0x3adb1c);
          if (_0x57531e) {
            this.appendText(` : ${_0x57531e.text}
`);
          } else {
            this.appendText('\n');
          }
          if (_0x687a81) {
            this.blockIndent();
            this.pushIndentMode(_0x3eec49.Empty);
            this.pushLineFeedMode(_0x121691.SkipBlankLines);
          }
          let _0x21c18e = _0x5cce38;
          while (_0x21c18e && !_0x21c18e.text.includes(_0x5917eb.EmptyDefinitionDirective)) {
            this.visitNode(_0x21c18e);
            this.walkWhitespace(_0x21c18e);
            _0x21c18e = _0x21c18e.nextSibling;
          }
          this.appendText('  \n');
          this.popLineFeedMode();
          this.popIndentMode();
          this.blockDedent();
          return false;
        }
        visitTermListItem(_0x11670d) {
          if (this._forceLiteral) {
            return true;
          }
          let _0x560a77 = false;
          const _0x407aaf = this.findPreviousSection(_0x11670d);
          const _0x4ce210 = _0x407aaf?.type === 'section' ? _0x407aaf.namedChildren[0].text : '';
          const _0x1be07c = _0x35ab5a.isParameters(_0x4ce210) || _0x35ab5a.isReturns(_0x4ce210) || _0x35ab5a.isAttributes(_0x4ce210) || _0x35ab5a.isRaises(_0x4ce210);
          if (_0x1be07c) {
            _0x560a77 = this.visitSpecialTermListItem(_0x11670d);
          } else {
            _0x560a77 = this.visitNormalTermListItem(_0x11670d);
          }
          return _0x560a77;
        }
        visitVersionAddedDirective(_0x234d43) {
          return this.visitDefaultDirective(_0x234d43, 'versionadded');
        }
        visitSeeAlsoDirective(_0x320bdb) {
          return this.visitDefaultDirective(_0x320bdb, 'seealso');
        }
        visitImageDirective(_0x2a1ecc) {
          const _0x442213 = this.findFirstDescendantWithType(_0x2a1ecc, 'arguments');
          const _0x731efc = this.findFirstDescendant(_0x2a1ecc, _0x1e4a8b => _0x1e4a8b.type === 'field_name' && _0x1e4a8b.text === 'alt');
          const _0x434ebe = this.findFirstDescendant(_0x2a1ecc, _0x3df8d6 => _0x3df8d6.type === 'field_name' && _0x3df8d6.text === 'target');
          const _0x4aeb0e = _0x442213 ? this.extractNodeText(_0x442213) : '';
          let _0x2e4522 = _0x731efc && _0x731efc.nextNamedSibling?.type === 'field_body' ? this.extractNodeText(_0x731efc.nextNamedSibling) : '';
          if (_0x2e4522.length === 0) {
            const _0x35c945 = _0x731efc?.parent?.parent?.nextNamedSibling;
            if (_0x35c945) {
              _0x2e4522 = this.extractNodeText(_0x35c945);
            }
          }
          if (_0x434ebe) {
            const _0x982d87 = _0x434ebe.childCount === 4 ? this.extractNodeText(_0x434ebe.children[3]) : '';
            this.appendText(`[![${_0x2e4522}](${_0x4aeb0e})](${_0x982d87})`);
          } else {
            this.appendText(`![${_0x2e4522}](${_0x4aeb0e})`);
          }
          return false;
        }
        visitCodeBlockDirective(_0x1fce75) {
          const _0x5a8090 = this.findFirstDescendantWithType(_0x1fce75, 'arguments');
          const _0x233c08 = _0x5a8090 ? this.extractNodeText(_0x5a8090) : 'python';
          this.appendText(`
\`\`\` ${_0x233c08}`);
          const _0x2149c7 = this.findFirstDescendantWithType(_0x1fce75, 'content');
          const _0x15a00e = _0x5a8090 ?? _0x2149c7?.parent;
          this.walkWhitespace(_0x15a00e);
          if (_0x2149c7) {
            this.visitNode(_0x2149c7);
          }
          this.appendText('\n```\n');
          return false;
        }
        visitDefaultDirective(_0x2d51aa, _0x268e9b) {
          const _0x2d5356 = this.removeIndentationOnCurrentLine();
          let _0x5b1443 = Math.ceil(_0x2d5356.length / 4);
          if (this.currentBlockIndent() > 0) {
            _0x5b1443++;
          }
          this.blockIndent(_0x5b1443);
          this.appendText(`**_${_0x268e9b}_** `);
          this.pushIndentMode(_0x3eec49.Empty);
          this.blockIndent();
          this.walkChildren(_0x2d51aa);
          this.blockDedent();
          this.popIndentMode();
          this.blockDedent();
          return false;
        }
        visitLiteralBlock(_0x352b7d) {
          const _0x1475d4 = _0x352b7d.previousSibling?.text || '';
          if (_0x1475d4.endsWith('::')) {
            const _0x322bfa = this.getResult();
            let _0x2c3db0 = false;
            let _0x154a77 = _0x322bfa.length - 1;
            while (!_0x2c3db0 && _0x154a77 > 0) {
              if (_0x322bfa[_0x154a77] === ' ' || _0x322bfa[_0x154a77] === '\t' || _0x322bfa[_0x154a77] === '\n') {
                _0x154a77--;
              } else {
                if (_0x154a77 > 5 && _0x322bfa.slice(_0x154a77 - (_0x5917eb.MarkdownSpaceLength - 1), _0x154a77 + 1) === _0x5917eb.MarkdownSpace) {
                  _0x154a77 -= _0x5917eb.MarkdownSpaceLength;
                } else {
                  _0x2c3db0 = true;
                }
              }
            }
            this.insertText(_0x154a77 + 1, ':');
          }
          const _0x439a84 = this.getNodeIndentation(_0x352b7d);
          this.removeIndentationOnCurrentLine();
          this.pushIndentMode(_0x3eec49.Normal);
          this.appendText(`\`\`\`
${_0x439a84}`);
          this.walkChildren(_0x352b7d);
          if (this.getResult().trim().slice(-1) !== '\n') {
            this.appendText('\n');
          }
          this.appendText('```\n');
          this.popIndentMode();
          return false;
        }
        visitLiteral(_0x20ddf6) {
          const _0xb0f89 = _0x20ddf6.text;
          if (_0xb0f89.startsWith(_0x5917eb.EmptyClassifier) && _0xb0f89.endsWith(_0x5917eb.EmptyClassifier)) {
            this.appendText(_0xb0f89.slice(1, -1));
          } else {
            this.appendText(_0xb0f89);
          }
          return false;
        }
        visitStandaloneHyperlink(_0x3ddb95) {
          this.appendText(_0x3ddb95.text);
          return false;
        }
        visitSubstitutionDefinition(_0x1624da) {
          const _0x426ba6 = _0x1624da.lastNamedChild;
          const _0x33d004 = this.findFirstDescendantWithType(_0x1624da, 'substitution');
          if (_0x426ba6 && _0x33d004) {
            this._substitutions.set(_0x33d004.text, this.extractNodeText(_0x426ba6));
            this.replaceText(new RegExp(`\\|${_0x33d004.text.slice(1, -1)}\\|`, 'g'), this._substitutions.get(_0x33d004.text) || '');
          }
          return false;
        }
        visitSubstitutionReference(_0x9fcb0a) {
          const _0x5d1e17 = _0x9fcb0a.text;
          const _0x1f5c7c = this._substitutions.get(_0x5d1e17);
          if (_0x1f5c7c) {
            this.appendText(_0x1f5c7c);
          } else {
            this.appendText(_0x5d1e17);
          }
          return false;
        }
        visitCitation(_0x53aa0e) {
          return this.visitFootNote(_0x53aa0e);
        }
        visitCitationReference(_0x2d1f75) {
          return this.visitReference(_0x2d1f75);
        }
        visitReference(_0x3bdad9) {
          const _0x308789 = this.extractNodeText(_0x3bdad9);
          if (_0x144477.test(_0x308789)) {
            const _0x172eb0 = _0x144477.exec(_0x308789);
            if (_0x172eb0) {
              this.appendText(`[${_0x172eb0[1]}](${_0x172eb0[2]})`);
              return false;
            }
          } else {
            if (_0x308789.endsWith('`_') || _0x308789.endsWith(']_')) {
              const _0x165e7e = _0x308789.slice(1, -2).replace(/\n/g, ' ');
              const _0x4d1aaa = this._references.get(_0x165e7e);
              if (_0x4d1aaa) {
                this.appendText(`[${_0x165e7e}](${_0x4d1aaa})`);
              } else {
                const _0x518865 = `%${_0x165e7e}%`;
                this.appendText(_0x518865);
              }
              return false;
            }
          }
          return true;
        }
        visitTarget(_0xdf2610) {
          const _0x51fedf = _0xdf2610.namedChildren.find(_0xaf07bf => _0xaf07bf.type === 'name');
          const _0x19ef16 = _0xdf2610.namedChildren.find(_0x197fbe => _0x197fbe.type === 'link');
          if (_0x51fedf && _0x19ef16) {
            const _0x158115 = this.extractNodeText(_0x51fedf).slice(1, -1);
            const _0xf1d98d = this.extractNodeText(_0x19ef16);
            this._references.set(_0x158115, _0xf1d98d);
            const _0x1310ee = _0x158115.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
            this.replaceText(new RegExp(`%${_0x1310ee}%`, 'g'), `[${_0x158115}](${_0xf1d98d})`);
            this.removeUpToLastLineFeed();
            return false;
          }
          return true;
        }
        visitFootNoteReference(_0x2a0556) {
          return this.visitReference(_0x2a0556);
        }
        visitFootNote(_0x1e56be) {
          const _0x201480 = this.findFirstDescendantWithType(_0x1e56be, 'label');
          const _0xba1dda = this.findFirstDescendantWithType(_0x1e56be, 'body');
          const _0x4d3c21 = this.findFirstDescendantWithType(_0xba1dda, 'standalone_hyperlink');
          let _0x27f38d = '';
          let _0x32ad08 = _0x201480 ? this.extractNodeText(_0x201480).slice(1, -1) : 'UNNAMED';
          _0x32ad08 = _0x32ad08.replace(/\n/g, ' ');
          if (_0x4d3c21) {
            _0x27f38d = `[${_0x32ad08}](${this.extractNodeText(_0x4d3c21)})`;
          } else {
            _0x27f38d = `<sup>${_0x32ad08}</sup>`;
          }
          const _0xd19c82 = _0x32ad08.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
          this.replaceText(new RegExp(`%${_0xd19c82}%`, 'g'), _0x27f38d);
          this._references.set(_0x32ad08, _0x27f38d);
          this.pushIndentMode(_0x3eec49.Empty);
          this.appendText(`[${_0x32ad08}]: `);
          this.walkChildren(_0xba1dda);
          this.appendText('\n');
          this.popIndentMode();
          return false;
        }
        visitIndent(_0x56eb6e) {
          const _0x1c1ab2 = this._indentMode[this._indentMode.length - 1];
          switch (_0x1c1ab2) {
            case _0x3eec49.Normal:
              this.appendText(_0x56eb6e);
              break;
            case _0x3eec49.Empty:
              break;
            case _0x3eec49.Literal:
              this.appendText(_0x5917eb.MarkdownSpace.repeat(_0x56eb6e.length));
              break;
          }
          return true;
        }
        visitLineFeed(_0x4066ba) {
          const _0x2b7ebc = this._lineFeedMode[this._lineFeedMode.length - 1];
          switch (_0x2b7ebc) {
            case _0x121691.Normal:
              this.appendText('\n');
              break;
            case _0x121691.SkipBlankLines:
              if (!_0x4066ba) {
                this.appendText('  \n');
              }
              break;
            case _0x121691.Literal:
              this.appendText('  \n');
              break;
          }
          return true;
        }
        visitField(_0x1baecc) {
          const _0x35770c = _0x1baecc.previousNamedSibling;
          if (_0x35770c?.type === 'field') {
            this.insertText(-1, ' \\');
          }
          const _0x300bc3 = this.findFirstDescendantWithType(_0x1baecc, 'field_name');
          if (_0x300bc3?.text !== _0x5917eb.ChildFieldMarker) {
            this.appendText('**');
            this.walkChildren(_0x300bc3);
            this.appendText('**');
            this.appendText(' : ');
          }
          const _0x48417d = this.findFirstDescendantWithType(_0x1baecc, 'field_body');
          if (_0x48417d) {
            this.visitNode(_0x48417d);
          }
          return false;
        }
        visitFieldBody(_0xf68e52) {
          let _0xed5758 = _0xf68e52.firstChild;
          while (_0xed5758) {
            this.visitNode(_0xed5758);
            this.pushIndentMode(_0x3eec49.Empty);
            this.pushLineFeedMode(_0x121691.SkipBlankLines);
            this.walkWhitespace(_0xed5758);
            this.popLineFeedMode();
            this.popIndentMode();
            _0xed5758 = _0xed5758.nextSibling;
          }
          return false;
        }
        visitInterpretedText(_0x3003be) {
          const _0x1b9ac4 = this.findFirstDescendantWithType(_0x3003be, 'role');
          const _0x34024c = _0x1b9ac4?.text;
          if (_0x34024c === ':pep:') {
            const _0x33d1aa = _0x3003be.text.match(_0x408abf);
            if (_0x33d1aa) {
              const _0x51604b = _0x33d1aa[1];
              const _0x85423 = `${_0x41358f}${_0x51604b}${_0x33d1aa[2]}`;
              this.appendText(`[PEP ${_0x51604b}](${_0x85423})`);
              return false;
            }
          }
          if (_0x34024c && _0x1b9ac4?.nextSibling) {
            this.visitNode(_0x1b9ac4.nextSibling);
          } else {
            this.appendText(_0x3003be.text);
          }
          return false;
        }
        visitParagraph(_0xd7592e) {
          const _0x2f788c = _0xd7592e.text;
          if (_0x2f788c.startsWith('+---')) {
            const _0x40f2e1 = _0x2f788c.split('\n');
            if (_0x40f2e1[0].endsWith('+')) {
              return this.visitGridTableParagraph(_0xd7592e);
            }
          } else {
            if (_0x2f788c.startsWith('===') && _0x2f788c.includes(' ===')) {
              return this.visitSimpleTableParagraph(_0xd7592e);
            }
          }
          if (_0x2f788c.startsWith('```') && !_0x2f788c.includes('\n') && _0xd7592e.nextNamedSibling?.type === 'block_quote') {
            return false;
          }
          return true;
        }
        visitBlockQuote(_0x22be07) {
          var _0xb6897e;
          const _0x2232e5 = _0x22be07.previousNamedSibling;
          if (_0x2232e5?.type === 'paragraph' && _0x2232e5.text.startsWith('```')) {
            const _0x5a5123 = /^```\s*(\w*)\s*(.*)/.exec(_0x2232e5.text);
            const _0x473f75 = _0x5a5123 ? _0x5a5123[1] : 'python';
            if (_0x5a5123) {
              const _0x105245 = this.removeIndentationOnCurrentLine();
              this.appendText(`\`\`\` ${_0x473f75}
`);
              this.appendText(`${_0x105245}${_0x5a5123[2]}
`);
              this.appendText(_0x105245);
              this.walkChildren(_0x22be07);
              this.appendText('\n```\n');
              return false;
            }
          } else {
            if (((_0xb6897e = _0x22be07.firstChild) === null || _0xb6897e === undefined ? undefined : _0xb6897e.type.includes('list')) && _0x22be07.firstChild?.type !== 'definition_list') {
              return true;
            } else {
              if (_0x2232e5 && _0x2232e5.text.endsWith(':')) {
                const _0xa5a932 = this._forceLiteral;
                this._forceLiteral = true;
                this.pushIndentMode(_0x3eec49.Literal);
                this.pushLineFeedMode(_0x121691.Literal);
                this.appendText('\n');
                const _0x33fbcb = this.getNodeIndentation(_0x22be07);
                this.appendText(_0x5917eb.MarkdownSpace.repeat(_0x33fbcb.length));
                this.walkChildren(_0x22be07);
                this.popLineFeedMode();
                this.popIndentMode();
                this._forceLiteral = _0xa5a932;
              } else {
                const _0x4fce79 = this.removeIndentationOnCurrentLine();
                const _0x5ea522 = Math.ceil(_0x4fce79.length / 4);
                this.blockIndent(_0x5ea522);
                this.appendText('\n');
                this.walkChildren(_0x22be07);
                this.blockDedent();
              }
            }
          }
          return false;
        }
        blockIndent(_0x4c7ca5 = 1) {
          this._blockIndents.push(_0x4c7ca5);
          this.appendText('<ul>\n'.repeat(_0x4c7ca5));
          if (_0x4c7ca5 > 0) {
            this.appendText('\n');
          }
        }
        blockDedent() {
          const _0x5b7376 = this._blockIndents.pop() || 0;
          this.appendText('</ul>\n'.repeat(_0x5b7376));
        }
        currentBlockIndent() {
          return this._blockIndents[this._blockIndents.length - 1] || 0;
        }
        visitLine(_0x140179) {
          if (_0x140179.nextSibling) {
            this.walkChildren(_0x140179);
            this.appendText(' \\');
            return false;
          }
          return true;
        }
        visitSimpleTableParagraph(_0x4fa4f5) {
          const _0x1d6713 = this.getNodeIndentation(_0x4fa4f5);
          this.removeIndentationOnCurrentLine();
          const _0x5b7f4d = _0x4fa4f5.text.split('\n').map(_0xfcc140 => _0xfcc140.startsWith(_0x1d6713) ? _0xfcc140.slice(_0x1d6713.length) : _0xfcc140);
          const _0x156b32 = _0x5b7f4d[0];
          const _0x5ee8b8 = [];
          for (let _0x5662fc = 1; _0x5662fc < _0x156b32.length; _0x5662fc++) {
            if (_0x156b32[_0x5662fc] === '=' && _0x156b32[_0x5662fc + 1] === ' ') {
              _0x5ee8b8.push(_0x5662fc + 1);
            }
          }
          const _0x40a056 = [];
          let _0x4685c5 = false;
          for (let _0x34c0f9 = 1; _0x34c0f9 < _0x5b7f4d.length; _0x34c0f9++) {
            const _0x1f34a6 = _0x5b7f4d[_0x34c0f9];
            let _0x5121bc = _0x5ee8b8.reduce((_0x2b1299, _0x2775b2, _0x2fd8e1) => {
              const _0x5ef851 = _0x2fd8e1 * 2;
              return _0x2b1299.slice(0, _0x2775b2 + _0x5ef851) + ' | ' + _0x2b1299.slice(_0x2775b2 + 1 + _0x5ef851);
            }, _0x1f34a6);
            const _0x2e95bc = _0x5121bc.split('|');
            const _0x566f5d = _0x2e95bc[0].trim().length === 0;
            const _0x30c01a = _0x34c0f9 > 1 && !_0x4685c5;
            _0x5121bc = `| ${_0x5121bc.trim()} |`;
            if (_0x5121bc.includes('===') && _0x34c0f9 === _0x5b7f4d.length - 1) {
              continue;
            } else {
              if (_0x5121bc.includes('===') && _0x34c0f9 !== 0 || _0x5121bc.includes('---') && _0x34c0f9 !== 0) {
                const _0x45a626 = _0x5121bc.replace(/=/g, '-');
                _0x40a056.push(_0x45a626);
                _0x4685c5 = true;
              } else {
                if (_0x566f5d || _0x30c01a) {
                  const _0x37893f = _0x40a056.pop();
                  const _0x2b75f8 = _0x37893f.split('|').slice(1, -1);
                  const _0x426076 = _0x2b75f8.map((_0x45a888, _0x2ced53) => {
                    return _0x45a888.trim() + ' <br/>' + _0x2e95bc[_0x2ced53].trim();
                  });
                  const _0xbea04f = `| ${_0x426076.join(' | ')} |`;
                  _0x40a056.push(_0xbea04f);
                } else {
                  _0x40a056.push(_0x5121bc);
                }
              }
            }
          }
          this.appendText(_0x40a056.join('\n'));
          this.appendText('\n');
          return false;
        }
        visitGridTableParagraph(_0x4bdbe3) {
          this.removeIndentationOnCurrentLine();
          const _0x69f208 = _0x4bdbe3.text.split('\n');
          const _0x35b9ee = [];
          let _0x16812b = 0;
          for (let _0x2f8370 = 1; _0x2f8370 < _0x69f208.length; _0x2f8370++) {
            const _0x447031 = _0x69f208[_0x2f8370].split('|').slice(1, -1).map(_0x428d94 => _0x428d94.trim());
            if (_0x447031.length > 0) {
              if (_0x16812b < _0x35b9ee.length) {
                const _0x45ae3c = _0x35b9ee[_0x35b9ee.length - 1];
                const _0x45fe8c = _0x45ae3c.map((_0x5b121e, _0x3fb51c) => {
                  if (_0x447031[_0x3fb51c].length > 0) {
                    return _0x5b121e + ' <br/>' + _0x447031[_0x3fb51c];
                  } else {
                    return _0x5b121e;
                  }
                });
                _0x35b9ee[_0x16812b] = _0x45fe8c;
              } else {
                _0x35b9ee.push(_0x447031);
              }
            }
            _0x16812b = _0x447031.length <= 0 ? _0x16812b + 1 : _0x16812b;
            if (_0x16812b === 1) {
              const _0x6fce53 = _0x35b9ee[0];
              const _0x271f15 = _0x6fce53.map(_0x566e00 => '---');
              _0x35b9ee.push(_0x271f15);
              _0x16812b++;
            }
          }
          const _0x3cbee2 = _0x35b9ee.map(_0x26fd59 => `| ${_0x26fd59.join(' | ')} |`);
          this.appendText(_0x3cbee2.join('\n'));
          this.appendText('\n');
          return false;
        }
        visitText(_0x3e70ad) {
          if (!this.findParent(_0x3e70ad, _0x7f0eee => {
            return _0x7f0eee.type === 'literal_block' || _0x7f0eee.type === 'literal' || _0x7f0eee.type === 'directive' && _0x7f0eee.firstNamedChild?.text === 'code-block' || _0x7f0eee.type === 'block_quote';
          }) && !_0x3e70ad.text.includes('``__') && !_0x3e70ad.text.includes('__``')) {
            this.appendText(_0x3e70ad.text.replace(/__/g, '\\_\\_'));
            return false;
          } else {
            if (_0x3e70ad.text.startsWith(':pep:`')) {
              const _0x4b8ffd = _0x3e70ad.text.match(_0x408abf);
              if (_0x4b8ffd) {
                const _0x1f8a3e = _0x4b8ffd[1];
                this.appendText(`[PEP ${_0x1f8a3e}](${_0x41358f}${_0x1f8a3e}${_0x4b8ffd[2]})`);
                return false;
              }
            }
          }
          this.appendText(_0x3e70ad.text);
          return false;
        }
        handleError(_0x4fc541) {
          const _0x2fa200 = this.originalText.slice(_0x4fc541.startIndex);
          this.appendText(`
*ERROR*: Pylance failed to parse docstring at index ${_0x4fc541.startIndex}

`);
          this.appendText(_0x2fa200);
          this._foundError = true;
          return false;
        }
      }
      exports.MarkdownFormatter = _0x13fc94;
    },
    55166: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ParameterFormatter = undefined;
      const _0x4f08c2 = require(52820);
      class _0x4b360c extends _0x4f08c2.MarkdownFormatter {
        constructor(_0x5f8c0, _0x29e42d, _0x1190e6) {
          super(_0x29e42d, _0x1190e6);
          this._paramName = _0x5f8c0;
          this._paramString = '';
        }
        static extractParameterDocumentation(_0x30eda1, _0x22b23e, _0x33dee0, _0x526cc4) {
          const _0x2e2128 = new _0x4b360c(_0x22b23e, _0x33dee0, !!_0x526cc4);
          _0x2e2128.walk(_0x30eda1);
          return _0x2e2128._paramString;
        }
        visitSpecialTermListItem(_0x58a354) {
          if (this._paramString === '' && _0x58a354.text.includes(this._paramName)) {
            this.removeIndentationOnCurrentLine();
            const _0x1cae7e = this.getResult().length;
            super.visitSpecialTermListItem(_0x58a354);
            const _0x330c03 = this.getResult().slice(_0x1cae7e);
            const _0x485f08 = _0x330c03.match(/\*\*(.+?)\*\*\s*/);
            if (_0x485f08 && _0x485f08[1].includes(this._paramName)) {
              this._paramString = _0x330c03.replace(/^\s*<ul>([\s\S]*)<\/ul>\s*$/, '$1') + '\n---\n';
            }
          }
          return false;
        }
      }
      exports.ParameterFormatter = _0x4b360c;
    },
    80019: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RestructuredTextParser = undefined;
      exports.initialize = _0x48a0d7;
      const _0x51b1d5 = require(66509);
      let _0x5d64a5 = undefined;
      async function _0x48a0d7(_0x3013b2, _0x520d53) {
        await _0x51b1d5.init({
          locateFile(_0x55cc00, _0x5e60f9) {
            return _0x3013b2.toString();
          }
        });
        _0x5d64a5 = await _0x51b1d5.Language.load(_0x520d53);
      }
      class _0x179414 {
        parse(_0x2284a5, _0x2443e3, _0x1afb8c) {
          try {
            const _0x2cd7ec = new _0x51b1d5();
            _0x2cd7ec.setLanguage(_0x5d64a5);
            return _0x2cd7ec.parse(_0x2284a5, _0x1afb8c);
          } catch (_0x1df2de) {
            _0x2443e3.error(`Error parsing docstring: ${_0x1df2de}`);
            return undefined;
          }
        }
      }
      exports.RestructuredTextParser = _0x179414;
    },
    40804: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.NonVisibleSpace = exports.PythonCodeBlock = exports.DefaultIndent = exports.EmptyClassifier = exports.EmptyDefinitionDirective = exports.ChildFieldMarker = exports.MarkdownSpaceLength = exports.MarkdownSpace = undefined;
      exports.MarkdownSpace = '&nbsp;';
      exports.MarkdownSpaceLength = exports.MarkdownSpace.length;
      exports.ChildFieldMarker = 'childfieldmarker';
      exports.EmptyDefinitionDirective = ':empty: ``';
      exports.EmptyClassifier = '``';
      exports.DefaultIndent = '    ';
      exports.PythonCodeBlock = '.. code-block:: python';
      exports.NonVisibleSpace = '⁠';
    },
    36984: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.isAllSame = _0x24848a;
      exports.isParameters = _0x25b423;
      exports.isType = _0x288897;
      exports.isReturns = _0x10510d;
      exports.isAttributes = _0x2fd64f;
      exports.isRaises = _0x3d0dc1;
      exports.isVar = _0x41753e;
      exports.medianIndent = _0x120f2f;
      exports.commonIndent = _0x318c30;
      exports.cleanIndent = _0x40eee3;
      exports.fixupCommonMarkdownLiterals = _0xe90cca;
      const _0x1eec4c = require(40804);
      function _0x24848a(_0x5041fa) {
        return _0x5041fa.split('').every((_0x31edcb, _0xe3c3aa, _0xe18210) => _0x31edcb === _0xe18210[0]);
      }
      function _0x25b423(_0x3ef269) {
        const _0x56c345 = _0x3ef269.toLowerCase();
        return _0x56c345 === 'parameters' || _0x56c345 === 'parameter' || _0x56c345 === 'args' || _0x56c345 === 'arg' || _0x56c345 === 'arguments' || _0x56c345 === 'argument' || _0x56c345 === 'params' || _0x56c345 === 'param' || _0x56c345 === 'other parameters';
      }
      function _0x288897(_0x11c97b) {
        return _0x11c97b.toLowerCase() === 'type';
      }
      function _0x10510d(_0x2d5bda) {
        const _0x2c4a7d = _0x2d5bda.toLowerCase();
        return _0x2c4a7d === 'returns' || _0x2c4a7d === 'return' || _0x2c4a7d === 'yields' || _0x2c4a7d === 'yield';
      }
      function _0x2fd64f(_0x9989d) {
        return _0x9989d.toLowerCase().includes('attributes');
      }
      function _0x3d0dc1(_0x33df93) {
        return _0x33df93.toLowerCase().includes('raise');
      }
      function _0x41753e(_0x586f8a) {
        const _0x4b0b59 = _0x586f8a.toLowerCase();
        return _0x4b0b59 === 'var' || _0x4b0b59 === 'vartype';
      }
      function _0x120f2f(_0x566b94) {
        const _0x17d830 = _0x566b94.map(_0xebe79 => _0xebe79.search(/\S/));
        _0x17d830.sort((_0x4e4a4b, _0x3e6745) => _0x4e4a4b - _0x3e6745);
        const _0x2feb35 = _0x17d830[_0x17d830.length / 2];
        return ' '.repeat(_0x2feb35 > 0 ? _0x2feb35 : 4);
      }
      function _0x318c30(_0x577b86, _0x344354 = '') {
        let _0xcf15d8 = null;
        let _0x57fac9 = '';
        let _0x9703da = 0;
        let _0x383a08 = 0;
        for (let _0xf8de6e = 1; _0xf8de6e < _0x577b86.length; _0xf8de6e++) {
          const _0x352a50 = _0x577b86[_0xf8de6e];
          if (_0x352a50.trim() !== '') {
            if (_0x383a08 === 0 && !_0xcf15d8) {
              _0xcf15d8 = _0x352a50.match(/^\s+/);
              _0x57fac9 = _0xcf15d8 ? _0xcf15d8[0] : '';
            }
            _0x383a08++;
            if (_0x57fac9 === '' && /^\.\s+/.test(_0x352a50)) {
              _0xcf15d8 = _0x352a50.match(/^\.\s+/);
              _0x57fac9 = _0xcf15d8 ? _0xcf15d8[0] : '';
            }
            if (_0x57fac9.length > 0 && _0x352a50.startsWith(_0x57fac9)) {
              _0x9703da++;
            }
          }
        }
        if (_0x9703da > _0x383a08 * 2 / 3) {
          if (_0x57fac9.length > 0) {
            return _0x57fac9;
          } else {
            return _0x344354;
          }
        }
        return '';
      }
      function _0x40eee3(_0xe1baf7) {
        const _0x28de61 = _0x318c30(_0xe1baf7.split('\n'));
        const _0x427f1e = _0xe1baf7.split('\n').map(_0xa03ecb => {
          if (_0xa03ecb.trim() !== '') {
            if (_0x28de61.length > 0 && _0xa03ecb.startsWith(_0x28de61)) {
              return _0xa03ecb.slice(_0x28de61.length);
            }
          }
          return _0xa03ecb;
        });
        return _0x427f1e.join('\n');
      }
      function _0xe90cca(_0x5820b7) {
        const _0xe66dd5 = _0x5820b7.split('\n');
        const _0x3aeda3 = [];
        let _0x33d492 = false;
        let _0x4eb245 = '';
        let _0x1e1956 = '';
        for (let _0x408aa0 = 0; _0x408aa0 < _0xe66dd5.length; _0x408aa0++) {
          const _0x53c55e = _0xe66dd5[_0x408aa0];
          const _0x5635a6 = _0x53c55e.trim();
          if (_0x5635a6.startsWith('```') || _0x5635a6.startsWith('~~~')) {
            const _0x58ac18 = /^(`{3,}|~{3,})\s*(python\s*)*(.*)/.exec(_0x5635a6);
            _0x33d492 = !_0x33d492;
            _0x4eb245 = _0x53c55e.match(/^\s+/)?.[0] || '';
            _0x1e1956 = '';
            _0x3aeda3.push('');
            if (_0x33d492) {
              _0x3aeda3.push(_0x1eec4c.PythonCodeBlock);
              if (_0x58ac18 && _0x58ac18[3].length) {
                _0x3aeda3.push(`${_0x1eec4c.DefaultIndent}${_0x58ac18[3]}`);
              }
            }
          } else {
            if (_0x33d492 && _0x5635a6.length > 0) {
              const _0x101897 = _0x53c55e.match(/^\s+/)?.[0] || '';
              if (_0x101897.length <= _0x4eb245.length) {
                _0x1e1956 = _0x1eec4c.DefaultIndent;
              }
              _0x3aeda3.push(`${_0x1e1956}${_0x53c55e}`);
            } else {
              if (/^\s+\*.*?\s+:\s+.*$/.test(_0x53c55e)) {
                _0x3aeda3.push(_0x53c55e.replace(':', _0x1eec4c.NonVisibleSpace + ':' + _0x1eec4c.NonVisibleSpace));
              } else {
                _0x3aeda3.push(_0x53c55e);
              }
            }
          }
        }
        return _0x3aeda3.join('\n');
      }
    },
    44138: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DocumentChangeTracker = undefined;
      const _0x2333f1 = require(55890);
      const _0x3517b3 = require(34455);
      const _0x1d3a79 = require(88754);
      class _0x3980d8 {
        constructor(_0x35448a, _0x3631bd) {
          this.fileUri = _0x35448a;
          this._baseDocument = _0x3631bd;
          this._documents = [];
          this._documents.push({
            document: _0x2333f1.TextDocument.create('N/A', 'python', 0, this._baseDocument),
            forwardChanges: [],
            reverseChanges: []
          });
        }
        get containsChange() {
          return this._documents.length > 1;
        }
        get currentDocument() {
          return this._lastTextEntry.document.getText();
        }
        applyChanges(_0x10b1a6) {
          _0x10b1a6 = _0x3517b3.isArray(_0x10b1a6) ? _0x10b1a6 : [_0x10b1a6];
          const _0x1259af = _0x10b1a6.map(_0x591793 => ({
            range: _0x591793.range,
            newText: _0x591793.replacementText
          }));
          const _0x3cd0ea = this._lastTextEntry.document;
          const _0x3ee8ba = _0x2333f1.TextDocument.create(_0x3cd0ea.uri, _0x3cd0ea.languageId, _0x3cd0ea.version + 1, _0x2333f1.TextDocument.applyEdits(_0x3cd0ea, _0x1259af));
          const _0x59fe19 = _0x10b1a6.map(_0x5e99b5 => ({
            range: _0x1d3a79.TextRange.fromBounds(_0x3cd0ea.offsetAt(_0x5e99b5.range.start), _0x3cd0ea.offsetAt(_0x5e99b5.range.end)),
            replacementText: _0x5e99b5.replacementText
          })).sort((_0x9d1839, _0xf75589) => _0x9d1839.range.start - _0xf75589.range.start);
          const _0x29ad7a = this._createReverseChanges(_0x3cd0ea.getText(), _0x59fe19);
          this._documents.push({
            document: _0x3ee8ba,
            forwardChanges: _0x59fe19,
            reverseChanges: _0x29ad7a
          });
          return this.currentDocument;
        }
        tryConvertToOriginal(_0x569f95) {
          if (_0x1d3a79.Position.is(_0x569f95)) {
            return this._tryConvertToOriginal(_0x569f95);
          }
          const _0x3c8e55 = this._tryConvertToOriginal(_0x569f95.start);
          const _0x2365c6 = this._tryConvertToOriginal(_0x569f95.end);
          if (!!_0x3c8e55 && !!_0x2365c6) {
            return {
              start: _0x3c8e55,
              end: _0x2365c6
            };
          } else {
            return undefined;
          }
        }
        tryConvertFromOriginal(_0x1bd57d) {
          if (_0x1d3a79.Position.is(_0x1bd57d)) {
            return this._tryConvertFromOriginal(_0x1bd57d);
          }
          const _0x10cf13 = this._tryConvertFromOriginal(_0x1bd57d.start);
          const _0x314a3d = this._tryConvertFromOriginal(_0x1bd57d.end);
          if (!!_0x10cf13 && !!_0x314a3d) {
            return {
              start: _0x10cf13,
              end: _0x314a3d
            };
          } else {
            return undefined;
          }
        }
        get _lastTextEntry() {
          return this._documents[this._documents.length - 1];
        }
        _tryConvertToOriginal(_0x2ff5d6) {
          let _0x425116 = this._lastTextEntry.document.offsetAt(_0x2ff5d6);
          for (let _0x4f971c = this._documents.length - 1; _0x4f971c >= 1; _0x4f971c--) {
            const _0x1d63f1 = this._applyDelta(_0x425116, this._documents[_0x4f971c].reverseChanges);
            if (_0x1d63f1 === undefined) {
              return undefined;
            }
            _0x425116 += _0x1d63f1;
          }
          return this._documents[0].document.positionAt(_0x425116);
        }
        _tryConvertFromOriginal(_0x309086) {
          let _0x3c970e = this._documents[0].document.offsetAt(_0x309086);
          for (let _0x1a8ce8 = 1; _0x1a8ce8 < this._documents.length; _0x1a8ce8++) {
            const _0xac269f = this._applyDelta(_0x3c970e, this._documents[_0x1a8ce8].forwardChanges);
            if (_0xac269f === undefined) {
              return undefined;
            }
            _0x3c970e += _0xac269f;
          }
          return this._lastTextEntry.document.positionAt(_0x3c970e);
        }
        _applyDelta(_0x45b395, _0x1142b3) {
          let _0x369da3 = 0;
          for (const _0x17a16a of _0x1142b3) {
            const _0x45c1a5 = _0x1d3a79.TextRange.getEnd(_0x17a16a.range);
            if (_0x45b395 <= _0x17a16a.range.start) {
              continue;
            }
            if (_0x17a16a.range.start < _0x45b395 && _0x45b395 < _0x45c1a5) {
              return undefined;
            }
            if (_0x45c1a5 <= _0x45b395) {
              _0x369da3 += _0x17a16a.replacementText.length - _0x17a16a.range.length;
            }
          }
          return _0x369da3;
        }
        _createReverseChanges(_0x18723b, _0x2cff48) {
          const _0x1e2200 = [];
          let _0x18ef70 = 0;
          for (const _0x44f731 of _0x2cff48) {
            _0x1e2200.push({
              range: _0x1d3a79.TextRange.create(_0x44f731.range.start + _0x18ef70, _0x44f731.replacementText.length),
              replacementText: _0x18723b.substring(_0x44f731.range.start, _0x1d3a79.TextRange.getEnd(_0x44f731.range))
            });
            _0x18ef70 += _0x44f731.replacementText.length - _0x44f731.range.length;
          }
          return _0x1e2200;
        }
      }
      exports.DocumentChangeTracker = _0x3980d8;
    },
    6665: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DocumentTransformer = undefined;
      const _0x4441e2 = require(56911);
      const _0x254bfd = require(34455);
      const _0x203866 = require(88754);
      const _0x3c1d21 = require(27113);
      const _0x64dd4a = require(47351);
      const _0x596cdf = require(44138);
      class _0x427177 {
        constructor(_0x5099fa) {
          this._transformers = _0x5099fa;
        }
        run(_0x5de7e9, _0x439e75, _0x370cf7, _0x4bb986) {
          const _0x35830a = _0x64dd4a.CompletionListConverter.fromLSP(_0x439e75).data;
          const _0x407472 = _0x3c1d21.Uri.parse(_0x35830a.uri, _0x5de7e9.service.serviceProvider);
          const _0x308dc4 = _0x35830a.position;
          return this._runCore(_0x5de7e9, _0x407472, _0x308dc4, _0x370cf7, _0x411ee1 => {
            const _0x5a704d = {
              ..._0x35830a,
              position: _0x411ee1
            };
            _0x439e75.data = _0x5a704d;
            return _0x439e75;
          }, _0x4bb986);
        }
        runWithPosition(_0x4e8b81, _0x1eb561, _0x2d6852, _0x21169c) {
          const _0x142234 = _0x3c1d21.Uri.parse(_0x1eb561.textDocument.uri, _0x4e8b81.service.serviceProvider);
          return this._runCore(_0x4e8b81, _0x142234, _0x1eb561.position, _0x2d6852, _0x501a75 => _0x501a75, _0x21169c);
        }
        _runCore(_0x4b4bc1, _0x1cceb7, _0x55a536, _0x23f505, _0x4bd62a, _0x456432) {
          const _0x13ed69 = _0x4b4bc1.service.getSourceFile(_0x1cceb7);
          const _0x3460e9 = _0x13ed69 === null || _0x13ed69 === undefined ? undefined : _0x13ed69.getFileContent();
          if (_0x3460e9 === undefined) {
            return _0x4b4bc1.service.run(_0xa7fe83 => _0x23f505(_0xa7fe83, _0x4bd62a(_0x55a536)), _0x456432);
          }
          const _0x899f13 = this._transformers.filter(_0x3065e7 => _0x3065e7.canApply(_0x4b4bc1.service.backgroundAnalysisProgram.program, _0x1cceb7, _0x55a536, _0x456432));
          if (_0x899f13.length === 0) {
            return _0x4b4bc1.service.run(_0x32c8a6 => _0x23f505(_0x32c8a6, _0x4bd62a(_0x55a536)), _0x456432);
          }
          let _0x558a67;
          const _0xd4e63 = new _0x596cdf.DocumentChangeTracker(_0x1cceb7, _0x3460e9);
          _0x4b4bc1.service.runEditMode(_0x3535e4 => {
            _0x899f13.forEach(_0x5d3f85 => _0x5d3f85.apply(_0x3535e4, _0x1cceb7, _0x55a536, _0xd4e63, _0x456432));
            if (!_0xd4e63.containsChange) {
              _0x558a67 = _0x23f505(_0x3535e4, _0x4bd62a(_0x55a536));
              return;
            }
            const _0x5b22f5 = _0xd4e63.tryConvertFromOriginal(_0x55a536);
            if (!_0x5b22f5) {
              _0x558a67 = _0x23f505(_0x3535e4, _0x4bd62a(_0x55a536));
              return;
            }
            _0x558a67 = _0x23f505(_0x3535e4, _0x4bd62a(_0x5b22f5));
            if (_0x558a67 !== undefined && _0x558a67 !== null) {
              _0x558a67 = this._convertResults(_0xd4e63, _0x558a67);
            }
          }, _0x456432);
          return _0x558a67;
        }
        _convertResults(_0x57415a, _0x443ab3) {
          if (_0x1ae259(_0x443ab3)) {
            return _0x45592b.convertCompletionList(_0x57415a, _0x443ab3);
          }
          if (_0x2775f5(_0x443ab3)) {
            return _0x45592b.convertCompletionItem(_0x57415a, _0x443ab3);
          }
          if (_0x3c6f9b(_0x443ab3)) {
            return _0x45592b.convertDocumentRanges(_0x57415a, _0x443ab3);
          }
          return _0x443ab3;
        }
      }
      exports.DocumentTransformer = _0x427177;
      class _0x45592b {
        static convertRange(_0x1c2810, _0x542b47) {
          return _0x1c2810.tryConvertToOriginal(_0x542b47);
        }
        static convertTextEdit(_0x5ab038, _0x1ab05f) {
          const _0x1c8c11 = this.convertRange(_0x5ab038, _0x1ab05f.range);
          if (!_0x1c8c11) {
            return undefined;
          }
          return {
            ..._0x1ab05f,
            range: _0x1c8c11
          };
        }
        static convertInsertionEdit(_0x41db7a, _0x2a63f3) {
          const _0x24460a = this.convertRange(_0x41db7a, _0x2a63f3.insert);
          if (!_0x24460a) {
            return undefined;
          }
          const _0x146058 = this.convertRange(_0x41db7a, _0x2a63f3.replace);
          if (!_0x146058) {
            return undefined;
          }
          return {
            ..._0x2a63f3,
            insert: _0x24460a,
            replace: _0x146058
          };
        }
        static convertCompletionItemData(_0x25e2aa, _0x2728c3) {
          const _0x5d6705 = _0x25e2aa.tryConvertToOriginal(_0x2728c3.position);
          if (!_0x5d6705) {
            return undefined;
          }
          return {
            ..._0x2728c3,
            position: _0x5d6705
          };
        }
        static convertCompletionItem(_0x42eede, _0x1c3be1) {
          const _0x37025b = _0x1c3be1.textEdit ? _0x4441e2.TextEdit.is(_0x1c3be1.textEdit) ? this.convertTextEdit(_0x42eede, _0x1c3be1.textEdit) : this.convertInsertionEdit(_0x42eede, _0x1c3be1.textEdit) : undefined;
          if (!_0x37025b) {
            return _0x1c3be1;
          }
          const _0x410971 = _0x1c3be1.additionalTextEdits;
          if (_0x410971) {
            for (let _0x37981d = 0; _0x37981d < _0x410971.length; _0x37981d++) {
              const _0x14f1dc = this.convertTextEdit(_0x42eede, _0x410971[_0x37981d]);
              if (!_0x14f1dc) {
                return _0x1c3be1;
              }
              _0x410971[_0x37981d] = _0x14f1dc;
            }
          }
          const _0x3adb17 = _0x1c3be1.data ? this.convertCompletionItemData(_0x42eede, _0x1c3be1.data) : undefined;
          return {
            ..._0x1c3be1,
            textEdit: _0x37025b,
            additionalTextEdits: _0x410971,
            data: _0x3adb17
          };
        }
        static convertCompletionList(_0x55935c, _0x52b41e) {
          for (let _0x8315b5 = 0; _0x8315b5 < _0x52b41e.items.length; _0x8315b5++) {
            const _0x130e8c = this.convertCompletionItem(_0x55935c, _0x52b41e.items[_0x8315b5]);
            _0x52b41e.items[_0x8315b5] = _0x130e8c;
          }
          return _0x52b41e;
        }
        static convertDocumentRange(_0x45cd8b, _0x5c0423) {
          const _0x185652 = this.convertRange(_0x45cd8b, _0x5c0423.range);
          if (!_0x185652) {
            return _0x5c0423;
          }
          return {
            ..._0x5c0423,
            range: _0x185652
          };
        }
        static convertDocumentRanges(_0x168e8f, _0xa0e000) {
          for (let _0x2efeba = 0; _0x2efeba < _0xa0e000.length; _0x2efeba++) {
            if (!_0xa0e000[_0x2efeba].uri.equals(_0x168e8f.fileUri)) {
              continue;
            }
            const _0x54888b = this.convertDocumentRange(_0x168e8f, _0xa0e000[_0x2efeba]);
            _0xa0e000[_0x2efeba] = _0x54888b;
          }
          return _0xa0e000;
        }
      }
      function _0x1ae259(_0x81c9c3) {
        return _0x81c9c3 && _0x254bfd.isBoolean(_0x81c9c3.isIncomplete) && Array.isArray(_0x81c9c3.items);
      }
      function _0x2775f5(_0x1a73c6) {
        return _0x1a73c6 && _0x254bfd.isString(_0x1a73c6.lable);
      }
      function _0x3c6f9b(_0x50817b) {
        return _0x50817b && _0x254bfd.isArray(_0x50817b) && (_0x50817b.length === 0 || _0x1209e5(_0x50817b[0]));
      }
      function _0x1209e5(_0x46f4cd) {
        return _0x46f4cd && _0x254bfd.isString(_0x46f4cd.path) && _0x203866.Range.is(_0x46f4cd.range);
      }
    },
    54267: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getUniqueUri = _0x51a2ca;
      const _0x9e14e2 = require(91426);
      const _0x4cf593 = require(12522);
      function _0x51a2ca(_0x439422, _0x19275a, _0x123a1c) {
        const _0x17f1a3 = _0x19275a.getDirectory();
        const _0x5ef9b0 = _0x19275a.fileNameWithoutExtensions;
        const _0x803830 = _0x19275a.lastExtension;
        const _0x3d66c2 = _0x439422.service.getConfigOptions();
        let _0x519d64 = _0x19275a;
        let _0x2e900d = 1;
        let _0x3df8fb = _0x4cf593.matchFileSpecs(_0x3d66c2, _0x19275a, true);
        while (!_0x356f04(_0x439422, _0x519d64, _0x3df8fb)) {
          _0x9e14e2.throwIfCancellationRequested(_0x123a1c);
          _0x519d64 = _0x17f1a3.combinePaths(_0x5ef9b0 + '_' + _0x2e900d++ + _0x803830);
          _0x3df8fb = _0x2e900d <= 100 ? _0x3df8fb : false;
        }
        return _0x519d64;
      }
      function _0x356f04(_0x33a1cd, _0x29a04c, _0x59aceb) {
        if (_0x33a1cd.service.hasSourceFile(_0x29a04c) || _0x33a1cd.service.fs.existsSync(_0x29a04c)) {
          return false;
        }
        const _0x41de60 = _0x33a1cd.service.getConfigOptions();
        return !_0x59aceb || _0x4cf593.matchFileSpecs(_0x41de60, _0x29a04c, true);
      }
    },
    93819: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.formatCode = _0xe3a16;
      exports.splitCodeLines = _0x136609;
      function _0xe3a16(_0x2b2eb8) {
        const _0x304bbe = [];
        const _0xafa13d = _0x2b2eb8.split(/\r?\n/);
        if (!_0xafa13d || _0xafa13d.length === 0) {
          return _0x304bbe;
        }
        for (const _0x4ad9e3 of _0xafa13d) {
          if (_0x4ad9e3.trim().length > 0) {
            _0x304bbe.push(_0x4ad9e3);
          }
        }
        return _0x304bbe;
      }
      function _0x136609(_0x27a5e4) {
        const _0xb2e91 = _0x27a5e4.split(/\r?\n/);
        if (!_0xb2e91 || _0xb2e91.length === 0) {
          return [];
        }
        return _0xb2e91;
      }
    },
    24835: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getAttrMode = _0x2d3cae;
      exports.getBestMatchGetAttrMethods = _0x4b3417;
      exports.getGetAttrMethods = _0x2baa51;
      exports.firstParamsExcludingSelf = _0x22b1b8;
      const _0x42bae1 = require(21024);
      const _0x32a181 = require(34455);
      const _0x317769 = '__getattribute__';
      const _0x26bfc4 = '__getattr__';
      const _0x5848c4 = '__setattr__';
      const _0x2b2704 = '__delattr__';
      function _0x2d3cae(_0x5820ff) {
        if (_0x5820ff.parent?.nodeType === 3 && _0x5820ff.parent.d.leftExpr === _0x5820ff) {
          return 'set';
        }
        if (_0x5820ff.parent?.nodeType === 17 && _0x5820ff.parent.d.targets.some(_0x2ef8a4 => _0x2ef8a4 === _0x5820ff)) {
          return 'del';
        }
        return 'get';
      }
      function _0x4b3417(_0x452e10, _0x5e1838, _0x1c0165) {
        const _0x57e380 = _0x452e10.getBuiltInType(_0x5e1838, 'str');
        if (!_0x42bae1.isInstantiableClass(_0x57e380)) {
          return undefined;
        }
        const _0x1f5d7c = _0x452e10.getType(_0x5e1838.d.leftExpr);
        if (!_0x1f5d7c || !_0x42bae1.isClassInstance(_0x1f5d7c)) {
          return undefined;
        }
        const _0x4b6179 = _0x2a7767(_0x452e10, _0x5e1838, _0x1f5d7c, _0x1c0165);
        if (!_0x4b6179) {
          return undefined;
        }
        if (_0x42bae1.isFunction(_0x4b6179.type)) {
          return _0x4b6179.type;
        }
        if (!_0x42bae1.isOverloaded(_0x4b6179.type)) {
          return undefined;
        }
        const _0x5f3d53 = _0x42bae1.ClassType.cloneWithLiteral(_0x42bae1.ClassType.cloneAsInstance(_0x57e380), _0x5e1838.d.member.d.value);
        const _0x888646 = [{
          argCategory: 0,
          typeResult: {
            type: _0x5f3d53
          }
        }];
        if (_0x1c0165 === 'set') {
          const _0x1fbd98 = _0x35d3b0(_0x452e10, _0x5e1838);
          _0x888646.push({
            argCategory: 0,
            typeResult: {
              type: _0x1fbd98?.type ?? _0x42bae1.UnknownType.create(),
              isIncomplete: !!_0x1fbd98?.isIncomplete
            }
          });
        }
        return _0x452e10.getBestOverloadForArgs(_0x5e1838.d.member, {
          type: _0x4b6179.type
        }, _0x888646);
      }
      function _0x2baa51(_0x1c3dd2, _0x366d3b, _0x5d7e87, _0x1dad03 = false) {
        const _0x4cca69 = [];
        const _0x5444f6 = _0x1c3dd2.getType(_0x366d3b);
        if (!_0x5444f6 || !_0x42bae1.isClassInstance(_0x5444f6)) {
          return _0x4cca69;
        }
        const _0x3e7b5b = _0x2a7767(_0x1c3dd2, _0x366d3b, _0x5444f6, _0x5d7e87);
        if (!_0x3e7b5b || !_0x3e7b5b.classType) {
          return _0x4cca69;
        }
        let _0x134581 = undefined;
        if (_0x42bae1.isFunction(_0x3e7b5b.type)) {
          _0x134581 = _0x3e7b5b.type.shared.name;
        } else {
          if (_0x42bae1.isOverloaded(_0x3e7b5b.type) && _0x42bae1.OverloadedType.getOverloads(_0x3e7b5b.type).length > 0) {
            _0x134581 = _0x42bae1.OverloadedType.getOverloads(_0x3e7b5b.type)[0].shared.name;
          } else {
            if (_0x42bae1.isOverloaded(_0x3e7b5b.type) && _0x42bae1.OverloadedType.getImplementation(_0x3e7b5b.type)) {
              _0x134581 = _0x42bae1.OverloadedType.getImplementation(_0x3e7b5b.type)?.shared?.name;
            }
          }
        }
        if (_0x134581 === undefined) {
          return _0x4cca69;
        }
        const _0xee381a = _0x1c3dd2.getBoundMagicMethod(_0x5444f6, _0x134581);
        if (!_0xee381a) {
          return _0x4cca69;
        }
        if (_0x42bae1.isFunction(_0xee381a)) {
          _0x160648(_0xee381a, _0x4cca69, _0x1dad03);
        }
        if (_0x42bae1.isOverloaded(_0xee381a)) {
          _0x42bae1.OverloadedType.getOverloads(_0xee381a).forEach(_0x3e4f94 => _0x160648(_0x3e4f94, _0x4cca69, _0x1dad03));
        }
        if (_0x42bae1.isOverloaded(_0xee381a) && _0x42bae1.OverloadedType.getImplementation(_0xee381a)) {
          _0x160648(_0x42bae1.OverloadedType.getImplementation(_0xee381a), _0x4cca69, _0x1dad03);
        }
        return _0x4cca69;
      }
      function _0x22b1b8(_0x26075e) {
        return _0x26075e.shared.parameters.find(_0x42e85b => !_0x42bae1.isTypeVar(_0x42e85b._type) || !_0x42bae1.TypeVarType.isSelf(_0x42e85b._type));
      }
      function _0x160648(_0x3f00bc, _0x3be882, _0xc30550 = false) {
        const _0x45f6e8 = _0x22b1b8(_0x3f00bc);
        if (_0x45f6e8 === undefined) {
          return;
        }
        const _0x13e558 = _0x45f6e8._type;
        if (_0x13e558.category === 6 && _0x13e558.priv.literalValue && _0x32a181.isString(_0x13e558.priv.literalValue)) {
          _0x3be882.push(_0x3f00bc);
          return;
        }
        if (_0x13e558.category === 8 && (_0x13e558.priv.literalClasses.literalStrMap || _0x13e558.priv.literalInstances.literalStrMap)) {
          _0x3be882.push(_0x3f00bc);
          return;
        }
        if (_0xc30550 && _0x13e558.category === 6 && _0x42bae1.ClassType.isBuiltIn(_0x13e558, 'str')) {
          _0x3be882.push(_0x3f00bc);
          return;
        }
      }
      function _0x2a7767(_0x34923, _0xb33a9d, _0x55684d, _0x17753a) {
        var _0x4830fb;
        if (_0x17753a === 'get') {
          if ((_0x4830fb = _0xdaf0a1(_0x34923, _0xb33a9d, _0x55684d, _0x317769)) !== null && _0x4830fb !== undefined) {
            return _0x4830fb;
          } else {
            return _0xdaf0a1(_0x34923, _0xb33a9d, _0x55684d, _0x26bfc4);
          }
        }
        if (_0x17753a === 'set') {
          return _0xdaf0a1(_0x34923, _0xb33a9d, _0x55684d, _0x5848c4);
        }
        return _0xdaf0a1(_0x34923, _0xb33a9d, _0x55684d, _0x2b2704);
      }
      function _0xdaf0a1(_0x108f7e, _0x5827dd, _0x3b2f32, _0x5b9e33) {
        return _0x108f7e.getTypeOfBoundMember(_0x5827dd, _0x3b2f32, _0x5b9e33, {
          method: 'get'
        }, undefined, 516);
      }
      function _0x35d3b0(_0x3ea2fe, _0x2d31ab) {
        if (_0x2d31ab.parent?.nodeType === 3) {
          return _0x3ea2fe.getTypeResult(_0x2d31ab.parent.d.rightExpr);
        }
        return undefined;
      }
    },
    13259: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.wellKnownAbbreviationMap = exports.addImportSimilarityLimit = undefined;
      exports.isPackageInstalled = _0x47294c;
      exports.tryGetExistingImportInfo = _0x5c5c00;
      const _0x56af04 = require(28445);
      const _0x2d9557 = require(83760);
      const _0x4c313a = require(3433);
      const _0x4c62be = require(12097);
      const _0x425588 = require(21024);
      const _0x2aba01 = require(19013);
      const _0x1a94db = require(61904);
      exports.addImportSimilarityLimit = 0.4;
      exports.wellKnownAbbreviationMap = new Map([['np', {
        importName: 'numpy'
      }], ['pd', {
        importName: 'pandas'
      }], ['tf', {
        importName: 'tensorflow'
      }], ['plt', {
        importName: 'pyplot',
        importFrom: 'matplotlib'
      }], ['mpl', {
        importName: 'matplotlib'
      }], ['m', {
        importName: 'math'
      }], ['spio', {
        importName: 'io',
        importFrom: 'scipy'
      }], ['sp', {
        importName: 'scipy'
      }], ['pn', {
        importName: 'panel'
      }], ['hv', {
        importName: 'holoviews'
      }]]);
      function _0x47294c(_0x429b04, _0x15b9f8) {
        const _0x31f6a1 = {
          leadingDots: 0,
          nameParts: [_0x429b04],
          importedSymbols: new Set()
        };
        const _0x231576 = _0x15b9f8.configOptions.findExecEnvironment(_0x15b9f8.rootPath);
        const _0xe09dd9 = _0x15b9f8.importResolver.resolveImport(_0x15b9f8.rootPath, _0x231576, _0x31f6a1);
        if (_0x231576.pythonPlatform === 'web' || _0x231576.pythonPlatform === undefined) {
          return true;
        } else {
          return _0xe09dd9.isImportFound && (!_0xe09dd9.isStubPackage || _0xe09dd9.nonStubImportResult !== undefined);
        }
      }
      function _0x5c5c00(_0x232786, _0xc860cc, _0x50d612, _0x44eff4) {
        var _0x2e14fd;
        var _0x5b1cc8;
        const _0x4f92c5 = _0x2aba01.getOutermostEnclosingClassNameNode(_0x44eff4.node);
        const _0xf4ed44 = _0x4f92c5 ? _0x232786.evaluator.getType(_0x4f92c5) ?? _0x50d612 : _0x50d612;
        const _0x427848 = _0x425588.isClass(_0xf4ed44) && _0xf4ed44.priv.aliasName ? _0xf4ed44.priv.aliasName : (_0x4f92c5 === null || _0x4f92c5 === undefined ? undefined : _0x4f92c5.d.value) ?? _0x2d9557.getNameFromDeclaration(_0x44eff4);
        for (const _0x213ab9 of _0xc860cc.orderedImports) {
          if (_0x213ab9.node.nodeType !== 25) {
            continue;
          }
          if (_0x213ab9.node.d.isWildcardImport) {
            continue;
          }
          for (const _0x2afa56 of _0x213ab9.node.d.imports) {
            const _0x4749bb = _0x2afa56.d.alias ?? _0x2afa56.d.name;
            const _0x417906 = _0x232786.evaluator.getType(_0x4749bb);
            if (_0x417906 && _0x425588.TypeBase.isInstantiable(_0x417906) && _0x2c9fc1(_0xf4ed44, _0x417906)) {
              return {
                outermostName: _0x4749bb.d.value
              };
            }
          }
        }
        if (_0x427848) {
          for (const _0x342a92 of _0xc860cc.orderedImports) {
            if (_0x342a92.node.nodeType === 25) {
              for (const _0x2d801c of _0x342a92.node.d.imports) {
                const _0x4f2696 = _0x2d801c.d.alias ?? _0x2d801c.d.name;
                const _0x3961f0 = _0x41f514(_0x232786, _0x4f2696, ((_0x2e14fd = _0x2d801c.d.alias) === null || _0x2e14fd === undefined ? undefined : _0x2e14fd.d.value) ?? _0x2d801c.d.name.d.value, _0xf4ed44, _0x427848);
                if (_0x3961f0) {
                  return _0x3961f0;
                }
              }
            }
            if (_0x342a92.node.nodeType === 23) {
              const _0x475d73 = _0x342a92.subnode;
              if (!_0x475d73 || _0x475d73.d.module.d.nameParts.length <= 0) {
                continue;
              }
              const _0x3be7f1 = _0x475d73.d.alias ?? _0x475d73.d.module.d.nameParts[_0x475d73.d.module.d.nameParts.length - 1];
              const _0x19e401 = _0x41f514(_0x232786, _0x3be7f1, ((_0x5b1cc8 = _0x475d73.d.alias) === null || _0x5b1cc8 === undefined ? undefined : _0x5b1cc8.d.value) ?? _0x342a92.moduleName, _0xf4ed44, _0x427848);
              if (_0x19e401) {
                return _0x19e401;
              }
            }
          }
        }
        return undefined;
      }
      function _0x41f514(_0x53f9a5, _0xc78f45, _0x171c93, _0x458218, _0x31beae) {
        const _0x2a7fef = _0x53f9a5.evaluator.getType(_0xc78f45);
        if (_0x2a7fef) {
          if (!_0x425588.isModule(_0x2a7fef)) {
            return undefined;
          }
          return _0x2d0d62(_0x53f9a5, _0x2a7fef.priv.fileUri, _0x171c93, _0x458218, _0x31beae);
        }
        const _0x30732e = _0x53f9a5.evaluator.getDeclInfoForNameNode(_0xc78f45)?.decls;
        for (const _0x5a0f0f of _0x30732e ?? []) {
          if (!_0x56af04.isAliasDeclaration(_0x5a0f0f)) {
            continue;
          }
          if (_0x5a0f0f.submoduleFallback) {
            continue;
          }
          return _0x2d0d62(_0x53f9a5, _0x5a0f0f.uri, _0x171c93, _0x458218, _0x31beae);
        }
        return undefined;
      }
      function _0x2d0d62(_0x23e059, _0x26b5be, _0x4ecb0d, _0x3f8de9, _0x3fd8af) {
        const _0x2b149d = _0x23e059.getSourceFileInfo(_0x26b5be);
        if (!_0x2b149d) {
          return undefined;
        }
        _0x23e059.getParseResults(_0x26b5be);
        const _0x50eade = _0x2b149d.sourceFile.getModuleSymbolTable();
        if (!_0x50eade) {
          return undefined;
        }
        const _0x389c7b = _0x50eade.get(_0x3fd8af);
        if (_0x389c7b) {
          if (_0xfd148c(_0x23e059, _0x3f8de9, _0x389c7b)) {
            return {
              module: _0x4ecb0d,
              outermostName: _0x3fd8af
            };
          }
        }
        if (!_0x4c313a.isUserCode(_0x2b149d)) {
          return undefined;
        }
        for (const _0x1921c8 of _0x50eade) {
          const _0x430792 = _0x1921c8[0];
          const _0x225ff6 = _0x1921c8[1];
          if (_0x4c62be.isPrivateName(_0x430792) || _0x4c62be.isDunderName(_0x430792) || _0x225ff6.isExternallyHidden()) {
            continue;
          }
          if (_0xfd148c(_0x23e059, _0x3f8de9, _0x225ff6)) {
            return {
              module: _0x4ecb0d,
              outermostName: _0x430792
            };
          }
        }
        return undefined;
      }
      function _0xfd148c(_0x56983e, _0x47fa63, _0x2ea586) {
        return _0x2ea586.getDeclarations().some(_0x1f9af8 => {
          const _0xa9f118 = _0x56983e.evaluator.resolveAliasDeclaration(_0x1f9af8, true, {
            allowExternallyHiddenAccess: true,
            skipFileNeededCheck: true
          });
          if (!_0xa9f118) {
            return false;
          }
          if (_0x425588.isClass(_0x47fa63) && !_0x47fa63.priv.aliasName && !_0x47fa63.shared.fileUri.equals(_0xa9f118.uri)) {
            return false;
          }
          const _0x4b38e1 = _0x56983e.evaluator.getInferredTypeOfDeclaration(_0x2ea586, _0xa9f118);
          return _0x2c9fc1(_0x47fa63, _0x4b38e1);
        });
      }
      function _0x2c9fc1(_0x11a014, _0x535921) {
        if (_0x535921 === undefined) {
          return false;
        }
        if (_0x1a94db.isUnion(_0x11a014) && _0x1a94db.isUnion(_0x535921)) {
          return true;
        }
        _0x11a014 = _0x43c940(_0x11a014);
        _0x535921 = _0x43c940(_0x535921);
        if (_0x425588.isClass(_0x11a014) && _0x425588.isClass(_0x535921) && _0x425588.ClassType.isSameGenericClass(_0x425588.ClassType.cloneAsInstance(_0x11a014), _0x425588.ClassType.cloneAsInstance(_0x535921))) {
          return true;
        }
        return _0x425588.isTypeSame(_0x11a014, _0x535921, {
          ignoreTypeFlags: true
        });
      }
      function _0x43c940(_0xf0ae30) {
        if (_0x425588.isClass(_0xf0ae30)) {
          switch (_0xf0ae30.shared.fullName) {
            case 'typing.NoReturn':
              return _0x425588.NeverType.createNoReturn();
            case 'typing.Never':
              return _0x425588.NeverType.createNever();
          }
        }
        return _0xf0ae30;
      }
    },
    59133: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IndentationUtils = exports.DefaultEditorIndentConfig = undefined;
      const _0x1ae005 = require(41557);
      const _0xfee55c = require(58147);
      const _0x5a862e = require(56814);
      const _0x4ba097 = require(88754);
      const _0x58dd34 = __importStar(require(23981));
      const _0x51b778 = require(11855);
      exports.DefaultEditorIndentConfig = {
        defaultTabSequence: '    ',
        tabSize: 4
      };
      class _0x5c86b9 {
        constructor(_0x778899 = exports.DefaultEditorIndentConfig) {
          this._editorIndentConfig = _0x778899;
        }
        getNewlineIndentation(_0x4813be, _0x4f1f7a, _0x1b5ba3) {
          const _0x5d87de = this._tryHandleStringLiterals(_0x4813be, _0x4f1f7a);
          if (_0x5d87de !== undefined) {
            return _0x5d87de;
          }
          const _0x3124d4 = this._tryHandleMultilineConstructs(_0x4813be, _0x4f1f7a);
          if (_0x3124d4 !== undefined) {
            return _0x3124d4;
          }
          _0x1b5ba3 = _0x1b5ba3 ?? this._shouldDedentAfterKeyword(_0x4813be, _0x4f1f7a);
          return Math.max(this._getIndentation(_0x4813be, _0x4f1f7a, _0x1b5ba3).indentation, 0);
        }
        reindentSpan(_0x28f42f, _0x38e1f9, _0x25203b, _0x4a4cae = true) {
          let _0x402371 = 0;
          const _0x50a9a3 = [];
          const _0x4286ec = this._convertTokenStreams(_0x28f42f, _0x38e1f9);
          let _0x58b486 = _0x4286ec[0];
          _0x402371 = _0x25203b - this.getIndentationFromText(_0x28f42f, _0x58b486.range.start.line, _0x58b486.range.start.character).indentation;
          if (_0x58b486.multilineDocComment) {
            _0xfee55c.appendArray(_0x50a9a3, this._reindentLinesFromText(_0x28f42f, _0x58b486, _0x402371));
          } else {
            if (_0x4a4cae) {
              _0x50a9a3.push(this.createIndentationString(_0x28f42f, _0x25203b));
            }
            _0x50a9a3.push(_0x58b486.text);
          }
          for (let _0x40005f = 1; _0x40005f < _0x4286ec.length; _0x40005f++) {
            const _0x115837 = _0x4286ec[_0x40005f];
            if (_0x115837.firstTokenOnLine) {
              _0x50a9a3.push(_0x28f42f.tokenizerOutput.predominantEndOfLineSequence.repeat(_0x115837.range.start.line - _0x58b486.range.end.line));
              if (_0x115837.multilineDocComment) {
                _0xfee55c.appendArray(_0x50a9a3, this._reindentLinesFromText(_0x28f42f, _0x115837, _0x402371));
              } else {
                _0x50a9a3.push(this.createIndentationString(_0x28f42f, Math.max(0, this.getIndentationFromText(_0x28f42f, _0x115837.range.start.line, _0x115837.range.start.character).indentation + _0x402371)));
                _0x50a9a3.push(_0x115837.text);
              }
            } else {
              _0x50a9a3.push(' '.repeat(_0x115837.range.start.character - _0x58b486.range.end.character));
              _0x50a9a3.push(_0x115837.text);
            }
            _0x58b486 = _0x115837;
          }
          return {
            originalSpan: _0x4ba097.TextRange.combine(_0x4286ec),
            text: _0x50a9a3.join('')
          };
        }
        getModuleStatementIndentation(_0x368b6d) {
          if (_0x368b6d.parserOutput.parseTree.d.statements.length === 0) {
            return this.getNewlineIndentation(_0x368b6d, _0x368b6d.parserOutput.parseTree.length, true);
          }
          return this.getNewlineIndentation(_0x368b6d, _0x368b6d.parserOutput.parseTree.d.statements[0].start, true);
        }
        getMethodWithinClassIndentation(_0x5c60f5, _0x397520, _0xce3aa7) {
          const _0x16c8f5 = this.getIndentationFromText(_0x5c60f5, _0x397520).indentation;
          return this.createIndentationString(_0x5c60f5, _0x16c8f5 + _0xce3aa7);
        }
        findNonWhitespaceTokenAtOrBeforeOffset(_0x10521e, _0x39080e) {
          const _0x390db5 = _0x10521e.getItemAtPosition(_0x39080e);
          if (_0x390db5 < 0) {
            return undefined;
          }
          return this._findNonWhitespaceTokenAtOrBeforeIndex(_0x10521e, _0x390db5);
        }
        findCommentAtOrBeforeOffset(_0x25d547, _0x18b644) {
          const _0x189a09 = _0x25d547.getItemAtPosition(_0x18b644);
          let _0xdbce60 = _0x1ae005.getTokenAtIndex(_0x25d547, _0x189a09);
          if (!_0xdbce60) {
            return undefined;
          }
          let _0x1f51f5;
          if (_0x4ba097.TextRange.getEnd(_0xdbce60) < _0x18b644 && _0x189a09 < _0x25d547.count - 1) {
            _0xdbce60 = _0x1ae005.getTokenAtIndex(_0x25d547, _0x189a09 + 1);
            if (!_0xdbce60) {
              return undefined;
            }
            _0x1f51f5 = _0xdbce60.comments;
          } else {
            _0x1f51f5 = _0x1ae005.getCommentsAtTokenIndex(_0x25d547, _0x189a09);
          }
          if (_0x1f51f5) {
            for (let _0x166eac = _0x1f51f5.length - 1; _0x166eac >= 0; _0x166eac--) {
              const _0x5d5a7e = _0x1f51f5[_0x166eac];
              if (_0x5d5a7e.start < _0x18b644) {
                return _0x5d5a7e;
              }
            }
          }
          return undefined;
        }
        getIndentationFromText(_0xca267b, _0x2da236, _0x18dbb7) {
          let _0x32db0b = 0;
          let _0x2f03a0 = 0;
          let _0x27f108 = false;
          let _0x4ec179 = false;
          const _0x37dc3f = this._getTabSize(_0xca267b);
          const _0x3fc9b3 = _0xca267b.tokenizerOutput.lines.getItemAt(_0x2da236);
          for (let _0x4700ac = 0; _0x4700ac < _0x3fc9b3.length; _0x4700ac++) {
            const _0x5b745a = _0xca267b.text.charCodeAt(_0x3fc9b3.start + _0x4700ac);
            switch (_0x5b745a) {
              case 32:
                _0x2f03a0++;
                _0x32db0b++;
                _0x27f108 = true;
                break;
              case 9:
                _0x2f03a0++;
                _0x32db0b += _0x37dc3f;
                _0x4ec179 = true;
                break;
              default:
                if (!_0x18dbb7 || _0x18dbb7 === _0x4700ac) {
                  return {
                    charOffset: _0x2f03a0,
                    indentation: _0x32db0b,
                    containsSpaces: _0x27f108,
                    containsTabs: _0x4ec179
                  };
                }
                _0x2f03a0++;
                _0x32db0b++;
            }
          }
          return {
            charOffset: _0x2f03a0,
            indentation: _0x32db0b,
            containsSpaces: _0x27f108,
            containsTabs: _0x4ec179
          };
        }
        createIndentationString(_0x19b0c1, _0x3f24c9) {
          const _0x5252e9 = this.getTabSequence(_0x19b0c1);
          const _0x3072b1 = _0x5252e9.length;
          if (_0x3072b1 === 1 && _0x5252e9.charCodeAt(0) === 9) {
            const _0xa02043 = _0x3f24c9 % this._editorIndentConfig.tabSize;
            const _0xafe6dd = (_0x3f24c9 - _0xa02043) / this._editorIndentConfig.tabSize;
            return '\t'.repeat(_0xafe6dd) + ' '.repeat(_0xa02043);
          }
          return ' '.repeat(_0x3f24c9);
        }
        getTabSequence(_0x4929aa) {
          if (_0x4929aa.tokenizerOutput.hasPredominantTabSequence) {
            return _0x4929aa.tokenizerOutput.predominantTabSequence;
          } else {
            return this._editorIndentConfig.defaultTabSequence;
          }
        }
        getSliceFromText(_0x18f52c, _0x4df256, _0x47469d) {
          const _0x25d6d7 = _0x18f52c.text;
          const _0x37258a = _0x18f52c.tokenizerOutput.lines.getItemAt(_0x4df256);
          return _0x25d6d7.slice(_0x37258a.start, _0x37258a.start + _0x47469d);
        }
        _getIndentation(_0x223a25, _0x9f9231, _0x5decff) {
          const _0x3e81b4 = _0x223a25.tokenizerOutput.tokens;
          const _0xb5b27d = this.findNonWhitespaceTokenAtOrBeforeOffset(_0x3e81b4, _0x9f9231);
          if (!_0xb5b27d) {
            return {
              indentation: 0
            };
          }
          const _0x40c856 = _0x1ae005.findNodeByOffset(_0x223a25.parserOutput.parseTree, _0x4ba097.TextRange.getEnd(_0xb5b27d));
          if (!_0x40c856) {
            return {
              indentation: 0
            };
          }
          if (_0x40c856.nodeType === 63) {
            const _0x288e15 = this._getTabSize(_0x223a25);
            const _0x2b5d45 = _0x51b778.getContainer(_0x40c856, false);
            const _0xe5ac3c = this._getIndentationForNode(_0x223a25, _0x9f9231, _0x2b5d45 ?? _0x223a25.parserOutput.parseTree, _0x40c856);
            _0xe5ac3c.indentation += _0x288e15;
            return _0xe5ac3c;
          }
          const _0x58abe6 = _0x1ae005.getFirstAncestorOrSelfOfKind(_0x40c856, 50);
          if (!_0x58abe6) {
            return this._getIndentationForNode(_0x223a25, _0x9f9231, _0x223a25.parserOutput.parseTree, _0x40c856);
          }
          const _0x5be120 = _0x5a862e.convertTextRangeToRange(_0x58abe6, _0x223a25.tokenizerOutput.lines);
          if (_0x5decff || _0x5be120.start.line === _0x5be120.end.line && _0x58abe6.d.statements.length > 0) {
            const _0x4939a8 = _0x51b778.getContainer(_0x58abe6, false);
            return this._getIndentationForNode(_0x223a25, _0x9f9231, _0x4939a8 ?? _0x223a25.parserOutput.parseTree, _0x58abe6);
          }
          return this._getIndentationForNode(_0x223a25, _0x9f9231, _0x58abe6, _0x40c856);
        }
        _getIndentationForNode(_0x4b158c, _0x367a61, _0x33dee6, _0x9e99d9) {
          if (_0x33dee6.nodeType === 36) {
            return {
              token: this._getFirstTokenOfStatement(_0x4b158c, _0x33dee6, _0x9e99d9),
              indentation: 0
            };
          }
          if (_0x33dee6.nodeType === 63 || this._containsNoIndentBeforeFirstStatement(_0x4b158c, _0x367a61, _0x33dee6)) {
            const _0x445ba2 = this._getTabSize(_0x4b158c);
            const _0x285e2d = _0x51b778.getContainer(_0x33dee6, false);
            const _0x2c96e8 = this._getIndentationForNode(_0x4b158c, _0x367a61, _0x285e2d ?? _0x4b158c.parserOutput.parseTree, _0x33dee6);
            return {
              token: _0x2c96e8.token,
              indentation: _0x2c96e8.indentation + _0x445ba2
            };
          } else {
            const _0x48492f = _0x4b158c.tokenizerOutput.tokens;
            return {
              token: this._getFirstTokenOfStatement(_0x4b158c, _0x33dee6, _0x9e99d9),
              indentation: this._getIndentationFromIndentToken(_0x4b158c, _0x48492f.getItemAtPosition(_0x33dee6.start))
            };
          }
        }
        _containsNoIndentBeforeFirstStatement(_0x53c326, _0x5edcaf, _0x3482fa) {
          const _0x144daf = _0x3482fa.d.statements.filter(_0x3cc7e8 => _0x3cc7e8.length > 0);
          if (_0x144daf.length === 0) {
            return true;
          }
          if (_0x144daf.length === 1) {
            if (_0x144daf[0].nodeType !== 47 || _0x144daf[0].d.statements.length === 1) {
              if (_0x144daf[0].start >= _0x5edcaf) {
                const _0x3685e9 = _0x53c326.tokenizerOutput.lines.getItemAtPosition(_0x144daf[0].start);
                const _0x58e883 = _0x53c326.tokenizerOutput.lines.getItemAtPosition(_0x5edcaf);
                if (_0x3685e9 === _0x58e883) {
                  return true;
                }
              }
            }
          }
          const _0x11c57f = _0x53c326.tokenizerOutput.tokens;
          const _0x5eb42f = _0x11c57f.getItemAtPosition(_0x3482fa.start);
          const _0x21133c = _0x11c57f.getItemAtPosition(_0x3482fa.d.statements[0].start);
          for (let _0x460fe9 = _0x5eb42f; _0x460fe9 <= _0x21133c; _0x460fe9++) {
            const _0x5f0ba2 = _0x1ae005.getTokenAtIndex(_0x11c57f, _0x460fe9);
            if (_0x5f0ba2?.type === 3) {
              return false;
            }
          }
          return true;
        }
        _getFirstTokenOfStatement(_0x5872e2, _0x50dfb4, _0x5e6c79) {
          const _0x2a444e = _0x5872e2.tokenizerOutput.tokens;
          for (const _0x116487 of _0x50dfb4.d.statements) {
            if (!_0x4ba097.TextRange.containsRange(_0x116487, _0x5e6c79)) {
              continue;
            }
            return _0x1ae005.getTokenAt(_0x2a444e, _0x116487.start);
          }
          return _0x1ae005.getTokenAt(_0x2a444e, _0x50dfb4.start);
        }
        _getIndentationFromIndentToken(_0x1563dd, _0x5435c8) {
          const _0x22fb03 = _0x1563dd.tokenizerOutput.tokens;
          for (let _0x42f3de = _0x5435c8; _0x42f3de < _0x22fb03.count; _0x42f3de++) {
            const _0x477843 = _0x1ae005.getTokenAtIndex(_0x22fb03, _0x42f3de);
            if (_0x477843?.type === 3) {
              const _0x2672fd = this._getTabSize(_0x1563dd);
              let _0x20bcaf = 0;
              for (let _0xbade80 = 0; _0xbade80 < _0x477843.length; _0xbade80++) {
                const _0x1b6a76 = _0x1563dd.text.charCodeAt(_0x477843.start + _0xbade80);
                if (_0x1b6a76 === 9) {
                  _0x20bcaf += _0x2672fd;
                } else {
                  _0x20bcaf++;
                }
              }
              return _0x20bcaf;
            }
          }
          return 0;
        }
        _tryHandleMultilineConstructs(_0x38cb42, _0x3baa29) {
          const _0x22e963 = _0x38cb42.tokenizerOutput.tokens;
          const _0x56d28e = _0x38cb42.tokenizerOutput.lines;
          const _0x18532e = this._findNextTokenIndex(_0x22e963, _0x3baa29);
          if (_0x18532e < 0) {
            return undefined;
          }
          for (let _0x26dad6 = _0x18532e; _0x26dad6 > 0; _0x26dad6--) {
            const _0x587889 = _0x1ae005.getTokenAtIndex(_0x22e963, _0x26dad6);
            if (_0x4ba097.TextRange.getEnd(_0x587889) < _0x3baa29) {
              return undefined;
            }
            const _0x2e050f = _0x1ae005.getTokenAtIndex(_0x22e963, _0x26dad6 - 1);
            const _0x2e5714 = _0x587889 ? _0x5a862e.convertTextRangeToRange(_0x587889, _0x56d28e) : undefined;
            const _0x1a7be3 = _0x2e050f ? _0x5a862e.convertTextRangeToRange(_0x2e050f, _0x56d28e) : undefined;
            if (_0x2e5714 && _0x1a7be3 && _0x1a7be3.start.line < _0x2e5714.start.line && _0x2e050f.type !== 2) {
              return this._getIndentationForNextLine(_0x38cb42, _0x2e050f, _0x587889, _0x3baa29);
            }
          }
          return undefined;
        }
        _isWhitespaceString(_0xe7ed00, _0x826574, _0x4b3c48) {
          let _0x409c48;
          if (_0xe7ed00.type === 5) {
            _0x409c48 = _0x58dd34.getUnescapedString(_0xe7ed00);
          } else {
            if (_0xe7ed00.type === 26) {
              _0xe7ed00 = _0x826574.getItemAt(_0x4b3c48 - 1);
              _0x409c48 = _0x58dd34.getUnescapedString(_0xe7ed00);
            } else {
              if (_0xe7ed00.type === 25) {
                _0x409c48 = _0x58dd34.getUnescapedString(_0xe7ed00);
              }
            }
          }
          return _0x409c48 !== undefined && _0x409c48.value.trim().length === 0;
        }
        _tryHandleStringLiterals(_0x82222f, _0x19e1b3) {
          const _0x2dd64b = _0x82222f.tokenizerOutput.tokens;
          const _0x205f13 = _0x2dd64b.getItemAtPosition(_0x19e1b3);
          if (_0x205f13 < 0) {
            return undefined;
          }
          const _0x43887b = this._findStringToken(_0x2dd64b, _0x205f13);
          if (!_0x43887b || _0x43887b.type === 24) {
            return undefined;
          }
          if (_0x4ba097.TextRange.getEnd(_0x43887b) < _0x19e1b3) {
            return undefined;
          }
          if (!(_0x43887b.flags & 4)) {
            return undefined;
          }
          const _0x5f22e6 = _0x1ae005.findNodeByOffset(_0x82222f.parserOutput.parseTree, _0x19e1b3);
          const _0x4a8ab3 = _0x5f22e6 ? _0x1ae005.getParentNodeOfType(_0x5f22e6, 47) : undefined;
          if (!_0x4a8ab3 || !_0x1ae005.isDocString(_0x4a8ab3)) {
            if (this._isWhitespaceString(_0x43887b, _0x2dd64b, _0x205f13)) {
              return 0;
            }
            return undefined;
          }
          const _0x169fd9 = _0x82222f.tokenizerOutput.lines;
          const _0x5a76af = _0x5a862e.convertOffsetToPosition(_0x43887b.start, _0x169fd9);
          const _0x17945d = _0x5a862e.convertOffsetToPosition(_0x19e1b3, _0x169fd9);
          return this._getFirstNonBlankLineIndentationFromText(_0x82222f, _0x17945d.line, _0x5a76af.line);
        }
        _isOpenToken(_0x53865c) {
          return _0x53865c.type === 13 || _0x53865c.type === 15 || _0x53865c.type === 17;
        }
        _isCloseToken(_0x5282a7) {
          return _0x5282a7.type === 14 || _0x5282a7.type === 16 || _0x5282a7.type === 18;
        }
        _getIndentationForNextLine(_0x372b60, _0xff3eea, _0xfb9168, _0x24c75d) {
          const _0x493f72 = _0x372b60.tokenizerOutput.lines;
          const _0x136087 = _0x5a862e.convertOffsetToPosition(_0xff3eea.start, _0x493f72).line;
          const _0x274de1 = _0x493f72.getItemAt(_0x136087);
          const _0x3bf008 = this._getTabSize(_0x372b60);
          let _0x169c12 = _0xff3eea;
          let _0x3a0241 = true;
          let _0x4bc22e = 0;
          while (_0x169c12 && _0x169c12.start >= _0x274de1.start) {
            if (this._isCloseToken(_0x169c12)) {
              _0x3a0241 = false;
              _0x4bc22e += 1;
            } else {
              if (this._isOpenToken(_0x169c12) && _0x4bc22e === 0) {
                const _0x45d18e = _0x1ae005.findNodeByOffset(_0x372b60.parserOutput.parseTree, _0x169c12.start - 1);
                const _0x121894 = _0x1ae005.getFirstAncestorOrSelfOfKind(_0x45d18e, 31);
                if (_0x169c12.type === 13 && _0x3a0241 && _0x121894 && _0x5a862e.convertOffsetToPosition(_0x121894.start, _0x493f72).line === _0x136087) {
                  const _0x10d842 = this._getIndentation(_0x372b60, _0x169c12.start, false).indentation;
                  return _0x10d842 + _0x3bf008 * 2;
                } else {
                  if (_0x3a0241) {
                    const _0x44a98c = _0x5a862e.convertOffsetToPosition(_0x169c12.start, _0x493f72).line;
                    return this.getIndentationFromText(_0x372b60, _0x44a98c).indentation + _0x3bf008;
                  } else {
                    return _0x169c12.start - _0x274de1.start + 1;
                  }
                }
              } else {
                if (this._isOpenToken(_0x169c12) && _0x4bc22e > 0) {
                  _0x4bc22e--;
                  _0x3a0241 = false;
                } else {
                  if (!this._isWhitespaceToken(_0x169c12.type)) {
                    _0x3a0241 = false;
                  }
                }
              }
            }
            _0x169c12 = this.findNonWhitespaceTokenAtOrBeforeOffset(_0x372b60.tokenizerOutput.tokens, _0x169c12.start - 1);
          }
          return this._getFirstNonBlankLineIndentationFromText(_0x372b60, _0x5a862e.convertOffsetToPosition(_0x24c75d, _0x372b60.tokenizerOutput.lines).line, _0x136087);
        }
        _getFirstNonBlankLineIndentationFromText(_0x248daf, _0x19bdd5, _0x348d64) {
          _0x348d64 = Math.max(_0x348d64, 0);
          for (let _0x4ff9a4 = _0x19bdd5; _0x4ff9a4 >= _0x348d64; _0x4ff9a4--) {
            const _0x20a869 = this.getIndentationFromText(_0x248daf, _0x4ff9a4);
            if (!this._isBlankLine(_0x248daf, _0x4ff9a4, _0x20a869.charOffset)) {
              return _0x20a869.indentation;
            }
          }
          return this.getIndentationFromText(_0x248daf, _0x348d64).indentation;
        }
        _findStringToken(_0x524d12, _0x3939b4) {
          const _0x317a66 = this._findNonWhitespaceTokenAtOrBeforeIndex(_0x524d12, _0x3939b4);
          if (!_0x317a66) {
            return undefined;
          }
          switch (_0x317a66.type) {
            case 5:
            case 24:
            case 25:
            case 26:
              return _0x317a66;
            default:
              return undefined;
          }
        }
        _findNonWhitespaceTokenAtOrBeforeIndex(_0x37301b, _0x19969c) {
          for (let _0x5be072 = _0x19969c; _0x5be072 >= 0; _0x5be072--) {
            const _0x23aaf1 = _0x1ae005.getTokenAtIndex(_0x37301b, _0x5be072);
            if (!_0x23aaf1) {
              break;
            }
            if (this._isWhitespaceToken(_0x23aaf1.type)) {
              continue;
            }
            return _0x23aaf1;
          }
          return undefined;
        }
        _findNextTokenIndex(_0x47cc4f, _0x5e34c4) {
          const _0x5cd8a5 = _0x47cc4f.getItemAtPosition(_0x5e34c4);
          if (_0x5cd8a5 < 0) {
            return _0x5cd8a5;
          }
          for (let _0x46418d = _0x5cd8a5 + 1; _0x46418d < _0x47cc4f.count; _0x46418d++) {
            const _0x4623b9 = _0x1ae005.getTokenAtIndex(_0x47cc4f, _0x46418d);
            if (_0x4623b9?.type === 4 || _0x4623b9?.type === 2) {
              continue;
            }
            return _0x46418d;
          }
          return _0x47cc4f.count - 1;
        }
        _shouldDedentAfterKeyword(_0x2df814, _0x44d1ff) {
          const _0xf520f1 = _0x2df814.tokenizerOutput.tokens;
          const _0x224be4 = _0xf520f1.getItemAtPosition(_0x44d1ff);
          if (_0x224be4 < 0) {
            return false;
          }
          for (let _0x2d68c4 = _0x224be4; _0x2d68c4 >= 0; _0x2d68c4--) {
            const _0x20da3f = _0x1ae005.getTokenAtIndex(_0xf520f1, _0x2d68c4);
            if (!_0x20da3f) {
              return false;
            }
            switch (_0x20da3f.type) {
              case 4:
              case 2:
              case 1:
                continue;
              case 8:
                {
                  const _0x35a89c = _0x1ae005.getTokenAtIndex(_0xf520f1, _0x2d68c4 - 1);
                  if (_0x35a89c?.type === 10) {
                    return false;
                  }
                  const _0x278e5c = _0x20da3f;
                  if (_0x278e5c.keywordType === 30 || _0x278e5c.keywordType === 32 || _0x278e5c.keywordType === 5 || _0x278e5c.keywordType === 8 || _0x278e5c.keywordType === 31) {
                    return true;
                  }
                  if (_0x278e5c.keywordType !== 33 && _0x278e5c.keywordType !== 15 && _0x278e5c.keywordType !== 26 && _0x278e5c.keywordType !== 9) {
                    return false;
                  }
                }
            }
            const _0x38518b = _0x1ae005.findNodeByOffset(_0x2df814.parserOutput.parseTree, _0x20da3f.start);
            const _0x49b87e = _0x1ae005.getFirstAncestorOrSelf(_0x38518b, _0x3d4e7e => _0x3d4e7e.nodeType === 44 || _0x3d4e7e.nodeType === 43);
            return !!_0x49b87e;
          }
          return false;
        }
        _isBlankLine(_0x248c16, _0x5a8394, _0x499d6c) {
          const _0x28f67a = this._getLineEndingLength(_0x248c16, _0x5a8394);
          const _0x5c26bc = _0x248c16.tokenizerOutput.lines.getItemAt(_0x5a8394);
          return _0x499d6c === _0x5c26bc.length - _0x28f67a;
        }
        _getLineEndingLength(_0x2f3b20, _0x1e748e) {
          let _0x2e44d3 = 0;
          const _0x2a9421 = _0x2f3b20.tokenizerOutput.lines.getItemAt(_0x1e748e);
          for (let _0x599101 = _0x2a9421.length - 1; _0x599101 >= 0; _0x599101--) {
            const _0x2dafac = _0x2f3b20.text.charCodeAt(_0x2a9421.start + _0x599101);
            switch (_0x2dafac) {
              case 12:
              case 35:
              case 10:
              case 13:
                _0x2e44d3++;
                break;
              default:
                return _0x2e44d3;
            }
          }
          return _0x2e44d3;
        }
        _convertTokenStreams(_0x4e7a6c, _0x33ab3a) {
          const _0x5043d2 = _0x4e7a6c.tokenizerOutput.tokens;
          let _0x4c0898 = Math.max(_0x5043d2.getItemAtPosition(_0x33ab3a.start), 0);
          const _0x33cb4d = _0x1ae005.getTokenAtIndex(_0x5043d2, _0x4c0898);
          if (_0x4ba097.TextRange.getEnd(_0x33cb4d) < _0x33ab3a.start) {
            _0x4c0898++;
          }
          let _0x5bcdf0 = Math.min(_0x5043d2.getItemAtPosition(_0x4ba097.TextRange.getEnd(_0x33ab3a)), _0x5043d2.length - 1);
          const _0x20f634 = _0x1ae005.getTokenAtIndex(_0x5043d2, _0x5bcdf0);
          if (_0x4ba097.TextRange.getEnd(_0x33ab3a) <= _0x20f634.start) {
            _0x5bcdf0--;
          }
          if (_0x5bcdf0 < _0x5043d2.length - 1 && this._isWhitespaceToken(_0x5043d2.getItemAt(_0x5bcdf0 + 1).type)) {
            _0x5bcdf0++;
          }
          const _0x12e0ad = [];
          const _0x59c5b1 = _0x4e7a6c.tokenizerOutput.lines;
          for (let _0x734606 = _0x4c0898; _0x734606 <= _0x5bcdf0; _0x734606++) {
            const _0x265826 = _0x1ae005.getTokenAtIndex(_0x5043d2, _0x734606);
            if (_0x265826.comments) {
              for (const _0x3a2c68 of _0x265826.comments) {
                _0x12e0ad.push({
                  start: _0x3a2c68.start,
                  length: _0x3a2c68.length,
                  range: _0x5a862e.convertTextRangeToRange(_0x3a2c68, _0x59c5b1),
                  text: _0x3a2c68.value,
                  kind: 'comment',
                  firstTokenOnLine: false,
                  multilineDocComment: false
                });
              }
            }
            if (this._isWhitespaceToken(_0x265826.type) || _0x265826.length === 0) {
              continue;
            }
            _0x12e0ad.push({
              start: _0x265826.start,
              length: _0x265826.length,
              range: _0x5a862e.convertTextRangeToRange(_0x265826, _0x59c5b1),
              text: _0x4e7a6c.text.substr(_0x265826.start, _0x265826.length),
              kind: _0x265826.type === 5 ? 'string' : 'token',
              firstTokenOnLine: false,
              multilineDocComment: false
            });
          }
          if (_0x12e0ad.length === 0) {
            return _0x12e0ad;
          }
          _0x12e0ad.sort((_0x1ac9e5, _0x2bf5bd) => _0x1ac9e5.start - _0x2bf5bd.start);
          let _0x5835e9 = _0x12e0ad[0];
          const _0x56d2d9 = [];
          if (_0x5835e9.kind === 'comment') {
            const _0x36da31 = _0x4c0898 === 0 ? 0 : _0x4ba097.TextRange.getEnd(_0x1ae005.getTokenAtIndex(_0x5043d2, _0x4c0898 - 1));
            this._addTokenInfoIfMatch(_0x4e7a6c, _0x36da31, _0x5835e9.start, 35, _0x56d2d9);
          }
          for (let _0x32758d = 1; _0x32758d < _0x12e0ad.length; _0x32758d++) {
            const _0x5eee27 = _0x12e0ad[_0x32758d];
            if (_0x5835e9.kind !== 'comment') {
              for (let _0x3c5d33 = _0x5835e9.range.end.line; _0x3c5d33 < _0x5eee27.range.start.line; _0x3c5d33++) {
                const _0x55cf12 = _0x59c5b1.getItemAt(_0x3c5d33);
                const _0x32dc57 = _0x55cf12.length - this._getLineEndingLength(_0x4e7a6c, _0x3c5d33) - 1;
                if (_0x32dc57 >= 0) {
                  const _0x23c945 = _0x55cf12.start + _0x32dc57;
                  this._addTokenInfoIfMatch(_0x4e7a6c, _0x23c945, _0x23c945 + 1, 92, _0x56d2d9);
                }
              }
            }
            if (_0x5eee27.kind === 'comment') {
              const _0x449b08 = _0x5835e9.range.end.line === _0x5eee27.range.start.line ? _0x4ba097.TextRange.getEnd(_0x5835e9) : _0x59c5b1.getItemAt(_0x5eee27.range.start.line).start;
              this._addTokenInfoIfMatch(_0x4e7a6c, _0x449b08, _0x5eee27.start, 35, _0x56d2d9);
            }
            _0x5835e9 = _0x5eee27;
          }
          _0xfee55c.appendArray(_0x12e0ad, _0x56d2d9);
          _0x12e0ad.sort((_0x303e58, _0x3ef64e) => _0x303e58.start - _0x3ef64e.start);
          _0x5835e9 = _0x12e0ad[0];
          if (_0x4c0898 === 0) {
            _0x5835e9.firstTokenOnLine = true;
          } else {
            const _0x45f8c0 = this._findNonWhitespaceTokenAtOrBeforeIndex(_0x5043d2, _0x4c0898 - 1);
            if (_0x45f8c0) {
              const _0x5c201a = _0x5a862e.convertOffsetToPosition(_0x4ba097.TextRange.getEnd(_0x45f8c0), _0x59c5b1);
              _0x5835e9.firstTokenOnLine = _0x5c201a.line !== _0x5835e9.range.start.line;
            } else {
              _0x5835e9.firstTokenOnLine = true;
            }
          }
          _0x5835e9.multilineDocComment = this._isMultilineDocComment(_0x4e7a6c.parserOutput, _0x5835e9);
          for (let _0x3a8518 = 1; _0x3a8518 < _0x12e0ad.length; _0x3a8518++) {
            const _0x479057 = _0x12e0ad[_0x3a8518];
            _0x479057.firstTokenOnLine = _0x5835e9.range.end.line !== _0x479057.range.start.line;
            _0x479057.multilineDocComment = this._isMultilineDocComment(_0x4e7a6c.parserOutput, _0x479057);
            _0x5835e9 = _0x479057;
          }
          return _0x12e0ad;
        }
        _addTokenInfoIfMatch(_0x2c6c91, _0x49167e, _0x4c6f2d, _0x36e398, _0x5a25e4) {
          for (let _0x5b33fd = _0x49167e; _0x5b33fd < _0x4c6f2d; _0x5b33fd++) {
            if (_0x2c6c91.text.charCodeAt(_0x5b33fd) === _0x36e398) {
              _0x5a25e4.push({
                start: _0x5b33fd,
                length: 1,
                range: _0x5a862e.convertTextRangeToRange(_0x4ba097.TextRange.create(_0x5b33fd, 1), _0x2c6c91.tokenizerOutput.lines),
                text: String.fromCharCode(_0x36e398),
                kind: 'token',
                firstTokenOnLine: false,
                multilineDocComment: false
              });
            }
          }
        }
        _isWhitespaceToken(_0x360d78) {
          switch (_0x360d78) {
            case 4:
            case 2:
            case 3:
            case 1:
              return true;
            default:
              return false;
          }
        }
        _isMultilineDocComment(_0x3fc7f4, _0x1804f7) {
          if (_0x1804f7.kind !== 'string' || !_0x1804f7.firstTokenOnLine || _0x1804f7.range.start.line === _0x1804f7.range.end.line) {
            return false;
          }
          const _0x152d98 = _0x1ae005.findNodeByOffset(_0x3fc7f4.parseTree, _0x1804f7.start);
          if (_0x152d98?.nodeType !== 49 || _0x152d98.parent?.nodeType !== 48 || _0x152d98.parent.parent?.nodeType !== 47) {
            return false;
          }
          return _0x1ae005.isDocString(_0x152d98.parent.parent);
        }
        _reindentLinesFromText(_0x5e6c63, _0x5283a1, _0x3ce38a) {
          const _0x3f8161 = [];
          for (let _0x4d2ddc = _0x5283a1.range.start.line; _0x4d2ddc <= _0x5283a1.range.end.line; _0x4d2ddc++) {
            _0x3f8161.push(this._reindentLineFromText(_0x5e6c63, _0x4d2ddc, _0x3ce38a, _0x4d2ddc === _0x5283a1.range.end.line ? _0x5283a1 : undefined));
          }
          return _0x3f8161;
        }
        _reindentLineFromText(_0x2f1e21, _0x4aaf34, _0x490e2c, _0x49c958) {
          const _0x5e9168 = this.getIndentationFromText(_0x2f1e21, _0x4aaf34);
          let _0x3673bb = _0x2f1e21.tokenizerOutput.lines.getItemAt(_0x4aaf34);
          if (_0x49c958) {
            _0x3673bb = _0x4ba097.TextRange.fromBounds(_0x3673bb.start, Math.min(_0x4ba097.TextRange.getEnd(_0x49c958), _0x4ba097.TextRange.getEnd(_0x3673bb)));
          }
          const _0x5d457b = _0x2f1e21.text.substr(_0x3673bb.start + _0x5e9168.charOffset, _0x3673bb.length - _0x5e9168.charOffset);
          if (this._isBlankLine(_0x2f1e21, _0x4aaf34, _0x5e9168.charOffset)) {
            return _0x5d457b;
          }
          return this.createIndentationString(_0x2f1e21, Math.max(_0x5e9168.indentation + _0x490e2c, 0)) + _0x5d457b;
        }
        _getTabSize(_0x198594) {
          const _0x58cf60 = this.getTabSequence(_0x198594);
          const _0x58f5ce = _0x58cf60.length;
          if (_0x58f5ce === 1 && _0x58cf60.charCodeAt(0) === 9) {
            return this._editorIndentConfig.tabSize;
          }
          return _0x58f5ce;
        }
      }
      exports.IndentationUtils = _0x5c86b9;
    },
    11855: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getInsertionPointForSymbolUnderModule = _0x396d95;
      exports.getContainer = _0x6f1864;
      const _0x2980f6 = require(26687);
      const _0x3cef07 = require(83760);
      const _0x577d9c = require(41557);
      const _0x4e78ba = require(12097);
      const _0x2923c1 = require(34455);
      const _0x6aa81e = require(56814);
      const _0x41b06a = require(88754);
      function _0x396d95(_0x2816b5, _0xbb3833, _0x1fbc69, _0x64df4c) {
        const _0x3725e9 = _0xbb3833.parserOutput.parseTree;
        const _0x2c593f = _0x511703(_0xbb3833);
        if (_0x3725e9.d.statements.length === 0) {
          if (_0x2923c1.containsOnlyWhitespace(_0xbb3833.text)) {
            return 0;
          } else {
            return _0x2c593f;
          }
        }
        const _0x47289a = _0x2980f6.getScope(_0x3725e9);
        if (!_0x47289a) {
          return _0x2c593f;
        }
        const _0x1de61c = _0x2980f6.getFileInfo(_0x3725e9);
        const _0x43c001 = _0x47289a.lookUpSymbol(_0x1fbc69);
        if (_0x43c001 && _0x24e230(_0x2816b5, _0x43c001.getDeclarations(), _0x1de61c.fileUri, _0x64df4c).length > 0) {
          return undefined;
        }
        const _0x49c1f5 = _0x64df4c?.insertBefore ?? _0x2c593f;
        if (_0x4e78ba.isPrivateName(_0x1fbc69)) {
          return Math.max(0, _0x49c1f5);
        }
        if (_0x49c1f5 < _0x41b06a.TextRange.getEnd(_0x3725e9.d.statements[0])) {
          return Math.max(0, Math.min(_0x49c1f5, _0x3725e9.d.statements[0].start));
        }
        const _0x598f01 = _0x1947e4(_0x3725e9.d.statements, _0x64df4c?.insertBefore ?? _0x2c593f);
        const _0x72177e = _0x6aa81e.convertOffsetToPosition(_0x41b06a.TextRange.getEnd(_0x598f01), _0xbb3833.tokenizerOutput.lines);
        return _0x6aa81e.getLineEndOffset(_0xbb3833.tokenizerOutput, _0xbb3833.text, _0x72177e.line);
      }
      function _0x6f1864(_0x469d07, _0x5ac4ce = true) {
        return _0x577d9c.getFirstAncestorOrSelf(_0x469d07, _0x1b8da2 => {
          if (!_0x5ac4ce && _0x469d07 === _0x1b8da2) {
            return false;
          }
          return _0x1b8da2.nodeType === 50 || _0x1b8da2.nodeType === 63;
        });
      }
      function _0x511703(_0x3f7e2d) {
        var _0xc07bce;
        const _0xc9504f = _0x41b06a.TextRange.getEnd(_0x3f7e2d.parserOutput.parseTree);
        const _0x15ee28 = _0x6aa81e.convertOffsetToPosition(_0xc9504f, _0x3f7e2d.tokenizerOutput.lines);
        if (_0x15ee28.character === 0) {
          return _0xc9504f;
        }
        if (_0x577d9c.isBlankLine(_0x3f7e2d.tokenizerOutput, _0x3f7e2d.text, _0x15ee28.line)) {
          if ((_0xc07bce = _0x6aa81e.convertPositionToOffset({
            line: _0x15ee28.line,
            character: 0
          }, _0x3f7e2d.tokenizerOutput.lines)) !== null && _0xc07bce !== undefined) {
            return _0xc07bce;
          } else {
            return _0xc9504f;
          }
        }
        return _0xc9504f;
      }
      function _0x24e230(_0xb71dfd, _0x39f8eb, _0x2fb954, _0x9422ce) {
        return _0x39f8eb.filter(_0x57b2e6 => {
          const _0x51e5bb = _0xb71dfd.resolveAliasDeclaration(_0x57b2e6, true, {
            allowExternallyHiddenAccess: true
          });
          if (!_0x51e5bb) {
            return false;
          }
          if (_0x9422ce?.symbolDeclToIgnore && _0x51e5bb.uri.equals(_0x9422ce.symbolDeclToIgnore)) {
            return false;
          }
          if (_0x57b2e6.type === 8) {
            const _0xa16b39 = _0x3cef07.getNameNodeForDeclaration(_0x57b2e6);
            if (!_0xa16b39) {
              return false;
            }
            const _0xdc4dc1 = _0x2980f6.getFileInfo(_0xa16b39);
            return _0xdc4dc1.fileUri.equals(_0x2fb954);
          }
          return _0x51e5bb.uri.equals(_0x2fb954);
        });
      }
      function _0x1947e4(_0x588ea2, _0x52fe9e) {
        let _0x3cc0ff = _0x588ea2[0];
        for (let _0x209850 = 1; _0x209850 < _0x588ea2.length; _0x209850++) {
          const _0x27ee63 = _0x588ea2[_0x209850];
          if (_0x52fe9e < _0x41b06a.TextRange.getEnd(_0x27ee63)) {
            return _0x3cc0ff;
          }
          switch (_0x27ee63.nodeType) {
            case 10:
            case 31:
              {
                if (_0x4e78ba.isPrivateName(_0x27ee63.d.name.d.value)) {
                  return _0x3cc0ff;
                }
                _0x3cc0ff = _0x27ee63;
                continue;
              }
            case 47:
              {
                if (_0x27ee63.d.statements.some(_0x302182 => _0x302182.nodeType === 3 && _0x302182.d.leftExpr.nodeType === 38 && _0x4e78ba.isPrivateName(_0x302182.d.leftExpr.d.value))) {
                  return _0x3cc0ff;
                }
                _0x3cc0ff = _0x27ee63;
                continue;
              }
            default:
              _0x3cc0ff = _0x27ee63;
              continue;
          }
        }
        return _0x3cc0ff;
      }
    },
    22669: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.createReanalysisTimeProviderFromWorkspace = _0x2b51fe;
      exports.createReanalysisTimeProvider = _0xb3da7d;
      const _0x17b5f2 = require(30741);
      const _0x3f7f83 = 5000;
      const _0x41156d = 10000;
      const _0x25c8fb = 1200000;
      function _0x2b51fe(_0x5286a6, _0x5c8c78) {
        const _0x120f8c = _0x5c8c78.length === 1 && _0x5c8c78[0] === _0x17b5f2.WellKnownWorkspaceKinds.Regular ? _0x5286a6.hasMultipleWorkspaces(_0x5c8c78[0]) ? _0x41156d : _0x3f7f83 : _0x3f7f83;
        return _0xb3da7d(_0x120f8c);
      }
      function _0xb3da7d(_0x4f41c0) {
        let _0x333860 = _0x4f41c0;
        let _0x31707a = false;
        const _0x373900 = () => _0x333860;
        _0x373900.libraryReanalysisStarted = () => {
          _0x31707a = true;
        };
        _0x373900.libraryUpdated = _0xbc56a => {
          if (!_0xbc56a) {
            if (_0x31707a) {
              _0x333860 = _0x4f41c0;
            }
            return;
          }
          if (_0x31707a) {
            _0x333860 = Math.min(_0x333860 * 2, _0x25c8fb);
          }
          _0x31707a = false;
        };
        return _0x373900;
      }
    },
    96662: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.licenseErrorText = undefined;
      exports.licenseErrorText = ['You may install and use any number of copies of the software only with Microsoft Visual Studio,', 'Visual Studio for Mac, Visual Studio Code, Azure DevOps, Team Foundation Server, and successor Microsoft products', 'and services (collectively, the “Visual Studio Products and Services”) to develop and test your applications.', 'The software is licensed, not sold. This agreement only gives you some rights to use the software. Microsoft reserves all other rights.', 'You may not:', 'work around any technical limitations in the software that only allow you to use it in certain ways;', 'reverse engineer, decompile or disassemble the software, or otherwise attempt to derive the source code for the software,', 'except and to the extent required by third party licensing terms governing use of certain open source components that may be included in the software;', 'remove, minimize, block, or modify any notices of Microsoft or its suppliers in the software;', 'use the software in any way that is against the law or to create or propagate malware; or', 'share, publish, distribute, or lease the software (except for any distributable code, subject to the terms above),', 'provide the software as a stand-alone offering for others to use, or transfer the software or this agreement to any third party.'].join(' ');
    },
    65409: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LogService = undefined;
      const _0x79a5d6 = require(25075);
      class _0x16ad79 {
        constructor(_0x11e1bf) {
          this._console = _0x11e1bf;
        }
        get level() {
          return this._console.level;
        }
        log(_0x23cc73, _0x4e2a33) {
          _0x79a5d6.log(this._console, _0x23cc73, _0x4e2a33);
        }
      }
      exports.LogService = _0x16ad79;
      (function (_0x472f31) {
        function _0xd78b66(_0x3c89a5) {
          return _0x3c89a5 instanceof _0x472f31;
        }
        _0x472f31.is = _0xd78b66;
      })(_0x16ad79 || (exports.LogService = _0x16ad79 = {}));
    },
    61231: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LSPService = undefined;
      const _0x4713dd = require(27130);
      const _0x217ff4 = require(95349);
      const _0x5ead62 = require(15986);
      var _0x4e3fe5;
      (function (_0x14e6d6) {
        function _0x2034ae(_0x3e2811) {
          return _0x3e2811 && !!_0x3e2811.title && !!_0x3e2811.__client__;
        }
        _0x14e6d6.is = _0x2034ae;
      })(_0x4e3fe5 ||= {});
      class _0x1f1661 {
        constructor(_0x16ae5d) {
          this._connection = _0x16ae5d;
        }
        showErrorMessage(_0x3f321a, ..._0x36b21d) {
          if (_0x36b21d.some(_0x4f49ca => _0x4e3fe5.is(_0x4f49ca))) {
            return _0x217ff4.CustomLSP.sendRequest(this._connection, _0x217ff4.CustomLSP.Requests.ClientShowMessage, {
              type: 'error',
              message: _0x3f321a,
              actions: _0x36b21d
            });
          }
          return this._connection.window.showErrorMessage(_0x3f321a, ..._0x36b21d);
        }
        showWarningMessage(_0x4b56cf, ..._0x19e5b4) {
          if (_0x19e5b4.some(_0x3cd278 => _0x4e3fe5.is(_0x3cd278))) {
            return _0x217ff4.CustomLSP.sendRequest(this._connection, _0x217ff4.CustomLSP.Requests.ClientShowMessage, {
              type: 'warning',
              message: _0x4b56cf,
              actions: _0x19e5b4
            });
          }
          return this._connection.window.showWarningMessage(_0x4b56cf, ..._0x19e5b4);
        }
        showInformationMessage(_0x20eef8, ..._0x26dcfb) {
          if (_0x26dcfb.some(_0xf931c4 => _0x4e3fe5.is(_0xf931c4))) {
            return _0x217ff4.CustomLSP.sendRequest(this._connection, _0x217ff4.CustomLSP.Requests.ClientShowMessage, {
              type: 'information',
              message: _0x20eef8,
              actions: _0x26dcfb
            });
          }
          return this._connection.window.showInformationMessage(_0x20eef8, ..._0x26dcfb);
        }
        sendCommand(_0x5a4ca3, ..._0x2ef975) {
          _0x217ff4.CustomLSP.sendNotification(this._connection, _0x217ff4.CustomLSP.Notifications.ExecuteCommand, {
            command: _0x5a4ca3,
            args: _0x2ef975
          });
        }
        createGoToOutputAction() {
          const _0x3e2fc8 = {
            __client__: true,
            title: _0x5ead62.Localizer.Commands.gotoOutputCommand(),
            id: _0x4713dd.ClientCommands.gotoOutputChannel
          };
          return _0x3e2fc8;
        }
        createOpenUriAction(_0x4b1459, _0x4b8e6c) {
          const _0x50884e = {
            __client__: true,
            title: _0x4b1459,
            id: _0x4713dd.ClientCommands.openUri,
            args: [_0x4b8e6c]
          };
          return _0x50884e;
        }
        sendRequest(_0x2fea45, _0xb538be) {
          return _0x217ff4.CustomLSP.sendRequest(this._connection, _0x217ff4.CustomLSP.Requests.PromptLanguageModel, {
            prompts: _0x2fea45
          }, _0xb538be);
        }
      }
      exports.LSPService = _0x1f1661;
    },
    585: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LspTelemetryThrottler = undefined;
      const _0x1abdb2 = require(91426);
      const _0x4289dd = require(34455);
      const _0x4c6f65 = require(99504);
      const _0x3f23b4 = require(62470);
      class _0x1970b2 {
        constructor() {
          this._nextWindow = 0;
          this._eventCount = 0;
          this._globalDebounce = 3600000;
          this._globalLimit = 100;
          this._lastCaptured = new Map();
          this._debounceFrequentCall = 300000;
          this._debounceRareCall = 60000;
          this._rareMessages = new Set(['textDocument/declaration', 'textDocument/definition', 'textDocument/documentSymbol', 'textDocument/prepareRename', 'textDocument/references', 'textDocument/rename', 'workspace/symbol']);
        }
        maybeSendTelemetry(_0x55a74b, _0x1a5fb0, _0x2778a9, _0x3980f6, _0x325968, _0x30036e) {
          const _0x561b4a = Date.now();
          const _0x662181 = new _0x3f23b4.StopWatch();
          if (_0x561b4a > this._nextWindow) {
            this._nextWindow = _0x561b4a + this._globalDebounce;
            this._eventCount = 0;
          }
          const _0x2080cb = (_0x5df441, _0x3d11a3) => {
            const _0xb561da = this._rareMessages.has(_0x55a74b) ? this._debounceRareCall : this._debounceFrequentCall;
            const _0x591664 = this._lastCaptured.get(_0x55a74b);
            if (_0x3d11a3 || _0x2778a9() && this._eventCount < this._globalLimit && (!_0x591664 || _0x561b4a - _0x591664 > _0xb561da)) {
              this._lastCaptured.set(_0x55a74b, _0x561b4a);
              this._eventCount += 1;
              const _0x531eb6 = _0x55a74b.replace(/\//g, '.');
              let _0x1daeaa = {
                duration: _0x662181.elapsedTime
              };
              if (_0x325968) {
                _0x1daeaa = {
                  ..._0x1daeaa,
                  ..._0x325968(this, _0x5df441)
                };
              }
              let _0x1d5ab8 = {
                lsVersion: _0x4c6f65.VERSION,
                method: _0x531eb6
              };
              if (_0x3d11a3) {
                _0x1d5ab8.failed = _0x3d11a3;
              }
              if (_0x30036e) {
                _0x1d5ab8 = {
                  ..._0x1d5ab8,
                  ..._0x30036e(this, _0x5df441)
                };
              }
              _0x3980f6(_0x1daeaa, _0x1d5ab8);
            }
            return _0x5df441;
          };
          try {
            const _0x5bc0d1 = _0x1a5fb0();
            if (_0x4289dd.isThenable(_0x5bc0d1)) {
              return _0x5bc0d1.then(_0x2080cb).catch(_0x269244 => {
                if (!_0x1abdb2.OperationCanceledException.is(_0x269244)) {
                  _0x2080cb(undefined, _0x269244);
                }
                throw _0x269244;
              });
            }
            return _0x2080cb(_0x5bc0d1);
          } catch (_0x51f7a5) {
            if (!_0x1abdb2.OperationCanceledException.is(_0x51f7a5)) {
              _0x2080cb(undefined, _0x51f7a5);
            }
            throw _0x51f7a5;
          }
        }
      }
      exports.LspTelemetryThrottler = _0x1970b2;
    },
    4250: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.hasMagicMethodForOperator = _0x439a23;
      exports.hasMagicMethodForKeyword = _0x2fd44d;
      exports.hasMagicMethodForIdentifier = _0x124075;
      exports.getMagicMethodInfoForOperator = _0x46d390;
      exports.getMagicMethodInfoForKeyword = _0x4a6ae9;
      exports.getMagicMethodInfoForIdentifier = _0x3b84cb;
      exports.getMagicMethodNamesForOperator = _0x5e6453;
      exports.isMagicMethodFromBuiltinTypes = _0x5d9d56;
      const _0x36932b = require(41557);
      const _0x185855 = require(21024);
      const _0x134088 = require(92324);
      const _0x32af4f = require(88754);
      const _0x3a662b = new Map([[0, ['__add__', '__radd__']], [33, ['__sub__', '__rsub__']], [26, ['__mul__', '__rmul__']], [10, ['__truediv__', '__rtruediv__']], [13, ['__floordiv__', '__rfloordiv__']], [24, ['__mod__', '__rmod__']], [29, ['__pow__', '__rpow__']], [17, ['__lshift__', '__rlshift__']], [31, ['__rshift__', '__rrshift__']], [3, ['__and__', '__rand__']], [8, ['__xor__', '__rxor__']], [6, ['__or__', '__ror__']], [20, ['__lt__', '__gt__']], [21, ['__le__', '__ge__']], [12, ['__eq__', '__eq__']], [28, ['__ne__', '__ne__']], [15, ['__gt__', '__lt__']], [16, ['__ge__', '__le__']], [22, ['__matmul__', '__rmatmul__']], [23, ['__imatmul__']]]);
      const _0x2ef57e = new Map([[0, ['__pos__']], [33, ['__neg__']], [5, ['__invert__']]]);
      const _0x2aaa06 = new Map([[1, ['__iadd__']], [34, ['__isub__']], [27, ['__imul__']], [11, ['__itruediv__']], [14, ['__ifloordiv__']], [25, ['__imod__']], [30, ['__ipow__']], [18, ['__ilshift__']], [32, ['__irshift__']], [4, ['__iand__']], [9, ['__ixor__']], [7, ['__ior__']]]);
      const _0x160aa1 = new Map([[22, ['__contains__']], [28, ['__contains__']]]);
      const _0x5734d7 = new Map([['repr', {
        name: '__repr__',
        argIndex: 0
      }], ['str', {
        name: '__str__',
        argIndex: 0
      }], ['print', {
        name: '__str__',
        argIndex: 0
      }], ['bytes', {
        name: '__bytes__',
        argIndex: 0
      }], ['format', {
        name: '__format__',
        argIndex: 0
      }], ['hash', {
        name: '__hash__',
        argIndex: 0
      }], ['bool', {
        name: '__bool__',
        argIndex: 0
      }], ['dir', {
        name: '__dir__',
        argIndex: 0
      }], ['len', {
        name: '__len__',
        argIndex: 0
      }], ['reversed', {
        name: '__reversed__',
        argIndex: 0
      }], ['next', {
        name: '__next__',
        argIndex: 0
      }], ['divmod', {
        name: '__divmod__',
        argIndex: 0
      }], ['pow', {
        name: '__pow__',
        argIndex: 0
      }], ['abs', {
        name: '__abs__',
        argIndex: 0
      }], ['round', {
        name: '__round__',
        argIndex: 0
      }], ['complex', {
        name: '__complex__',
        argIndex: 0
      }], ['float', {
        name: '__float__',
        argIndex: 0
      }], ['int', {
        name: '__int__',
        argIndex: 0
      }], ['isinstance', {
        name: '__instancecheck__',
        argIndex: 1,
        useMeta: true
      }]]);
      function _0x439a23(_0x58f591, _0x4c8e5d) {
        const _0x192dbd = _0x5e6453(_0x4c8e5d);
        if (!_0x192dbd) {
          return false;
        }
        const _0x6f41ab = _0x40ad29(_0x58f591, _0x56cdf1(_0x4c8e5d), _0x192dbd[0]);
        if (_0x6f41ab && _0x185855.isClass(_0x6f41ab.classType)) {
          return !_0x5d9d56(_0x6f41ab.classType.shared.moduleName);
        }
        if (_0x192dbd.length < 2) {
          return false;
        }
        return _0x2437a8(_0x58f591, _0x4c8e5d.d.rightExpr, _0x192dbd[1]);
      }
      function _0x2fd44d(_0x103503, _0x33965a) {
        const _0x300868 = _0x50ef38(_0x33965a);
        if (!_0x300868) {
          return false;
        }
        if (_0x33965a.nodeType === 7) {
          return _0x2437a8(_0x103503, _0x33965a.d.rightExpr, _0x300868[0]);
        }
        for (const _0x1589bf of _0x300868) {
          if (_0x2437a8(_0x103503, _0x33965a.d.iterableExpr, _0x1589bf)) {
            return true;
          }
        }
        return false;
      }
      function _0x124075(_0x1d8a2c, _0x320f33) {
        if (_0x320f33.d.leftExpr.nodeType !== 38) {
          return false;
        }
        const _0x3897f0 = _0x5734d7.get(_0x320f33.d.leftExpr.d.value);
        if (!_0x3897f0) {
          return false;
        }
        if (_0x320f33.d.args.length <= _0x3897f0.argIndex || _0x320f33.d.args[_0x3897f0.argIndex].d.argCategory !== 0) {
          return false;
        }
        return _0x2437a8(_0x1d8a2c, _0x320f33.d.args[_0x3897f0.argIndex].d.valueExpr, _0x3897f0.name, _0x3897f0.useMeta);
      }
      function _0x46d390(_0x541a85, _0xd2646a, _0x2ea4ea) {
        const _0x3e9825 = _0x2ea4ea.operatorType;
        if (!_0x3a662b.has(_0x3e9825) && !_0x2ef57e.has(_0x3e9825) && !_0x2aaa06.has(_0x3e9825)) {
          return undefined;
        }
        const _0x14591e = _0x36932b.findNodeByOffset(_0xd2646a.parseTree, _0x2ea4ea.start);
        if (!_0x14591e) {
          return undefined;
        }
        const _0x23648f = _0x36932b.getFirstAncestorOrSelf(_0x14591e, _0x39b276 => {
          if (_0x39b276.nodeType === 7 || _0x39b276.nodeType === 55) {
            return _0x39b276.d.operatorToken === _0x2ea4ea;
          }
          if (_0x39b276.nodeType === 5) {
            return _0x39b276.d.operator === _0x3e9825;
          }
          return false;
        });
        if (!_0x23648f) {
          return undefined;
        }
        const _0x2d7143 = _0x5e6453(_0x23648f);
        if (!_0x2d7143) {
          return undefined;
        }
        const _0x3105ae = _0x541a85.getType(_0x56cdf1(_0x23648f));
        if (!_0x3105ae || !_0x185855.isClass(_0x3105ae)) {
          return undefined;
        }
        let _0x36816f = _0x2d7143[0];
        let _0x4eb1c8 = _0x541a85.getBoundMagicMethod(_0x3105ae, _0x36816f);
        if (!_0x4eb1c8 && _0x2d7143.length > 1) {
          _0x36816f = _0x2d7143[1];
          const _0x9cf8c3 = _0x541a85.getType(_0x23648f.d.rightExpr);
          if (_0x9cf8c3 && _0x185855.isClass(_0x9cf8c3)) {
            _0x4eb1c8 = _0x541a85.getBoundMagicMethod(_0x9cf8c3, _0x36816f);
          }
        }
        return {
          name: _0x36816f,
          method: _0x4eb1c8
        };
      }
      function _0x4a6ae9(_0xa3e7db, _0x2ea6a5, _0x1095ac) {
        const _0x2f7911 = _0x1095ac.keywordType;
        if (!_0x160aa1.has(_0x2f7911)) {
          return undefined;
        }
        const _0x374c67 = _0x36932b.findNodeByOffset(_0x2ea6a5.parseTree, _0x1095ac.start);
        if (!_0x374c67) {
          return undefined;
        }
        const _0x29cfeb = _0x36932b.getFirstAncestorOrSelf(_0x374c67, _0xe36276 => {
          if (_0xe36276.nodeType === 7) {
            return _0xe36276.d.operatorToken === _0x1095ac;
          }
          if (_0xe36276.nodeType === 29) {
            return _0x32af4f.TextRange.contains(_0x32af4f.TextRange.fromBounds(_0x32af4f.TextRange.getEnd(_0xe36276.d.targetExpr), _0xe36276.d.iterableExpr.start), _0x1095ac.start);
          }
          return false;
        });
        if (!_0x29cfeb) {
          return undefined;
        }
        const _0x4640e7 = _0x50ef38(_0x29cfeb);
        if (!_0x4640e7) {
          return undefined;
        }
        const _0x40a1ba = _0x29cfeb.nodeType === 7 ? _0x29cfeb.d.rightExpr : _0x29cfeb.d.iterableExpr;
        const _0x7288b4 = _0xa3e7db.getType(_0x40a1ba);
        if (!_0x7288b4 || !_0x185855.isClass(_0x7288b4)) {
          return undefined;
        }
        for (const _0x47a461 of _0x4640e7) {
          const _0x15d597 = _0xa3e7db.getBoundMagicMethod(_0x7288b4, _0x47a461);
          if (!_0x15d597) {
            continue;
          }
          return {
            name: _0x47a461,
            method: _0x15d597
          };
        }
        return undefined;
      }
      function _0x3b84cb(_0x3b3822, _0x4cd623, _0x5114c8) {
        const _0x5196f4 = _0x5734d7.get(_0x5114c8.value);
        if (!_0x5196f4) {
          return undefined;
        }
        const _0x19335f = _0x36932b.findNodeByOffset(_0x4cd623.parseTree, _0x5114c8.start);
        if (!_0x19335f) {
          return undefined;
        }
        const _0x4087e6 = _0x36932b.getFirstAncestorOrSelf(_0x19335f, _0x473bf2 => {
          if (_0x473bf2.nodeType === 9) {
            return _0x473bf2.d.leftExpr.nodeType === 38 && _0x473bf2.d.leftExpr.d.token === _0x5114c8;
          }
          return false;
        });
        if (!_0x4087e6 || _0x4087e6.d.args.length <= _0x5196f4.argIndex || _0x4087e6.d.args[_0x5196f4.argIndex].d.argCategory !== 0) {
          return undefined;
        }
        const _0x23e341 = _0x4087e6.d.args[_0x5196f4.argIndex].d.valueExpr;
        const _0x11f6fe = _0x34af21(_0x3b3822, _0x23e341, _0x5196f4.useMeta ?? false);
        if (!_0x11f6fe) {
          return undefined;
        }
        const _0x30327c = _0x3b3822.getBoundMagicMethod(_0x11f6fe, _0x5196f4.name);
        return {
          name: _0x5196f4.name,
          method: _0x30327c
        };
      }
      function _0x5e6453(_0x517a14) {
        if (_0x517a14.nodeType === 7) {
          return _0x3a662b.get(_0x517a14.d.operator);
        } else {
          if (_0x517a14.nodeType === 5) {
            return _0x2aaa06.get(_0x517a14.d.operator);
          } else {
            return _0x2ef57e.get(_0x517a14.d.operator);
          }
        }
      }
      function _0x5d9d56(_0x4c7e40) {
        return _0x4c7e40 === 'builtins' || _0x4c7e40 === 'typing';
      }
      function _0x50ef38(_0x5578e8) {
        if (_0x5578e8.nodeType === 7) {
          const _0x23e3f9 = _0x5578e8.d.operatorToken;
          return _0x160aa1.get(_0x23e3f9.keywordType);
        }
        return ['__iter__', '__getitem__'];
      }
      function _0x56cdf1(_0x43fc80) {
        if (_0x43fc80.nodeType === 7 || _0x43fc80.nodeType === 5) {
          return _0x43fc80.d.leftExpr;
        }
        return _0x43fc80.d.expr;
      }
      function _0x34af21(_0x3f91e5, _0x514765, _0x506c92) {
        let _0x2ff847 = _0x3f91e5.getType(_0x514765);
        if (!_0x2ff847 || !_0x185855.isClass(_0x2ff847)) {
          return undefined;
        }
        if (_0x506c92 && (_0x2ff847.shared.effectiveMetaclass || _0x2ff847.shared.declaredMetaclass)) {
          _0x2ff847 = _0x2ff847.shared.effectiveMetaclass ?? _0x2ff847.shared.declaredMetaclass;
          if (!_0x2ff847 || !_0x185855.isClass(_0x2ff847)) {
            return undefined;
          }
        }
        return _0x2ff847;
      }
      function _0x2437a8(_0x3be45e, _0x326e48, _0x19987e, _0x5948d0 = false) {
        const _0x4e91c2 = _0x40ad29(_0x3be45e, _0x326e48, _0x19987e, _0x5948d0);
        return _0x4e91c2 && _0x185855.isClass(_0x4e91c2.classType) && !_0x5d9d56(_0x4e91c2.classType.shared.moduleName);
      }
      function _0x40ad29(_0x1e77a4, _0x4e7b87, _0x26ed71, _0x3f4fc7 = false) {
        const _0x4d4dc3 = _0x34af21(_0x1e77a4, _0x4e7b87, _0x3f4fc7);
        if (!_0x4d4dc3) {
          return undefined;
        }
        return _0x134088.lookUpClassMember(_0x4d4dc3, _0x26ed71, 4);
      }
    },
    16589: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.mainFilename = undefined;
      const _0x2d6535 = process.mainModule;
      exports.mainFilename = _0x2d6535 ? _0x2d6535.filename ?? undefined : undefined;
    },
    96159: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.hasAsyncKeyword = _0x33b9bb;
      const _0x255acb = __importStar(require(41557));
      function _0x33b9bb(_0x337e26, _0x2e4f41) {
        const _0x222e02 = _0x255acb.getTokenIndexAtLeft(_0x337e26.tokenizerOutput.tokens, _0x2e4f41.start);
        return _0x3ea97c(_0x337e26, _0x222e02, 10) && _0x3ea97c(_0x337e26, _0x222e02 - 1, 3);
      }
      function _0x3ea97c(_0x1bd709, _0x4a37d3, _0x53e6e9) {
        if (_0x4a37d3 < 0) {
          return false;
        }
        const _0x23e614 = _0x1bd709.tokenizerOutput.tokens.getItemAt(_0x4a37d3);
        return _0x23e614.type === 8 && _0x23e614.keywordType === _0x53e6e9;
      }
    },
    13348: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MRUQueue = undefined;
      class _0x32a50f {
        constructor(_0x57d1ec, _0x5d6923, _0x4ce96e = (_0x4c318d, _0x1c526a) => _0x4c318d === _0x1c526a) {
          this._size = _0x57d1ec;
          this._keyGetter = _0x5d6923;
          this._equalityChecker = _0x4ce96e;
          this._list = [];
        }
        enqueue(_0x5534b5) {
          const _0x1fb3bc = this._list.findIndex(_0x466df2 => this._equalityChecker(_0x466df2, _0x5534b5));
          if (_0x1fb3bc !== -1) {
            this._list.splice(_0x1fb3bc, 1);
          }
          this._list.unshift(_0x5534b5);
          if (this._list.length > this._size) {
            this._list.pop();
          }
        }
        get(_0x1ec4a4) {
          return this._list.filter(_0x52cc46 => this._keyGetter(_0x52cc46) === _0x1ec4a4);
        }
        take(_0x5df61) {
          return this._list.slice(0, Math.max(0, Math.min(_0x5df61, this._list.length)));
        }
      }
      exports.MRUQueue = _0x32a50f;
    },
    44889: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.NotebookUriMapper = exports.INotebookUriMapper = undefined;
      const _0x4476d5 = require(27113);
      const _0x1cc281 = require(41976);
      const _0x52f37a = require(86521);
      var _0x3754ce;
      (function (_0x4ae580) {
        function _0x13b133(_0x58381a) {
          return _0x58381a && typeof _0x58381a.parseNotebookOpen === 'function';
        }
        _0x4ae580.is = _0x13b133;
      })(_0x3754ce || (exports.INotebookUriMapper = _0x3754ce = {}));
      const _0x3c9c7c = 'pylancePrefixCell';
      const _0x397bfa = 'vscode-notebook-cell';
      const _0x3fac5f = 'vscode-interactive-input';
      class _0x42f4ee {
        constructor(_0x18636e) {
          this._caseDetector = _0x18636e;
          this._originalToMapped = new Map();
          this._mappedToOriginal = new Map();
          this._pendingDeletes = new Set();
          this._inUseUris = new Set();
        }
        parseNotebookOpen(_0x3a7d67) {
          this._clearPendingDeletes();
          const _0x528deb = _0x4476d5.Uri.parse(_0x3a7d67.notebookDocument.uri, this._caseDetector);
          _0x3a7d67.cellTextDocuments.forEach(_0x2e6e0b => {
            const _0x11b856 = _0x4476d5.Uri.parse(_0x2e6e0b.uri, this._caseDetector);
            const _0x249fa3 = this._generateCellMappedUri(_0x528deb, _0x11b856);
            this._save(_0x11b856, _0x249fa3);
          });
          return _0x528deb;
        }
        parseNotebookChange(_0x19444a) {
          var _0x241858;
          var _0x3aad04;
          if ((_0x241858 = _0x19444a.change.cells?.structure?.didClose) === null || _0x241858 === undefined) {
            undefined;
          } else {
            _0x241858.forEach(_0x397fd8 => {
              const _0x625e3a = _0x4476d5.Uri.parse(_0x397fd8.uri, this._caseDetector);
              this._pendDelete(_0x625e3a);
            });
          }
          const _0xa72813 = _0x4476d5.Uri.parse(_0x19444a.notebookDocument.uri, this._caseDetector);
          if ((_0x3aad04 = _0x19444a.change.cells?.structure?.didOpen) === null || _0x3aad04 === undefined) {
            undefined;
          } else {
            _0x3aad04.forEach(_0x1cce46 => {
              const _0x1a2f59 = _0x4476d5.Uri.parse(_0x1cce46.uri, this._caseDetector);
              const _0x8a42e6 = this._generateCellMappedUri(_0xa72813, _0x1a2f59);
              this._save(_0x1a2f59, _0x8a42e6);
            });
          }
          return _0xa72813;
        }
        parseNotebookClose(_0x2633dd) {
          _0x2633dd.cellTextDocuments.forEach(_0x3b8e80 => {
            const _0x41abea = _0x4476d5.Uri.parse(_0x3b8e80.uri, this._caseDetector);
            this._pendDelete(_0x41abea);
          });
          return _0x4476d5.Uri.parse(_0x2633dd.notebookDocument.uri, this._caseDetector);
        }
        markUsing(_0x18216c, _0x1525cd) {
          if (_0x42f4ee.isNotebookCell(_0x18216c)) {
            if (_0x1525cd) {
              this._inUseUris.add(_0x18216c.key);
            } else {
              this._inUseUris.delete(_0x18216c.key);
            }
          }
        }
        getOriginalCellUri(_0x3cab81) {
          var _0x2dc64b;
          if ((_0x2dc64b = this._mappedToOriginal.get(_0x3cab81.key)) !== null && _0x2dc64b !== undefined) {
            return _0x2dc64b;
          } else {
            return _0x3cab81;
          }
        }
        getMappedCellUri(_0x1ed26a) {
          var _0x59174d;
          if ((_0x59174d = this._originalToMapped.get(_0x1ed26a.key)) !== null && _0x59174d !== undefined) {
            return _0x59174d;
          } else {
            return _0x1ed26a;
          }
        }
        getNotebookUriFromCell(_0x13f468) {
          const _0x263b12 = this.getMappedCellUri(_0x13f468);
          return _0x263b12.replaceExtension('').withQuery(_0x263b12.query);
        }
        static isNotebookPrefixCell(_0x5edf8c) {
          return _0x5edf8c.fragment === _0x3c9c7c;
        }
        static isNotebookFile(_0x49a666) {
          if (_0x49a666.scheme === _0x1cc281.VSCodeChatCodeBlockScheme || _0x49a666.scheme === _0x52f37a.VSCodeCopilotChatCodeBlockScheme) {
            return false;
          }
          return _0x49a666.hasExtension('.ipynb') && _0x49a666.fragment.length <= 0;
        }
        static isNotebookCell(_0xb6f731) {
          if (_0xb6f731.scheme === _0x3fac5f) {
            return true;
          }
          if (_0xb6f731.fragment) {
            return _0xb6f731.containsExtension('.ipynb') || _0xb6f731.scheme === _0x397bfa;
          } else {
            return false;
          }
        }
        static getNotebookPrefixUri(_0x270acd) {
          return _0x270acd.addExtension('.py').withFragment(_0x3c9c7c);
        }
        _generateCellMappedUri(_0x16d09f, _0x348bb1) {
          return _0x16d09f.addExtension('.py').withFragment(_0x348bb1.fragment);
        }
        _clearPendingDeletes() {
          const _0x5d8962 = [...this._pendingDeletes];
          _0x5d8962.forEach(_0x2b5135 => {
            if (!this._inUseUris.has(_0x2b5135)) {
              this._delete(_0x2b5135);
            }
          });
        }
        _pendDelete(_0x3e35d9) {
          this._pendingDeletes.add(_0x3e35d9.key);
        }
        _save(_0x46a757, _0x140594) {
          this._originalToMapped.set(_0x46a757.key, _0x140594);
          this._mappedToOriginal.set(_0x140594.key, _0x46a757);
          this._pendingDeletes.delete(_0x46a757.key);
        }
        _delete(_0x27cbd3) {
          const _0xe05ee7 = this._originalToMapped.get(_0x27cbd3);
          if (_0xe05ee7) {
            this._originalToMapped.delete(_0x27cbd3);
            this._mappedToOriginal.delete(_0xe05ee7.key);
            this._pendingDeletes.delete(_0x27cbd3);
          }
        }
      }
      exports.NotebookUriMapper = _0x42f4ee;
    },
    19013: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getNodesInRange = _0x267dd6;
      exports.getOutermostClassNameFromDecl = _0x398c55;
      exports.getOutermostEnclosingClassName = _0x4fe49c;
      exports.getOutermostEnclosingClassNameNode = _0x31c442;
      exports.getClassFullNameParts = _0x104206;
      const _0x2f500b = require(83760);
      const _0x19e713 = require(41557);
      const _0x132e27 = require(88744);
      const _0x1d5625 = require(91426);
      const _0x355e6f = require(56814);
      const _0x34cecd = require(88754);
      function _0x267dd6(_0x161d3d, _0x54701c, _0x4cf492, _0x32977a) {
        const _0x41a6a4 = [];
        const _0x361475 = _0x32977a ? _0x34cecd.Range.is(_0x32977a) ? _0x355e6f.convertRangeToTextRange(_0x32977a, _0x161d3d.tokenizerOutput.lines) : _0x32977a : undefined;
        class _0x458a20 extends _0x132e27.ParseTreeWalker {
          visit(_0x377b37) {
            _0x1d5625.throwIfCancellationRequested(_0x4cf492);
            if (_0x361475 && !_0x34cecd.TextRange.overlapsRange(_0x361475, _0x377b37)) {
              return false;
            }
            if (_0x377b37.nodeType === _0x54701c) {
              _0x41a6a4.push(_0x377b37);
            }
            return super.visit(_0x377b37);
          }
        }
        const _0x57980e = new _0x458a20();
        _0x57980e.walk(_0x161d3d.parserOutput.parseTree);
        return _0x41a6a4;
      }
      function _0x398c55(_0x54f6e0) {
        var _0x65908d;
        if ((_0x65908d = _0x4fe49c(_0x54f6e0.node)) !== null && _0x65908d !== undefined) {
          return _0x65908d;
        } else {
          return _0x2f500b.getNameFromDeclaration(_0x54f6e0);
        }
      }
      function _0x4fe49c(_0x45e749) {
        var _0x3c2218;
        if ((_0x3c2218 = _0x31c442(_0x45e749)) === null || _0x3c2218 === undefined) {
          return undefined;
        } else {
          return _0x3c2218.d.value;
        }
      }
      function _0x31c442(_0x32edb5) {
        var _0x503199;
        const _0x1030a6 = _0x19e713.getEnclosingClass(_0x32edb5);
        if (!_0x1030a6) {
          return undefined;
        }
        if ((_0x503199 = _0x31c442(_0x1030a6)) !== null && _0x503199 !== undefined) {
          return _0x503199;
        } else {
          return _0x1030a6.d.name;
        }
      }
      function _0x104206(_0x593556) {
        const _0x582db9 = [_0x593556.d.name.d.value];
        let _0x5002b2 = _0x593556;
        while (_0x5002b2) {
          _0x5002b2 = _0x19e713.getEnclosingClass(_0x5002b2);
          if (_0x5002b2) {
            _0x582db9.push(_0x5002b2.d.name.d.value);
          }
        }
        return _0x582db9.reverse();
      }
    },
    84590: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Platform = undefined;
      const _0x392fc8 = __importStar(require(16928));
      class _0x3ca95c {
        get name() {
          return process.platform;
        }
        isMac() {
          return process.platform === 'darwin';
        }
        isLinux() {
          return process.platform === 'linux';
        }
        isWindows() {
          return process.platform === 'win32';
        }
        is64() {
          return process.arch === 'x64';
        }
        isWeb() {
          return !!process.browser;
        }
        getPlatformName() {
          return process.platform;
        }
        isOnnxSupported() {
          return (this.isWindows() || this.isLinux()) && this.is64() || this.isMac();
        }
        isBundle() {
          return _0x392fc8.basename(__filename).endsWith('.bundle.js');
        }
      }
      exports.Platform = _0x3ca95c;
      (function (_0x3704ce) {
        function _0x1c6cf6(_0x336d9e) {
          return _0x336d9e instanceof _0x3704ce;
        }
        _0x3704ce.is = _0x1c6cf6;
      })(_0x3ca95c || (exports.Platform = _0x3ca95c = {}));
    },
    2582: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.attachWorkDone = _0x596877;
      const _0x3ef033 = require(56911);
      class _0x1a9574 {
        constructor() {}
        begin() {}
        report() {}
        done() {}
      }
      class _0xa68b31 {
        constructor(_0x29d9d3, _0xf53b6a) {
          this._connection = _0x29d9d3;
          this._token = _0xf53b6a;
          _0xa68b31.instances.set(this._token, this);
        }
        begin(_0x52432b, _0x36a951, _0x5321ee, _0x22b3d8) {
          const _0x504fb9 = {
            kind: 'begin',
            title: _0x52432b,
            message: _0x5321ee,
            cancellable: _0x22b3d8
          };
          if (typeof _0x36a951 === 'number') {
            _0x504fb9.percentage = Math.round(_0x36a951);
          }
          this._connection.sendProgress(_0x3ef033.WorkDoneProgress.type, this._token, _0x504fb9);
        }
        report(_0x1856dd, _0x4f3c7a) {
          const _0x2bb25e = {
            kind: 'report'
          };
          if (typeof _0x1856dd === 'number') {
            _0x2bb25e.percentage = Math.round(_0x1856dd);
            if (_0x4f3c7a !== undefined) {
              _0x2bb25e.message = _0x4f3c7a;
            }
          } else {
            _0x2bb25e.message = _0x1856dd;
          }
          this._connection.sendProgress(_0x3ef033.WorkDoneProgress.type, this._token, _0x2bb25e);
        }
        done() {
          _0xa68b31.instances.delete(this._token);
          this._connection.sendProgress(_0x3ef033.WorkDoneProgress.type, this._token, {
            kind: 'end'
          });
        }
      }
      _0xa68b31.instances = new Map();
      function _0x596877(_0x551e66, _0x172fe0) {
        if (_0x172fe0 === undefined || _0x172fe0.workDoneToken === undefined) {
          return new _0x1a9574();
        }
        const _0x4e1e2e = _0x172fe0.workDoneToken;
        delete _0x172fe0.workDoneToken;
        return new _0xa68b31(_0x551e66, _0x4e1e2e);
      }
    },
    45210: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.pylanceCodeActionKinds = exports.pylanceRefactorActionKinds = exports.pylanceSourceActionKinds = exports.PylanceCodeActionKind = undefined;
      const _0x21f13b = require(64819);
      var _0x1ffcb5;
      (function (_0x307da7) {
        let _0x370ced;
        (function (_0x1124a4) {
          _0x1124a4.UnusedImports = _0x21f13b.CodeActionKind.Source + '.unusedImports';
          _0x1124a4.ConvertImportFormat = _0x21f13b.CodeActionKind.Source + '.convertImportFormat';
          _0x1124a4.FixAll = _0x21f13b.CodeActionKind.SourceFixAll + '.pylance';
        })(_0x370ced = _0x307da7.Source ||= {});
        let _0x5a1770;
        (function (_0x5de98e) {
          _0x5de98e.Variable = _0x21f13b.CodeActionKind.RefactorExtract + '.variable';
          _0x5de98e.Method = _0x21f13b.CodeActionKind.RefactorExtract + '.method';
        })(_0x5a1770 = _0x307da7.RefactorExtract ||= {});
        let _0x5bc253;
        (function (_0x5bfd39) {
          const _0x45699a = _0x21f13b.CodeActionKind.Refactor + '.move';
          _0x5bfd39.ToFile = _0x45699a + '.toFile';
          _0x5bfd39.ToNewFile = _0x45699a + '.toNewFile';
        })(_0x5bc253 = _0x307da7.RefactorMove ||= {});
      })(_0x1ffcb5 || (exports.PylanceCodeActionKind = _0x1ffcb5 = {}));
      exports.pylanceSourceActionKinds = [_0x1ffcb5.Source.UnusedImports, _0x1ffcb5.Source.ConvertImportFormat, _0x1ffcb5.Source.FixAll];
      exports.pylanceRefactorActionKinds = [_0x1ffcb5.RefactorExtract.Variable, _0x1ffcb5.RefactorExtract.Method, _0x1ffcb5.RefactorMove.ToFile, _0x1ffcb5.RefactorMove.ToNewFile];
      exports.pylanceCodeActionKinds = [...exports.pylanceSourceActionKinds, ...exports.pylanceRefactorActionKinds];
    },
    52471: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceDebugInfoInspector = undefined;
      const _0x208da8 = require(48281);
      class _0x1c6c38 {
        constructor() {
          this._notebookData = new Map();
        }
        getCycleDetail(_0x4c1614, _0x62d078) {
          try {
            const _0x294a82 = this._getNotebookData(_0x62d078.sourceFile.getUri());
            if (!_0x294a82) {
              return 'Found a cycle, but we can\'t find notebook data that has info for this cell';
            }
            let _0x57fef5 = `total number of cells: ${_0x294a82.mappedCellUris.length + 1}
`;
            const _0x59571a = this._getNotebookCellNames(_0x294a82);
            const _0x374597 = this._getSourceFilesWithChainSet(_0x4c1614, _0x59571a);
            _0x57fef5 += _0x2126a9(_0x294a82.prefixCellUri, _0x62d078.sourceFile.getUri()) + ': prefix cell\n';
            for (const _0x3f9c1b of _0x294a82.mappedCellUris) {
              const _0x12c6f0 = _0x2126a9(_0x3f9c1b, _0x62d078.sourceFile.getUri());
              const _0x2d854c = _0x4c1614.getSourceFileInfo(_0x3f9c1b);
              if (!_0x2d854c) {
                _0x57fef5 += _0x12c6f0 + ': not exist in program\n';
                continue;
              }
              const _0xf7354 = _0x2d854c.chainedSourceFile;
              if (!_0xf7354) {
                _0x57fef5 += _0x12c6f0 + ': no chained cell\n';
                continue;
              }
              const _0x74ab94 = _0x59571a.get(_0xf7354.sourceFile.getUri().key);
              if (!_0x74ab94) {
                _0x57fef5 += _0x12c6f0 + ': chained file is not a cell\n';
                continue;
              }
              _0x57fef5 += _0x12c6f0 + ' -> ' + _0x74ab94 + '\n';
            }
            _0x57fef5 += '------------------------\n';
            if (_0x374597.size > 0) {
              _0x57fef5 += `some chained files not found in the cells: ${_0x374597.size}
`;
            }
            return _0x57fef5;
            function _0x2126a9(_0x58a348, _0x2334d3) {
              _0x374597.delete(_0x58a348.key);
              return _0x59571a.get(_0x58a348.key) + (_0x2334d3.equals(_0x58a348) ? '[cycle]' : '');
            }
          } catch (_0x1c94a7) {
            return `Found a cycle but couldn't gather more detail info. ${_0x1c94a7.message}`;
          }
        }
        setNotebookData(_0x199a52) {
          if (_0x199a52.kind === 'close') {
            this._notebookData.delete(_0x199a52.fileUri.key);
          } else {
            this._notebookData.set(_0x199a52.fileUri.key, _0x199a52.data);
          }
        }
        _getSourceFilesWithChainSet(_0x4be096, _0x106572) {
          const _0x4f3e43 = new Set();
          for (const _0x3f59c7 of _0x4be096.getSourceFileInfoList()) {
            if (!_0x3f59c7.chainedSourceFile) {
              continue;
            }
            const _0x32e2f6 = _0x3f59c7.sourceFile.getUri();
            if (!_0x106572.has(_0x32e2f6.key)) {
              continue;
            }
            _0x4f3e43.add(_0x32e2f6.key);
            _0x4f3e43.add(_0x3f59c7.chainedSourceFile.sourceFile.getUri().key);
          }
          return _0x4f3e43;
        }
        _getNotebookCellNames(_0xe4cc93) {
          const _0x81fa92 = new Map();
          let _0x12aa52 = 0;
          _0x81fa92.set(_0xe4cc93.prefixCellUri.key, `cell${_0x12aa52++}`);
          for (const _0x5bc79c of _0xe4cc93.mappedCellUris) {
            _0x208da8.assert(!_0x81fa92.has(_0x5bc79c.key));
            _0x81fa92.set(_0x5bc79c.key, `cell${_0x12aa52++}`);
          }
          return _0x81fa92;
        }
        _getNotebookData(_0x157f20) {
          for (const _0x1bd7f9 of this._notebookData.values()) {
            if (_0x1bd7f9.prefixCellUri.equals(_0x157f20) || _0x1bd7f9.mappedCellUris.some(_0x517f9f => _0x517f9f.equals(_0x157f20))) {
              return _0x1bd7f9;
            }
          }
          return undefined;
        }
      }
      exports.PylanceDebugInfoInspector = _0x1c6c38;
    },
    71069: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceDocStringService = undefined;
      const _0x2a1c8d = require(12670);
      const _0x4da917 = require(81073);
      const _0x5d61f1 = require(71458);
      const _0x474984 = require(71582);
      const _0x4fc909 = require(99504);
      const _0x53d0af = require(17189);
      const _0x65769 = require(52820);
      const _0xc6795c = require(55166);
      const _0x44b767 = require(80019);
      const _0x26353f = require(36984);
      class _0x16092c {
        constructor(_0x10674d, _0x3df105, _0x357984, _0x5665c8, _0x59f4ba = false) {
          this._fs = _0x10674d;
          this._treeSitterWasmUri = _0x3df105;
          this._treeSitterRstWasmUri = _0x357984;
          this._console = _0x5665c8;
          this._supportRestParsing = _0x59f4ba;
          this._restParsingEnabled = false;
          this._logEnabled = false;
          this._impl = new _0x5d61f1.PyrightDocStringService();
          this.enableRestParsing(_0x59f4ba);
          this._logEnabled = _0x4fc909.IS_DEV;
        }
        get ready() {
          if (this._ready) {
            return this._ready;
          } else {
            return Promise.resolve();
          }
        }
        get isRestParsingEnabled() {
          return this._restParsingEnabled;
        }
        clone() {
          return new _0x16092c(this._fs, this._treeSitterWasmUri, this._treeSitterRstWasmUri, this._console, this._supportRestParsing);
        }
        convertDocStringToPlainText(_0x2a6448) {
          return this._impl.convertDocStringToPlainText(_0x2a6448);
        }
        convertDocStringToMarkdown(_0x11ef60, _0x27c3c9) {
          if (this._restParsingEnabled && this._logEnabled) {
            this._console.log('Restructured text parsing enabled');
            this._console.log('Converting docstring to markdown');
            this._console.log(_0x11ef60);
          }
          const _0xeee247 = new _0x474984.Duration();
          const _0x396c91 = this._impl.convertDocStringToMarkdown(_0x11ef60, _0x27c3c9);
          if (this._restParsingEnabled && this._logEnabled) {
            this._console.log(`Conversion complete in ${_0xeee247.getDurationInMilliseconds()}ms`);
            this._console.log(_0x396c91);
          }
          return _0x396c91;
        }
        extractParameterDocumentation(_0x10b015, _0x54b33c, _0x51b3f2, _0x33facd) {
          return this._impl.extractParameterDocumentation(_0x10b015, _0x54b33c, _0x51b3f2, _0x33facd);
        }
        enableRestParsing(_0x4341f1) {
          if (_0x4341f1 && !this._restParsingEnabled) {
            this._restParsingEnabled = true;
            const _0x3605c9 = new _0x22b536(this._fs, this._treeSitterWasmUri, this._treeSitterRstWasmUri, this._console, this._logEnabled);
            this._ready = _0x3605c9.ready.then(() => {
              this._impl = _0x3605c9;
            }).catch(_0x517d5b => {
              this._console.error(`Error initializing RestDocStringService: ${_0x517d5b}`);
              this._restParsingEnabled = false;
              this._impl = new _0x5d61f1.PyrightDocStringService();
            });
          } else {
            if (!_0x4341f1 && this._restParsingEnabled) {
              this._restParsingEnabled = false;
              this._ready = Promise.resolve();
              this._impl = new _0x5d61f1.PyrightDocStringService();
            }
          }
        }
      }
      exports.PylanceDocStringService = _0x16092c;
      class _0x22b536 {
        constructor(_0x3b4053, _0x4cbd8b, _0x44847f, _0x2e8022, _0x920e54) {
          this._fs = _0x3b4053;
          this._parserWasmUri = _0x4cbd8b;
          this._grammarWasmUri = _0x44847f;
          this._console = _0x2e8022;
          this._logEnabled = _0x920e54;
          this._restParser = new _0x44b767.RestructuredTextParser();
          this._lastDocString = '';
          const _0x173536 = new Uint8Array(this._fs.readFileSync(_0x44847f));
          this._initialized = _0x44b767.initialize(_0x4cbd8b, _0x173536);
        }
        get ready() {
          return this._initialized;
        }
        clone() {
          return new _0x22b536(this._fs, this._parserWasmUri, this._grammarWasmUri, this._console, this._logEnabled);
        }
        convertDocStringToPlainText(_0x5ad2d9) {
          return _0x2a1c8d.convertDocStringToPlainText(_0x5ad2d9);
        }
        convertDocStringToMarkdown(_0x2ef412, _0x31d273) {
          const _0xc205b3 = this._convertToDocument(_0x2ef412);
          if (!_0xc205b3) {
            return _0x2a1c8d.convertDocStringToMarkdown(_0x2ef412);
          }
          return _0x65769.MarkdownFormatter.convertToMarkdown(_0xc205b3, this._console, _0x31d273);
        }
        extractParameterDocumentation(_0x5ac996, _0xb05d1d, _0x4bbb3f, _0x55c35d) {
          if (_0x4bbb3f === 'plaintext' || _0x55c35d) {
            return _0x4da917.extractParameterDocumentation(_0x5ac996, _0xb05d1d);
          }
          const _0x5744f4 = this._convertToDocument(_0x5ac996);
          if (!_0x5744f4) {
            return _0x4da917.extractParameterDocumentation(_0x5ac996, _0xb05d1d);
          }
          let _0x7176f4 = _0xc6795c.ParameterFormatter.extractParameterDocumentation(_0x5744f4, _0xb05d1d, this._console);
          if (_0x7176f4.length === 0) {
            _0x7176f4 = _0x4da917.extractParameterDocumentation(_0x5ac996, _0xb05d1d);
          }
          return _0x7176f4;
        }
        _convertToDocument(_0x18fbfd) {
          if (_0x18fbfd === this._lastDocString && this._lastTree) {
            return this._lastTree;
          }
          _0x18fbfd = _0x18fbfd.replace(/\r/g, '');
          _0x18fbfd = _0x26353f.cleanIndent(_0x18fbfd);
          const _0x6409d8 = _0x53d0af.Fixer.fix(_0x18fbfd, this._restParser, this._console);
          if (this._logEnabled) {
            this._console.log('Fixed docstring:');
            this._console.log(_0x6409d8);
          }
          this._lastTree = this._restParser.parse(_0x6409d8, this._console);
          this._lastDocString = _0x18fbfd;
          return this._lastTree;
        }
      }
    },
    79524: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceFileSystem = undefined;
      const _0xc7d5a0 = require(16867);
      const _0x491bd1 = require(25747);
      const _0x40888d = require(62226);
      const _0x800127 = require(44889);
      const _0x5ca708 = require(22180);
      class _0x1ea78f {
        constructor(_0x2293d6, _0x24343a, _0x3e6aca, _0x4a9751) {
          this._uriMapper = _0x24343a;
          this._useRemote = _0x3e6aca;
          this._createRemoteFileSystem = _0x4a9751;
          this._fallbackFs = new _0x40888d.PyrightFileSystem(_0x2293d6);
        }
        static createFromConnection(_0x5c4e98, _0x5ae09, _0x203921, _0xcea3d4 = _0x491bd1.WebUri.isWebUri) {
          return new _0x1ea78f(_0x5ae09, _0x203921, _0xcea3d4, _0x5d4f1d => {
            return new _0x5ca708.RemoteFileSystem(_0x5d4f1d.root, _0x5c4e98.workspace.fileSystem);
          });
        }
        static createWithoutRemote(_0x11e060, _0x54b714) {
          return new _0x1ea78f(_0x11e060, _0x54b714, _0x491bd1.WebUri.isWebUri, _0x19ce14 => undefined);
        }
        static createFromFileSystem(_0x2d07fc, _0x30071a, _0x54d634) {
          return new _0x1ea78f(_0x2d07fc, _0x54d634, _0x491bd1.WebUri.isWebUri, _0x3282c1 => {
            return new _0x5ca708.RemoteFileSystem(_0x3282c1.root, _0x30071a);
          });
        }
        mkdirSync(_0x53b596, _0x272c7f) {
          var _0x23b3a5;
          if ((_0x23b3a5 = this._getWritableFileSystem(_0x53b596)) === null || _0x23b3a5 === undefined) {
            return undefined;
          } else {
            return _0x23b3a5.mkdirSync(_0x53b596, _0x272c7f);
          }
        }
        writeFileSync(_0x4bd1ae, _0x399493, _0x3392d3) {
          var _0x5d0bd8;
          if ((_0x5d0bd8 = this._getWritableFileSystem(_0x4bd1ae)) === null || _0x5d0bd8 === undefined) {
            return undefined;
          } else {
            return _0x5d0bd8.writeFileSync(_0x4bd1ae, _0x399493, _0x3392d3);
          }
        }
        unlinkSync(_0x440602) {
          var _0xb001f3;
          if ((_0xb001f3 = this._getWritableFileSystem(_0x440602)) === null || _0xb001f3 === undefined) {
            return undefined;
          } else {
            return _0xb001f3.unlinkSync(_0x440602);
          }
        }
        rmdirSync(_0x2f4e74) {
          var _0x1a4c88;
          if ((_0x1a4c88 = this._getWritableFileSystem(_0x2f4e74)) === null || _0x1a4c88 === undefined) {
            return undefined;
          } else {
            return _0x1a4c88.rmdirSync(_0x2f4e74);
          }
        }
        createFileSystemWatcher(_0x53c66b, _0x2f6303) {
          return this._fallbackFs.createFileSystemWatcher(_0x53c66b, _0x2f6303);
        }
        createReadStream(_0x4e2d24) {
          const _0x32f1d1 = this._getWritableFileSystem(_0x4e2d24);
          if (!_0x32f1d1) {
            throw new Error('Not implemented');
          }
          return _0x32f1d1.createReadStream(_0x4e2d24);
        }
        createWriteStream(_0x479381) {
          return this._fallbackFs.createWriteStream(_0x479381);
        }
        copyFileSync(_0x498182, _0x1f7a2e) {
          const _0xe5b268 = this._getWritableFileSystem(_0x498182);
          const _0x734023 = this._getWritableFileSystem(_0x1f7a2e);
          if (_0xe5b268 !== _0x734023) {
            throw new Error('Not implemented');
          }
          if (_0xe5b268 === null || _0xe5b268 === undefined) {
            return undefined;
          } else {
            return _0xe5b268.copyFileSync(_0x498182, _0x1f7a2e);
          }
        }
        existsSync(_0x18ca18) {
          return this._getReadOnlyFileSystem(_0x18ca18).existsSync(_0x18ca18);
        }
        chdir(_0x8edfbd) {
          return this._getReadOnlyFileSystem(_0x8edfbd).chdir(_0x8edfbd);
        }
        readdirEntriesSync(_0x3206cc) {
          return this._getReadOnlyFileSystem(_0x3206cc).readdirEntriesSync(_0x3206cc);
        }
        readdirSync(_0x235267) {
          return this._getReadOnlyFileSystem(_0x235267).readdirSync(_0x235267);
        }
        readFileSync(_0x371845, _0x58d552) {
          return this._getReadOnlyFileSystem(_0x371845).readFileSync(_0x371845, _0x58d552);
        }
        statSync(_0xa4e668) {
          return this._getReadOnlyFileSystem(_0xa4e668).statSync(_0xa4e668);
        }
        realpathSync(_0x5b218e) {
          return this._getReadOnlyFileSystem(_0x5b218e).realpathSync(_0x5b218e);
        }
        getModulePath() {
          return this._fallbackFs.getModulePath();
        }
        readFile(_0xd3320e) {
          return this._getReadOnlyFileSystem(_0xd3320e).readFile(_0xd3320e);
        }
        readFileText(_0x1fc7ef, _0xe0826c) {
          return this._getReadOnlyFileSystem(_0x1fc7ef).readFileText(_0x1fc7ef, _0xe0826c);
        }
        realCasePath(_0x5373bd) {
          return this._getReadOnlyFileSystem(_0x5373bd).realCasePath(_0x5373bd);
        }
        isMappedUri(_0x1e9c71) {
          if (_0x800127.NotebookUriMapper.isNotebookCell(_0x1e9c71)) {
            return true;
          }
          return this._getReadOnlyFileSystem(_0x1e9c71).isMappedUri(_0x1e9c71);
        }
        getOriginalUri(_0xdaaaf4) {
          if (_0x800127.NotebookUriMapper.isNotebookCell(_0xdaaaf4)) {
            return this._uriMapper.getOriginalCellUri(_0xdaaaf4);
          }
          return this._getReadOnlyFileSystem(_0xdaaaf4).getOriginalUri(_0xdaaaf4);
        }
        getMappedUri(_0x5e14e4) {
          if (_0x800127.NotebookUriMapper.isNotebookCell(_0x5e14e4)) {
            return this._uriMapper.getMappedCellUri(_0x5e14e4);
          }
          return this._getReadOnlyFileSystem(_0x5e14e4).getMappedUri(_0x5e14e4);
        }
        isInZip(_0x14a28f) {
          return this._getReadOnlyFileSystem(_0x14a28f).isInZip(_0x14a28f);
        }
        isPartialStubPackagesScanned(_0x2fe64e) {
          return this._fallbackFs.isPartialStubPackagesScanned(_0x2fe64e);
        }
        isPathScanned(_0x5c2342) {
          return this._fallbackFs.isPathScanned(_0x5c2342);
        }
        processPartialStubPackages(_0xf4d74f, _0x5bfec7, _0x5384ac) {
          return this._fallbackFs.processPartialStubPackages(_0xf4d74f, _0x5bfec7, _0x5384ac, this._allowMoving.bind(this));
        }
        clearPartialStubs() {
          return this._fallbackFs.clearPartialStubs();
        }
        _allowMoving(_0x2168a1, _0x1f9168, _0x10d2bf) {
          if (!_0x2168a1) {
            return true;
          }
          const _0x130291 = this._fallbackFs.readFileSync(_0x10d2bf.pyTypedPath, 'utf8') || '';
          return !_0x1f9168 || _0x1f9168.isPartiallyTyped || _0x130291.includes('partialOverride');
        }
        _getWritableFileSystem(_0xe06e15) {
          try {
            if (!_0xc7d5a0.FileUri.isFileUri(_0xe06e15)) {
              return undefined;
            }
          } catch {}
          return this._fallbackFs;
        }
        _getReadOnlyFileSystem(_0x1b1a69) {
          try {
            if (this._useRemote(_0x1b1a69)) {
              const _0x749fd5 = this._getRemoteFileSystem(_0x1b1a69);
              if (_0x749fd5 !== undefined) {
                return _0x749fd5;
              }
            }
          } catch {}
          return this._fallbackFs;
        }
        _getRemoteFileSystem(_0x152af2) {
          if (!this._remoteFileSystem) {
            this._remoteFileSystem = this._createRemoteFileSystem(_0x152af2);
          }
          return this._remoteFileSystem;
        }
      }
      exports.PylanceFileSystem = _0x1ea78f;
    },
    94818: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceFullAccessHostFactory = exports.PylanceFullAccessHost = undefined;
      const _0x57f9ef = __importStar(require(35317));
      const _0x37ff51 = require(58147);
      const _0xaa73cb = require(12913);
      class _0xd4c8a0 extends _0xaa73cb.FullAccessHost {
        constructor(_0x5de595, _0x17c49d) {
          super(_0x5de595);
          this._hostCache = _0x17c49d ?? new Map();
        }
        static createHost(_0x400252, _0x4b06a0) {
          if (_0x400252 === 0) {
            return new _0xd4c8a0(_0x4b06a0);
          } else {
            return _0xaa73cb.FullAccessHost.createHost(_0x400252, _0x4b06a0);
          }
        }
        getHostCache() {
          return this._hostCache;
        }
        getPythonSearchPaths(_0x4ebe62, _0x2b408d) {
          const _0x42120c = _0x37ff51.getOrAdd(this._hostCache, _0x4ebe62?.key || '', () => ({}));
          if (_0x42120c.path) {
            if (_0x2b408d === null || _0x2b408d === undefined) {
              undefined;
            } else {
              _0x2b408d.push(..._0x42120c.path.logInfo);
            }
            return _0x42120c.path.result;
          }
          const _0x48ffb2 = [];
          const _0x3cca44 = super.getPythonSearchPaths(_0x4ebe62, _0x48ffb2);
          if (_0x2b408d === null || _0x2b408d === undefined) {
            undefined;
          } else {
            _0x2b408d.push(..._0x48ffb2);
          }
          _0x42120c.path = {
            result: _0x3cca44,
            logInfo: _0x48ffb2
          };
          return _0x3cca44;
        }
        getPythonVersion(_0x1d3461, _0x7bb8a5) {
          const _0x1d1c10 = _0x37ff51.getOrAdd(this._hostCache, _0x1d3461?.key ?? '', () => ({}));
          if (_0x1d1c10.version) {
            if (_0x7bb8a5 === null || _0x7bb8a5 === undefined) {
              undefined;
            } else {
              _0x7bb8a5.push(..._0x1d1c10.version.logInfo);
            }
            return _0x1d1c10.version.result;
          }
          const _0x27835f = [];
          const _0x17478a = super.getPythonVersion(_0x1d3461, _0x27835f);
          _0x1d1c10.version = {
            result: _0x17478a,
            logInfo: _0x27835f
          };
          return _0x17478a;
        }
        scrapeModuleFromPython(_0x2cdbfa, _0xbdbf40) {
          const _0x1a369e = ['-W', 'ignore', '-B', '-S', '-I', this.serviceProvider.fs().getModulePath().combinePaths('stub-generation', 'scrape_module.py').getFilePath(), _0x2cdbfa];
          const _0x16ce67 = _0x57f9ef.execFileSync(_0xbdbf40.getFilePath(), _0x1a369e, {
            encoding: 'utf8',
            stdio: ['ignore', 'pipe', 'ignore'],
            shell: this.shouldUseShellToRunInterpreter(_0xbdbf40.getFilePath()),
            timeout: 10000
          });
          if (!_0x16ce67) {
            return false;
          }
          return _0x16ce67;
        }
      }
      exports.PylanceFullAccessHost = _0xd4c8a0;
      class _0x26a0a7 {
        constructor(_0x1431fe) {
          this._serviceProvider = _0x1431fe;
        }
        createHost(_0x4a33d8) {
          return _0xd4c8a0.createHost(_0x4a33d8, this._serviceProvider);
        }
      }
      exports.PylanceFullAccessHostFactory = _0x26a0a7;
    },
    30371: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getBundledTypeStubsPath = _0x583d55;
      exports.getBundledNativeStubsPath = _0x55388c;
      exports.getBundledFilesPath = _0x3bb30c;
      function _0x583d55(_0x28aeac) {
        return _0x205894(_0x28aeac, 'stubs');
      }
      function _0x55388c(_0x20e509) {
        return _0x205894(_0x20e509, 'native-stubs');
      }
      function _0x3bb30c(_0x458979) {
        return _0x205894(_0x458979, 'files');
      }
      function _0x205894(_0x377860, _0x1397f9) {
        return _0x377860.combinePaths('bundled', _0x1397f9);
      }
    },
    98920: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getRegionComments = _0x57d102;
      const _0x273c1a = require(56814);
      function _0x57d102(_0x525c9a) {
        const _0x2def7d = [];
        for (let _0x15e224 = 0; _0x15e224 < _0x525c9a.tokenizerOutput.tokens.count; _0x15e224++) {
          const _0x41fbe3 = _0x525c9a.tokenizerOutput.tokens.getItemAt(_0x15e224);
          if (_0x41fbe3.comments) {
            for (const _0x3f7c9f of _0x41fbe3.comments) {
              const _0x142973 = _0x22f267(_0x3f7c9f, _0x525c9a);
              if (_0x142973 !== undefined) {
                _0x2def7d.push({
                  type: _0x142973,
                  comment: _0x3f7c9f
                });
              }
            }
          }
        }
        return _0x2def7d;
      }
      const _0x2607c3 = /^\s*region\b/;
      const _0xe369eb = /^\s*endregion\b/;
      function _0x22f267(_0x5b5755, _0xceb9c4) {
        const _0x4c5b75 = _0x5b5755.start - 1;
        const _0x44825f = _0x273c1a.convertOffsetToPosition(_0x4c5b75, _0xceb9c4.tokenizerOutput.lines);
        if (_0x44825f.character !== 0) {
          const _0x30733c = _0x4c5b75 - _0x44825f.character;
          const _0x2f046b = _0xceb9c4.text.slice(_0x30733c, _0x4c5b75);
          if (_0x2f046b.trimStart().length > 0) {
            return undefined;
          }
        }
        const _0x285ef6 = _0x2607c3.exec(_0x5b5755.value);
        const _0x4af975 = _0xe369eb.exec(_0x5b5755.value);
        if (_0x285ef6) {
          return 0;
        } else {
          if (_0x4af975) {
            return 1;
          } else {
            return undefined;
          }
        }
      }
    },
    22180: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RemoteFileSystem = undefined;
      const _0x5077e1 = require(66643);
      class _0x5e3e7c {
        constructor(_0x2e56a6, _0x13f0c4) {
          this._rootUri = _0x2e56a6;
          this._syncfs = _0x13f0c4;
          this._invalidPathRegex = [/^.*:\/\/github[^/]*?\/\w+\/$/gm, /^(http|https):\/\/[^/]+\/$/gm];
          this._decoder = new TextDecoder();
        }
        getModulePath() {
          throw new Error('Method not implemented.');
        }
        isMappedUri(_0xc1960d) {
          return false;
        }
        getOriginalUri(_0x359104) {
          return _0x359104;
        }
        getMappedUri(_0x20d15b) {
          return _0x20d15b;
        }
        existsSync(_0x29aa94) {
          try {
            if (this._isUnusableUri(_0x29aa94)) {
              return false;
            }
            const _0x413537 = this._syncfs.statSync(_0x29aa94.toString());
            return _0x413537.type !== 'unknown';
          } catch {
            return false;
          }
        }
        chdir(_0x4a7cc2) {}
        readdirEntriesSync(_0x3140cf) {
          if (this._isUnusableUri(_0x3140cf)) {
            return [];
          }
          if (!this.existsSync(_0x3140cf)) {
            return [];
          }
          const _0x19e870 = this._syncfs.readDirectorySync(_0x3140cf.toString());
          const _0x48bbe8 = _0x3140cf.getPath();
          return _0x19e870.map(_0xab8fbb => new _0x5077e1.VirtualDirent(_0xab8fbb[0], _0xab8fbb[1] === 1, _0x48bbe8));
        }
        readdirSync(_0x35703b) {
          if (this._isUnusableUri(_0x35703b)) {
            return [];
          }
          if (!this.existsSync(_0x35703b)) {
            return [];
          }
          const _0x3ab520 = this._syncfs.readDirectorySync(_0x35703b.toString());
          return _0x3ab520.map(_0x53a4ef => _0x53a4ef[0]);
        }
        readFileSync(_0x3c79b8, _0x41c8c5) {
          if (this._isUnusableUri(_0x3c79b8)) {
            return '';
          }
          const _0x36f564 = this._syncfs.readSync(_0x3c79b8.toString());
          return this._decoder.decode(_0x36f564);
        }
        statSync(_0x551398) {
          if (this._isUnusableUri(_0x551398)) {
            return {
              size: 0,
              mtimeMs: 0,
              isFile: () => false,
              isDirectory: () => false,
              isBlockDevice: () => false,
              isCharacterDevice: () => false,
              isSymbolicLink: () => false,
              isFIFO: () => false,
              isSocket: () => false
            };
          }
          const _0x3a65af = this._syncfs.statSync(_0x551398.toString());
          return {
            size: _0x3a65af.size,
            mtimeMs: _0x3a65af.mtime,
            isFile: () => _0x3a65af.type === 'file',
            isDirectory: () => _0x3a65af.type === 'directory',
            isBlockDevice: () => false,
            isCharacterDevice: () => false,
            isSymbolicLink: () => false,
            isFIFO: () => false,
            isSocket: () => false
          };
        }
        realpathSync(_0xbab56d) {
          return _0xbab56d;
        }
        getModuleUri() {
          return this._rootUri;
        }
        readFile(_0xd771cb) {
          throw new Error('Method not implemented.');
        }
        readFileText(_0xd38228, _0x34c470) {
          throw new Error('Method not implemented.');
        }
        realCasePath(_0x23a057) {
          return _0x23a057;
        }
        isMappedFilePath(_0x1d3007) {
          return false;
        }
        getOriginalFileUri(_0x45482d) {
          return _0x45482d;
        }
        getMappedFileUri(_0x3b4ef7) {
          return _0x3b4ef7;
        }
        isInZip(_0x447359) {
          return false;
        }
        _isUnusableUri(_0x31b9dc) {
          return _0x31b9dc.isEmpty() || this._invalidPathRegex.some(_0x49e27f => _0x49e27f.test(_0x31b9dc.toString()));
        }
      }
      exports.RemoteFileSystem = _0x5e3e7c;
    },
    3777: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LimitedSettingTransformer = exports.ISettingTransformer = undefined;
      exports.applyLimitedSettings = _0x4c97b5;
      const _0x2e7128 = require(65880);
      const _0x2ed762 = require(27113);
      const _0x4ba42c = require(30741);
      const _0x40bdb6 = require(44657);
      var _0x57a58b;
      (function (_0x1f0963) {
        function _0xa916db(_0x3c2bc3) {
          return _0x3c2bc3.transformSettings !== undefined;
        }
        _0x1f0963.is = _0xa916db;
      })(_0x57a58b || (exports.ISettingTransformer = _0x57a58b = {}));
      class _0x13fe99 {
        transformSettings(_0x9e8ae7, _0x31ba58) {
          if (_0x31ba58 === null || _0x31ba58 === undefined ? undefined : _0x31ba58.kinds.some(_0x4f888b => _0x4f888b === _0x4ba42c.WellKnownWorkspaceKinds.Limited)) {
            return _0x4c97b5(_0x9e8ae7, true);
          }
          if ((_0x31ba58 === null || _0x31ba58 === undefined ? undefined : _0x31ba58.kinds.some(_0x42f30f => _0x42f30f === _0x4ba42c.WellKnownWorkspaceKinds.Regular)) && _0x2ed762.Uri.isEmpty(_0x9e8ae7.pythonPath)) {
            return _0x4c97b5(_0x9e8ae7, true);
          }
          return _0x9e8ae7;
        }
      }
      exports.LimitedSettingTransformer = _0x13fe99;
      function _0x4c97b5(_0x446114, _0x4cbfbd = true) {
        const _0x135606 = {
          ..._0x446114
        };
        _0x135606.autoSearchPaths = false;
        _0x135606.openFilesOnly = true;
        _0x135606.watchForConfigChanges = false;
        _0x135606.watchForSourceChanges = false;
        _0x135606.watchForLibraryChanges = false;
        if (_0x4cbfbd) {
          _0x135606.typeCheckingMode = 'off';
        }
        _0x135606.diagnosticSeverityOverrides = {
          [_0x2e7128.DiagnosticRule.reportMissingImports]: 'none',
          [_0x2e7128.DiagnosticRule.reportMissingModuleSource]: 'none'
        };
        _0x135606.diagnosticBooleanOverrides = {
          [_0x2e7128.DiagnosticRule.enableReachabilityAnalysis]: false
        };
        _0x135606.enableExtractCodeAction = false;
        _0x135606.callArgumentNameInlayHints = _0x40bdb6.CallArgumentNameModes.off;
        _0x135606.variableInlayTypeHints = false;
        _0x135606.pytestParametersInlayTypeHints = false;
        _0x135606.functionReturnInlayTypeHints = false;
        _0x135606.aiCodeActions = {};
        return _0x135606;
      }
    },
    49137: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SpecialFoldersKind = undefined;
      exports.getSpecialFolder = _0x494cc2;
      const _0x1c55cf = require(48281);
      var _0x193ce3;
      (function (_0x1e2800) {
        _0x1e2800[_0x1e2800.GlobalIndices = 0] = 'GlobalIndices';
        _0x1e2800[_0x1e2800.LocalIndices = 1] = 'LocalIndices';
      })(_0x193ce3 || (exports.SpecialFoldersKind = _0x193ce3 = {}));
      function _0x494cc2(_0x2c341b, _0x480f24) {
        const _0x420743 = _0x2c8f66(_0x2c341b);
        const _0x8ee7f8 = _0x3189c2.get(_0x480f24);
        _0x1c55cf.assertDefined(_0x8ee7f8, `Unknown SpecialFoldersKind: ${_0x480f24}`);
        return _0x420743.resolvePaths(_0x8ee7f8);
      }
      const _0x3189c2 = new Map([[_0x193ce3.GlobalIndices, 'global_indices'], [_0x193ce3.LocalIndices, 'local_indices']]);
      function _0x2c8f66(_0x4c48f5) {
        return _0x4c48f5.getModulePath().combinePaths('.cache');
      }
    },
    62470: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StopWatch = undefined;
      class _0x7ef5e {
        constructor() {
          this._started = new Date().getTime();
        }
        get elapsedTime() {
          return new Date().getTime() - this._started;
        }
        reset() {
          this._started = new Date().getTime();
        }
      }
      exports.StopWatch = _0x7ef5e;
    },
    69482: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CompletionCoverage = exports.StubTelemetry = exports.TelemetryService = exports.TelemetryInterface = exports.TelemetryEvent = exports.TelemetryEventName = exports.TelemetryWaitTimeSeconds = undefined;
      exports.formatEventName = _0xede007;
      exports.redactError = _0x55b393;
      exports.sendExceptionTelemetry = _0x592b14;
      exports.addMapToEvent = _0x71530e;
      exports.addModuleInfoToEvent = _0x1d3032;
      exports.hashModuleNamesAndAddToEvent = _0x2356ef;
      exports.hashString = _0x4ce0ba;
      exports.getExceptionMessage = _0x37d181;
      exports.exceptionToString = _0x58adc2;
      exports.trackPerf = _0xab71a7;
      exports.test_getAskingUsersPerformanceReporting = _0x5cffc3;
      exports.test_forceAskingUsersPerformanceReporting = _0x2df0a4;
      exports.createTelemetryCorrelationId = _0x33a900;
      exports.lspRequestTelemetry = _0x43984e;
      exports.lspCompletionRequestTelemetry = _0x15f592;
      exports.lspHoverRequestTelemetry = _0x2cef1e;
      exports.lspCodeActionRequestTelemetry = _0x595567;
      exports.lspExecuteCommandRequestTelemetry = _0x21763c;
      const _0x265a8b = require(42073);
      const _0x13de44 = require(56911);
      const _0x417c2b = require(34455);
      const _0x2be046 = require(48281);
      const _0x1ab410 = require(71745);
      const _0x5352ac = require(71582);
      const _0x7ac8be = require(27130);
      const _0x4f1b1a = require(15986);
      const _0x517c8a = require(99504);
      const _0x52d376 = require(95756);
      const _0x2214f0 = require(585);
      const _0x428b87 = require(30048);
      const _0x2b9079 = 300000;
      const _0x1743de = 'language_server/';
      exports.TelemetryWaitTimeSeconds = 600;
      var _0x5ec8d2;
      (function (_0x26e256) {
        _0x26e256.SERVER_SIDE_REQUEST = 'server_side_request';
        _0x26e256.ANALYSIS_COMPLETE = 'analysis_complete';
        _0x26e256.ANALYSIS_EXCEPTION = 'analysis_exception';
        _0x26e256.INTELLICODE_COMPLETION_ITEM_SELECTED = 'intellicode_completion_item_selected';
        _0x26e256.INTELLICODE_MODEL_LOAD_FAILED = 'intellicode_model_load_failed';
        _0x26e256.INTELLICODE_ONNX_LOAD_FAILED = 'intellicode_onnx_load_failed';
        _0x26e256.COMPLETION_ACCEPTED = 'completion_accepted';
        _0x26e256.COMPLETION_COVERAGE = 'completion_coverage';
        _0x26e256.SETTINGS = 'settings';
        _0x26e256.WORKSPACEINDEX_THRESHOLD_REACHED = 'workspaceindex_threshold_reached';
        _0x26e256.FIX_ALL = 'fix_all';
        _0x26e256.RENAME_FILES = 'rename_files';
        _0x26e256.EXECUTE_COMMAND = 'execute_command';
        _0x26e256.INDEX_SLOW = 'index_slow';
        _0x26e256.HOVER_SLOW = 'hover_slow';
        _0x26e256.COMPLETION_SLOW = 'completion_slow';
        _0x26e256.FORMATONTYPE_SLOW = 'formatontype_slow';
        _0x26e256.SEMANTICTOKENS_SLOW = 'semantictokens_slow';
        _0x26e256.INLAYHINTS_SLOW = 'inlayhints_slow';
        _0x26e256.WORKSPACEINDEX_SLOW = 'workspaceindex_slow';
        _0x26e256.RESOLVE_INLAYHINTS_SLOW = 'resolve_inlayhints_slow';
        _0x26e256.IMPORT_METRICS = 'import_metrics';
        _0x26e256.STARTUP_METRICS = 'startup_metrics';
        _0x26e256.COMPLETION_METRICS = 'completion_metrics';
        _0x26e256.GOTODEF_INSIDE_STRING = 'goto_def_inside_string';
        _0x26e256.INSTALLED_PACKAGES = 'installed_packages';
      })(_0x5ec8d2 || (exports.TelemetryEventName = _0x5ec8d2 = {}));
      const _0x322605 = new Set([_0xede007(_0x5ec8d2.IMPORT_METRICS), _0xede007(_0x5ec8d2.STARTUP_METRICS), _0xede007(_0x5ec8d2.COMPLETION_METRICS), _0xede007(_0x5ec8d2.GOTODEF_INSIDE_STRING), _0xede007(_0x5ec8d2.INSTALLED_PACKAGES)]);
      function _0xede007(_0x38ee78) {
        return `${_0x1743de}${_0x38ee78}`;
      }
      function _0x55b393(_0x437b38) {
        if (_0x437b38) {
          const _0x50b069 = _0x2be046.getSerializableError(_0x437b38);
          if (_0x50b069?.stack) {
            const _0x17a262 = /\s+at\s+(.*)\s+\(.*(pyright\.bundle\.js:\d+:\d+|server\.bundle\.js:\d+:\d+).*\)/g;
            _0x50b069.stack = _0x50b069.stack.replace(_0x17a262, ' at $1 ($2)');
          }
          if (_0x50b069?.message) {
            const _0x30199c = /open\s+'(.*[/|\\])(.*)[/|\\](.*?\.wasm)/g;
            _0x50b069.message = _0x50b069.message.replace(_0x30199c, 'open \'$2.$3');
          }
          return _0x50b069;
        }
        return undefined;
      }
      class _0x2430ac {
        constructor(_0x3f3f3a, _0x5267ec) {
          this.Properties = {
            lsVersion: _0x517c8a.VERSION
          };
          this.Measurements = {};
          this.EventName = _0xede007(_0x3f3f3a);
          this.Exception = _0x55b393(_0x5267ec);
        }
        clone() {
          const _0xf51c11 = new _0x2430ac(this.EventName.substr(_0x1743de.length), this.Exception);
          for (const _0x1f9b60 in this.Properties) {
            _0xf51c11.Properties[_0x1f9b60] = this.Properties[_0x1f9b60];
          }
          for (const _0x337ea9 in this.Measurements) {
            _0xf51c11.Measurements[_0x337ea9] = this.Measurements[_0x337ea9];
          }
          return _0xf51c11;
        }
      }
      exports.TelemetryEvent = _0x2430ac;
      var _0x1bcb28;
      (function (_0x52baeb) {
        function _0x371bc5(_0x4ae451) {
          return _0x4ae451 && _0x4ae451.sendTelemetry !== undefined;
        }
        _0x52baeb.is = _0x371bc5;
      })(_0x1bcb28 || (exports.TelemetryInterface = _0x1bcb28 = {}));
      class _0x204018 {
        constructor(_0x5b66ce) {
          this._lspTelemetryThrottler = new _0x2214f0.LspTelemetryThrottler();
          this._pendingProperties = new Map();
          this._extraTelemetryEnabled = false;
          _0x2be046.assert(_0x5b66ce !== undefined);
          this._connection = _0x5b66ce;
          _0x2be046.assert(this._connection !== undefined);
        }
        sendTelemetry(_0x3cff33) {
          try {
            if (this._pendingProperties.has(_0x3cff33.EventName)) {
              const _0x3c9f69 = this._pendingProperties.get(_0x3cff33.EventName);
              for (const [_0x4a487c, _0x35b742] of _0x3c9f69) {
                _0x3cff33.Properties[_0x4a487c] = _0x35b742;
              }
              this._pendingProperties.delete(_0x3cff33.EventName);
            }
            this._sendTelemetry(_0x3cff33);
          } catch {}
        }
        addPropertyToNextEvent(_0xa65197, _0x338f77, _0x2936a4) {
          const _0x1cc5d4 = _0xede007(_0xa65197);
          let _0x540857 = this._pendingProperties.get(_0x1cc5d4);
          if (!_0x540857) {
            _0x540857 = new Map();
            this._pendingProperties.set(_0x1cc5d4, _0x540857);
          }
          _0x540857.set(_0x338f77, _0x2936a4);
        }
        sendLspRequestTelemetry(_0x16d764, _0x3c2f37, _0x23a807, _0x6189f1) {
          return this._lspTelemetryThrottler.maybeSendTelemetry(_0x16d764, _0x3c2f37, () => true, (_0x3b2556, _0x37b2f0) => {
            const _0x4d68ea = new _0x2430ac(_0x5ec8d2.SERVER_SIDE_REQUEST);
            for (const _0x14468e in _0x3b2556) {
              _0x4d68ea.Measurements[_0x14468e] = _0x3b2556[_0x14468e];
            }
            for (const _0x373616 in _0x37b2f0) {
              _0x4d68ea.Properties[_0x373616] = _0x37b2f0[_0x373616];
            }
            this.sendTelemetry(_0x4d68ea);
          }, _0x23a807, _0x6189f1);
        }
        enableExtra(_0x1761a3) {
          this._extraTelemetryEnabled = _0x1761a3;
        }
        _sendTelemetry(_0x3adf2f) {
          var _0xdbfbe9;
          const _0x3bd2d7 = _0x322605.has(_0x3adf2f.EventName);
          if (_0x3bd2d7 && !this._extraTelemetryEnabled) {
            return;
          }
          if ((_0xdbfbe9 = this._connection) === null || _0xdbfbe9 === undefined) {
            undefined;
          } else {
            _0xdbfbe9.telemetry.logEvent(_0x3adf2f);
          }
        }
      }
      exports.TelemetryService = _0x204018;
      function _0x592b14(_0x734599, _0x41cab3, _0xb808da) {
        if (_0x734599 === null || _0x734599 === undefined) {
          undefined;
        } else {
          _0x734599.sendTelemetry(new _0x2430ac(_0x41cab3, _0xb808da));
        }
      }
      function _0x71530e(_0x1484c7, _0x3f63f5) {
        for (const [_0x34a331, _0x2c8b75] of Object.entries(_0x3f63f5)) {
          if (_0x417c2b.isNumber(_0x2c8b75)) {
            const _0x5a8666 = _0x1484c7.Measurements[_0x34a331] || 0;
            _0x1484c7.Measurements[_0x34a331] = _0x5a8666 + _0x2c8b75;
          } else {
            if (_0x417c2b.isString(_0x2c8b75)) {
              _0x1484c7.Properties[_0x34a331] = _0x2c8b75;
            }
          }
        }
        return _0x1484c7;
      }
      var _0x97063d;
      (function (_0x24d6f1) {
        let _0xffc37a;
        const _0x1fbddf = 2000;
        function _0x3923e1(_0x157690, _0x39f684, _0x1532b7) {
          if ((_0x39f684 === null || _0x39f684 === undefined ? undefined : _0x39f684.items.length) === 0 && _0x1532b7?.lastKnownModule && _0x1532b7.lastKnownModule.length > 0) {
            const _0x292243 = new _0x2430ac(_0x5ec8d2.COMPLETION_METRICS);
            _0x1d3032(_0x292243, _0x1532b7);
            if (_0xffc37a) {
              clearTimeout(_0xffc37a);
            }
            _0xffc37a = setTimeout(() => {
              _0x157690.sendTelemetry(_0x292243);
            }, _0x1fbddf);
          }
        }
        _0x24d6f1.sendStubCompletionTelemetryForMissingTypes = _0x3923e1;
      })(_0x97063d || (exports.StubTelemetry = _0x97063d = {}));
      function _0x1d3032(_0x1c595a, _0x26755f) {
        for (const [_0x3327db, _0x3e8735] of Object.entries(_0x26755f)) {
          if (_0x417c2b.isString(_0x3e8735)) {
            const _0x27c144 = _0x3e8735.toLowerCase();
            if (_0x27c144) {
              _0x1c595a.Properties[_0x3327db + 'Hash'] = _0x4ce0ba(_0x27c144);
            }
          }
        }
        if (_0x26755f.lastKnownModule) {
          const _0x343f97 = _0x26755f.lastKnownModule.split('.')[0].toLowerCase();
          if (_0x343f97) {
            _0x1c595a.Properties.packageHash = _0x4ce0ba(_0x343f97);
          }
        }
      }
      function _0x2356ef(_0x53d37b, _0x4d61f1, _0x5dc792, _0xbf9b51 = false) {
        const _0x4d6fb4 = _0x5dc792.map(_0x444cfb => _0x4ce0ba(_0x444cfb)).join(' ');
        _0x53d37b.Properties[_0x4d61f1 + 'Modules'] = _0x4d6fb4;
        const _0x30dec0 = new Set(_0x5dc792.map(_0x19b157 => _0x19b157.split('.')[0]));
        _0x53d37b.Properties[_0x4d61f1 + 'Packages'] = [..._0x30dec0.values()].map(_0x395906 => _0x4ce0ba(_0x395906)).join(' ');
        if (_0xbf9b51) {
          _0x53d37b.Properties[_0x4d61f1 + 'PackagesLowerCase'] = [..._0x30dec0.values()].map(_0x23d4b2 => _0x4ce0ba(_0x23d4b2.toLowerCase())).join(' ');
        }
      }
      function _0x4ce0ba(_0x2b4759) {
        return _0x52d376.sha256(_0x2b4759);
      }
      function _0x37d181(_0xd2513f) {
        let _0xb005f = _0x58adc2(_0xd2513f);
        if (_0xd2513f.code) {
          _0xb005f += `, Error code: ${_0xd2513f.code}`;
        }
        return _0xb005f;
      }
      function _0x58adc2(_0xf35633) {
        return (_0xf35633.stack ? _0xf35633.stack.toString() : undefined) || (typeof _0xf35633.message === 'string' ? _0xf35633.message : undefined) || JSON.stringify(_0xf35633);
      }
      var _0x3080c5;
      (function (_0x1c5396) {
        let _0x289f36;
        (function (_0x53109c) {
          _0x53109c.Successes = 'successes';
          _0x53109c.Failures = 'failures';
          _0x53109c.Total = 'total';
          _0x53109c.OverallSuccesses = 'overallSuccesses';
          _0x53109c.OverallFailures = 'overallFailures';
          _0x53109c.OverallTotal = 'overallTotal';
        })(_0x289f36 ||= {});
        class _0x517230 {
          constructor(_0x2e5ff4) {
            this._service = _0x2e5ff4;
            this._event = new _0x2430ac(_0x5ec8d2.COMPLETION_COVERAGE);
            this._initStats(this._event);
          }
          update(_0x1fa0ae, _0x33b5e0) {
            if (!_0x33b5e0) {
              return;
            }
            if (!(_0x1fa0ae === null || _0x1fa0ae === undefined ? undefined : _0x1fa0ae.items.length)) {
              this._event.Measurements[_0x289f36.Failures] += 1;
            } else {
              this._event.Measurements[_0x289f36.Successes] += 1;
            }
            this._event.Measurements[_0x289f36.Total] += 1;
            if (this._timer) {
              return;
            }
            this._timer = setTimeout(() => {
              this._event.Measurements[_0x289f36.OverallSuccesses] += this._event.Measurements[_0x289f36.Successes];
              this._event.Measurements[_0x289f36.OverallFailures] += this._event.Measurements[_0x289f36.Failures];
              this._event.Measurements[_0x289f36.OverallTotal] += this._event.Measurements[_0x289f36.Total];
              this._service.sendTelemetry(this._event);
              this._event.Measurements[_0x289f36.Successes] = 0;
              this._event.Measurements[_0x289f36.Failures] = 0;
              this._event.Measurements[_0x289f36.Total] = 0;
              if (this._timer) {
                clearTimeout(this._timer);
                this._timer = undefined;
              }
            }, _0x2b9079);
          }
          _initStats(_0x27ee0b) {
            _0x27ee0b.Measurements[_0x289f36.Successes] = 0;
            _0x27ee0b.Measurements[_0x289f36.Failures] = 0;
            _0x27ee0b.Measurements[_0x289f36.Total] = 0;
            _0x27ee0b.Measurements[_0x289f36.OverallSuccesses] = 0;
            _0x27ee0b.Measurements[_0x289f36.OverallFailures] = 0;
            _0x27ee0b.Measurements[_0x289f36.OverallTotal] = 0;
          }
        }
        _0x1c5396.CompletionTelemetry = _0x517230;
      })(_0x3080c5 || (exports.CompletionCoverage = _0x3080c5 = {}));
      function _0xab71a7(_0x48b82d, _0x403be6, _0x5734df, _0x21193b) {
        const _0x3e6cf4 = _0x1bcb28.is(_0x48b82d) ? undefined : _0x48b82d;
        const _0x921ea5 = _0x1bcb28.is(_0x48b82d) ? _0x48b82d : _0x3e6cf4 === null || _0x3e6cf4 === undefined ? undefined : _0x3e6cf4.service.serviceProvider.tryGet(_0x428b87.PylanceServiceKeys.telemetry);
        const _0x186a03 = new _0x5352ac.Duration();
        const _0x52bbe4 = _0x5352ac.timingStats.readFileTime.callCount;
        const _0x16ddb7 = _0x5352ac.timingStats.tokenizeFileTime.callCount;
        const _0x1e62f1 = _0x5352ac.timingStats.parseFileTime.callCount;
        const _0x14329b = _0x5352ac.timingStats.resolveImportsTime.callCount;
        const _0x473e88 = _0x5352ac.timingStats.bindTime.callCount;
        const _0x14d0ec = _0x5352ac.timingStats.typeEvaluationTime.callCount;
        const _0x52955b = _0x5352ac.timingStats.readFileTime.totalTime;
        const _0x597ee4 = _0x5352ac.timingStats.tokenizeFileTime.totalTime;
        const _0x3a17a2 = _0x5352ac.timingStats.parseFileTime.totalTime;
        const _0x1db7ae = _0x5352ac.timingStats.resolveImportsTime.totalTime;
        const _0x35e3b4 = _0x5352ac.timingStats.bindTime.totalTime;
        const _0x11f81f = _0x5352ac.timingStats.typeEvaluationTime.totalTime;
        let _0x1c33bc;
        let _0x4ac5a8;
        const _0x106147 = {
          setCorrelationId(_0x458f76) {
            _0x4ac5a8 = _0x458f76;
          },
          addCustomMeasure(_0x367227, _0x18b4c7, _0x52688b, _0x4978e8 = 'custom_') {
            if (!_0x1c33bc) {
              _0x1c33bc = {};
            }
            if (_0x52688b === undefined || _0x18b4c7 >= _0x52688b) {
              _0x1c33bc[`${_0x4978e8}${_0x367227}`] = _0x18b4c7;
            }
          },
          addCustomProperty(_0x2b9036, _0x3618ff, _0xcc9083 = 'custom_') {
            if (!_0x1c33bc) {
              _0x1c33bc = {};
            }
            _0x1c33bc[`${_0xcc9083}${_0x2b9036}`] = _0x3618ff;
          }
        };
        const _0x30ad72 = _0x5734df(_0x106147);
        if (_0x417c2b.isThenable(_0x30ad72)) {
          return _0x30ad72.then(_0x4e1f26 => {
            _0x13ec8b();
            return _0x4e1f26;
          });
        }
        _0x13ec8b();
        return _0x30ad72;
        function _0x13ec8b() {
          const _0x4d5abd = _0x186a03.getDurationInMilliseconds();
          if (_0x4d5abd <= _0x21193b) {
            return;
          }
          const _0x328260 = new _0x2430ac(_0x403be6);
          if (_0x1c33bc) {
            _0x71530e(_0x328260, _0x1c33bc);
          }
          _0x328260.Measurements.readFileCallCount = _0x5352ac.timingStats.readFileTime.callCount - _0x52bbe4;
          _0x328260.Measurements.tokenizeCallCount = _0x5352ac.timingStats.tokenizeFileTime.callCount - _0x16ddb7;
          _0x328260.Measurements.parseCallCount = _0x5352ac.timingStats.parseFileTime.callCount - _0x1e62f1;
          _0x328260.Measurements.resolveCallCount = _0x5352ac.timingStats.resolveImportsTime.callCount - _0x14329b;
          _0x328260.Measurements.bindCallCount = _0x5352ac.timingStats.bindTime.callCount - _0x473e88;
          _0x328260.Measurements.typeEvalCount = _0x5352ac.timingStats.typeEvaluationTime.callCount - _0x14d0ec;
          _0x328260.Measurements.readFileTime = _0x5352ac.timingStats.readFileTime.totalTime - _0x52955b;
          _0x328260.Measurements.tokenizeTime = _0x5352ac.timingStats.tokenizeFileTime.totalTime - _0x597ee4;
          _0x328260.Measurements.parseTime = _0x5352ac.timingStats.parseFileTime.totalTime - _0x3a17a2;
          _0x328260.Measurements.resolveTime = _0x5352ac.timingStats.resolveImportsTime.totalTime - _0x1db7ae;
          _0x328260.Measurements.bindTime = _0x5352ac.timingStats.bindTime.totalTime - _0x35e3b4;
          _0x328260.Measurements.typeEvalTime = _0x5352ac.timingStats.typeEvaluationTime.totalTime - _0x11f81f;
          _0x328260.Measurements.totalTime = _0x4d5abd;
          if (_0x4ac5a8) {
            _0x328260.Properties.correlationId = _0x4ac5a8;
          }
          if (_0x921ea5 === null || _0x921ea5 === undefined) {
            undefined;
          } else {
            _0x921ea5.sendTelemetry(_0x328260);
          }
          _0x1aa76d(_0x3e6cf4, _0x21193b, _0x328260.Measurements);
        }
      }
      function _0x5cffc3() {
        return _0x46891d;
      }
      function _0x2df0a4() {
        _0x46891d = undefined;
      }
      let _0x46891d = true;
      function _0x1aa76d(_0x5a5507, _0x30927f, _0x13659f) {
        var _0x1a634e;
        if (!_0x5a5507) {
          return;
        }
        if (_0x46891d === false) {
          return;
        }
        if (_0x46891d && _0xa4e119(_0x13659f)) {
          return;
        }
        const _0x110cfd = _0x5a5507.service.serviceProvider;
        const _0x315023 = _0x110cfd.tryGet(_0x1ab410.ServiceKeys.windowService);
        const _0x3865ec = _0x110cfd.tryGet(_0x1ab410.ServiceKeys.commandService);
        if (!_0x5a5507.allowAskingUsersPerformanceReporting || !_0x315023 || !_0x3865ec) {
          if ((_0x1a634e = _0x110cfd.tryGet(_0x1ab410.ServiceKeys.console)) === null || _0x1a634e === undefined) {
            undefined;
          } else {
            _0x1a634e.info(_0x4f1b1a.Localizer.PerformanceTracking.title());
          }
          return;
        }
        _0x46891d = false;
        const _0x4356ac = {
          title: _0x4f1b1a.Localizer.PerformanceTracking.button(),
          id: _0x7ac8be.ClientCommands.reportIssue
        };
        _0x315023.showInformationMessage(_0x4f1b1a.Localizer.PerformanceTracking.title(), _0x4356ac).then(_0x39a9db => {
          if (_0x39a9db && _0x39a9db.id === _0x4356ac.id) {
            _0x3865ec.sendCommand(_0x7ac8be.ClientCommands.reportIssue, 'perf_autoDetect');
          }
        });
        function _0xa4e119(_0x405e7c) {
          const _0x5a2db8 = 5;
          return _0x405e7c.typeEvalTime < _0x30927f * _0x5a2db8 || _0x405e7c.readFileTime + _0x405e7c.tokenizeTime + _0x405e7c.parseTime + _0x405e7c.resolveTime + _0x405e7c.bindTime >= 500;
        }
      }
      function _0x33a900() {
        return _0x265a8b.v4();
      }
      function _0x43984e(_0x45fafe, _0x3cad86, _0x2419e6) {
        return function (_0x4c5224, _0x222cd9, _0x34a336) {
          const _0x4b4d3e = _0x34a336.value;
          _0x34a336.value = function (..._0x278686) {
            return this._telemetry.sendLspRequestTelemetry(_0x45fafe, () => _0x4b4d3e.apply(this, _0x278686), _0x3cad86, _0x2419e6);
          };
          return _0x34a336;
        };
      }
      function _0x15f592() {
        return _0x43984e('textDocument/completion', (_0x1d9d74, _0x1b8d3a) => {
          if (!_0x1b8d3a) {
            return {
              resultLength: 0
            };
          }
          const _0x4eaa00 = Array.isArray(_0x1b8d3a) ? _0x1b8d3a.length : _0x1b8d3a.items.length;
          return {
            resultLength: _0x4eaa00
          };
        }, (_0x2b8350, _0x37b7f3) => {
          if (!_0x37b7f3) {
            return {};
          }
          const _0x3cd79a = Array.isArray(_0x37b7f3) ? _0x37b7f3 : _0x37b7f3?.items || [];
          const _0x330b68 = _0x3cd79a[0]?.data?.moduleHash;
          const _0x59a82d = _0x3cd79a[0]?.data?.moduleVersion;
          if (!_0x330b68) {
            return {};
          }
          return {
            moduleHash: _0x330b68,
            moduleVersion: _0x59a82d || '0'
          };
        });
      }
      function _0x2cef1e() {
        return _0x43984e('textDocument/hover', undefined, (_0x422f63, _0x2062fa) => {
          if (!_0x2062fa) {
            return {};
          }
          let _0xd17ffa;
          let _0x1dc41a;
          const _0x5ba3f0 = _0x417c2b.isArray(_0x2062fa.contents) ? _0x2062fa.contents : [_0x2062fa.contents];
          _0x5ba3f0.forEach(_0x50996b => {
            const _0x5d9d7a = _0x50996b;
            const _0x571c39 = typeof _0x5d9d7a.value === 'string' ? _0x5d9d7a.value.toString() : _0x5d9d7a.toString();
            if (_0x571c39 && _0x571c39.includes('<!--moduleHash:') && !_0xd17ffa) {
              _0xd17ffa = _0x571c39.match(/<!--moduleHash:(.+)-->/m)?.[1];
            }
            if (_0x571c39 && _0x571c39.includes('<!--moduleVersion:') && !_0x1dc41a) {
              _0x1dc41a = _0x571c39.match(/<!--moduleVersion:(.+)-->/m)?.[1];
            }
          });
          if (!_0xd17ffa) {
            return {};
          }
          return {
            moduleHash: parseInt(_0xd17ffa, 10),
            moduleVersion: _0x1dc41a || '0'
          };
        });
      }
      function _0x595567() {
        return _0x43984e('textDocument/codeAction', undefined, (_0x5ba118, _0xb74f4) => {
          if (!_0xb74f4) {
            return {};
          }
          const _0x158fcb = _0xb74f4.map(_0x48c6ff => {
            if (_0x13de44.Command.is(_0x48c6ff)) {
              return `[c:${_0x48c6ff.command}]`;
            } else {
              return `[a:${_0x48c6ff.command?.command ?? _0x48c6ff.title}]`;
            }
          });
          return {
            actions: _0x158fcb.join(', ')
          };
        });
      }
      function _0x21763c() {
        return function (_0x42c629, _0x3e36a3, _0x8193c0) {
          const _0x4609e8 = _0x8193c0.value;
          _0x8193c0.value = function (..._0x79d06e) {
            return this._telemetry.sendLspRequestTelemetry('workspace/executeCommand', () => _0x4609e8.apply(this, _0x79d06e), undefined, () => {
              return {
                command: _0x79d06e[0].command
              };
            });
          };
          return _0x8193c0;
        };
      }
    },
    61904: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.isOptional = _0x4e593a;
      exports.isUnion = _0x4ad1ba;
      exports.lookUpClassMembers = _0x3ba2a7;
      exports.getFunctionParameterNode = _0x5b330e;
      exports.getParameterAnnotationNode = _0x30c32f;
      const _0x33122a = require(21024);
      const _0xf97aa4 = require(92324);
      function _0x4e593a(_0x5c0cde) {
        if (_0xf97aa4.isOptionalType(_0x5c0cde)) {
          return true;
        }
        return _0x33122a.isClass(_0x5c0cde) && _0x5c0cde.shared.moduleName === 'typing' && _0x5c0cde.shared.name === 'Optional';
      }
      function _0x4ad1ba(_0x1f7837) {
        if (_0x33122a.isUnion(_0x1f7837)) {
          return true;
        }
        return _0x33122a.isClass(_0x1f7837) && _0x1f7837.shared.moduleName === 'typing' && _0x1f7837.shared.name === 'Union';
      }
      function* _0x3ba2a7(_0x5ee97a, _0xe37e10, _0x3bf06c = 0, _0x5b511b) {
        const _0x4e2679 = _0x5ee97a.shared.effectiveMetaclass;
        if (_0x4e2679 && _0x33122a.isClass(_0x4e2679) && !_0x33122a.ClassType.isBuiltIn(_0x4e2679, 'type')) {
          for (const _0x21a5b0 of _0xf97aa4.getClassMemberIterator(_0x4e2679, _0xe37e10, 32)) {
            if (_0x21a5b0 && !_0x33122a.isAnyOrUnknown(_0x21a5b0.classType)) {
              _0x21a5b0.isClassMember = true;
              yield _0x21a5b0;
            }
          }
        }
        for (const _0x37319f of _0xf97aa4.getClassMemberIterator(_0x5ee97a, _0xe37e10, _0x3bf06c, _0x5b511b)) {
          yield _0x37319f;
        }
        return undefined;
      }
      function _0x5b330e(_0x1b0cfa, _0x335005) {
        return _0x1b0cfa.d.params.find(_0x7f7229 => {
          var _0x4dc870;
          return ((_0x4dc870 = _0x7f7229.d.name) === null || _0x4dc870 === undefined ? undefined : _0x4dc870.d.value) === _0x335005;
        });
      }
      function _0x30c32f(_0x261224) {
        var _0x126402;
        if ((_0x126402 = _0x261224.d.annotation) !== null && _0x126402 !== undefined) {
          return _0x126402;
        } else {
          return _0x261224.d.annotationComment;
        }
      }
    },
    77001: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.UriMap = undefined;
      class _0x54ad36 {
        constructor() {
          this._keys = new Map();
          this._values = new Map();
        }
        get size() {
          return this._values.size;
        }
        get [Symbol.toStringTag]() {
          return '';
        }
        clear() {
          this._keys.clear();
          this._values.clear();
        }
        forEach(_0x30f4ce, _0x56b43f) {
          this._keys.forEach((_0x4c591f, _0x48675f) => {
            _0x30f4ce(this._values.get(_0x48675f), _0x4c591f, this);
          });
        }
        values() {
          return this._values.values();
        }
        [Symbol.iterator]() {
          return this.entries();
        }
        get(_0x1d0efe) {
          if (_0x1d0efe) {
            return this._values.get(_0x1d0efe.key);
          } else {
            return undefined;
          }
        }
        set(_0x37292a, _0x50f1ff) {
          if (_0x37292a) {
            this._keys.set(_0x37292a.key, _0x37292a);
            this._values.set(_0x37292a.key, _0x50f1ff);
          }
          return this;
        }
        has(_0x34a743) {
          return this._values.has(_0x34a743.key);
        }
        delete(_0x1bd3f6) {
          this._keys.delete(_0x1bd3f6.key);
          return this._values.delete(_0x1bd3f6.key);
        }
        entries() {
          const _0x431b29 = this._keys.entries();
          const _0x496d95 = this._values.entries();
          return new class {
            [Symbol.iterator]() {
              return this;
            }
            next(..._0xe6d2ba) {
              const _0xfdcf74 = _0x431b29.next();
              const _0x5db58d = _0x496d95.next();
              if (_0xfdcf74.done || _0x5db58d.done) {
                return {
                  done: true,
                  value: undefined
                };
              }
              return {
                done: false,
                value: [_0xfdcf74.value[1], _0x5db58d.value[1]]
              };
            }
          }();
        }
        keys() {
          return this._keys.values();
        }
      }
      exports.UriMap = _0x54ad36;
    },
    95349: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CustomLSP = undefined;
      const _0x445e0d = require(8067);
      var _0xd9a2dd;
      (function (_0xfbb635) {
        let _0x42ba34;
        (function (_0x31e326) {
          _0x31e326.Initialization = 'initialization';
          _0x31e326.DidOpenDocument = 'didopendocument';
          _0x31e326.DidChangeDocument = 'didchangedocument';
          _0x31e326.DidOpenNotebookDocument = 'didopennotebookdocument';
          _0x31e326.DidChangeNotebookDocument = 'didchangenotebookdocument';
          _0x31e326.IndexingDone = 'indexingdone';
          _0x31e326.WorkspaceIndexingDone = 'workspaceindexingdone';
        })(_0x42ba34 = _0xfbb635.TestSignalKinds ||= {});
        let _0x4f9555;
        (function (_0x3cc137) {
          _0x3cc137.InExperiment = 'python/inExperiment';
          _0x3cc137.GetExperimentValue = 'python/getExperimentValue';
          _0x3cc137.IsTrustedWorkspace = 'python/isTrustedWorkspace';
          _0x3cc137.JupyterReferences = 'python/jupyterReferences';
          _0x3cc137.JupyterDocumentSymbols = 'python/jupyterDocumentSymbols';
          _0x3cc137.ApplyCursorMovingEdit = 'python/applyCursorMovingEdit';
          _0x3cc137.ClientShowMessage = 'python/clientShowMessage';
          _0x3cc137.GetConfigInfo = 'python/getConfigInfo';
          _0x3cc137.CheckLanguageModel = 'python/checkLanguageModel';
          _0x3cc137.PromptLanguageModel = 'python/promptLanguageModel';
          _0x3cc137.AnalyzeFile = 'test/analyzeFile';
          _0x3cc137.GetWorkspaceConfig = 'test/getWorkspaceConfig';
          _0x3cc137.GetWorkspaceSettings = 'test/getWorkspaceSettings';
          _0x3cc137.GetWorkspaceKinds = 'test/getWorkspaceKinds';
          _0x3cc137.GetWorkspaceInfos = 'test/getWorkspaceInfos';
          _0x3cc137.GetNotebookData = 'test/getNotebookData';
          _0x3cc137.GetUserFiles = 'test/getUserFiles';
          _0x3cc137.GetOpenFiles = 'test/getOpenFiles';
          _0x3cc137.GetWorkspaceInfo = 'test/getWorkspaceInfo';
          _0x3cc137.GetFileContent = 'test/getFileContent';
          _0x3cc137.GetWorkspaceFileContent = 'test/getWorkspaceFileContent';
          _0x3cc137.RunIndexer = 'test/runIndexer';
          _0x3cc137.AnalyzeWorkspace = 'test/analyzeWorkspace';
          _0x3cc137.GetDiagnostics = 'test/getDiagnostics';
          _0x3cc137.GetUserIndices = 'test/getUserIndices';
          _0x3cc137.Wait = 'test/wait';
        })(_0x4f9555 = _0xfbb635.Requests ||= {});
        let _0x15de8a;
        (function (_0x335ab5) {
          _0x335ab5.IsTrustedWorkspace = 'python/isTrustedWorkspaceSync';
        })(_0x15de8a = _0xfbb635.SyncRequests ||= {});
        let _0x43f469;
        (function (_0x55acf4) {
          _0x55acf4.SetStatusBarMessage = 'python/setStatusBarMessage';
          _0x55acf4.BeginProgress = 'python/beginProgress';
          _0x55acf4.ReportProgress = 'python/reportProgress';
          _0x55acf4.EndProgress = 'python/endProgress';
          _0x55acf4.WorkspaceTrusted = 'python/workspaceTrusted';
          _0x55acf4.ConfigOptionsChanged = 'python/configOptionsChanged';
          _0x55acf4.AskForWait = 'test/askForWait';
          _0x55acf4.TestSignal = 'test/signal';
          _0x55acf4.DidChangeConfiguration = 'workspace/didChangeConfiguration';
          _0x55acf4.DidChangeNotebookDocument = 'notebookDocument/didChange';
          _0x55acf4.CacheDirCreate = 'python/cacheDirCreate';
          _0x55acf4.CacheFileWrite = 'python/cacheFileWrite';
          _0x55acf4.TestAddFile = 'test/addFile';
          _0x55acf4.TestStartServer = 'test/startServer';
          _0x55acf4.TestStartServerResponse = 'test/startServerResponse';
          _0x55acf4.TestLog = 'test/logMessage';
          _0x55acf4.TestPassExtraMessagePort = 'test/passExtraMessagePort';
          _0x55acf4.ExecuteCommand = 'pylance/executeCommand';
          _0x55acf4.AddOrUpdateDistUrl = 'pylance/addOrUpdateDistUrl';
          _0x55acf4.RemoveDistUrl = 'pylance/removeDistUrl';
        })(_0x43f469 = _0xfbb635.Notifications ||= {});
        function _0xd8a952(_0x5a1be2, _0x4acaa6, _0x44cd64, _0x42c459) {
          return _0x5a1be2.sendRequest(_0x4acaa6, _0x44cd64, _0x42c459);
        }
        _0xfbb635.sendRequest = _0xd8a952;
        function _0x1d7abd(_0x3c228a, _0x17e00d, _0x59e2a2) {
          const _0x5e94a9 = _0x3c228a;
          const _0x41584c = _0x5e94a9.sendRequest(_0x17e00d, new _0x445e0d.VariableResult('json'));
          if (_0x41584c.errno !== 0) {
            throw new Error(`Request ${_0x17e00d} failed with error ${_0x41584c.errno}`);
          }
          return _0x41584c.data;
        }
        _0xfbb635.sendRequestSync = _0x1d7abd;
        function _0x42405c(_0x32821c, _0x5f3782, _0x427c2a) {
          _0x32821c.sendNotification(_0x5f3782, _0x427c2a);
        }
        _0xfbb635.sendNotification = _0x42405c;
        function _0x2b5625(_0x36a14c, _0x53c073, _0x340351) {
          return _0x36a14c.onRequest(_0x53c073, _0x340351);
        }
        _0xfbb635.onRequest = _0x2b5625;
        function _0x39505f(_0x27cf61, _0xcded4b, _0x310581) {
          return _0x27cf61.onNotification(_0xcded4b, _0x310581);
        }
        _0xfbb635.onNotification = _0x39505f;
      })(_0xd9a2dd || (exports.CustomLSP = _0xd9a2dd = {}));
    },
    28020: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ImportPackageFilterList = undefined;
      exports.ImportPackageFilterList = ['aiohttp', 'aioitertools', 'aiosignal', 'alembic', 'anyio', 'apache-airflow', 'apache-airflow-providers-amazon', 'apispec', 'arrow', 'asgiref', 'asttokens', 'async-timeout', 'attrs', 'autopage', 'awswrangler', 'azure-appconfiguration', 'azure-core', 'azure-cosmos', 'azure-data-tables', 'azure-eventgrid', 'azure-eventhub', 'azure-identity', 'azure-keyvault-certificates', 'azure-keyvault-keys', 'azure-keyvault-secrets', 'azure-mgmt-applicationinsights', 'azure-mgmt-authorization', 'azure-mgmt-batch', 'azure-mgmt-cognitiveservices', 'azure-mgmt-compute', 'azure-mgmt-consumption', 'azure-mgmt-containerinstance', 'azure-mgmt-containerregistry', 'azure-mgmt-containerservice', 'azure-mgmt-core', 'azure-mgmt-cosmosdb', 'azure-mgmt-datafactory', 'azure-mgmt-eventgrid', 'azure-mgmt-eventhub', 'azure-mgmt-imagebuilder', 'azure-mgmt-iothub', 'azure-mgmt-keyvault', 'azure-mgmt-kusto', 'azure-mgmt-media', 'azure-mgmt-monitor', 'azure-mgmt-msi', 'azure-mgmt-netapp', 'azure-mgmt-network', 'azure-mgmt-recoveryservices', 'azure-mgmt-redis', 'azure-mgmt-reservations', 'azure-mgmt-resource', 'azure-mgmt-security', 'azure-mgmt-servicebus', 'azure-mgmt-storage', 'azure-mgmt-subscription', 'azure-mgmt-web', 'azure-servicebus', 'azure-storage-blob', 'azure-storage-queue', 'backoff', 'bcrypt', 'bitarray', 'black', 'boto3-stubs', 'build', 'cachelib', 'cattrs', 'certifi', 'charset-normalizer', 'cheroot', 'ciso8601', 'click', 'cmd2', 'cmdstanpy', 'colorlog', 'constructs', 'contextlib2', 'crashtest', 'cryptography', 'dask', 'dataclasses-json', 'datadog', 'dbt-core', 'ddtrace', 'delta-spark', 'distributed', 'distro', 'django', 'docstring-parser', 'dulwich', 'elasticsearch', 'elastic-transport', 'exceptiongroup', 'faker', 'fastapi', 'fastavro', 'filelock', 'flask', 'Flask-JWT-Extended', 'freezegun', 'frozendict', 'frozenlist', 'ftfy', 'geoip2', 'GitPython', 'google-cloud-bigquery', 'google-cloud-bigtable', 'google-cloud-datastore', 'google-cloud-dlp', 'google-cloud-kms', 'google-cloud-language', 'google-cloud-logging', 'google-cloud-monitoring', 'google-cloud-pubsublite', 'google-cloud-videointelligence', 'google-cloud-vision', 'graphql-core', 'h11', 'hijri-converter', 'hiredis', 'holidays', 'httpcore', 'httpx', 'humanize', 'hyperframe', 'hyperlink', 'hypothesis', 'identify', 'idna', 'imageio', 'importlib-metadata', 'importlib-resources', 'incremental', 'inflect', 'inflection', 'iniconfig', 'ipykernel', 'iso8601', 'isort', 'itsdangerous', 'javaproperties', 'jellyfish', 'jikanpy', 'jinja2', 'jira', 'jupyter-client', 'jupyter-core', 'keyring', 'kiwisolver', 'langcodes', 'libcst', 'loguru', 'makefun', 'markupsafe', 'marshmallow', 'marshmallow-sqlalchemy', 'maxminddb', 'mdit-py-plugins', 'mdurl', 'more-itertools', 'msrest', 'multidict', 'mypy', 'mypy-boto3-rds', 'mypy-boto3-s3', 'natsort', 'nbclient', 'nbformat', 'ninja', 'numpy', 'omegaconf', 'openapi-spec-validator', 'opensearch-py', 'optuna', 'ordered-set', 'orjson', 'overrides', 'packaging', 'parso', 'pathy', 'pendulum', 'phonenumbers', 'pip', 'pip-tools', 'platformdirs', 'poetry', 'portalocker', 'prometheus-client', 'promise', 'prompt-toolkit', 'pure-eval', 'py', 'pyathena', 'pybind11', 'pycryptodome', 'pycryptodomex', 'pydantic', 'pyee', 'PyGithub', 'PyJWT', 'pymongo', 'PyNaCl', 'pyotp', 'pyparsing', 'pypdf2', 'pyproj', 'pyrogram', 'pyrsistent', 'pyspark', 'pytest', 'pytest-asyncio', 'pytest-mock', 'python-dotenv', 'python-gitlab', 'python-magic', 'pytorch-lightning', 'pyzmq', 'qtpy', 'rapidfuzz', 'ray', 'readme-renderer', 'requests-mock', 'resolvelib', 'responses', 'rich', 'rsa', 'rtree', 'rx', 'secretstorage', 'selenium', 'sentry-sdk', 'setproctitle', 'slackclient', 'slack-sdk', 'sniffio', 'soupsieve', 'spacy', 'sphinx', 'stack-data', 'starlette', 'structlog', 'sympy', 'tableauserverclient', 'tenacity', 'termcolor', 'terminado', 'thinc', 'timezonefinder', 'tld', 'tldextract', 'tomli', 'tomlkit', 'torch', 'torchmetrics', 'tornado', 'traitlets', 'twine', 'twisted', 'typeguard', 'typer', 'unidecode', 'uritemplate', 'uvicorn', 'uvloop', 'w3lib', 'wandb', 'websockets', 'werkzeug', 'wsproto', 'xarray', 'xgboost', 'xxhash', 'yarl', 'zeep', 'zict', 'zstandard'];
    },
    65235: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AssignmentWalker = undefined;
      const _0x4b35 = require(61032);
      const _0x425278 = require(38790);
      const _0x7e8e1a = require(88562);
      const _0x574f9e = require(39619);
      class _0x51cb5e extends _0x4b35.BaseParseTreeWalker {
        constructor(_0x57bf46) {
          super();
          this.scopes = [new _0x7e8e1a.Scope('<module>', 0, null, _0x57bf46, [])];
          this.currentScope = this.scopes[0];
        }
        visitNode(_0x4cd605) {
          this.updateCurrentScope(_0x4cd605);
          return super.visitNode(_0x4cd605);
        }
        visitClass(_0x18f80d) {
          return this._handleClassOrFunction(_0x18f80d);
        }
        visitFunction(_0x52277a) {
          return this._handleClassOrFunction(_0x52277a);
        }
        visitAssignment(_0x214a85) {
          if (_0x214a85.d.leftExpr.nodeType === 38) {
            const _0x2a1b6b = _0x214a85.d.leftExpr;
            this._handleAssignment(_0x2a1b6b.d.value, _0x2a1b6b.start, _0x214a85.d.rightExpr);
          }
          return false;
        }
        visitImportFrom(_0x42bb41) {
          var _0x560a0a;
          if (!_0x42bb41.d.module) {
            if (_0x42bb41.d.imports.length > 0) {
              const _0x3a12bb = (_0x560a0a = _0x42bb41.d.imports[0]) === null || _0x560a0a === undefined ? undefined : _0x560a0a.d.name;
              if (_0x3a12bb === null || _0x3a12bb === undefined ? undefined : _0x3a12bb.d.value) {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3a12bb.d.value, _0x3a12bb.d.value, _0x3a12bb.start + _0x3a12bb.length));
              }
            }
            return false;
          }
          const _0x646b5b = _0x42bb41.d.module.d.nameParts.map(_0x316e1e => _0x316e1e.d.value || '').join('.');
          for (const _0x411f81 of _0x42bb41.d.imports) {
            const _0x554952 = _0x411f81.d.name;
            const _0x20471f = _0x411f81.d.alias;
            if (_0x554952.d.value) {
              if (_0x20471f === null || _0x20471f === undefined ? undefined : _0x20471f.d.value) {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x20471f.d.value, _0x646b5b + '.' + _0x554952.d.value, _0x554952.start + _0x554952.length));
              } else {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x554952.d.value, _0x646b5b + '.' + _0x554952.d.value, _0x554952.start + _0x554952.length));
              }
            } else {
              if (_0x20471f === null || _0x20471f === undefined ? undefined : _0x20471f.d.value) {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x20471f.d.value, _0x20471f.d.value, _0x20471f.start + _0x20471f.length));
              }
            }
          }
          return false;
        }
        visitImport(_0x34e42b) {
          for (const _0x5ce876 of _0x34e42b.d.list) {
            const _0x42a977 = _0x5ce876.d.module.d.nameParts;
            if (_0x42a977.length > 0) {
              const _0x44d706 = _0x42a977.map(_0x1d4b3b => _0x1d4b3b.d.value || '').join('.');
              const _0x1053a9 = _0x5ce876.d.alias;
              if (_0x1053a9 === null || _0x1053a9 === undefined ? undefined : _0x1053a9.d.value) {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x1053a9.d.value, _0x44d706, _0x42a977[0].start + _0x44d706.length));
              } else {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x44d706, _0x44d706, _0x42a977[0].start + _0x44d706.length));
              }
            }
          }
          return false;
        }
        visitWith(_0x4c24a1) {
          for (const _0x4f2f94 of _0x4c24a1.d.withItems.filter(_0x5ae2c4 => {
            return _0x5ae2c4.d.expr?.nodeType === 9 && _0x5ae2c4.d.expr.d.leftExpr.nodeType === 38 && _0x5ae2c4.d.target?.nodeType === 38;
          })) {
            const _0x4ba252 = _0x4f2f94.d.target;
            const _0x1c2fa5 = _0x4f2f94.d.expr.d.leftExpr;
            if ((_0x4ba252 === null || _0x4ba252 === undefined ? undefined : _0x4ba252.d.value) && (_0x1c2fa5 === null || _0x1c2fa5 === undefined ? undefined : _0x1c2fa5.d.value)) {
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x4ba252.d.value, _0x1c2fa5.d.value, _0x1c2fa5.start + _0x1c2fa5.length));
            }
          }
          return false;
        }
        visitFor(_0x2dae35) {
          const _0x55e38a = 'element_inside';
          if (_0x2dae35.d.targetExpr.nodeType !== 38) {
            return false;
          }
          const _0x286b1c = _0x2dae35.d.targetExpr;
          const _0x4a1753 = _0x286b1c.d.value;
          switch (_0x2dae35.d.iterableExpr.nodeType) {
            case 38:
              {
                const _0x4362c3 = _0x2dae35.d.iterableExpr;
                if (!_0x4362c3.d.value) {
                  break;
                }
                let _0x32124d = _0x425278.resolveVariable(this.currentScope, _0x4362c3.d.value, _0x4362c3.start);
                if (_0x574f9e.IntelliCodeConstants.UnresolvedType && !_0x32124d) {
                  _0x32124d = _0x574f9e.IntelliCodeConstants.UnresolvedType;
                }
                if (!_0x32124d || !_0x4a1753) {
                  break;
                }
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x4a1753, _0x32124d + '.' + _0x55e38a, _0x286b1c.start + _0x286b1c.length));
              }
              break;
            case 9:
              {
                const _0x3d6098 = _0x2dae35.d.iterableExpr.d.leftExpr;
                if (_0x3d6098.nodeType === 35) {
                  this._handleMemberExpression(_0x4a1753, _0x286b1c.start, _0x3d6098, _0x55e38a);
                }
              }
              break;
            case 35:
              this._handleMemberExpression(_0x4a1753, _0x286b1c.start, _0x2dae35.d.iterableExpr, _0x55e38a);
              break;
          }
          return false;
        }
        visitComprehensionFor(_0x2feacb) {
          if (_0x2feacb.d.targetExpr.nodeType !== 38 || _0x2feacb.d.iterableExpr.nodeType !== 34) {
            return false;
          }
          const _0x1217b5 = _0x2feacb.d.targetExpr.d.value;
          if (!_0x1217b5) {
            return false;
          }
          const _0x43863c = _0x2feacb.d.iterableExpr;
          if (!_0x43863c.d.items || _0x43863c.d.items.length === 0) {
            return false;
          }
          const _0x47ac27 = _0x43863c.d.items[0];
          const _0xf57439 = _0x574f9e.getStandardVariableType(_0x47ac27);
          if (_0xf57439 !== _0x574f9e.StandardVariableType.Null) {
            this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x1217b5, _0xf57439, _0x47ac27.start));
          }
          return false;
        }
        _handleAssignment(_0x3366e9, _0x56e8c7, _0x55a739) {
          switch (_0x55a739.nodeType) {
            case 9:
              {
                if (_0x55a739.d.leftExpr.nodeType === 35) {
                  this._handleMemberExpression(_0x3366e9, _0x56e8c7, _0x55a739.d.leftExpr, '');
                } else {
                  if (_0x55a739.d.leftExpr.nodeType === 38) {
                    const _0x139070 = _0x55a739.d.leftExpr.d.value;
                    this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x139070, _0x55a739.d.leftExpr.start + _0x55a739.d.leftExpr.length));
                  } else {
                    if (_0x55a739.d.leftExpr) {
                      this._handleAssignment(_0x3366e9, _0x56e8c7, _0x55a739.d.leftExpr);
                    }
                  }
                }
              }
              break;
            case 40:
              {
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.getStandardVariableTypeNumber(_0x55a739), _0x56e8c7));
              }
              break;
            case 49:
            case 48:
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.StandardVariableType.String, _0x56e8c7));
              break;
            case 38:
              {
                const _0x1279c5 = _0x425278.resolveVariable(this.currentScope, _0x55a739.d.value, _0x55a739.start);
                if (_0x1279c5 && _0x1279c5.length > 0) {
                  this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x1279c5, _0x56e8c7));
                }
              }
              break;
            case 52:
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.StandardVariableType.Tuple, _0x56e8c7));
              break;
            case 18:
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.StandardVariableType.Dictionary, _0x56e8c7));
              break;
            case 45:
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.StandardVariableType.Set, _0x56e8c7));
              break;
            case 34:
            case 11:
              this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x3366e9, _0x574f9e.StandardVariableType.List, _0x56e8c7));
              break;
          }
        }
        _handleClassOrFunction(_0x4f7ab4) {
          this.currentScope = new _0x7e8e1a.Scope(_0x7e8e1a.getScopeQualifiedName(_0x4f7ab4), _0x4f7ab4.start, this.currentScope, _0x4f7ab4);
          this.scopes.push(this.currentScope);
          return true;
        }
        _handleMemberExpression(_0x41a876, _0x2da5bb, _0x535588, _0x4c0f04) {
          var _0x1ec401;
          const _0x3744e6 = (_0x1ec401 = _0x535588.d.member) === null || _0x1ec401 === undefined ? undefined : _0x1ec401.d.value;
          if (!_0x3744e6 || !_0x535588.d.leftExpr) {
            return;
          }
          const _0x2ac825 = _0x535588.d.leftExpr;
          switch (_0x2ac825.nodeType) {
            case 38:
              {
                let _0x55a968 = _0x2ac825.d.value;
                if (_0x55a968 === 'self') {
                  return;
                }
                const _0xefb1ba = _0x425278.resolveVariable(this.currentScope, _0x55a968, _0x535588.d.leftExpr.start);
                _0x55a968 = _0xefb1ba && _0xefb1ba.length > 0 ? _0xefb1ba : _0x574f9e.IntelliCodeConstants.IncludeUnresolvedType ? _0x574f9e.IntelliCodeConstants.UnresolvedType : _0x55a968;
                const _0x12bd63 = _0x55a968 === _0x574f9e.IntelliCodeConstants.UnresolvedType ? _0x574f9e.IntelliCodeConstants.UnresolvedType : _0x55a968 + '.' + _0x425278.resolveFunction(_0x4c0f04, _0x3744e6);
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x41a876, _0x12bd63, _0x2ac825.start + _0x2ac825.length));
              }
              break;
            case 48:
            case 49:
              {
                const _0x153095 = _0x574f9e.StandardVariableType.String + '.' + _0x425278.resolveFunction(_0x4c0f04, _0x3744e6);
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x41a876, _0x153095, _0x2ac825.start + _0x2ac825.length));
              }
              break;
            case 40:
              {
                const _0x4aed95 = _0x574f9e.getStandardVariableType(_0x2ac825) + '.' + _0x425278.resolveFunction(_0x4c0f04, _0x3744e6);
                this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x41a876, _0x4aed95, _0x2ac825.start + _0x2ac825.length));
              }
              break;
            case 9:
              {
                const _0x3668b1 = _0x2ac825.d.leftExpr;
                if (_0x3668b1.nodeType === 35) {
                  this._handleMemberExpression(_0x41a876, _0x2da5bb, _0x3668b1, _0x425278.resolveFunction(_0x4c0f04, _0x3744e6));
                } else {
                  if (_0x3668b1.nodeType === 38) {
                    const _0x2ecc28 = _0x3668b1.d.value + '.' + _0x425278.resolveFunction(_0x4c0f04, _0x3744e6);
                    this.currentScope.assignments.push(new _0x574f9e.Assignment(_0x41a876, _0x2ecc28, _0x2ac825.start + _0x2ac825.length));
                  }
                }
              }
              break;
            case 35:
              this._handleMemberExpression(_0x41a876, _0x2da5bb, _0x2ac825, _0x425278.resolveFunction(_0x4c0f04, _0x3744e6));
              break;
            case 27:
              {
                if (_0x2ac825.d.leftExpr.nodeType === 35) {
                  this._handleMemberExpression(_0x41a876, _0x2da5bb, _0x2ac825.d.leftExpr, _0x425278.resolveFunction(_0x4c0f04, _0x3744e6));
                } else {
                  if (_0x2ac825.d.leftExpr.nodeType === 38) {
                    this._handleAssignment(_0x41a876, _0x2da5bb, _0x2ac825.d.leftExpr);
                  }
                }
              }
              break;
          }
        }
      }
      exports.AssignmentWalker = _0x51cb5e;
    },
    61032: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BaseParseTreeWalker = undefined;
      const _0x32ae13 = require(88744);
      const _0x229681 = require(88562);
      class _0x325940 extends _0x32ae13.ParseTreeWalker {
        constructor() {
          super(...arguments);
          this.scopes = [];
        }
        makeErrorMessage(_0x1b118e) {
          return `IntelliCode AST walker: ${_0x1b118e}`;
        }
        updateCurrentScope(_0x3b662c) {
          const _0x1f9abd = _0x229681.getEnclosingScopeForNode(_0x3b662c);
          if ((_0x3b662c.nodeType === 31 || _0x3b662c.nodeType === 10) && this.currentScope.node === _0x3b662c) {
            return;
          }
          if (this.currentScope.node !== _0x1f9abd) {
            const _0xe438f0 = this.scopes.findIndex(_0x5715fc => _0x5715fc.node === _0x1f9abd);
            if (_0xe438f0 >= 0) {
              this.currentScope = this.scopes[_0xe438f0];
            }
          }
        }
      }
      exports.BaseParseTreeWalker = _0x325940;
    },
    72740: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DeepLearning = undefined;
      const _0x369151 = require(25075);
      const _0x1f9058 = require(69482);
      const _0x28696f = require(35264);
      const _0xacec49 = require(56238);
      const _0x2145cd = 100;
      const _0x48495d = {
        recommendations: [],
        invocation: undefined
      };
      class _0x191124 {
        constructor(_0x57f553, _0x30b446, _0x9dbeca, _0x3a84ab) {
          this._model = _0x57f553;
          this._platform = _0x30b446;
          this._logger = _0x9dbeca;
          this._telemetry = _0x3a84ab;
        }
        async dispose() {
          if (this._session) {
            await this._session.release();
            this._session = undefined;
          }
        }
        async initialize() {
          var _0x25a9aa;
          var _0x18bf1d;
          var _0x204040;
          var _0x9c4eae;
          if (!this._platform.isOnnxSupported()) {
            if ((_0x25a9aa = this._logger) === null || _0x25a9aa === undefined) {
              undefined;
            } else {
              _0x25a9aa.log(_0x369151.LogLevel.Warn, 'IntelliCode is not supported on this platform.');
            }
            return;
          }
          if (!this._onnx) {
            if ((_0x18bf1d = this._logger) === null || _0x18bf1d === undefined) {
              undefined;
            } else {
              _0x18bf1d.log(_0x369151.LogLevel.Log, 'Loading ONNX runtime...');
            }
            try {
              this._onnx = require(94763);
              if ((_0x204040 = this._logger) === null || _0x204040 === undefined) {
                undefined;
              } else {
                _0x204040.log(_0x369151.LogLevel.Log, 'Loaded ONNX runtime. Creating IntelliCode session...');
              }
            } catch (_0x625237) {
              this._logError('Failed to load ONNX runtime', _0x625237);
            }
          }
          if (this._onnx && this._model) {
            try {
              this._session = await this._onnx.InferenceSession.create(this._model.model, {
                logSeverityLevel: this._getOnnxLogLevel()
              });
              if ((_0x9c4eae = this._logger) === null || _0x9c4eae === undefined) {
                undefined;
              } else {
                _0x9c4eae.log(_0x369151.LogLevel.Log, 'Created IntelliCode session.');
              }
            } catch (_0x31b618) {
              this._logError('Failed to create IntelliCode session', _0x31b618);
            }
          }
        }
        async getRecommendations(_0x5b5f95, _0x17a6c6, _0x39ff6c, _0x2463b5, _0x49addd) {
          var _0x531c94;
          var _0x258d4a;
          var _0x2b38d6;
          var _0x1d2d6e;
          var _0x3566a0;
          if (!this._platform.isOnnxSupported()) {
            return _0x48495d;
          }
          const _0x1fe9a6 = new _0xacec49.EditorLookBackTokenGenerator();
          const _0x39fb23 = _0x1fe9a6.generateLookbackTokens(_0x5b5f95, _0x17a6c6, _0x39ff6c);
          if (!_0x39fb23) {
            if ((_0x531c94 = this._logger) === null || _0x531c94 === undefined) {
              undefined;
            } else {
              _0x531c94.log(_0x369151.LogLevel.Log, 'IntelliCode: current invocation did not produce any meaningful tokens.');
            }
            return _0x48495d;
          }
          if ((_0x258d4a = this._logger) === null || _0x258d4a === undefined) {
            undefined;
          } else {
            _0x258d4a.log(_0x369151.LogLevel.Log, `
Lookback tokens:
 ${_0x39fb23.lookbackTokens.map(_0x531288 => _0x531288.replace(/\n/g, '\\n')).join(',')}
`);
          }
          const _0x1bdae5 = [];
          if (_0x2463b5.length > 0) {
            try {
              const _0x32b3d9 = await _0x28696f.IntelliCodeModelService.instance.deepLearningModelInferenceAsync('python', _0x28696f.DEEP_RERANK_ANALYZER_NAME, _0x39fb23.lookbackTokens, _0x2463b5);
              if (_0x32b3d9 === null || _0x32b3d9 === undefined) {
                undefined;
              } else {
                _0x32b3d9.Recommendations.forEach(_0x2ec131 => _0x1bdae5.push(_0x2ec131));
              }
              if (_0x1bdae5.length > 0) {
                if ((_0x2b38d6 = this._logger) === null || _0x2b38d6 === undefined) {
                  undefined;
                } else {
                  _0x2b38d6.log(_0x369151.LogLevel.Log, `Get recomendations from moderservice succeeded.
                    candidates: ${_0x2463b5.join(',')}
`);
                }
              }
            } catch (_0x5310ba) {
              if ((_0x1d2d6e = this._logger) === null || _0x1d2d6e === undefined) {
                undefined;
              } else {
                _0x1d2d6e.log(_0x369151.LogLevel.Log, `IntelliCode ModelService exception: ${_0x1f9058.getExceptionMessage(_0x5310ba)}`);
              }
            }
          }
          if (_0x1bdae5.length === 0 && this._onnx && this._session && this._model) {
            try {
              const _0x28fafb = this._convertTokenToId(_0x39fb23.lookbackTokens);
              const _0x5559ed = new this._onnx.Tensor('int32', _0x28fafb, [1, _0x28fafb.length]);
              const _0x4011df = new this._onnx.Tensor('int32', [_0x2145cd], [1]);
              const _0x40a130 = {
                ['input_batch:0']: _0x5559ed,
                ['lengths:0']: _0x4011df
              };
              const _0x217936 = await this._session.run(_0x40a130, ['top_k:1']);
              if (_0x49addd?.isCancellationRequested) {
                return _0x48495d;
              }
              const _0x140285 = _0x217936['top_k:1'];
              if (_0x140285) {
                for (const _0x162115 of _0x140285.data) {
                  const _0x3faa48 = _0x162115;
                  if (_0x3faa48) {
                    _0x1bdae5.push(this._model.tokens[_0x3faa48]);
                  }
                }
              }
            } catch (_0x1e02e7) {
              if ((_0x3566a0 = this._logger) === null || _0x3566a0 === undefined) {
                undefined;
              } else {
                _0x3566a0.log(_0x369151.LogLevel.Error, `IntelliCode exception: ${_0x1f9058.getExceptionMessage(_0x1e02e7)}`);
              }
            }
          }
          return {
            recommendations: _0x1bdae5,
            invocation: _0x39fb23
          };
        }
        _convertTokenToId(_0x10bf08) {
          if (!this._model) {
            throw new Error('no model exists');
          }
          const _0x49f735 = new Array(_0x2145cd);
          let _0x275872 = 0;
          if (_0x10bf08.length < _0x2145cd) {
            for (; _0x275872 < _0x2145cd - _0x10bf08.length; _0x275872++) {
              _0x49f735[_0x275872] = 0;
            }
          }
          let _0x3bfc51 = this._model.tokenIdMap.entries.length;
          const _0xc186b2 = new Map();
          for (const _0x37271b of _0x10bf08) {
            let _0x7a568 = this._model.tokenIdMap.get(_0x37271b);
            if (_0x7a568) {
              _0x49f735[_0x275872++] = _0x7a568;
            } else {
              _0x7a568 = _0xc186b2.get(_0x37271b);
              if (_0x7a568) {
                _0x49f735[_0x275872++] = _0x7a568;
              } else {
                const _0x44e33d = _0x3bfc51++;
                _0xc186b2.set(_0x37271b, _0x44e33d);
                _0x49f735[_0x275872++] = _0x44e33d;
              }
            }
          }
          return _0x49f735;
        }
        _getOnnxLogLevel() {
          switch (this._logger?.level) {
            case _0x369151.LogLevel.Error:
            case _0x369151.LogLevel.Warn:
            case _0x369151.LogLevel.Info:
              return 3;
            case _0x369151.LogLevel.Log:
              return 0;
          }
          return 1;
        }
        _logError(_0x4e5be4, _0x53e45e) {
          var _0x154da5;
          var _0x575a24;
          if (_0x53e45e) {
            if ((_0x154da5 = this._logger) === null || _0x154da5 === undefined) {
              undefined;
            } else {
              _0x154da5.log(_0x369151.LogLevel.Error, _0x4e5be4 + '. Exception ' + _0x1f9058.getExceptionMessage(_0x53e45e));
            }
            _0x1f9058.sendExceptionTelemetry(this._telemetry, _0x1f9058.TelemetryEventName.INTELLICODE_ONNX_LOAD_FAILED, _0x53e45e);
          } else {
            if ((_0x575a24 = this._logger) === null || _0x575a24 === undefined) {
              undefined;
            } else {
              _0x575a24.log(_0x369151.LogLevel.Error, _0x4e5be4);
            }
          }
        }
      }
      exports.DeepLearning = _0x191124;
    },
    7448: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ExpressionWalker = undefined;
      const _0x593f76 = require(61032);
      const _0x45af45 = require(38790);
      const _0x396e8b = require(39619);
      class _0x48989c extends _0x593f76.BaseParseTreeWalker {
        constructor(_0x3cf03c) {
          super();
          this.methodInvokations = [];
          this.methodCount = 0;
          if (_0x3cf03c.length < 1) {
            throw new Error(this.makeErrorMessage('empty list of scopes.'));
          }
          this.scopes = _0x3cf03c;
          this.currentScope = this.scopes[0];
        }
        visitNode(_0x54d521) {
          this.updateCurrentScope(_0x54d521);
          return super.visitNode(_0x54d521);
        }
        visitFunction(_0x5bca8f) {
          const _0x47c2cf = this.scopes.find(_0x45ce45 => _0x45ce45.node === _0x5bca8f);
          if (_0x47c2cf) {
            this.currentScope = _0x47c2cf;
          }
          return true;
        }
        visitMemberAccess(_0x46ddff) {
          var _0x143e9d;
          if ((_0x143e9d = _0x46ddff.d.member) === null || _0x143e9d === undefined ? undefined : _0x143e9d.d.value) {
            this.methodCount++;
            this._handleMemberExpression(_0x46ddff.d.member.d.value, _0x46ddff.d.leftExpr);
          }
          return true;
        }
        visitError(_0x3f7916) {
          if (_0x3f7916.d.category === 7) {
            switch (_0x3f7916.d.child?.nodeType) {
              case 35:
              case 38:
              case 9:
              case 27:
              case 49:
              case 48:
              case 40:
              case 34:
              case 18:
              case 45:
              case 52:
                this._handleMemberExpression(undefined, _0x3f7916.d.child);
                break;
            }
          }
          return true;
        }
        _handleMemberExpression(_0x523dd6, _0x3725f1, _0x52a0ed) {
          var _0x1d2636;
          var _0x6e04f8;
          const _0x19c17e = _0x3725f1.start + _0x3725f1.length;
          switch (_0x3725f1.nodeType) {
            case 38:
              {
                const _0x3f2bdd = _0x3725f1.d.value;
                if (!_0x3f2bdd) {
                  return;
                }
                let _0x4e328f = _0x45af45.resolveVariable(this.currentScope, _0x3f2bdd, _0x3725f1.start);
                if (_0x4e328f) {
                  let _0x3f775e = _0x19c17e;
                  if (_0x52a0ed) {
                    _0x4e328f = _0x4e328f + '.' + _0x52a0ed;
                    _0x3f775e += _0x52a0ed.length;
                  }
                  this._addMethod(_0x4e328f, _0x523dd6, _0x3f775e);
                } else {
                  if (_0x396e8b.IntelliCodeConstants.IncludeUnresolvedType) {
                    this._addMethod(_0x396e8b.IntelliCodeConstants.UnresolvedType, _0x523dd6, _0x19c17e);
                  }
                }
              }
              break;
            case 9:
              {
                const _0x1148d7 = _0x3725f1.d.leftExpr;
                switch (_0x1148d7.nodeType) {
                  case 35:
                    if ((_0x1d2636 = _0x1148d7.d.member) === null || _0x1d2636 === undefined ? undefined : _0x1d2636.d.value) {
                      this._handleMemberExpression(_0x523dd6, _0x1148d7.d.leftExpr, _0x52a0ed ? _0x1148d7.d.member.d.value + '.' + _0x52a0ed : _0x1148d7.d.member.d.value);
                    }
                    break;
                  case 38:
                    this._handleMemberExpression(_0x523dd6, _0x1148d7, _0x52a0ed);
                    break;
                }
              }
              break;
            case 35:
              {
                const _0x13d884 = (_0x6e04f8 = _0x3725f1.d.member) === null || _0x6e04f8 === undefined ? undefined : _0x6e04f8.d.value;
                if (_0x13d884) {
                  this._handleMemberExpression(_0x523dd6, _0x3725f1.d.leftExpr, _0x52a0ed ? _0x13d884 + '.' + _0x52a0ed : _0x13d884);
                }
              }
              break;
            case 48:
            case 49:
              this._addMethod(_0x396e8b.StandardVariableType.String, _0x523dd6, _0x19c17e);
              break;
            case 40:
              this._addMethod(_0x396e8b.getStandardVariableType(_0x3725f1), _0x523dd6, _0x19c17e);
              break;
            case 52:
              this._addMethod(_0x396e8b.StandardVariableType.Tuple, _0x523dd6, _0x19c17e);
              break;
            case 45:
              this._addMethod(_0x396e8b.StandardVariableType.Set, _0x523dd6, _0x19c17e);
              break;
            case 34:
              this._addMethod(_0x396e8b.StandardVariableType.List, _0x523dd6, _0x19c17e);
              break;
            case 18:
              this._addMethod(_0x396e8b.StandardVariableType.Dictionary, _0x523dd6, _0x19c17e);
              break;
            case 27:
              {
                const _0x557acc = _0x3725f1.d.leftExpr;
                if (_0x557acc.nodeType === 38) {
                  this._addMethod(_0x396e8b.StandardVariableType.String, _0x523dd6, _0x557acc.start + _0x557acc.length);
                }
              }
              break;
          }
        }
        _addMethod(_0x39bc04, _0x461bbc, _0x5e7f57) {
          this.methodInvokations.push(new _0x396e8b.MethodInvokation(_0x39bc04, _0x461bbc, _0x5e7f57));
        }
      }
      exports.ExpressionWalker = _0x48989c;
    },
    25283: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntelliCodeCommand = undefined;
      require(44562);
      const _0x2373b8 = require(25075);
      const _0x33e874 = require(48281);
      const _0x1bfbb6 = require(27130);
      const _0xf7f364 = require(80209);
      class _0x29fc3d {
        constructor(_0x50d284, _0x42a0ed) {
          this._intelliCode = _0x50d284;
          this._telemetry = _0x42a0ed;
        }
        getFile(_0x2a5ad6) {
          return undefined;
        }
        execute(_0x38fdb4, _0x5b998c, _0xadfa6c) {
          var _0x3983b8;
          if (!this._intelliCode) {
            return;
          }
          switch (_0x5b998c.command) {
            case _0x1bfbb6.Commands.intelliCodeCompletionItemCommand:
              if (_0x5b998c.arguments?.length === 1) {
                _0xf7f364.sendRecommendationsTelemetry(this._telemetry, _0x5b998c.arguments[0]);
              } else {
                if (_0x5b998c.arguments?.length === 3) {
                  _0xf7f364.sendRecommendationsTelemetry(this._telemetry, _0x5b998c.arguments[0], {
                    index: _0x5b998c.arguments[1],
                    method: _0x5b998c.arguments[2]
                  });
                }
              }
              break;
            case _0x1bfbb6.Commands.intelliCodeLoadExtension:
              _0x33e874.assert(Array.isArray(_0x5b998c.arguments));
              _0x33e874.assert(_0x5b998c.arguments?.length === 1);
              if (_0x5b998c.arguments?.length === 1) {
                _0x33e874.assert(_0x5b998c.arguments[0]);
                const _0x3971d5 = _0x5b998c.arguments[0].modelPath;
                _0x33e874.assert(typeof _0x3971d5 === 'string');
                if (typeof _0x3971d5 !== 'string') {
                  return;
                }
                this._intelliCode.logger.log(_0x2373b8.LogLevel.Log, `IntelliCode model ${_0x3971d5}`);
                let _0x4d658a = _0x5b998c.arguments[0].pipeName;
                if (typeof _0x4d658a === 'string') {
                  this._intelliCode.logger.log(_0x2373b8.LogLevel.Log, `pipe name ${_0x4d658a}`);
                } else {
                  _0x4d658a = undefined;
                }
                let _0x22d090 = _0x5b998c.arguments[0].analyzerName;
                if (typeof _0x22d090 === 'string') {
                  this._intelliCode.logger.log(_0x2373b8.LogLevel.Log, `analyzerName ${_0x22d090}`);
                } else {
                  _0x22d090 = undefined;
                }
                this._intelliCode.setModelLoadInfo(_0x3971d5, _0x4d658a, _0x22d090);
                if ((_0x3983b8 = this._intelliCode) === null || _0x3983b8 === undefined) {
                  undefined;
                } else {
                  _0x3983b8.ensureModelLoaded().ignoreErrors();
                }
              }
              break;
          }
        }
      }
      exports.IntelliCodeCommand = _0x29fc3d;
    },
    17920: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntelliCodeCompletionAugmenter = undefined;
      const _0x5d32ed = require(56814);
      const _0x335df3 = require(71582);
      const _0x4bf806 = require(5737);
      const _0x269f65 = require(30048);
      const _0x223ed6 = require(65235);
      const _0x334d76 = require(7448);
      const _0x362640 = require(80209);
      const _0x5ec21d = require(39619);
      class _0x592f41 {
        constructor(_0x49571a, _0x2a9601, _0x2eb0c1, _0x273587, _0x5603da) {
          this._program = _0x49571a;
          this._fileUri = _0x2a9601;
          this._position = _0x2eb0c1;
          this._options = _0x273587;
          this._token = _0x5603da;
          const _0x2c295f = this._program.serviceProvider.tryGet(_0x269f65.PylanceServiceKeys.intelliCode);
          this._intelliCode = _0x2c295f?.isEnabled ? _0x2c295f : undefined;
        }
        async addCompletionItems(_0xa50640) {
          var _0x3dc800;
          if (!this._intelliCode || !this._intelliCode.deepLearning || !_0xa50640 || _0xa50640.items.length === 0) {
            return;
          }
          if (!this._intelliCode.model && !this._intelliCode.useModelService) {
            return;
          }
          const _0x1cc9ce = this._program.getParseResults(this._fileUri);
          if (!_0x1cc9ce) {
            return;
          }
          const _0xcdfe15 = _0x5d32ed.convertPositionToOffset(this._position, _0x1cc9ce.tokenizerOutput.lines);
          if (_0xcdfe15 === undefined) {
            return;
          }
          try {
            const _0x45a140 = new _0x335df3.Duration();
            const _0x70ecbc = process.memoryUsage().heapUsed / 1024;
            const _0x4ed26a = _0x1cc9ce.parserOutput.parseTree;
            const _0x3644ad = new _0x223ed6.AssignmentWalker(_0x4ed26a);
            _0x3644ad.walk(_0x4ed26a);
            const _0x37a81f = new _0x334d76.ExpressionWalker(_0x3644ad.scopes);
            _0x37a81f.walk(_0x4ed26a);
            const _0x2345d6 = _0xa50640.items.map(_0x55991c => _0x55991c.label);
            const _0x338a65 = await this._intelliCode.deepLearning.getRecommendations(_0x1cc9ce, _0x37a81f, _0xcdfe15, _0x2345d6, this._token);
            if (_0x338a65.recommendations.length > 0) {
              this._program.console.log(`Recommendations: ${_0x338a65.recommendations.join(', ')}`);
            }
            const _0x2c0eb3 = process.memoryUsage().heapUsed / 1024;
            const _0x4a75fa = Math.round(_0x2c0eb3 - _0x70ecbc);
            this._program.console.log(`Time taken to get recommendations: ${_0x45a140.getDurationInMilliseconds()} ms, Memory increase: ${_0x4a75fa} KB.`);
            if (this._token.isCancellationRequested) {
              return;
            }
            const _0xb7863a = _0xa50640.items.filter(_0x1557e1 => _0x1557e1.detail !== _0x4bf806.autoImportDetail);
            const _0x384789 = this._applyModel(_0xb7863a, _0x338a65.recommendations);
            this._info = _0x362640.buildRecommendationsTelemetry(_0xb7863a, _0x338a65.recommendations, _0x384789, _0x338a65.invocation?.type, ((_0x3dc800 = this._intelliCode.model) === null || _0x3dc800 === undefined ? undefined : _0x3dc800.metaData.Version) ?? 'deeprerank', _0x45a140.getDurationInMilliseconds(), _0x4a75fa);
          } catch (_0x3cfe1a) {
            this._program.console.error(`Exception in IntelliCode: ${_0x3cfe1a.stack}`);
            return;
          }
        }
        getExtensionInfo() {
          return this._info;
        }
        _applyModel(_0x501d95, _0x4585b4) {
          const _0x3bc460 = [];
          if (_0x4585b4.length === 0) {
            return _0x3bc460;
          }
          const _0x28c657 = new Map(_0x501d95.filter(_0x2cd1b9 => _0x2cd1b9.label).map(_0xa98ed5 => [_0xa98ed5.label, _0xa98ed5]));
          let _0x676e9d = 0;
          for (const _0x354f66 of _0x4585b4) {
            const _0x1929a5 = _0x28c657.get(_0x354f66);
            if (_0x1929a5) {
              this._updateCompletionItem(_0x1929a5, _0x676e9d);
              if (_0x1929a5.insertText) {
                _0x3bc460.push(_0x1929a5.insertText);
              }
              if (_0x676e9d >= _0x5ec21d.IntelliCodeConstants.MaxRecommendation) {
                break;
              }
              _0x676e9d++;
            }
          }
          return _0x3bc460;
        }
        _updateCompletionItem(_0x3265cc, _0x40c2ed) {
          if (!_0x3265cc.insertText && !_0x3265cc.textEdit) {
            _0x3265cc.insertText = _0x3265cc.label;
          }
          if (!_0x3265cc.filterText || _0x3265cc.filterText.length === 0) {
            _0x3265cc.filterText = _0x3265cc.insertText || _0x3265cc.label;
          }
          _0x3265cc.sortText = `00.${_0x40c2ed}.${_0x3265cc.label}`;
          _0x3265cc.filterText = _0x3265cc.label.toLocaleLowerCase();
          _0x3265cc.label = `${_0x5ec21d.IntelliCodeConstants.UnicodeStar}${_0x3265cc.label}`;
          _0x3265cc.preselect = _0x40c2ed === 0;
        }
      }
      exports.IntelliCodeCompletionAugmenter = _0x592f41;
    },
    35264: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntelliCodeModelService = exports.DEEP_RERANK_ANALYZER_NAME = undefined;
      const _0xe09716 = require(69278);
      const _0x2d4fef = __importStar(require(90355));
      const _0x54bfcc = require(89688);
      var _0xcc67f9;
      (function (_0x1f72f7) {
        _0x1f72f7[_0x1f72f7.None = 0] = 'None';
        _0x1f72f7[_0x1f72f7.NotInModel = 1] = 'NotInModel';
        _0x1f72f7[_0x1f72f7.NotInIntersection = 2] = 'NotInIntersection';
        _0x1f72f7[_0x1f72f7.ModelLoadFailed = 3] = 'ModelLoadFailed';
        _0x1f72f7[_0x1f72f7.ZeroWeight = 4] = 'ZeroWeight';
      })(_0xcc67f9 ||= {});
      exports.DEEP_RERANK_ANALYZER_NAME = 'intellisense-members-lstm2';
      class _0x1ef7bf {
        constructor() {
          this._loadModelRequest = new _0x2d4fef.RequestType3('LoadModelAsync');
          this._getPatternsRequest = new _0x2d4fef.RequestType3('GetPatternsAsync');
          this._deepLearningModelInferenceRequest = new _0x2d4fef.RequestType4('DeepLearningModelInferenceAsync');
        }
        static get instance() {
          if (!_0x1ef7bf._singleton) {
            _0x1ef7bf._singleton = new _0x1ef7bf();
          }
          return _0x1ef7bf._singleton;
        }
        async startModelServiceAsync(_0xdea097) {
          if (this._connection) {
            return;
          }
          const _0x26b05d = _0xe09716.createConnection(_0xdea097);
          this._connection = _0x2d4fef.createMessageConnection(new _0x54bfcc.StreamMessageReader(_0x26b05d), new _0x54bfcc.StreamMessageWriter(_0x26b05d));
          this._connection.listen();
        }
        async loadModelAsync(_0x596e4a, _0x3fd42d, _0x57e4b6) {
          var _0xfe1515;
          if ((_0xfe1515 = this._connection) === null || _0xfe1515 === undefined) {
            return undefined;
          } else {
            return _0xfe1515.sendRequest(this._loadModelRequest, _0x596e4a, _0x3fd42d, _0x57e4b6);
          }
        }
        async getPatternsAsync(_0x4bf898, _0x5a8c71, _0x22921b) {
          var _0x721e17;
          if ((_0x721e17 = this._connection) === null || _0x721e17 === undefined) {
            return undefined;
          } else {
            return _0x721e17.sendRequest(this._getPatternsRequest, _0x4bf898, _0x5a8c71, _0x22921b);
          }
        }
        async deepLearningModelInferenceAsync(_0x2f9a3e, _0x400c71, _0x45db8d, _0x144c56) {
          var _0x227a81;
          if ((_0x227a81 = this._connection) === null || _0x227a81 === undefined) {
            return undefined;
          } else {
            return _0x227a81.sendRequest(this._deepLearningModelInferenceRequest, _0x2f9a3e, _0x400c71, _0x45db8d, _0x144c56);
          }
        }
      }
      exports.IntelliCodeModelService = _0x1ef7bf;
    },
    77981: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntelliCodeService = undefined;
      require(44562);
      const _0x1767f6 = __importStar(require(94763));
      const _0x3706da = require(25075);
      const _0xaf51ed = require(69482);
      const _0x34b07e = require(72740);
      const _0xff1640 = require(35264);
      const _0x13c74d = require(74444);
      const _0x55c99a = require(3621);
      class _0x251451 {
        constructor(_0x2c4749, _0x43a6ff, _0x35005f) {
          this.logger = _0x2c4749;
          this._platform = _0x43a6ff;
          this._telemetry = _0x35005f;
          this._useModelService = false;
          this._enabled = true;
          this._zipOpener = _0x55c99a.realZipOpener();
        }
        get deepLearning() {
          return this._deepLearning;
        }
        get useModelService() {
          return this._useModelService;
        }
        get isEnabled() {
          return this._enabled;
        }
        async dispose() {
          if (this._deepLearning) {
            await this._deepLearning.dispose();
            this._deepLearning = undefined;
          }
        }
        enable(_0x5ccd97) {
          this._enabled = _0x5ccd97;
        }
        setModelLoadInfo(_0x1fa374, _0x18df3e, _0x47f089) {
          this._modelZipPath = _0x1fa374;
          this._pipeName = _0x18df3e;
          this._analyzerName = _0x47f089;
        }
        async ensureModelLoaded() {
          if (!this._modelLoadedPromise) {
            this._modelLoadedPromise = this._ensureModelLoadedImpl();
          }
          return this._modelLoadedPromise;
        }
        async _ensureModelLoadedImpl() {
          var _0x331a60;
          if (!((_0x331a60 = this._platform) === null || _0x331a60 === undefined ? undefined : _0x331a60.isOnnxSupported())) {
            return;
          }
          _0x1767f6.env.wasm.numThreads = 1;
          _0x1767f6.env.wasm.simd = false;
          if (this._enabled && this._modelZipPath) {
            await this._loadModel();
          } else {
            this._deepLearning = undefined;
            this.model = undefined;
          }
        }
        async _loadModel() {
          if (this.model || !this._modelZipPath) {
            return;
          }
          if (this._pipeName && this._analyzerName === _0xff1640.DEEP_RERANK_ANALYZER_NAME) {
            try {
              const _0x493280 = _0xff1640.IntelliCodeModelService.instance;
              await _0x493280.startModelServiceAsync(this._pipeName);
              this.logger.log(_0x3706da.LogLevel.Log, 'Load model with modelservice');
              await _0x493280.loadModelAsync('python', this._analyzerName, this._modelZipPath);
              this._useModelService = true;
              this.logger.log(_0x3706da.LogLevel.Log, `Load model with modelservice succeeded. modelPath: ${this._modelZipPath}`);
            } catch (_0x13602e) {
              const _0x158491 = 'Failed to load IntelliCode model through ModelService';
              this.logger.log(_0x3706da.LogLevel.Warn, _0x158491 + '. Exception: ' + _0xaf51ed.getExceptionMessage(_0x13602e));
            }
          } else {
            try {
              const _0x280f3b = new _0x13c74d.ModelLoader(this._zipOpener, this.logger, this._telemetry);
              this.model = await _0x280f3b.loadModel(this._modelZipPath);
            } catch (_0x544da6) {
              const _0x59fcbb = 'Failed to load IntelliCode model';
              this.logger.log(_0x3706da.LogLevel.Warn, _0x59fcbb + '. Exception: ' + _0xaf51ed.getExceptionMessage(_0x544da6));
              _0xaf51ed.sendExceptionTelemetry(this._telemetry, _0xaf51ed.TelemetryEventName.INTELLICODE_MODEL_LOAD_FAILED, _0x544da6);
            }
          }
          try {
            if (!this._deepLearning) {
              this._deepLearning = new _0x34b07e.DeepLearning(this.model, this._platform, this.logger, this._telemetry);
            }
            await this._deepLearning.initialize();
            this.logger.log(_0x3706da.LogLevel.Log, 'Initialize deeplearning succeeded');
          } catch (_0x2e07eb) {
            const _0x5be2f0 = 'Failed to initialize deeplearning';
            this.logger.log(_0x3706da.LogLevel.Warn, _0x5be2f0 + '. Exception: ' + _0xaf51ed.getExceptionMessage(_0x2e07eb));
          }
        }
      }
      exports.IntelliCodeService = _0x251451;
    },
    74444: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ModelLoader = undefined;
      const _0x28fd24 = require(25075);
      const _0x4c26f2 = require(69482);
      const _0x5284a8 = require(98162);
      class _0x5ce2f1 {
        constructor(_0x35b2fa, _0x5f5da1, _0x21b0db) {
          this._zipOpener = _0x35b2fa;
          this._logger = _0x5f5da1;
          this._telemetry = _0x21b0db;
        }
        async loadModel(_0x3bd4be) {
          const _0x1b8bb4 = this._tryExecute(() => this._zipOpener.open(_0x3bd4be), 'Unable to open model zip');
          if (!_0x1b8bb4) {
            return undefined;
          }
          try {
            const _0x407559 = await this._loadJson(_0x1b8bb4, _0x5284a8.ModelMetaDataFileName, 'IntelliCode metadata');
            if (!_0x407559) {
              return undefined;
            }
            const _0x417845 = await this._loadJson(_0x1b8bb4, _0x5284a8.ModelTokensFileName, 'IntelliCode model data');
            if (!_0x417845) {
              return undefined;
            }
            const _0x5671ef = await this._tryExecuteAsync(() => _0x1b8bb4.entryData(_0x5284a8.ModelFileName), 'Unable to read model.onnx');
            if (!_0x5671ef) {
              return undefined;
            }
            const _0xbfbd2a = new Uint8Array(_0x5671ef);
            const _0x3e2e33 = new Map(_0x417845.map((_0x40ec67, _0x56bb6b) => [_0x40ec67, _0x56bb6b]));
            return {
              model: _0xbfbd2a,
              metaData: _0x407559,
              tokens: _0x417845,
              tokenIdMap: _0x3e2e33
            };
          } finally {
            await this._tryExecuteAsync(() => _0x1b8bb4.close(), 'Unable to close model zip');
          }
        }
        async _loadJson(_0x5dc439, _0x196e8f, _0x1d5f1f) {
          try {
            const _0x21ef5c = await _0x5dc439.entryData(_0x196e8f);
            const _0x32bda7 = _0x21ef5c.toString();
            try {
              return JSON.parse(_0x32bda7);
            } catch (_0x1ce6f5) {
              this._logError(`Unable to parse ${_0x1d5f1f}`, _0x1ce6f5);
            }
          } catch (_0x67280e) {
            this._logError(`Unable to read ${_0x1d5f1f}`, _0x67280e);
          }
          return undefined;
        }
        _tryExecute(_0x3c19e8, _0x722021) {
          try {
            return _0x3c19e8();
          } catch (_0x84b16e) {
            this._logError(_0x722021, _0x84b16e);
            return undefined;
          }
        }
        async _tryExecuteAsync(_0x154aa8, _0x597259) {
          try {
            return await _0x154aa8();
          } catch (_0x1aae13) {
            this._logError(_0x597259, _0x1aae13);
            return undefined;
          }
        }
        _logError(_0x5132e2, _0x1d757a) {
          var _0x180669;
          var _0x39e782;
          if (_0x1d757a) {
            if ((_0x180669 = this._logger) === null || _0x180669 === undefined) {
              undefined;
            } else {
              _0x180669.log(_0x28fd24.LogLevel.Error, _0x1d757a ? _0x5132e2 + '. Exception ' + _0x4c26f2.getExceptionMessage(_0x1d757a) : _0x5132e2);
            }
            _0x4c26f2.sendExceptionTelemetry(this._telemetry, _0x4c26f2.TelemetryEventName.INTELLICODE_MODEL_LOAD_FAILED, _0x1d757a);
          } else {
            if ((_0x39e782 = this._logger) === null || _0x39e782 === undefined) {
              undefined;
            } else {
              _0x39e782.log(_0x28fd24.LogLevel.Error, _0x5132e2);
            }
          }
        }
      }
      exports.ModelLoader = _0x5ce2f1;
    },
    98162: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ModelTokensFileName = exports.ModelMetaDataFileName = exports.ModelFileName = exports.LookbackTokenLength = undefined;
      exports.LookbackTokenLength = 100;
      exports.ModelFileName = 'model.onnx';
      exports.ModelMetaDataFileName = 'metadata.json';
      exports.ModelTokensFileName = 'tokens.json';
    },
    38790: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.resolveFunction = _0x17840b;
      exports.resolveVariable = _0x2d30ac;
      exports.resolveAssignments = _0x4a5467;
      function _0x17840b(_0x33b6a0, _0x1dd68d) {
        if (_0x33b6a0 && _0x33b6a0.length > 0) {
          return _0x1dd68d + '.' + _0x33b6a0;
        } else {
          return _0x1dd68d;
        }
      }
      function _0x2d30ac(_0x1e6253, _0xf30c8e, _0x3203a6) {
        if (!_0xf30c8e || !_0x1e6253 || !_0x1e6253.parent && (!_0x1e6253.assignments || _0x1e6253.assignments.length === 0)) {
          return _0xf30c8e;
        }
        let _0xb864f = _0x1e6253;
        const _0x391404 = _0xb864f.assignments;
        let _0x2f2f49 = _0x4a5467(_0x391404, _0xf30c8e, _0x3203a6);
        while (!_0x2f2f49 && _0xb864f.parent) {
          _0xb864f = _0xb864f.parent;
          _0x2f2f49 = _0x4a5467(_0xb864f.assignments, _0xf30c8e, _0x3203a6);
        }
        return _0x2f2f49;
      }
      function _0x4a5467(_0x33346c, _0x815b9a, _0x54a841) {
        if (!_0x33346c) {
          return undefined;
        }
        let _0x55b02e;
        for (let _0x2841f3 = _0x33346c.length - 1; _0x2841f3 >= 0; _0x2841f3--) {
          const _0x468560 = _0x33346c[_0x2841f3];
          if (_0x468560.spanStart > _0x54a841) {
            continue;
          }
          if (_0x468560.key === _0x815b9a && !_0x55b02e) {
            _0x55b02e = _0x468560.value;
          } else {
            if (_0x55b02e === _0x468560.key) {
              _0x55b02e = _0x468560.value;
            }
          }
        }
        return _0x55b02e;
      }
    },
    88562: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Scope = undefined;
      exports.getEnclosingScopeForNode = _0x6028ba;
      exports.getScopeNodeName = _0x4a16ba;
      exports.getScopeQualifiedName = _0x56a81f;
      const _0x3e57e3 = require(48281);
      class _0x1f834b {
        constructor(_0x3cd59a, _0x39e7aa, _0x3a6cd8, _0xf152a0, _0x172be0) {
          this.name = _0x3cd59a;
          this.spanStart = _0x39e7aa;
          this.parent = _0x3a6cd8;
          this.node = _0xf152a0;
          this.assignments = _0x172be0 || [];
        }
      }
      exports.Scope = _0x1f834b;
      function _0x6028ba(_0x4fe671) {
        if (_0x4fe671.nodeType === 36) {
          return _0x4fe671;
        }
        let _0x475dde = _0x4fe671;
        if (_0x4fe671.nodeType === 31 || _0x4fe671.nodeType === 10) {
          _0x475dde = _0x4fe671.parent;
        }
        while (_0x475dde) {
          switch (_0x475dde.nodeType) {
            case 36:
            case 31:
            case 10:
              return _0x475dde;
          }
          _0x475dde = _0x475dde.parent;
        }
        _0x3e57e3.fail('Did not find tree scope');
        return undefined;
      }
      function _0x4a16ba(_0x591850) {
        var _0x1569ca;
        var _0x575e34;
        switch (_0x591850.nodeType) {
          case 31:
            return ((_0x1569ca = _0x591850.d.name) === null || _0x1569ca === undefined ? undefined : _0x1569ca.d.value) || '?';
          case 10:
            return ((_0x575e34 = _0x591850.d.name) === null || _0x575e34 === undefined ? undefined : _0x575e34.d.value) || '?';
        }
      }
      function _0x56a81f(_0x6f206e) {
        const _0x40668e = _0x6028ba(_0x6f206e);
        const _0x590fda = _0x4a16ba(_0x6f206e);
        if (_0x40668e.nodeType === 36) {
          return _0x590fda;
        } else {
          return _0x56a81f(_0x40668e) + '.' + _0x590fda;
        }
      }
    },
    80209: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.sendRecommendationsTelemetry = _0x2819d0;
      exports.buildRecommendationsTelemetry = _0x553f39;
      const _0x56c36d = require(71582);
      const _0xdbeeee = require(27130);
      const _0x48b53b = require(23898);
      const _0x3b277a = require(69482);
      const _0x16211b = require(39619);
      let _0xa2e327;
      function _0x1e5b54(_0x4f4fa9) {
        if (_0xa2e327?.id !== _0x4f4fa9) {
          return;
        }
        const _0x3edab5 = new _0x3b277a.TelemetryEvent(_0x3b277a.TelemetryEventName.INTELLICODE_COMPLETION_ITEM_SELECTED);
        _0x3edab5.Properties.Id = _0xa2e327.id;
        _0x3edab5.Properties.Language = _0xa2e327.language;
        _0x3edab5.Properties.ModelType = _0xa2e327.modelType;
        _0x3edab5.Properties.ModelVersion = _0xa2e327.modelVersion;
        _0x3edab5.Properties.FailureReason = _0xa2e327.failureReason;
        _0x3edab5.Properties.Class = _0xa2e327.class;
        _0x3edab5.Measurements.ElapsedTime = _0xa2e327.elapsedTime;
        _0x3edab5.Measurements.MemoryIncreaseKB = _0xa2e327.memoryIncreaseKB;
        _0x3edab5.Measurements.Count = _0xa2e327.count;
        _0x3edab5.Properties.Methods = _0xa2e327.methods;
        return _0x3edab5;
      }
      function _0x2819d0(_0x375e3e, _0x485ca8, _0x5795ef) {
        if (!_0x375e3e) {
          return;
        }
        const _0x120247 = _0x1e5b54(_0x485ca8);
        if (!_0x120247) {
          return;
        }
        if (_0x5795ef) {
          _0x120247.Properties.Index = _0x5795ef.index;
          _0x120247.Properties.Method = _0x5795ef.method;
          _0x120247.Properties.IsIntelliCodeCommit = 'True';
        } else {
          _0x120247.Properties.Index = '-1';
          _0x120247.Properties.Method = '';
          _0x120247.Properties.IsIntelliCodeCommit = 'False';
        }
        _0x375e3e.sendTelemetry(_0x120247);
      }
      function _0x553f39(_0x577a48, _0x46a1f4, _0x9e17d9, _0x35a646, _0x8809d7, _0x2ce780, _0x40a79b) {
        const _0x1f883c = _0x3b277a.createTelemetryCorrelationId();
        const _0x15f15e = new _0x56c36d.Duration();
        let _0x4c3744 = _0x16211b.FailureReason.None;
        if (_0x46a1f4.length > 0) {
          if (_0x9e17d9.length === 0) {
            _0x4c3744 = _0x16211b.FailureReason.NotInIntersection;
          }
        } else {
          _0x4c3744 = _0x16211b.FailureReason.NotInModel;
        }
        let _0x253ed7 = '';
        if (_0x4c3744 !== _0x16211b.FailureReason.NotInModel) {
          _0x253ed7 = _0x35a646 || 'undefined';
        }
        let _0x1f0088 = -1;
        let _0x4aebd8 = '';
        if (_0x46a1f4.length > 0) {
          _0x1f0088 = _0x9e17d9.length;
          _0x4aebd8 = _0x46a1f4.join(',');
        }
        _0xa2e327 = {
          id: _0x1f883c,
          language: 'python',
          modelType: _0x16211b.ModelType.LSTM,
          modelVersion: `python_LSTM_${_0x8809d7}`,
          failureReason: _0x4c3744,
          class: _0x253ed7,
          elapsedTime: _0x2ce780,
          memoryIncreaseKB: _0x40a79b,
          count: _0x1f0088,
          methods: _0x4aebd8
        };
        const _0xdbc91b = _0x15f15e.getDurationInMilliseconds();
        _0x572b0b(_0x1f883c, _0x577a48, _0x9e17d9);
        const _0x235bec = _0x15f15e.getDurationInMilliseconds();
        return {
          correlationId: _0x1f883c,
          selectedItemTelemetryTimeInMS: _0xdbc91b,
          itemTelemetryTimeInMS: _0x235bec - _0xdbc91b,
          totalTimeInMS: _0x2ce780 + _0x235bec
        };
      }
      function _0x572b0b(_0x5e1a39, _0x5964bb, _0x41f050) {
        const _0x38c9a0 = _0x5964bb.sort((_0x2bfe91, _0x4cdb11) => {
          if (_0x2bfe91.sortText === _0x4cdb11.sortText || !_0x2bfe91.sortText || !_0x4cdb11.sortText) {
            return 0;
          }
          if (_0x2bfe91.sortText < _0x4cdb11.sortText) {
            return -1;
          }
          return 1;
        });
        const _0x5cf055 = {
          title: '',
          command: _0xdbeeee.Commands.intelliCodeCompletionItemCommand,
          arguments: [_0x5e1a39]
        };
        for (let _0x32f00d = 0; _0x32f00d < _0x38c9a0.length; _0x32f00d++) {
          const _0x4391c0 = _0x38c9a0[_0x32f00d];
          const _0xaaf93e = _0x32f00d < _0x41f050.length;
          if (_0xaaf93e) {
            _0x4391c0.command = _0x48b53b.mergeCommands(_0x4391c0.command, {
              title: '',
              command: _0xdbeeee.Commands.intelliCodeCompletionItemCommand,
              arguments: [_0x5e1a39, _0x32f00d, _0x4391c0.insertText ?? '']
            });
          } else {
            _0x4391c0.command = _0x48b53b.mergeCommands(_0x4391c0.command, _0x5cf055);
          }
        }
      }
    },
    56238: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.EditorLookBackTokenGenerator = undefined;
      const _0x4cc278 = require(41557);
      const _0x1b7b9f = require(48281);
      const _0x236249 = require(92600);
      const _0x4b12dc = require(98162);
      const _0x428213 = require(3443);
      class _0x39c6ef extends _0x428213.LookBackTokenGenerator {
        generateLookbackTokens(_0x4614db, _0x360a4a, _0x5e3a49, _0x275f8a) {
          const _0x2b761e = this.extractTokens(_0x4614db);
          let _0x531480;
          let _0x18b717;
          let _0x228b4d = -1;
          _0x275f8a = _0x275f8a || _0x4b12dc.LookbackTokenLength;
          const _0x2b7ce5 = _0x360a4a.methodInvokations.sort((_0x3ad301, _0xcf1c30) => _0xcf1c30.spanStart - _0x3ad301.spanStart);
          let _0x26963b = _0x2b7ce5.findIndex(_0x8af722 => _0x8af722.spanStart < _0x5e3a49);
          if (_0x26963b < 0) {
            return undefined;
          }
          _0x26963b = _0x26963b === 0 ? _0x26963b : _0x26963b - 1;
          for (let _0xe5ea7f = _0x26963b; _0xe5ea7f < _0x2b7ce5.length; _0xe5ea7f++) {
            const _0x490a7b = _0x2b7ce5[_0xe5ea7f];
            _0x18b717 = _0x490a7b.key;
            _0x531480 = _0x490a7b.value;
            let _0x1719b6 = _0x2b761e.findMethodPosition(_0x490a7b);
            if (_0x1719b6 > _0x5e3a49) {
              continue;
            }
            if (_0x1719b6 < _0x5e3a49 - 1) {
              _0x1719b6 = _0x5e3a49 - 1;
            }
            _0x228b4d = _0x1719b6;
            break;
          }
          if (_0x228b4d < 0 || !_0x18b717) {
            return undefined;
          }
          const _0x3df066 = _0x2b761e.findRelevantName(_0x228b4d);
          if (this.isTypeUnknown(_0x18b717)) {
            if (_0x3df066.value) {
              _0x18b717 = _0x3df066.value;
            }
          }
          if (_0x18b717 === undefined) {
            return;
          }
          if (!_0x13273d(_0x228b4d, _0x4614db.parserOutput)) {
            return;
          }
          const _0x15ac34 = _0x28cf43(_0x228b4d);
          if (_0x15ac34 < 0 || _0x15ac34 >= _0x2b761e.selectedTokens.length) {
            return;
          }
          const _0x2d2ab1 = this._extractLookbackTokens(_0x275f8a, _0x2b761e, _0x18b717, _0x15ac34);
          if (!_0x2d2ab1 || _0x2d2ab1.length <= 1) {
            return undefined;
          }
          if (!this.isTypeUnknown(_0x18b717)) {
            for (let _0x3d347a = _0x2d2ab1.length - 1; _0x3d347a > 2; _0x3d347a--) {
              if (_0x3df066.value) {
                if (_0x2d2ab1[_0x3d347a].value === _0x3df066.value) {
                  _0x2d2ab1[_0x3d347a].value = _0x18b717;
                  break;
                }
              } else {
                if (_0x2d2ab1[_0x3d347a].value === _0x2d2ab1[_0x2d2ab1.length - 2].value) {
                  _0x2d2ab1[_0x3d347a].value = _0x18b717;
                  break;
                }
              }
            }
            if (!_0x3df066.value) {
              _0x2d2ab1[_0x2d2ab1.length - 2].value = _0x18b717;
            }
          }
          return {
            spanStart: _0x228b4d,
            lookbackTokens: _0x2d2ab1.map(_0x3a42d3 => _0x3a42d3.value),
            type: _0x531480 ? _0x18b717 + '.' + _0x531480 : _0x18b717
          };
          function _0x28cf43(_0x4d33d4) {
            let _0x508a8b = _0x2b761e.getSelectedTokenPositionIndex(_0x4d33d4);
            if (_0x508a8b < 0) {
              _0x508a8b = ~_0x508a8b + 1;
            }
            if (_0x508a8b < _0x2b761e.selectedTokens.length) {
              while (_0x508a8b >= 0) {
                const _0x20d782 = _0x2b761e.selectedTokens[_0x508a8b].token;
                if (_0x20d782.type === 20) {
                  break;
                }
                if (_0x20d782.start <= _0x4d33d4 && (_0x20d782.type === 13 || _0x20d782.type === 15 || _0x20d782.type === 17)) {
                  return -1;
                }
                _0x508a8b -= 1;
              }
            }
            return _0x508a8b;
          }
          function _0x13273d(_0x2d6c54, _0x59e7cf) {
            var _0x1e49a9;
            const _0x6a2133 = _0x2b761e.getSelectedTokenPositionIndex(_0x2d6c54);
            const _0x3f14b0 = _0x6a2133 > 0 && _0x2b761e.selectedTokens[_0x6a2133].token.type === 20;
            if (_0x3f14b0) {
              return true;
            }
            const _0x1d6836 = _0x59e7cf.parseTree;
            const _0x57779a = _0x4cc278.findNodeByOffset(_0x1d6836, _0x2d6c54);
            const _0x5beeeb = _0x57779a && _0x57779a.nodeType === 38 && _0x57779a.parent?.nodeType === 35 && _0x57779a === ((_0x1e49a9 = _0x57779a.parent) === null || _0x1e49a9 === undefined ? undefined : _0x1e49a9.d.member);
            return _0x5beeeb;
          }
        }
        _extractLookbackTokens(_0x58e871, _0x17c4ea, _0x48df9a, _0x41c203) {
          let _0x24906b = _0x58e871;
          let _0x2a701b = _0x41c203 - _0x58e871 + 1;
          if (_0x2a701b < 0) {
            _0x2a701b = 0;
            _0x24906b = _0x41c203 + 1;
          }
          const _0x47ea33 = _0x2a701b + _0x24906b;
          _0x1b7b9f.assert(_0x47ea33 >= _0x2a701b && _0x47ea33 < _0x17c4ea.selectedTokens.length);
          const _0xac18cd = _0x17c4ea.selectedTokens.slice(_0x2a701b, _0x47ea33);
          if (_0xac18cd.length <= 1) {
            return undefined;
          }
          const _0x551afc = _0xac18cd[_0xac18cd.length - 2].token;
          if (_0x551afc.type === 6 || this._isSymbol(_0x551afc.type)) {
            return undefined;
          }
          const _0x53d0a9 = _0xac18cd[_0xac18cd.length - 1].token;
          if (_0x53d0a9.type !== 20 && _0x53d0a9.type !== 14) {
            _0xac18cd[_0xac18cd.length - 1].token = _0x236249.Token.create(20, _0x53d0a9.start, 1, undefined);
            _0xac18cd[_0xac18cd.length - 1].value = '.';
            return _0xac18cd;
          }
          if (_0x53d0a9.type === 20 && _0x551afc.type === 14) {
            _0xac18cd[_0xac18cd.length - 1].token = _0x236249.Token.create(2, _0x53d0a9.start, 1, undefined);
            _0xac18cd[_0xac18cd.length - 1].value = '\n';
            const _0x52a01e = _0x236249.Token.create(7, _0x53d0a9.start + 1, _0x48df9a.length, undefined);
            _0xac18cd.push({
              token: _0x52a01e,
              value: _0x48df9a
            });
            const _0x41a630 = _0x236249.Token.create(20, _0x52a01e.start + _0x52a01e.length, 1, undefined);
            _0xac18cd.push({
              token: _0x41a630,
              value: '.'
            });
          }
          return _0xac18cd;
        }
        _isSymbol(_0x12839f) {
          return _0x12839f === 21 || _0x12839f === 10 || _0x12839f === 12 || _0x12839f === 19 || _0x12839f === 15 || _0x12839f === 17 || _0x12839f === 13 || _0x12839f === 9 || _0x12839f === 11;
        }
      }
      exports.EditorLookBackTokenGenerator = _0x39c6ef;
    },
    3443: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LookBackTokenGenerator = undefined;
      const _0x3f2685 = require(39619);
      const _0x56cb37 = require(94878);
      class _0xbeef49 {
        extractTokens(_0x1f48d7) {
          const _0x13eb63 = [];
          const _0xfa344f = [];
          const _0x2a88da = new _0x56cb37.TokenSet();
          const _0x1c3c54 = _0x1f48d7.tokenizerOutput.tokens;
          let _0xdc28b6 = false;
          for (let _0x25206d = 0; _0x25206d < _0x1c3c54.count; _0x25206d++) {
            const _0x5b9599 = _0x1c3c54.getItemAt(_0x25206d);
            switch (_0x5b9599.type) {
              case 3:
              case 4:
                continue;
            }
            if (_0x5b9599.type === 2) {
              if (!_0xdc28b6) {
                _0x2a88da.addToken(_0x5b9599, '\n');
                _0xdc28b6 = true;
              }
              continue;
            }
            _0x2a88da.addToken(_0x5b9599, this._getTokenValue(_0x5b9599, _0x1f48d7.text));
            _0xdc28b6 = false;
            if (_0x5b9599.type === 13) {
              _0x13eb63.push(_0x25206d);
              _0xfa344f.push(_0x25206d > 0 ? _0x1c3c54.getItemAt(_0x25206d - 1) : undefined);
              continue;
            }
            if (_0x5b9599.type === 14 && _0x13eb63.length > 0) {
              const _0x1760d8 = _0x13eb63.pop();
              const _0x5a82ed = _0xfa344f.pop();
              if (_0x5a82ed?.type === 7) {
                _0x2a88da.leftParenthesisSpanStarts.push(_0x1c3c54.getItemAt(_0x1760d8).start);
                _0x2a88da.relevantNames.push(_0x5a82ed.value);
                _0x2a88da.rightParenthesisSpanStarts.push(_0x5b9599.start);
              }
            }
          }
          return _0x2a88da;
        }
        isTypeUnknown(_0x28658f) {
          return !_0x28658f || _0x28658f.startsWith(_0x3f2685.IntelliCodeConstants.UnresolvedType);
        }
        _getTokenValue(_0x346639, _0x321496) {
          switch (_0x346639.type) {
            case 5:
              return _0x3f2685.LiteralTokenValue.String;
            case 6:
              return _0x3f2685.LiteralTokenValue.Number;
          }
          return _0x321496.substr(_0x346639.start, _0x346639.length);
        }
      }
      exports.LookBackTokenGenerator = _0xbeef49;
    },
    94878: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TokenSet = exports.TokenValuePair = undefined;
      exports.integerBinarySearch = _0x5505b9;
      exports.positionBinarySearch = _0x31c537;
      const _0x3f6b20 = require(58147);
      const _0x5dd165 = require(34455);
      function _0x5505b9(_0x55adc8, _0x14dc54) {
        return _0x3f6b20.binarySearch(_0x55adc8, _0x14dc54, _0x5dd165.identity, (_0x3c03bd, _0x592e01) => {
          if (_0x3c03bd < _0x592e01) {
            return -1;
          } else {
            if (_0x3c03bd > _0x592e01) {
              return 1;
            } else {
              return 0;
            }
          }
        });
      }
      function _0x31c537(_0x100af4, _0x599717) {
        return _0x3f6b20.binarySearchKey(_0x100af4, _0x599717, _0x171fac => _0x171fac.token.start, (_0x2e9781, _0x22a782) => {
          if (_0x2e9781 < _0x22a782) {
            return -1;
          } else {
            if (_0x2e9781 > _0x22a782) {
              return 1;
            } else {
              return 0;
            }
          }
        });
      }
      class _0x2f06c6 {
        constructor(_0x86355d, _0x46fffb) {
          this.token = _0x86355d;
          this.value = _0x46fffb;
        }
      }
      exports.TokenValuePair = _0x2f06c6;
      class _0x50f3cd {
        constructor() {
          this.selectedTokens = [];
          this.leftParenthesisSpanStarts = [];
          this.rightParenthesisSpanStarts = [];
          this.relevantNames = [];
        }
        slice(_0xc1a9ba, _0x1305a7) {
          const _0x569b9e = [];
          for (let _0x2aac19 = _0xc1a9ba; _0x2aac19 < _0x1305a7; _0x2aac19++) {
            _0x569b9e.push(new _0x2f06c6(this.selectedTokens[_0x2aac19].token, this.selectedTokens[_0x2aac19].value));
          }
          return _0x569b9e;
        }
        addToken(_0x45492b, _0x15e973) {
          this.selectedTokens.push(new _0x2f06c6(_0x45492b, _0x15e973));
        }
        getSelectedTokenPositionIndex(_0x1943f3) {
          return _0x31c537(this.selectedTokens, _0x1943f3);
        }
        findMethodPosition(_0x524a4c) {
          let _0x571289 = _0x31c537(this.selectedTokens, _0x524a4c.spanStart);
          if (_0x571289 < 0) {
            _0x571289 = ~_0x571289;
          }
          if (_0x571289 >= 0 && _0x571289 < this.selectedTokens.length) {
            for (let _0x12ab34 = _0x571289; _0x12ab34 < this.selectedTokens.length; _0x12ab34++) {
              const _0x37b3dd = this.selectedTokens[_0x12ab34];
              if (_0x37b3dd.value === _0x524a4c.value) {
                return _0x37b3dd.token.start;
              }
            }
          }
          return -1;
        }
        findRelevantName(_0x3a64f3) {
          const _0x316306 = _0x5505b9(this.leftParenthesisSpanStarts, _0x3a64f3);
          if (_0x316306 >= 0) {
            return {
              value: this.relevantNames[_0x316306],
              position: this.rightParenthesisSpanStarts[_0x316306] + 1
            };
          }
          return {
            value: undefined,
            position: 0
          };
        }
      }
      exports.TokenSet = _0x50f3cd;
    },
    39619: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IntelliCodeInterface = exports.ModelType = exports.FailureReason = exports.IntelliCodeConstants = exports.LiteralTokenValue = exports.StandardVariableType = exports.MethodInvokation = exports.Assignment = undefined;
      exports.getStandardVariableType = _0x95632e;
      exports.getStandardVariableTypeNumber = _0x4f88ce;
      class _0x4fdb32 {
        constructor(_0x3c0e45, _0x39614a, _0x28130e) {
          this.key = _0x3c0e45;
          this.value = _0x39614a;
          this.spanStart = _0x28130e || 0;
        }
      }
      class _0x2523f4 extends _0x4fdb32 {
        constructor(_0x5610e4, _0xb40be5, _0x11139a) {
          super(_0x5610e4, _0xb40be5, _0x11139a);
        }
      }
      exports.Assignment = _0x2523f4;
      class _0x3ec8ac extends _0x4fdb32 {
        constructor(_0x4d987e, _0x67ebd7, _0x51ef3a) {
          super(_0x4d987e, _0x67ebd7, _0x51ef3a);
        }
      }
      exports.MethodInvokation = _0x3ec8ac;
      var _0x52b4b3;
      (function (_0x3975d5) {
        _0x3975d5.Null = 'Null';
        _0x3975d5.Int = 'int';
        _0x3975d5.Float = 'float';
        _0x3975d5.String = 'str';
        _0x3975d5.Tuple = 'tuple';
        _0x3975d5.List = 'list';
        _0x3975d5.Set = 'set';
        _0x3975d5.Dictionary = 'dict';
      })(_0x52b4b3 || (exports.StandardVariableType = _0x52b4b3 = {}));
      var _0x446f0e;
      (function (_0x4660f3) {
        _0x4660f3.String = 'STR_LIT';
        _0x4660f3.Number = 'NUM_LIT';
      })(_0x446f0e || (exports.LiteralTokenValue = _0x446f0e = {}));
      function _0x95632e(_0x5437c6) {
        switch (_0x5437c6.nodeType) {
          case 49:
            return _0x52b4b3.String;
          case 40:
            return _0x4f88ce(_0x5437c6);
        }
        return _0x52b4b3.Null;
      }
      function _0x4f88ce(_0xa80dae) {
        if (_0xa80dae.d.isInteger) {
          return _0x52b4b3.Int;
        } else {
          return _0x52b4b3.Float;
        }
      }
      var _0x4e5848;
      (function (_0x1f0cac) {
        _0x1f0cac.NullSequence = 'N';
        _0x1f0cac.SequenceDelimiter = '~';
        _0x1f0cac.UnicodeStar = '★ ';
        _0x1f0cac.MaxRecommendation = 5;
        _0x1f0cac.PrecedingSequenceLength = 2;
        _0x1f0cac.CompletionItemCommand = 'vsintellicode.completionItemSelected';
        _0x1f0cac.IncludeUnresolvedType = true;
        _0x1f0cac.UnresolvedType = 'unktype';
      })(_0x4e5848 || (exports.IntelliCodeConstants = _0x4e5848 = {}));
      var _0x866a8a;
      (function (_0x376edd) {
        _0x376edd.None = 'None';
        _0x376edd.NotInModel = 'NotInModel';
        _0x376edd.NotInIntersection = 'NotInIntersection';
      })(_0x866a8a || (exports.FailureReason = _0x866a8a = {}));
      var _0xca537d;
      (function (_0x1e1341) {
        _0x1e1341.None = 'None';
        _0x1e1341.Frequency = 'Frequency';
        _0x1e1341.Sequence = 'Sequence';
        _0x1e1341.LSTM = 'LSTM';
      })(_0xca537d || (exports.ModelType = _0xca537d = {}));
      var _0x136b08;
      (function (_0x2dcb78) {
        function _0x5d9c39(_0x3bb605) {
          return _0x3bb605.setModelLoadInfo !== undefined && _0x3bb605.ensureModelLoaded !== undefined;
        }
        _0x2dcb78.is = _0x5d9c39;
      })(_0x136b08 || (exports.IntelliCodeInterface = _0x136b08 = {}));
    },
    3621: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.realZipOpener = _0x1eabf9;
      const _0x84fc27 = require(41334);
      function _0x1eabf9() {
        return {
          open: _0x4eebf6 => new _0x84fc27.async({
            file: _0x4eebf6
          })
        };
      }
    },
    58093: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ImplementAbstractClassProvider = undefined;
      const _0x3f1141 = require(28445);
      const _0x41df0f = require(41557);
      const _0x2fea01 = require(21024);
      const _0x210b2b = require(56814);
      const _0xc9b8de = require(59133);
      const _0x462f5d = require(30048);
      const _0xacad44 = require(19995);
      const _0x3f5371 = require(19892);
      class _0x188857 {
        constructor(_0x480425, _0x2fadb1, _0x2564d7, _0x17f9ec, _0x2888b7) {
          this._program = _0x480425;
          this._fileUri = _0x2fadb1;
          this._range = _0x2564d7;
          this._cancellationToken = _0x17f9ec;
          this._option = _0x2888b7;
          this._importAdder = new _0xacad44.ImportAdder(this._program);
          this._indentationUtils = new _0xc9b8de.IndentationUtils(this._option?.editorIndentConfig ?? _0xc9b8de.DefaultEditorIndentConfig);
          this._predominantTabSequence = this._indentationUtils.getTabSequence(this._parseResults);
          this._predominantEndOfLineSequence = this._parseResults.tokenizerOutput.predominantEndOfLineSequence;
        }
        implementAllAbstractClasses() {
          if (this._cancellationToken.isCancellationRequested) {
            return;
          }
          const _0xbb2ee = this._parseResults.tokenizerOutput.lines;
          const _0x467722 = _0x210b2b.convertRangeToTextRange(this._range, _0xbb2ee);
          if (!_0x467722) {
            return;
          }
          const _0x5158e6 = _0x41df0f.findNodeByOffset(this._parseResults.parserOutput.parseTree, _0x467722.start);
          if (_0x5158e6?.nodeType !== 38) {
            return;
          }
          const _0x145eef = _0x5158e6.parent;
          if (_0x145eef?.nodeType !== 10) {
            return;
          }
          const _0x4f33da = this._evaluator.getTypeOfClass(_0x145eef);
          if (!_0x4f33da) {
            return;
          }
          const _0xf0e8aa = _0x188857.canImplementAbstractClass(this._evaluator, _0x5158e6);
          if (!_0xf0e8aa || _0xf0e8aa.length === 0) {
            return;
          }
          const _0x5f2de7 = this._indentationUtils.getMethodWithinClassIndentation(this._parseResults, this._range.start.line, this._predominantTabSequence.length);
          const _0x5d6f98 = this._generateInsertText(_0xf0e8aa, _0x4f33da.classType, _0x5f2de7);
          const _0x3d04a0 = this._getInsertRange(_0x145eef);
          const _0x3f6855 = this._importAdder.applyImports(this._fileUri, this._parseResults, _0x5158e6.start, 'absolute', this._cancellationToken);
          const _0x4b8c25 = this._newEditsAreRightAfterClassDefinition(_0x145eef.start, _0x3d04a0.start);
          const _0x3806e8 = [];
          _0x3806e8.push({
            fileUri: this._fileUri,
            range: _0x3d04a0,
            replacementText: _0x4b8c25 ? _0x5d6f98 : _0x5d6f98.slice(this._predominantEndOfLineSequence.length)
          });
          for (const _0x85b027 of _0x3f6855) {
            _0x3806e8.push({
              fileUri: this._fileUri,
              ..._0x85b027
            });
          }
          return _0x3806e8;
        }
        static canImplementAbstractClass(_0x1f1666, _0x4e51fa) {
          const _0x272502 = _0x4e51fa.parent;
          if (!_0x272502 || _0x272502.nodeType !== 10) {
            return;
          }
          const _0x394df1 = _0x1f1666.getTypeOfClass(_0x272502);
          if (!_0x394df1) {
            return;
          }
          const _0xa222a6 = _0x394df1.classType;
          if (!_0xa222a6 || !_0x2fea01.isClass(_0xa222a6) || !_0x2fea01.ClassType.supportsAbstractMethods(_0xa222a6)) {
            return;
          }
          if (_0x2fea01.ClassType.isProtocolClass(_0xa222a6)) {
            return;
          }
          const _0x259839 = _0x1f1666.getAbstractSymbols(_0xa222a6);
          const _0x26048a = _0x259839.filter(_0x441785 => _0x441785 && !_0xa222a6.shared.fields.get(_0x441785.symbolName));
          if (_0x26048a.length === 0) {
            return;
          }
          return _0x26048a;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        get _parseResults() {
          return this._program.getParseResults(this._fileUri);
        }
        _generateInsertText(_0x456fe6, _0x4b2fb1, _0x15959e) {
          let _0x34ffe9 = '';
          for (const _0x52a695 of _0x456fe6) {
            const _0x53c623 = _0x52a695.symbol;
            const _0x44977d = this._evaluator.getEffectiveTypeOfSymbol(_0x53c623);
            let _0x2472d6 = [];
            let _0x4987ef = false;
            if (_0x2fea01.isFunction(_0x44977d)) {
              const _0x202f79 = this._printMethodSignatures(_0x4b2fb1, _0x44977d, _0x15959e);
              _0x2472d6 = _0x202f79 ? [_0x202f79] : undefined;
            }
            if (_0x2fea01.isOverloaded(_0x44977d)) {
              _0x4987ef = true;
              _0x2472d6 = this._printOverloadedMethodSignatures(_0x4b2fb1, _0x44977d, _0x15959e);
            }
            if (_0x2fea01.isClassInstance(_0x44977d) && _0x2fea01.ClassType.isPropertyClass(_0x44977d)) {
              _0x2472d6 = this._printPropertyMethodSignatures(_0x4b2fb1, _0x44977d, _0x15959e);
            }
            _0x34ffe9 += this._printInsertTextForCurrentSymbol(_0x2472d6, _0x15959e, _0x4987ef);
          }
          _0x34ffe9 += `${this._predominantEndOfLineSequence}`;
          return _0x34ffe9;
        }
        _printMethodSignatures(_0x5e79b0, _0x186b2e, _0x149875) {
          const _0x23aa81 = this._tryGetSignatureGeneratorOptions(_0x186b2e) ?? {
            importAdder: this._importAdder,
            enableTrackingAddImports: true,
            decoratorFilter: ['abstractmethod'],
            dontAddTypeAnnotation: this._option?.dontAddTypeAnnotation
          };
          const _0x190012 = new _0x3f5371.MethodSignaturesGenerator(this._program, this._fileUri, _0x5e79b0, _0x186b2e, _0x23aa81, this._cancellationToken);
          const _0x536a24 = _0x190012.getMethodSignatureWithDecorators();
          const _0x50f09c = _0x536a24.decoratorTexts.map(_0x33972d => `${this._predominantEndOfLineSequence}${_0x149875}@${_0x33972d}`).join('');
          const _0x2bca04 = `${this._predominantEndOfLineSequence}${_0x149875}${_0x536a24.isAsync ? 'async ' : ''}def ${_0x536a24.methodSignature}:`;
          return _0x50f09c + _0x2bca04;
        }
        _tryGetSignatureGeneratorOptions(_0x3afeb0) {
          const _0x53349b = this._program.serviceProvider.tryGet(_0x462f5d.PylanceServiceKeys.declarationFinder);
          if (!_0x53349b) {
            return undefined;
          }
          const _0x418f3 = _0x53349b.getDeclarations(_0x3afeb0, this._cancellationToken);
          if (_0x418f3.length === 0) {
            return undefined;
          }
          const _0x57703e = _0x418f3.find(_0x3f1141.isFunctionDeclaration);
          if (!_0x57703e) {
            return undefined;
          }
          const _0x321289 = _0x57703e.node.d.isAsync ?? false;
          return {
            importAdder: this._importAdder,
            enableTrackingAddImports: true,
            decoratorFilter: ['abstractmethod'],
            hasAsyncKeyword: _0x321289,
            dontAddTypeAnnotation: this._option?.dontAddTypeAnnotation
          };
        }
        _printOverloadedMethodSignatures(_0x25ee73, _0x1b8421, _0x47c500) {
          const _0x1ada02 = [];
          let _0x538130;
          for (const _0x292a28 of _0x2fea01.OverloadedType.getOverloads(_0x1b8421)) {
            const _0x311aa0 = this._printMethodSignatures(_0x25ee73, _0x292a28, _0x47c500);
            if (_0x311aa0) {
              _0x1ada02.push(_0x311aa0);
            }
          }
          const _0xa8e874 = _0x2fea01.OverloadedType.getImplementation(_0x1b8421);
          if (_0xa8e874 && _0x2fea01.isFunction(_0xa8e874)) {
            const _0x4cc60 = this._printMethodSignatures(_0x25ee73, _0xa8e874, _0x47c500);
            if (_0x4cc60) {
              _0x538130 = _0x4cc60;
            }
          }
          if (_0x538130 === undefined) {
            _0x538130 = this._generateActualImplementationOfOverloadedMethods(_0x2fea01.OverloadedType.getOverloads(_0x1b8421), _0x47c500);
          }
          _0x1ada02.push(_0x538130);
          return _0x1ada02;
        }
        _generateActualImplementationOfOverloadedMethods(_0x45f890, _0x374a24) {
          let _0x4cb4b5 = '';
          if (_0x45f890.length === 0) {
            return _0x4cb4b5;
          }
          const _0x2f0813 = _0x2fea01.FunctionType.isAsync(_0x45f890[0]);
          const _0x4accee = _0x45f890[0].shared.name;
          _0x4cb4b5 = `${this._predominantEndOfLineSequence}${_0x374a24}${_0x2f0813 ? 'async ' : ''}def ${_0x4accee}(self, *args, **kwargs):`;
          return _0x4cb4b5;
        }
        _printPropertyMethodSignatures(_0x3e84d7, _0x368e2b, _0x153c6a) {
          const _0x19fff8 = [];
          const _0x3d5c7f = _0x368e2b.priv.fgetInfo?.methodType;
          if (_0x3d5c7f) {
            const _0x217768 = this._printMethodSignatures(_0x3e84d7, _0x3d5c7f, _0x153c6a);
            if (_0x217768) {
              _0x19fff8.push(_0x217768);
            }
          }
          const _0x175ee9 = _0x368e2b.priv.fsetInfo?.methodType;
          if (_0x175ee9) {
            const _0x24d5f2 = this._printMethodSignatures(_0x3e84d7, _0x175ee9, _0x153c6a);
            if (_0x24d5f2) {
              _0x19fff8.push(_0x24d5f2);
            }
          }
          const _0x1a4679 = _0x368e2b.priv.fdelInfo?.methodType;
          if (_0x1a4679) {
            const _0x5528d5 = this._printMethodSignatures(_0x3e84d7, _0x1a4679, _0x153c6a);
            if (_0x5528d5) {
              _0x19fff8.push(_0x5528d5);
            }
          }
          return _0x19fff8;
        }
        _printInsertTextForCurrentSymbol(_0x1d8152, _0x440831, _0x4525a9) {
          let _0x40147c = '';
          if (!_0x1d8152 || _0x1d8152.length === 0) {
            return _0x40147c;
          }
          const _0x234620 = `${this._predominantEndOfLineSequence}${_0x440831}${this._predominantTabSequence}...`;
          const _0x192d3e = `${this._predominantEndOfLineSequence}${_0x440831}${this._predominantTabSequence}raise NotImplementedError`;
          for (let _0x1e06b1 = 0; _0x1e06b1 < _0x1d8152.length; _0x1e06b1++) {
            const _0x56d2dc = _0x1d8152[_0x1e06b1];
            if (_0x56d2dc.length === 0) {
              continue;
            }
            if (!_0x4525a9) {
              _0x40147c += `${this._predominantEndOfLineSequence}${_0x56d2dc}${_0x192d3e}`;
            } else {
              if (_0x1e06b1 === _0x1d8152.length - 1) {
                _0x40147c += `${this._predominantEndOfLineSequence}${_0x56d2dc}${_0x192d3e}`;
              } else {
                _0x40147c += `${this._predominantEndOfLineSequence}${_0x56d2dc}${_0x234620}`;
              }
            }
          }
          return _0x40147c;
        }
        _getInsertRange(_0x5d53b6) {
          const _0x241425 = this._parseResults.tokenizerOutput.lines;
          const _0x56607a = this._parseResults.tokenizerOutput.tokens;
          const _0x4d1576 = _0x5d53b6.d.suite.d.statements;
          const _0x1a7238 = _0x4d1576.length > 0 ? _0x4d1576[_0x4d1576.length - 1] : undefined;
          if (_0x1a7238 && _0x1a7238.nodeType === 47 && _0x1a7238.d.statements.length > 0) {
            const _0x255285 = _0x1a7238.d.statements[_0x1a7238.d.statements.length - 1];
            if (_0x255285.nodeType === 42 || _0x255285.nodeType === 21) {
              const _0x414df0 = this._indentationUtils.findNonWhitespaceTokenAtOrBeforeOffset(_0x56607a, _0x255285.start - 1);
              return _0x210b2b.convertOffsetsToRange(_0x414df0 ? _0x414df0.start + _0x414df0.length : _0x255285.start, _0x255285.start + _0x255285.length, _0x241425);
            }
          }
          const _0x29cc05 = _0x5d53b6.d.suite.start + _0x5d53b6.d.suite.length;
          return _0x210b2b.convertOffsetsToRange(_0x29cc05, _0x29cc05, _0x241425);
        }
        _newEditsAreRightAfterClassDefinition(_0x48e90b, _0x2b87ce) {
          const _0x560e2a = _0x210b2b.convertOffsetToPosition(_0x48e90b, this._parseResults.tokenizerOutput.lines);
          if (_0x560e2a.line === _0x2b87ce.line) {
            return false;
          }
          return true;
        }
      }
      exports.ImplementAbstractClassProvider = _0x188857;
    },
    8239: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TypeHierarchyProvider = undefined;
      const _0x28533e = require(26687);
      const _0x31001d = require(28445);
      const _0x25bcd6 = require(83760);
      const _0xb7d7f8 = require(41557);
      const _0x5ea805 = require(3433);
      const _0x54e60c = require(21024);
      const _0x37ec20 = require(92324);
      const _0x40768b = require(91426);
      const _0x5b3ed1 = require(58147);
      const _0x46bd41 = require(56412);
      const _0x424742 = require(56814);
      const _0x195258 = require(88754);
      const _0x28e4ae = require(5884);
      const _0x5aed02 = require(67032);
      const _0x19491e = require(47091);
      const _0x17f452 = require(19013);
      const _0x378e89 = require(30048);
      const _0x4655ac = require(61904);
      class _0xe45c7e {
        constructor(_0x497fb3, _0x2c9c46, _0x567c62, _0x3fc121) {
          this._program = _0x497fb3;
          this._fileUri = _0x2c9c46;
          this._position = _0x567c62;
          this._token = _0x3fc121;
        }
        onPrepare() {
          _0x40768b.throwIfCancellationRequested(this._token);
          const _0x39ff6f = this._program.getParseResults(this._fileUri);
          if (!_0x39ff6f) {
            return null;
          }
          const _0x5f079a = _0x424742.convertPositionToOffset(this._position, _0x39ff6f.tokenizerOutput.lines);
          if (_0x5f079a === undefined) {
            return null;
          }
          const _0x2b03b7 = _0xb7d7f8.findNodeByOffset(_0x39ff6f.parserOutput.parseTree, _0x5f079a);
          if (_0x2b03b7 === undefined) {
            return null;
          }
          if (_0x2b03b7.nodeType !== 38) {
            return null;
          }
          const _0x560e15 = _0x5aed02.DocumentSymbolCollector.getDeclarationsForNode(this._program, _0x2b03b7, true, this._token);
          if (_0x560e15.length === 0) {
            return null;
          }
          const _0x5ee441 = this._createTypeHierarchyItem(_0x560e15, undefined, _0x2b03b7);
          if (!_0x5ee441 || _0x5ee441.name.length === 0) {
            return null;
          }
          return [_0x5ee441];
        }
        onSupertypes(_0xe65886) {
          _0x40768b.throwIfCancellationRequested(this._token);
          const _0x301f21 = _0xe65886.data;
          if (!_0x301f21) {
            return null;
          }
          if (!this._isSupportedKind(_0x301f21.kind)) {
            return null;
          }
          switch (_0x301f21.kind) {
            case 7:
            case 6:
              return this._handleClassSupertypes(_0xe65886.data);
            case 5:
              return this._handleMethodSupertypes(_0xe65886.data);
          }
          return null;
        }
        onSubtypes(_0x51bc58) {
          _0x40768b.throwIfCancellationRequested(this._token);
          const _0x252a80 = _0x51bc58.data;
          if (!_0x252a80) {
            return null;
          }
          if (!this._isSupportedKind(_0x252a80.kind)) {
            return null;
          }
          switch (_0x252a80.kind) {
            case 7:
            case 6:
              return this._handleClassSubtypes(_0x51bc58.data);
            case 5:
              return this._handleMethodSubtypes(_0x51bc58.data);
          }
          return null;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _handleMethodSupertypes(_0x499f17) {
          const _0x4ff099 = this._program.getParseResults(this._fileUri);
          if (!_0x4ff099) {
            return null;
          }
          const _0x53da44 = _0xb7d7f8.getFirstAncestorOrSelfOfKind(_0xb7d7f8.findNodeByOffset(_0x4ff099.parserOutput.parseTree, _0x499f17.offset), 31);
          if (!_0x53da44 || _0x53da44.d.name.d.value.length === 0) {
            return null;
          }
          const _0x3f79ab = _0xb7d7f8.getEnclosingClass(_0x53da44, true);
          if (!_0x3f79ab) {
            return null;
          }
          const _0x41439e = this._evaluator.getTypeOfClass(_0x3f79ab);
          if (!_0x41439e) {
            return null;
          }
          const _0x1207fb = [];
          for (const _0x1cf055 of _0x41439e.classType.shared.baseClasses) {
            _0x40768b.throwIfCancellationRequested(this._token);
            if (!_0x54e60c.isClass(_0x1cf055)) {
              continue;
            }
            const _0xea6a5c = _0x37ec20.lookUpClassMember(_0x1cf055, _0x53da44.d.name.d.value, 64);
            if (!_0xea6a5c) {
              continue;
            }
            const _0x1c9214 = _0xea6a5c.symbol.getDeclarations().filter(_0x281af6 => this._isSupportedDecl(_0x281af6));
            const _0x419162 = this._createTypeHierarchyItem(_0x1c9214, undefined, _0x3f79ab.d.name);
            if (!_0x419162) {
              continue;
            }
            this._addIfUnique(_0x1207fb, _0x419162);
          }
          return _0x1207fb;
        }
        _handleMethodSubtypes(_0x22bc40) {
          const _0x491f72 = this._program.getParseResults(this._fileUri);
          if (!_0x491f72) {
            return null;
          }
          const _0x2ba062 = _0xb7d7f8.getFirstAncestorOrSelfOfKind(_0xb7d7f8.findNodeByOffset(_0x491f72.parserOutput.parseTree, _0x22bc40.offset), 31);
          if (!_0x2ba062 || _0x2ba062.d.name.d.value.length === 0) {
            return null;
          }
          const _0x1e2d68 = this._evaluator.getTypeOfFunction(_0x2ba062);
          if (!_0x1e2d68) {
            return null;
          }
          const _0x329e71 = [];
          for (const _0x35bb87 of this._program.getSourceFileInfoList().filter(_0x50e235 => _0x5ea805.isUserCode(_0x50e235))) {
            _0x40768b.throwIfCancellationRequested(this._token);
            const _0x5db974 = _0x35bb87.sourceFile.getFileContent();
            if (_0x5db974 && _0x5db974.search(_0x2ba062.d.name.d.value) < 0) {
              continue;
            }
            const _0x1e6376 = this._program.getParseResults(_0x35bb87.sourceFile.getUri());
            if (!_0x1e6376) {
              continue;
            }
            for (const _0x38e6d9 of _0x17f452.getNodesInRange(_0x1e6376, 31, this._token)) {
              if (_0x38e6d9.d.name.d.value !== _0x2ba062.d.name.d.value) {
                continue;
              }
              const _0x141dd0 = _0xb7d7f8.getEnclosingClass(_0x38e6d9, true);
              if (!_0x141dd0) {
                continue;
              }
              const _0x3f5b43 = this._evaluator.getTypeOfClass(_0x141dd0);
              if (!_0x3f5b43) {
                continue;
              }
              const _0xaee174 = [];
              for (const _0x59615b of _0x4655ac.lookUpClassMembers(_0x3f5b43.classType, _0x2ba062.d.name.d.value, 65)) {
                if (!_0x59615b) {
                  continue;
                }
                this._addPreviousMemberIfNeeded(_0x59615b, _0xaee174);
                const _0x6c2b8b = this._createMethodSubItem(_0x59615b.symbol, _0x1e2d68.functionType, _0x38e6d9.d.name);
                if (!_0x6c2b8b) {
                  continue;
                }
                if (this._isAlreadyOverriden(_0x59615b, _0xaee174)) {
                  break;
                }
                this._addIfUnique(_0x329e71, _0x6c2b8b);
                break;
              }
            }
            this._program.handleMemoryHighUsage();
          }
          return _0x329e71;
        }
        _addPreviousMemberIfNeeded(_0x5b6ba7, _0x4a8085) {
          if (!_0x54e60c.isClass(_0x5b6ba7.classType)) {
            return;
          }
          _0x4a8085.push(_0x5b6ba7.classType);
        }
        _isAlreadyOverriden(_0x5d1721, _0x3440b7) {
          if (!_0x54e60c.isClass(_0x5d1721.classType)) {
            return true;
          }
          const _0xaafbe5 = new Set();
          _0xaafbe5.add(_0x5d1721.classType.shared);
          const _0x38ec7e = _0x5d1721.classType;
          for (const _0x44295d of _0x3440b7) {
            if (_0xaafbe5.has(_0x44295d.shared)) {
              continue;
            }
            if (_0x44295d.shared.mro.some(_0x295da0 => {
              if (!_0x54e60c.isClass(_0x295da0)) {
                return true;
              }
              _0xaafbe5.add(_0x295da0.shared);
              return _0x295da0.shared === _0x38ec7e.shared;
            })) {
              return true;
            }
          }
          return false;
        }
        _createMethodSubItem(_0x2d9a1c, _0x2eda5c, _0x36f8c8) {
          for (const _0x4875d1 of _0x2d9a1c.getDeclarations()) {
            if (!_0x31001d.isFunctionDeclaration(_0x4875d1)) {
              continue;
            }
            const _0x4aa524 = this._evaluator.getInferredTypeOfDeclaration(_0x2d9a1c, _0x4875d1);
            if (!_0x4aa524) {
              continue;
            }
            const _0x24c2f5 = _0x54e60c.isFunction(_0x4aa524) && _0x4aa524 === _0x2eda5c || _0x54e60c.isOverloaded(_0x4aa524) && _0x54e60c.OverloadedType.getOverloads(_0x4aa524).some(_0x2ce339 => _0x2ce339 === _0x2eda5c) || _0x54e60c.isOverloaded(_0x4aa524) && _0x54e60c.OverloadedType.getImplementation(_0x4aa524) === _0x2eda5c;
            if (!_0x24c2f5) {
              continue;
            }
            const _0x4842b2 = this._evaluator.getDeclInfoForNameNode(_0x36f8c8)?.decls;
            if (!_0x4842b2 || _0x4842b2.length === 0) {
              return undefined;
            }
            return this._createTypeHierarchyItem(_0x4842b2, undefined);
          }
          return undefined;
        }
        _handleClassSupertypes(_0x16f163) {
          const _0x2d377b = this._program.getParseResults(this._fileUri);
          if (!_0x2d377b) {
            return null;
          }
          const _0x15f7a7 = this._getClassNameAndType(_0x2d377b.parserOutput, _0x16f163);
          if (!_0x15f7a7) {
            return null;
          }
          const _0x53ae6b = this._program.serviceProvider.tryGet(_0x378e89.PylanceServiceKeys.declarationFinder);
          if (!_0x53ae6b) {
            return null;
          }
          const _0x27784e = [];
          for (const _0x40f61f of _0x15f7a7.type.shared.baseClasses) {
            _0x40768b.throwIfCancellationRequested(this._token);
            if (!_0x54e60c.isClass(_0x40f61f)) {
              continue;
            }
            const _0x50d479 = _0x53ae6b.getDeclarations(_0x40f61f, this._token);
            if (_0x50d479.length === 0) {
              continue;
            }
            const _0x409d1e = this._createTypeHierarchyItem(_0x50d479, _0x40f61f.priv.aliasName, _0x15f7a7.name);
            if (!_0x409d1e) {
              continue;
            }
            this._addIfUnique(_0x27784e, _0x409d1e);
          }
          return _0x27784e;
        }
        _handleClassSubtypes(_0x2d399e) {
          const _0x2cce57 = this._program.getParseResults(this._fileUri);
          if (!_0x2cce57) {
            return null;
          }
          const _0x3ed84c = this._getClassNameAndType(_0x2cce57.parserOutput, _0x2d399e);
          if (!_0x3ed84c) {
            return null;
          }
          const _0x498bbc = [];
          for (const _0x2dfce2 of this._program.getSourceFileInfoList().filter(_0x383568 => _0x5ea805.isUserCode(_0x383568))) {
            _0x40768b.throwIfCancellationRequested(this._token);
            const _0x2cc09e = this._program.getParseResults(_0x2dfce2.sourceFile.getUri());
            if (!_0x2cc09e) {
              continue;
            }
            for (const _0x46d243 of _0x17f452.getNodesInRange(_0x2cc09e, 10, this._token)) {
              const _0x31a3f0 = this._evaluator.getTypeOfClass(_0x46d243);
              if (!_0x31a3f0) {
                continue;
              }
              const _0x44289d = this._createClassSubItem(_0x31a3f0.classType.shared.baseClasses, _0x3ed84c.type, _0x31a3f0.classType, _0x46d243.d.name);
              if (!_0x44289d) {
                continue;
              }
              this._addIfUnique(_0x498bbc, _0x44289d);
            }
            this._program.handleMemoryHighUsage();
          }
          return _0x498bbc;
        }
        _getClassNameAndType(_0x458814, _0x395276) {
          const _0x5f062c = _0xb7d7f8.getFirstAncestorOrSelfOfKind(_0xb7d7f8.findNodeByOffset(_0x458814.parseTree, _0x395276.offset), 10);
          if (_0x5f062c && _0x5f062c.d.name.d.value.length > 0) {
            const _0x212880 = this._evaluator.getTypeOfClass(_0x5f062c);
            if (_0x212880) {
              return {
                name: _0x5f062c.d.name,
                type: this._getOriginalForm(_0x212880.classType)
              };
            }
          }
          const _0x35480b = _0xb7d7f8.getFirstAncestorOrSelfOfKind(_0xb7d7f8.findNodeByOffset(_0x458814.parseTree, _0x395276.offset), 54);
          if (!_0x35480b || _0x35480b.d.valueExpr.nodeType !== 38 || _0x35480b.d.valueExpr.d.value.length === 0) {
            return undefined;
          }
          const _0x56ed0f = this._evaluator.getType(_0x35480b.d.valueExpr);
          if (!_0x56ed0f || !_0x54e60c.isClass(_0x56ed0f)) {
            return undefined;
          }
          return {
            name: _0x35480b.d.valueExpr,
            type: this._getOriginalForm(_0x56ed0f)
          };
        }
        _getOriginalForm(_0x3d7463) {
          if (!_0x3d7463.priv.typeArgs && !_0x3d7463.props?.typeAliasInfo) {
            return _0x3d7463;
          }
          if (_0x3d7463.shared.mro.length === 0 || !_0x54e60c.isClass(_0x3d7463.shared.mro[0])) {
            return _0x3d7463;
          }
          return this._getOriginalForm(_0x3d7463.shared.mro[0]);
        }
        _createClassSubItem(_0x3b95e2, _0x358be7, _0xfe00b3, _0x14e97f) {
          for (const _0x20a2f5 of _0x3b95e2) {
            if (!_0x54e60c.isClass(_0x20a2f5) || !_0x54e60c.ClassType.isSameGenericClass(this._getOriginalForm(_0x20a2f5), _0x358be7)) {
              continue;
            }
            const _0x3b23ff = this._evaluator.getDeclInfoForNameNode(_0x14e97f)?.decls;
            if (!_0x3b23ff || _0x3b23ff.length === 0) {
              return undefined;
            }
            return this._createTypeHierarchyItem(_0x3b23ff, _0xfe00b3.priv.aliasName);
          }
          return undefined;
        }
        _createTypeHierarchyItem(_0x55ca7b, _0x47d93a, _0x2d8b7f) {
          const _0x2fb893 = this._getBestDeclaration(_0x55ca7b, _0x47d93a, _0x2d8b7f);
          if (!this._isSupportedDecl(_0x2fb893.declaration) || !_0x19491e.canNavigateToFile(this._program.fileSystem, _0x2fb893.declaration.uri)) {
            return undefined;
          }
          const _0x50ebc1 = _0x46bd41.getSymbolKind(_0x2fb893.declaration, this._evaluator, _0x2fb893.symbolName);
          if (_0x50ebc1 === undefined) {
            return undefined;
          }
          const _0x512e6a = this._program.getParseResults(_0x2fb893.declaration.uri);
          const _0x168818 = _0x512e6a ? _0x424742.convertTextRangeToRange(_0x2fb893.declaration.node, _0x512e6a.tokenizerOutput.lines) : _0x2fb893.declaration.range;
          return {
            kind: _0x50ebc1,
            name: _0x2fb893.symbolName,
            uri: _0x28e4ae.convertUriToLspUriString(this._program.fileSystem, _0x2fb893.declaration.uri),
            range: _0x168818,
            selectionRange: _0x2fb893.declaration.range,
            detail: this._getDetail(_0x2fb893.declaration),
            data: this._getData(_0x2fb893.declaration)
          };
        }
        _getData(_0x2c2d1c) {
          return {
            kind: _0x2c2d1c.type,
            offset: _0x2c2d1c.node.start
          };
        }
        _getDetail(_0x25dd3d) {
          const _0x170d5a = this._program.fileSystem.getOriginalUri(_0x25dd3d.uri).fileName;
          switch (_0x25dd3d.type) {
            case 6:
              {
                return `(${_0x170d5a})`;
              }
            case 5:
              {
                const _0x11758f = _0xb7d7f8.getEnclosingClass(_0x25dd3d.node, true);
                const _0x44c796 = _0x11758f ? `class ${_0x11758f.d.name.d.value}` : '';
                return _0x44c796 + ' (' + _0x170d5a + ')';
              }
          }
          return undefined;
        }
        _getBestDeclaration(_0x5ac85b, _0x10b5cc, _0x46146c) {
          let _0x26bde3 = _0x5ac85b[0];
          for (const _0x18eb75 of _0x5ac85b) {
            const _0x7ce908 = this._evaluator.resolveAliasDeclaration(_0x18eb75, true, {
              allowExternallyHiddenAccess: true,
              skipFileNeededCheck: true
            });
            if (!_0x7ce908) {
              continue;
            }
            if (_0x25bcd6.hasTypeForDeclaration(_0x7ce908) || !_0x25bcd6.hasTypeForDeclaration(_0x26bde3)) {
              if (this._isSupportedDecl(_0x7ce908)) {
                _0x26bde3 = _0x7ce908;
                if (!_0x46146c) {
                  continue;
                }
                const _0x26830b = _0x28533e.getFileInfo(_0x46146c);
                const _0x10244b = _0x28533e.getFileInfo(_0x7ce908.node);
                if (!_0x26830b || !_0x10244b) {
                  continue;
                }
                if (!_0x26830b.fileUri.equals(_0x10244b.fileUri)) {
                  continue;
                }
                if (!_0x195258.TextRange.containsRange(_0x7ce908.node, _0x46146c)) {
                  continue;
                }
                break;
              }
            }
          }
          return {
            symbolName: _0x10b5cc ?? _0x25bcd6.getNameFromDeclaration(_0x26bde3) ?? (_0x46146c === null || _0x46146c === undefined ? undefined : _0x46146c.d.value) ?? '',
            declaration: _0x26bde3
          };
        }
        _addIfUnique(_0x5f0d5f, _0x5771c4) {
          _0x5b3ed1.addIfUnique(_0x5f0d5f, _0x5771c4, this._areSame);
        }
        _areSame(_0x436910, _0x8a10aa) {
          const _0x3eca8d = _0x436910.data;
          const _0x419ce6 = _0x8a10aa.data;
          return _0x3eca8d.kind === _0x419ce6.kind && _0x3eca8d.offset === _0x419ce6.offset && _0x436910.uri === _0x8a10aa.uri;
        }
        _isSupportedDecl(_0x200002) {
          if (!this._isSupportedKind(_0x200002.type)) {
            return false;
          }
          if (_0x31001d.isFunctionDeclaration(_0x200002)) {
            if (!_0x200002.isMethod) {
              return false;
            }
            const _0x7ff672 = this._evaluator.getTypeForDeclaration(_0x200002)?.type;
            if (_0x7ff672 && _0x37ec20.isMaybeDescriptorInstance(_0x7ff672, false)) {
              return false;
            }
            return true;
          }
          return true;
        }
        _isSupportedKind(_0x163d7b) {
          if (_0x163d7b === 7) {
            return true;
          }
          if (_0x163d7b === 6) {
            return true;
          }
          if (_0x163d7b === 5) {
            return true;
          }
          return false;
        }
      }
      exports.TypeHierarchyProvider = _0xe45c7e;
    },
    78459: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedCompletionProvider = undefined;
      const _0x4e7055 = require(89740);
      const _0x4d74aa = require(30048);
      const _0x23ea21 = require(30579);
      const _0x15a7ee = require(47351);
      const _0x550116 = require(72086);
      const _0x4ea357 = require(51995);
      class _0x664b3d {
        constructor(_0x5a1497, _0x1dc9c9, _0x34b607, _0x217c22, _0x56dfb7, _0x308ed3, _0x3f6a0f, _0x1dd390) {
          this._program = _0x5a1497;
          this._supportTelemetry = _0x3f6a0f;
          const _0x21e10a = [];
          if (_0x308ed3) {
            _0x21e10a.push(new _0x4ea357.DocstringTemplateCompletionProvider(_0x5a1497, _0x1dc9c9, _0x34b607, _0x217c22, _0x1dd390));
          }
          _0x21e10a.push(new _0x23ea21.PyTestCompletionProvider(_0x5a1497, _0x1dc9c9, _0x34b607, _0x217c22, _0x1dd390), new _0x550116.CompletionProvider(_0x5a1497, _0x1dc9c9, _0x34b607, _0x217c22, _0x56dfb7, _0x1dd390));
          this._providers = _0x21e10a;
        }
        getCompletions() {
          return this._addTelemetry(this._getCompletions());
        }
        resolveCompletionItem(_0x586359) {
          for (const _0x4f0de5 of this._providers) {
            _0x4f0de5.resolveCompletionItem(_0x586359);
          }
        }
        getMemberAccessInfo() {
          for (const _0x1fce26 of this._providers) {
            if (_0x1fce26 instanceof _0x550116.CompletionProvider) {
              return _0x1fce26.getMemberAccessInfo();
            }
          }
          return undefined;
        }
        getAutoImportInfo() {
          for (const _0x3a8acc of this._providers) {
            if (_0x3a8acc instanceof _0x550116.CompletionProvider) {
              return _0x3a8acc.getAutoImportInfo();
            }
          }
          return undefined;
        }
        getSlowCompletionInfo() {
          for (const _0x49322b of this._providers) {
            const _0x48e09c = _0x49322b;
            if (_0x48e09c.getSlowCompletionInfo !== undefined) {
              const _0x48d634 = _0x48e09c.getSlowCompletionInfo();
              if (_0x48d634) {
                return _0x48d634;
              }
            }
          }
          return undefined;
        }
        _getCompletions() {
          for (const _0x27371b of this._providers) {
            const _0x2527e8 = _0x27371b.getCompletions();
            if (!_0x2527e8) {
              continue;
            }
            return _0x15a7ee.CompletionListConverter.toLSP(_0x2527e8);
          }
          return null;
        }
        _addTelemetry(_0x5a45c3) {
          var _0x1db9b9;
          if (!this._supportTelemetry) {
            return _0x5a45c3;
          }
          const _0x29d79a = this.getMemberAccessInfo();
          if (_0x29d79a && _0x5a45c3 && _0x5a45c3.items.length > 0 && _0x29d79a.lastKnownModule) {
            const _0x528307 = _0x29d79a.lastKnownModule.split('.')[0] || _0x29d79a.lastKnownModule;
            const _0xf92bf4 = (_0x1db9b9 = this._program.serviceProvider.tryGet(_0x4d74aa.PylanceServiceKeys.packageDiscoverer)) === null || _0x1db9b9 === undefined ? undefined : _0x1db9b9.getKnownModuleVersion(this._program, _0x528307);
            _0x5a45c3.items[0].data = {
              ..._0x5a45c3.items[0].data,
              moduleHash: _0x4e7055.hashString(_0x528307),
              moduleVersion: _0xf92bf4
            };
          }
          return _0x5a45c3;
        }
      }
      exports.AggregatedCompletionProvider = _0x664b3d;
    },
    95456: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedDefinitionProvider = undefined;
      const _0x2db93c = require(65574);
      const _0x5c24b0 = require(85040);
      const _0x17f931 = require(88287);
      class _0x7b69ae {
        constructor(_0x46c5ed, _0x43989d, _0x109efd, _0x2b48a4, _0x52cefd) {
          this._providers = [new _0x2db93c.DefinitionProvider(_0x46c5ed, _0x43989d, _0x109efd, _0x2b48a4, _0x52cefd), new _0x17f931.MagicMethodDefinitionProvider(_0x46c5ed, _0x43989d, _0x109efd, _0x2b48a4, _0x52cefd), new _0x5c24b0.GetAttrMemberDefinitionProvider(_0x46c5ed, _0x43989d, _0x109efd, _0x52cefd)];
        }
        getDefinitions() {
          let _0x383a2f = undefined;
          for (const _0xe3d46b of this._providers) {
            const _0x504e6e = _0xe3d46b.getDefinitions();
            if (!_0x504e6e) {
              continue;
            }
            _0x383a2f = _0x383a2f ?? [];
            _0x383a2f.push(..._0x504e6e);
          }
          return _0x383a2f;
        }
      }
      exports.AggregatedDefinitionProvider = _0x7b69ae;
    },
    84584: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedDocumentSymbolProvider = undefined;
      const _0x3f0fbb = require(56911);
      const _0x3942f4 = require(86846);
      const _0x242f3c = require(50753);
      class _0x56e523 {
        constructor(_0xa807d8, _0x392498, _0x40e2da, _0x3dcff9, _0x43d1e6) {
          this._program = _0x392498;
          this._fileUri = _0x40e2da;
          this._providers = [new _0x242f3c.DocumentSymbolProvider(_0xa807d8, _0x392498, _0x40e2da, _0x3dcff9, _0x43d1e6)];
        }
        getSymbols() {
          const _0x56d28b = [];
          const _0xec3a1d = [];
          for (const _0x1659ed of this._providers) {
            const _0x1a149e = _0x1659ed.getSymbols();
            if (_0x1a149e.length === 0) {
              continue;
            }
            if (_0x3f0fbb.DocumentSymbol.is(_0x1a149e[0])) {
              _0x56d28b.push(..._0x1a149e);
            } else {
              _0xec3a1d.push(..._0x1a149e);
            }
          }
          if (_0xec3a1d.length > 0) {
            _0xec3a1d.push(..._0x3942f4.convertToFlatSymbols(this._program, this._fileUri, _0x56d28b));
            return _0xec3a1d;
          }
          return _0x56d28b;
        }
      }
      exports.AggregatedDocumentSymbolProvider = _0x56e523;
    },
    90463: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedFormatOnTypeProvider = undefined;
      const _0x101dbb = require(30308);
      class _0x530551 {
        constructor(_0x4ebfef, _0x3834d8, _0x1fec9f, _0x2654aa, _0xe2d21c, _0x2ff21c, _0xaf968) {
          this._provider = new _0x101dbb.PythonFormatOnTypeProvider(_0x4ebfef, _0x3834d8, _0x1fec9f, _0x2654aa, _0xe2d21c, _0x2ff21c, _0xaf968);
        }
        formatOnType() {
          return this._provider.formatOnType();
        }
      }
      exports.AggregatedFormatOnTypeProvider = _0x530551;
    },
    30041: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedHoverProvider = undefined;
      const _0x5a5d24 = require(56911);
      const _0x3a67d5 = require(41557);
      const _0x40c23b = require(56814);
      const _0x14a396 = require(89740);
      const _0x128161 = require(79943);
      const _0x4381b1 = require(30048);
      const _0x19d6fe = require(23169);
      const _0x4acc0d = require(16372);
      const _0x31a73d = require(60942);
      class _0x3358cb {
        constructor(_0x55d5a0, _0x5cd697, _0x5de6ee, _0x2b7c45, _0x591c43, _0x352507) {
          this._program = _0x55d5a0;
          this._fileUri = _0x5cd697;
          this._position = _0x5de6ee;
          this._format = _0x2b7c45;
          this._supportTelemetry = _0x591c43;
          this._providers = [new _0x31a73d.StringDefinitionHoverProvider(_0x55d5a0, _0x5cd697, _0x5de6ee, _0x2b7c45, _0x352507), new _0x19d6fe.PyTestHoverProvider(_0x55d5a0, _0x5cd697, _0x5de6ee, _0x2b7c45, _0x352507), new _0x128161.HoverProvider(_0x55d5a0, _0x5cd697, _0x5de6ee, _0x2b7c45, _0x352507), new _0x4acc0d.MagicMethodHoverProvider(_0x55d5a0, _0x5cd697, _0x5de6ee, _0x2b7c45, _0x352507)];
        }
        getHover() {
          return this._addTelemetry(this._getHover());
        }
        _getHover() {
          for (const _0x5ab4c9 of this._providers) {
            const _0x490e25 = _0x5ab4c9.getHover();
            if (_0x490e25) {
              return _0x490e25;
            }
          }
          return null;
        }
        _addTelemetry(_0x206703) {
          var _0x26be86;
          var _0x205bbd;
          if (!_0x206703 || !this._supportTelemetry) {
            return _0x206703;
          }
          const _0x274a9f = this._program.getParseResults(this._fileUri);
          if (!_0x274a9f) {
            return _0x206703;
          }
          const _0x4b61ff = _0x40c23b.convertPositionToOffset(this._position, _0x274a9f.tokenizerOutput.lines);
          if (_0x4b61ff === undefined) {
            return _0x206703;
          }
          const _0x407e79 = _0x3a67d5.findNodeByOffset(_0x274a9f.parserOutput.parseTree, _0x4b61ff);
          if (_0x407e79 === undefined) {
            return _0x206703;
          }
          if (_0x407e79.nodeType !== 38) {
            return _0x206703;
          }
          const _0x235a16 = this._program.evaluator.getDeclInfoForNameNode(_0x407e79)?.decls;
          if (!_0x235a16 || _0x235a16.length === 0) {
            return _0x206703;
          }
          const _0x1d015c = _0x128161.HoverProvider.getPrimaryDeclaration(_0x235a16);
          if (this._format === _0x5a5d24.MarkupKind.Markdown) {
            const _0x200ee1 = _0x1d015c.type === 8 ? (_0x26be86 = this._program.evaluator) === null || _0x26be86 === undefined ? undefined : _0x26be86.resolveAliasDeclaration(_0x1d015c, true) : _0x1d015c;
            const _0x537898 = _0x407e79.parent?.nodeType === 37 ? _0x407e79.parent.d.nameParts[0].d.value : _0x407e79.d.value;
            const _0x123457 = _0x200ee1?.type === 8 && !_0x200ee1.moduleName ? _0x537898 : _0x200ee1?.moduleName;
            if (_0x123457) {
              const _0x48d286 = _0x123457.split('.')[0] || _0x123457;
              _0x206703.contents.value += `
<!--moduleHash:${_0x14a396.hashString(_0x48d286)}-->`;
              const _0x41435f = (_0x205bbd = this._program.serviceProvider.tryGet(_0x4381b1.PylanceServiceKeys.packageDiscoverer)) === null || _0x205bbd === undefined ? undefined : _0x205bbd.getKnownModuleVersion(this._program, _0x48d286);
              if (_0x41435f) {
                _0x206703.contents.value += `
<!--moduleVersion:${_0x41435f}-->`;
              }
            }
          }
          return _0x206703;
        }
      }
      exports.AggregatedHoverProvider = _0x3358cb;
    },
    29215: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedRenameProvider = undefined;
      const _0x2085b6 = require(79725);
      const _0x1bb10b = require(78926);
      class _0x3c5ae4 {
        constructor(_0x137366, _0x173a43, _0x190d68, _0x33871c) {
          this._providers = [new _0x2085b6.RenameProvider(_0x137366, _0x173a43, _0x190d68, _0x33871c), new _0x1bb10b.RenameModuleProvider(_0x137366, _0x173a43, _0x190d68, _0x33871c)];
        }
        canRenameSymbol(_0x39cb11, _0x394b7f) {
          for (const _0x494973 of this._providers) {
            const _0x27c30d = _0x494973.canRenameSymbol(_0x39cb11, _0x394b7f);
            if (_0x27c30d) {
              return _0x27c30d;
            }
          }
          return null;
        }
        renameSymbol(_0x2bca8b, _0x5a0260, _0x218012) {
          for (const _0x17e689 of this._providers) {
            if (!_0x17e689.canRenameSymbol(_0x5a0260, _0x218012)) {
              continue;
            }
            const _0x407c26 = _0x17e689.renameSymbol(_0x2bca8b, _0x5a0260, _0x218012);
            if (_0x407c26) {
              return _0x407c26;
            }
          }
          return null;
        }
      }
      exports.AggregatedRenameProvider = _0x3c5ae4;
    },
    44078: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AggregatedWorkspaceSymbolProvider = undefined;
      const _0xcd90f7 = require(2565);
      class _0x1f8e23 {
        constructor(_0x1e543d, _0x152123, _0x172f60, _0xfc81a2, _0x2abf76) {
          this._providers = [new _0xcd90f7.WorkspaceSymbolProvider(_0x1e543d, _0x152123, _0x172f60, _0xfc81a2, _0x2abf76)];
        }
        reportSymbols() {
          const _0x4f7229 = [];
          for (const _0x5cf5a7 of this._providers) {
            _0x4f7229.push(..._0x5cf5a7.reportSymbols());
          }
          return _0x4f7229;
        }
      }
      exports.AggregatedWorkspaceSymbolProvider = _0x1f8e23;
    },
    27555: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CodeActionProvider = undefined;
      const _0x3e07d2 = require(56911);
      const _0xba9150 = require(28445);
      const _0x4d7d87 = require(47610);
      const _0x165dbc = require(41557);
      const _0x566276 = require(21024);
      const _0x706858 = require(91426);
      const _0x40c6c9 = require(23574);
      const _0x4ba091 = require(34455);
      const _0x2e3dc5 = require(65880);
      const _0x1c1eba = require(56412);
      const _0x2bf3bd = require(56814);
      const _0x1290af = require(88754);
      const _0x3ac25c = require(30741);
      const _0x82da9d = require(27130);
      const _0x2bacb8 = require(99482);
      const _0x2503c6 = require(23898);
      const _0x2f46b6 = require(33474);
      const _0x56170c = require(24122);
      const _0x52a322 = require(59133);
      const _0x339e73 = require(44889);
      const _0x36124c = require(45210);
      const _0x463e26 = require(30048);
      const _0x488eb3 = require(15986);
      const _0x12e3e4 = require(93115);
      const _0x2c9596 = require(55648);
      const _0x4f8faa = require(67142);
      const _0x25adbe = require(64057);
      const _0x27b243 = require(87997);
      const _0x15c9b6 = require(66609);
      const _0x3a1da6 = require(4449);
      const _0x41d23d = require(58093);
      const _0x1fa88a = require(31605);
      const _0x394740 = require(76966);
      class _0x205abb {
        static matchesKind(_0x328f1a, _0x4921d) {
          if (!_0x328f1a || _0x328f1a.length === 0) {
            return true;
          }
          return _0x4921d.some(_0x33ec91 => _0x328f1a.some(_0x2280ef => _0x33ec91.startsWith(_0x2280ef)));
        }
        static async getCodeActionsForPosition(_0x5a0d12, _0x2acae2, _0x47d290, _0x540cdf, _0x34f008, _0x321920) {
          _0x706858.throwIfCancellationRequested(_0x321920);
          if (_0x5a0d12.disableLanguageServices) {
            return [];
          }
          const _0x199486 = _0x540cdf.only;
          const _0x43643f = [];
          const _0x3e72b2 = _0x5a0d12.service.getParseResults(_0x2acae2);
          if (!_0x3e72b2) {
            return [];
          }
          if (_0x540cdf.triggerKind === _0x3e07d2.CodeActionTriggerKind.Invoked) {
            await _0x5a0d12.service.analyzeFile(_0x2acae2, _0x321920);
          }
          if (_0x199486 && this.matchesKind(_0x199486, _0x36124c.pylanceSourceActionKinds)) {
            await _0xf384e5(_0x5a0d12, _0x2acae2, _0x199486, _0x3e72b2, _0x43643f, _0x321920);
          }
          if (!_0x199486 || _0x199486.some(_0x10df34 => _0x10df34.startsWith(_0x3e07d2.CodeActionKind.QuickFix))) {
            const _0x93ad6b = await _0x5a0d12.service.getDiagnosticsForRange(_0x2acae2, _0x47d290, _0x321920);
            _0x5c32a0(_0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            new _0x2c9596.AddImports(_0x5a0d12, _0x34f008).appendCodeActions(_0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            new _0x25adbe.ChangeSpelling(_0x5a0d12, _0x34f008).appendCodeActions(_0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            new _0x27b243.SearchImports(_0x5a0d12, _0x34f008).appendCodeActions(_0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            _0x33e6dd(_0x5a0d12, _0x2acae2, _0x93ad6b, _0x34f008, _0x43643f, _0x321920);
            _0x4f8faa.AddTypeIgnore.addAddTypeIgnoreCodeActions(_0x5a0d12, _0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            _0xd57d96(_0x5a0d12, _0x2acae2, _0x93ad6b, _0x34f008, _0x43643f, _0x321920);
            _0x54dee1(_0x5a0d12, _0x2acae2, _0x93ad6b, _0x43643f, _0x321920);
            _0x14a86e(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x43643f, _0x321920);
            _0x3619f9(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x43643f, _0x321920);
          }
          if (this.matchesKind(_0x199486, _0x36124c.pylanceRefactorActionKinds)) {
            await _0x1da6cb(_0x5a0d12, _0x2acae2, _0x199486, _0x47d290, _0x3e72b2, _0x34f008, _0x43643f, _0x321920);
            _0x400bb2(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x3e07d2.CodeActionKind.Refactor, _0x43643f, _0x321920);
            _0x10fcde(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x43643f, _0x321920);
            _0xbbd9f7(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x34f008, _0x43643f, _0x321920);
            _0x12e3e4.pyTestCodeAction.addCodeActions(_0x5a0d12, _0x2acae2, _0x47d290, _0x3e72b2, _0x43643f, _0x321920);
          }
          return _0x43643f.filter(_0x8ac530 => !_0x199486 || !_0x8ac530.kind || _0x199486.some(_0x4ad8b0 => _0x8ac530.kind.startsWith(_0x4ad8b0)));
        }
      }
      exports.CodeActionProvider = _0x205abb;
      function _0xbbd9f7(_0x33e313, _0x3e5876, _0x50e2f9, _0x256ddf, _0x2da379, _0x26a742, _0x38f3c3) {
        _0x706858.throwIfCancellationRequested(_0x38f3c3);
        if (!_0x2da379 || _0x339e73.NotebookUriMapper.isNotebookCell(_0x3e5876) || _0x33e313.kinds.some(_0x2e0b07 => _0x2e0b07 === _0x3ac25c.WellKnownWorkspaceKinds.Limited)) {
          return;
        }
        _0x33e313.service.run(_0x4901ab => {
          const _0x304aec = _0x4901ab.evaluator;
          const _0xb428bf = _0x2bf3bd.convertRangeToTextRange(_0x50e2f9, _0x256ddf.tokenizerOutput.lines);
          if (!_0xb428bf || !_0x304aec) {
            return;
          }
          const _0x4d06d8 = _0x165dbc.findNodeByOffset(_0x256ddf.parserOutput.parseTree, _0xb428bf.start);
          if (_0x4d06d8?.nodeType !== 38) {
            return;
          }
          const _0x239c55 = _0x1fa88a.MoveSymbolProvider.canMoveSymbol(_0x33e313.service.getConfigOptions(), _0x304aec, _0x4d06d8);
          if (!_0x239c55.succeeded) {
            return;
          }
          const _0x4e4a9b = _0x33e313.service.cancellationProvider.createCancellationTokenSource();
          const _0x129e39 = _0x706858.getCancellationTokenId(_0x4e4a9b.token);
          _0x26a742.push(_0x5d1a2a(_0x488eb3.Localizer.CodeAction.MoveSymbol.moveSymbolsTo(), _0x36124c.PylanceCodeActionKind.RefactorMove.ToFile, 'pick'));
          _0x26a742.push(_0x5d1a2a(_0x488eb3.Localizer.CodeAction.MoveSymbol.moveSymbolsToNewFile(), _0x36124c.PylanceCodeActionKind.RefactorMove.ToNewFile, 'new'));
          function _0x5d1a2a(_0x29d6e3, _0x5f82da, _0x118a46) {
            return _0x3e07d2.CodeAction.create(_0x29d6e3, _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.MoveSymbol.commandTitle(), _0x82da9d.ClientCommands.moveSymbolWithFileSelection, _0x3e5876.toString(), _0x50e2f9, _0x118a46, _0x129e39), _0x5f82da);
          }
        }, _0x38f3c3);
      }
      function _0x10fcde(_0x4e603a, _0xd7a2be, _0x9ebb8a, _0x4260a7, _0x36a7dd, _0x5e0d04) {
        _0x706858.throwIfCancellationRequested(_0x5e0d04);
        if (!_0x4e603a.rootUri || _0x339e73.NotebookUriMapper.isNotebookCell(_0xd7a2be)) {
          return;
        }
        _0x4e603a.service.run(_0x4924cf => {
          const _0x44783d = _0x2bacb8.getImportPathInfo(_0x4924cf, _0x4e603a.rootUri, _0x4260a7, _0x9ebb8a);
          if (!_0x44783d) {
            return;
          }
          if (_0x44783d.importFrom.d.module.d.leadingDots === 0) {
            if (!_0x4d7d87.getRelativeModuleName(_0x4924cf.fileSystem, _0xd7a2be, _0x44783d.targetPath, _0x4924cf.configOptions)) {
              return;
            }
            _0x36a7dd.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertToRelativePath(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertToRelativePath(), _0x82da9d.Commands.convertImportFormat, _0xd7a2be.toString(), 'relative', _0x9ebb8a), _0x3e07d2.CodeActionKind.Refactor), _0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllToRelativePath(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllToRelativePath(), _0x82da9d.Commands.convertImportFormat, _0xd7a2be.toString(), 'relative'), _0x3e07d2.CodeActionKind.Refactor));
            return;
          }
          if (!_0x2bacb8.getAbsoluteModuleName(_0x4924cf, _0xd7a2be, _0x44783d.targetPath)) {
            return;
          }
          _0x36a7dd.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertToAbsolutePath(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertToAbsolutePath(), _0x82da9d.Commands.convertImportFormat, _0xd7a2be.toString(), 'absolute', _0x9ebb8a), _0x3e07d2.CodeActionKind.Refactor), _0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllToAbsolutePath(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllToAbsolutePath(), _0x82da9d.Commands.convertImportFormat, _0xd7a2be.toString(), 'absolute'), _0x3e07d2.CodeActionKind.Refactor));
        }, _0x5e0d04);
      }
      async function _0x1da6cb(_0x471eaa, _0x2894f7, _0x545865, _0x47b54f, _0x18c6f8, _0x2ae4fc, _0x702def, _0x647865) {
        _0x706858.throwIfCancellationRequested(_0x647865);
        if (!_0x471eaa.enableExtractCodeAction) {
          return;
        }
        const _0x58b6e0 = _0x2bf3bd.convertRangeToTextRange(_0x47b54f, _0x18c6f8.tokenizerOutput.lines);
        if (!_0x58b6e0) {
          return;
        }
        await _0x39a6c6(_0x545865, _0x36124c.PylanceCodeActionKind.RefactorExtract.Method, _0x3f55ef => {
          _0x471eaa.service.run(_0x3e8c4f => {
            const _0x4e7b02 = _0x394740.ExtractMethodProvider.canExtractMethod(_0x18c6f8, _0x58b6e0, _0x3e8c4f.evaluator);
            if (_0x4e7b02.failedReason === _0x394740.CannotExtractReason.None) {
              const _0x54168b = _0x488eb3.Localizer.CodeAction.Extract.method();
              _0x702def.push(_0x3e07d2.CodeAction.create(_0x54168b, _0x40c6c9.createCommand(_0x54168b, _0x2ae4fc ? _0x82da9d.ClientCommands.extractMethodWithRename : _0x82da9d.Commands.extractMethod, _0x2894f7.toString(), _0x47b54f), _0x3f55ef));
            }
          }, _0x647865);
        });
        await _0x39a6c6(_0x545865, _0x36124c.PylanceCodeActionKind.RefactorExtract.Variable, _0x4addc2 => {
          const _0x1b7cd1 = _0x394740.ExtractMethodProvider.canExtractVariable(_0x18c6f8, _0x58b6e0);
          if (_0x1b7cd1.failedReason === _0x394740.CannotExtractReason.None) {
            const _0x33de33 = _0x488eb3.Localizer.CodeAction.Extract.variable();
            _0x702def.push(_0x3e07d2.CodeAction.create(_0x33de33, _0x40c6c9.createCommand(_0x33de33, _0x2ae4fc ? _0x82da9d.ClientCommands.extractVariableWithRename : _0x82da9d.Commands.extractVariable, _0x2894f7.toString(), _0x47b54f), _0x4addc2));
          }
        });
      }
      function _0x5c32a0(_0x5dfe9b, _0x4e7737, _0x1923d8, _0x51ded2) {
        _0x706858.throwIfCancellationRequested(_0x51ded2);
        const _0x48a7c4 = _0x2f46b6.getUnusedImportDiagnostics(_0x4e7737);
        if (_0x48a7c4.length === 0) {
          return;
        }
        const _0x15cf08 = _0x48a7c4[0].range;
        _0x1923d8.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeUnusedImport(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeUnusedImport(), _0x82da9d.Commands.removeUnusedImport, _0x5dfe9b.toString(), _0x15cf08), _0x3e07d2.CodeActionKind.QuickFix), _0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeAllUnusedImports(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeAllUnusedImports(), _0x82da9d.Commands.removeUnusedImport, _0x5dfe9b.toString()), _0x3e07d2.CodeActionKind.QuickFix));
      }
      async function _0x39a6c6(_0x3bcc00, _0x298ef3, _0xd84251) {
        if (_0x3bcc00 && !_0x3bcc00.some(_0x1a902d => _0x298ef3.startsWith(_0x1a902d))) {
          return;
        }
        const _0x4e685a = _0xd84251(_0x298ef3);
        if (_0x4ba091.isThenable(_0x4e685a)) {
          await _0x4e685a;
        }
      }
      async function _0xf384e5(_0x79156c, _0x2269cf, _0x3ff9f5, _0xaa79a0, _0x3634b6, _0x609d32) {
        await _0x39a6c6(_0x3ff9f5, _0x36124c.PylanceCodeActionKind.Source.UnusedImports, async _0x16c7e3 => {
          const _0x384c03 = _0x2bf3bd.convertTextRangeToRange(_0xaa79a0.parserOutput.parseTree, _0xaa79a0.tokenizerOutput.lines);
          const _0x1b52d9 = await _0x2f46b6.getUnusedImportDiagnosticsForRangeFromService(_0x79156c.service, _0x2269cf, _0x384c03, _0x609d32);
          if (_0x1b52d9.length === 0) {
            return;
          }
          _0x3634b6.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeAllUnusedImports(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.RemoveUnusedImport.removeAllUnusedImports(), _0x82da9d.Commands.removeUnusedImport, _0x2269cf.toString()), _0x16c7e3));
        });
        await _0x39a6c6(_0x3ff9f5, _0x36124c.PylanceCodeActionKind.Source.ConvertImportFormat, _0x230558 => {
          if (!_0x79156c.rootUri || !_0x79156c.importFormat || _0x339e73.NotebookUriMapper.isNotebookCell(_0x2269cf)) {
            return;
          }
          const _0x303715 = _0x79156c.importFormat;
          const _0x365bf0 = _0x4d7d87.getTopLevelImports(_0xaa79a0.parserOutput.parseTree).orderedImports.filter(_0x38bf6c => _0x38bf6c.node.nodeType === 25).map(_0x4257dd => _0x4257dd.node);
          const _0x19ae78 = _0x56170c.getBackgroundAnalysisProgram(_0x79156c).program;
          const _0x25d4bc = _0x365bf0.filter(_0xd450fa => {
            const _0x130a80 = _0x2bacb8.getImportPathInfo(_0x19ae78, _0x79156c.rootUri, _0xaa79a0, _0xd450fa);
            if (!_0x130a80) {
              return false;
            }
            if (_0x303715 === 'relative') {
              return _0xd450fa.d.module.d.leadingDots === 0 && _0x4d7d87.getRelativeModuleName(_0x19ae78.fileSystem, _0x2269cf, _0x130a80.targetPath, _0x19ae78.configOptions);
            } else {
              return _0xd450fa.d.module.d.leadingDots > 0 && _0x2bacb8.getAbsoluteModuleName(_0x19ae78, _0x2269cf, _0x130a80.targetPath);
            }
          });
          if (_0x25d4bc.length === 0) {
            return;
          }
          _0x3634b6.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllFormat(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.ToggleImportPath.convertAllFormat(), _0x82da9d.Commands.convertImportFormat, _0x2269cf.toString(), _0x303715), _0x230558));
        });
        await _0x39a6c6(_0x3ff9f5, _0x36124c.PylanceCodeActionKind.Source.FixAll, _0x3b8d59 => {
          if (!_0x79156c.fixAll || _0x79156c.fixAll.length === 0) {
            return;
          }
          _0x3634b6.push(_0x3e07d2.CodeAction.create(_0x488eb3.Localizer.CodeAction.FixAll.runFixAll(), _0x40c6c9.createCommand(_0x488eb3.Localizer.CodeAction.FixAll.runFixAll(), _0x82da9d.Commands.fixAll, _0x2269cf.toString()), _0x3b8d59));
        });
      }
      function _0x33e6dd(_0x39147e, _0x4826d1, _0x5bb69f, _0x1224e8, _0x5e3b8f, _0x3b67e2) {
        _0x706858.throwIfCancellationRequested(_0x3b67e2);
        if (!_0x39147e.rootUri || !_0x1224e8) {
          return;
        }
        const _0x58421a = _0x39147e.service.getParseResults(_0x4826d1);
        if (!_0x58421a) {
          return;
        }
        const _0xb6e37c = _0x5bb69f.filter(_0x3c22b8 => _0x3c22b8.getRule() === _0x2e3dc5.DiagnosticRule.reportMissingImports);
        if (_0xb6e37c.length === 0) {
          return;
        }
        const _0x5bd078 = _0xb6e37c[0].range;
        const _0x53067d = _0x2bf3bd.convertRangeToTextRange(_0x5bd078, _0x58421a.tokenizerOutput.lines);
        if (!_0x53067d) {
          return;
        }
        const _0x39b32f = _0x58421a.text.slice(_0x53067d.start, _0x53067d.start + _0x53067d.length);
        if (_0x39b32f[0] === '.' || _0x39b32f.includes('__')) {
          return;
        }
        const _0x458cb6 = _0x39b32f.split('.').join('/');
        const _0x46b079 = [];
        const _0x544321 = _0x39147e.service.backgroundAnalysisProgram.program.getUserFiles();
        for (const _0x1e99ba of _0x544321) {
          const _0x188c8a = _0x1e99ba.sourceFile.getUri();
          const _0x3e4efb = [_0x458cb6 + '.py', _0x458cb6 + '.pyi', _0x458cb6 + '/__init__.py', _0x458cb6 + '/__init__.pyi'];
          const _0x4b3728 = _0x3e4efb.filter(_0x969859 => _0x188c8a.pathEndsWith(_0x969859));
          _0x4b3728.forEach(_0x1a2550 => {
            const _0x7ead39 = _0x188c8a.root.resolvePaths(_0x188c8a.getPath().slice(0, -_0x1a2550.length));
            const _0x2adefb = _0x39147e.rootUri.getRelativePath(_0x7ead39);
            if (_0x2adefb) {
              _0x46b079.push(_0x2adefb);
            }
          });
        }
        _0x46b079.sort((_0x55878b, _0x2999a0) => _0x55878b.length - _0x2999a0.length);
        for (const _0x3b2758 of _0x46b079) {
          const _0x2606de = _0x488eb3.Localizer.CodeAction.ExtraPath.addExtraPath().format({
            name: _0x3b2758
          });
          _0x5e3b8f.push(_0x3e07d2.CodeAction.create(_0x2606de, _0x40c6c9.createCommand(_0x2606de, _0x82da9d.ClientCommands.addToExtraPaths, _0x4826d1.toString(), _0x3b2758), _0x3e07d2.CodeActionKind.QuickFix));
        }
      }
      function _0xd57d96(_0x56c5c6, _0xfb7d50, _0x376849, _0x2ec698, _0x5d727c, _0x11b515) {
        _0x706858.throwIfCancellationRequested(_0x11b515);
        if (!_0x56c5c6.rootUri || !_0x2ec698) {
          return;
        }
        const _0x5d4c02 = _0x56c5c6.service.getParseResults(_0xfb7d50);
        if (!_0x5d4c02) {
          return;
        }
        const _0x54c8ac = _0x376849.filter(_0xf16d45 => {
          var _0xb58399;
          if ((_0xb58399 = _0x15c9b6.getDiagnosticCode(_0xf16d45)) === null || _0xb58399 === undefined) {
            return undefined;
          } else {
            return _0xb58399.startsWith('Diagnostic.import');
          }
        });
        if (_0x54c8ac.length === 0) {
          return;
        }
        const _0x2dac13 = _0x54c8ac[0].range;
        const _0x273081 = _0x2bf3bd.convertRangeToTextRange(_0x2dac13, _0x5d4c02.tokenizerOutput.lines);
        if (!_0x273081) {
          return;
        }
        if (_0x339e73.NotebookUriMapper.isNotebookCell(_0xfb7d50)) {
          const _0x2a5ffc = _0x488eb3.Localizer.CodeAction.UnresolvedImports.selectKernelTitle();
          _0x5d727c.push(_0x3e07d2.CodeAction.create(_0x2a5ffc, _0x40c6c9.createCommand(_0x2a5ffc, _0x82da9d.ClientCommands.notebookSelectKernel), _0x3e07d2.CodeActionKind.QuickFix));
        } else {
          const _0x288c4a = _0x488eb3.Localizer.CodeAction.UnresolvedImports.selectInterpreterTitle();
          _0x5d727c.push(_0x3e07d2.CodeAction.create(_0x288c4a, _0x40c6c9.createCommand(_0x288c4a, _0x82da9d.ClientCommands.pythonSetInterpeter), _0x3e07d2.CodeActionKind.QuickFix));
        }
        const _0x21bf9d = _0x488eb3.Localizer.CodeAction.UnresolvedImports.learnMoreTitle();
        _0x5d727c.push(_0x3e07d2.CodeAction.create(_0x21bf9d, _0x40c6c9.createCommand(_0x21bf9d, _0x82da9d.ClientCommands.openUri, ['https://aka.ms/pylanceImportResolve']), _0x3e07d2.CodeActionKind.QuickFix));
      }
      function _0x54dee1(_0x402342, _0x44f5f8, _0x1f538a, _0x10b0c3, _0x22fe36) {
        _0x706858.throwIfCancellationRequested(_0x22fe36);
        _0x402342.service.run(_0x118be4 => {
          var _0x5af813;
          const _0x51fa7d = _0x402342.service.getParseResults(_0x44f5f8);
          if (!_0x51fa7d) {
            return;
          }
          const _0x1c946e = _0x1f538a.filter(_0x156eb6 => _0x156eb6.getRule() === _0x2e3dc5.DiagnosticRule.reportAbstractUsage);
          if (_0x1c946e.length === 0) {
            return;
          }
          for (const _0x398ca9 of _0x1c946e) {
            const _0x31cad0 = _0x2bf3bd.convertRangeToTextRange(_0x398ca9.range, _0x51fa7d.tokenizerOutput.lines);
            if (!_0x31cad0) {
              continue;
            }
            const _0x3b551c = _0x165dbc.findNodeByOffset(_0x51fa7d.parserOutput.parseTree, _0x31cad0.start);
            if (!_0x3b551c) {
              continue;
            }
            const _0x1e852e = _0x165dbc.getFirstAncestorOrSelfOfKind(_0x3b551c, 9);
            if (!_0x1e852e || !_0x1290af.TextRange.containsRange(_0x31cad0, _0x1e852e)) {
              continue;
            }
            const _0x44752e = (_0x5af813 = _0x118be4.evaluator) === null || _0x5af813 === undefined ? undefined : _0x5af813.getType(_0x1e852e);
            if (!_0x44752e || !_0x566276.isClass(_0x44752e)) {
              continue;
            }
            const _0x514a63 = _0x118be4.serviceProvider.tryGet(_0x463e26.PylanceServiceKeys.declarationFinder);
            if (!_0x514a63) {
              continue;
            }
            for (const _0x5b4247 of _0x514a63.getDeclarations(_0x44752e, _0x22fe36)) {
              if (_0xba9150.isClassDeclaration(_0x5b4247) && _0x5b4247.node.d.name && _0x5b4247.uri) {
                const _0x1089b9 = _0x118be4.getParseResults(_0x5b4247.uri);
                if (!_0x1089b9) {
                  continue;
                }
                const _0x3ff4cf = _0x2bf3bd.convertTextRangeToRange(_0x5b4247.node.d.name, _0x1089b9.tokenizerOutput.lines);
                _0x400bb2(_0x402342, _0x5b4247.uri, _0x3ff4cf, _0x1089b9, _0x3e07d2.CodeActionKind.QuickFix, _0x10b0c3, _0x22fe36);
              }
            }
          }
        }, _0x22fe36);
      }
      function _0x400bb2(_0x54d08d, _0x1ced72, _0x5d8825, _0x1c90ba, _0x32c213, _0xe900c5, _0x2c28d9) {
        _0x706858.throwIfCancellationRequested(_0x2c28d9);
        _0x54d08d.service.run(_0x414496 => {
          const _0x5ab026 = _0x414496.evaluator;
          const _0x3a0f5c = _0x2bf3bd.convertRangeToTextRange(_0x5d8825, _0x1c90ba.tokenizerOutput.lines);
          if (!_0x3a0f5c || !_0x5ab026) {
            return;
          }
          const _0x16a67e = _0x165dbc.findNodeByOffset(_0x1c90ba.parserOutput.parseTree, _0x3a0f5c.start);
          if (_0x16a67e?.nodeType !== 38) {
            return;
          }
          if (_0x41d23d.ImplementAbstractClassProvider.canImplementAbstractClass(_0x5ab026, _0x16a67e) === undefined) {
            return;
          }
          const _0x190b63 = _0x488eb3.Localizer.CodeAction.ImplementAbstractClass.implementAllAbstractClasses();
          const _0x24274f = _0x40c6c9.createCommand(_0x190b63, _0x82da9d.Commands.implementAllAbstractClasses, _0x1ced72.toString(), _0x5d8825);
          _0xe900c5.push(_0x3e07d2.CodeAction.create(_0x190b63, _0x24274f, _0x32c213));
          if (_0x54d08d.aiCodeActions?.implementAbstractClasses) {
            const _0x81aef7 = _0x488eb3.Localizer.CodeAction.ImplementAbstractClass.implementAllAbstractClassesWithCopilot();
            const _0x46d489 = _0x16a67e.d.value;
            const _0x2510e5 = _0x40c6c9.createCommand(_0x81aef7, _0x82da9d.ClientCommands.startEditorChat, {
              message: `Implement all unimplemented abstract methods for class ${_0x46d489} with a useful implementation.`,
              autoSend: true
            });
            const _0x1ce71d = _0x2503c6.mergeCommands(_0x24274f, _0x2510e5);
            if (_0x1ce71d === undefined) {
              return;
            }
            const _0x6e082 = _0x3e07d2.CodeAction.create(_0x81aef7, _0x1ce71d, _0x32c213);
            _0x6e082.data = _0x1c1eba.toLSPAny({
              isAI: true
            });
            _0xe900c5.push(_0x6e082);
          }
        }, _0x2c28d9);
      }
      function _0x14a86e(_0x4dbd21, _0x19c2eb, _0x18c4e6, _0x39f025, _0x31b587, _0x3a2b91) {
        _0x706858.throwIfCancellationRequested(_0x3a2b91);
        _0x4dbd21.service.run(_0x573b8d => {
          if (_0x4dbd21.supportDocstringTemplate) {
            if (!_0x3a1da6.canProvideDocstringTemplate(_0x39f025, _0x18c4e6.start)) {
              return;
            }
            const _0x16f2c7 = _0x488eb3.Localizer.CodeAction.GenerateDocstring.generateDocstring();
            const _0x38b5b4 = _0x40c6c9.createCommand(_0x16f2c7, _0x82da9d.Commands.generateDocstring, _0x19c2eb.toString(), _0x18c4e6);
            _0x31b587.push(_0x3e07d2.CodeAction.create(_0x16f2c7, _0x38b5b4));
          }
        }, _0x3a2b91);
      }
      function _0x3619f9(_0x2426cd, _0xca2d40, _0x18fa00, _0x47e165, _0x581920, _0x221a8f) {
        _0x706858.throwIfCancellationRequested(_0x221a8f);
        _0x2426cd.service.run(_0x52bfa2 => {
          if (_0x2426cd.supportDocstringTemplate) {
            if (!_0x3a1da6.canProvideDocstringTemplate(_0x47e165, _0x18fa00.start)) {
              return;
            }
            if (_0x2426cd.aiCodeActions?.generateDocstring) {
              const _0x4eb6a2 = _0x40c6c9.createCommand('remove existing triple quotes', _0x82da9d.Commands.fixupCopilotDocstringOutput, _0xca2d40.toString(), _0x18fa00);
              const _0x5d8aa1 = _0x52bfa2.evaluator;
              const _0x24f720 = new _0x52a322.IndentationUtils(_0x2426cd.editorIndentConfig ?? _0x52a322.DefaultEditorIndentConfig);
              if (!_0x5d8aa1) {
                return;
              }
              const _0x240af0 = _0x488eb3.Localizer.CodeAction.GenerateDocstring.generateDocstringWithCopilot();
              const _0x1f9f60 = _0x3a1da6.getDocstringTemplatesinString(_0x47e165, _0x18fa00.start, _0x52bfa2.evaluator, _0x24f720);
              const _0x634af6 = _0x40c6c9.createCommand(_0x240af0, _0x82da9d.ClientCommands.startEditorChat, {
                message: `/doc Use triple quotes, Write a docstring based on the code below; /doc Insert an empty line to separate sections\r
 \r
${_0x1f9f60}`,
                autoSend: true,
                initialSelection: _0x18fa00,
                initialRange: _0x18fa00
              });
              const _0x48093c = _0x2503c6.mergeCommands(_0x4eb6a2, _0x634af6);
              if (_0x48093c) {
                const _0x4d30a7 = _0x488eb3.Localizer.CodeAction.GenerateDocstring.generateDocstringWithCopilot();
                const _0x5e32a9 = _0x3e07d2.CodeAction.create(_0x4d30a7, _0x48093c);
                _0x5e32a9.data = _0x1c1eba.toLSPAny({
                  isAI: true
                });
                _0x581920.push(_0x5e32a9);
              }
            }
          }
        }, _0x221a8f);
      }
    },
    47351: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CompletionListConverter = undefined;
      const _0x338bc2 = require(67619);
      const _0x18b0d0 = 5;
      class _0x345cd5 extends _0x338bc2.ShortLivedCache {
        constructor() {
          super(_0x18b0d0);
          this._supported = false;
          this._counter = 0;
        }
        static get() {
          return _0x345cd5._instance;
        }
        static toLSP(_0x1d9cbd) {
          if (!_0x345cd5._instance._supported) {
            return _0x1d9cbd;
          }
          _0x345cd5._instance._counter++;
          for (const _0x74fcb7 of _0x1d9cbd.items) {
            _0x74fcb7.data = _0x345cd5._instance.add(_0x345cd5._instance._counter, _0x74fcb7.data);
          }
          return _0x1d9cbd;
        }
        static fromLSP(_0x281c2c) {
          if (!_0x345cd5._instance._supported) {
            return _0x281c2c;
          }
          if (!_0x281c2c.data) {
            return _0x281c2c;
          }
          if (!('id' in _0x281c2c.data)) {
            return _0x281c2c;
          }
          _0x281c2c.data = _0x345cd5._instance.get(_0x281c2c.data);
          return _0x281c2c;
        }
        onUpdateSettings(_0x72cdc5) {
          this._supported = _0x72cdc5.cacheLSPData ?? false;
        }
      }
      exports.CompletionListConverter = _0x345cd5;
      _0x345cd5._instance = new _0x345cd5();
    },
    72086: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CompletionProvider = exports.SkipMarker = undefined;
      exports.getSlowCompletionInfoFileType = _0x28231a;
      const _0x25c167 = require(56911);
      const _0x2a3513 = require(26687);
      const _0x2c4ead = require(47610);
      const _0x1d6e1e = __importStar(require(41557));
      const _0x1cb91f = require(3113);
      const _0x3a186f = __importStar(require(12097));
      const _0x2e919 = require(4064);
      const _0x4ef59e = require(21024);
      const _0x590d44 = require(92324);
      const _0x5d1bdc = require(58147);
      const _0x5c2ec1 = __importStar(require(89740));
      const _0x3acddc = require(88754);
      const _0x2921e5 = require(71582);
      const _0x5b652c = require(5737);
      const _0x5d335f = require(51868);
      const _0x13d161 = require(39426);
      const _0x3fa03a = require(24835);
      const _0x1d508c = require(96159);
      const _0x179784 = require(44889);
      const _0x39e66b = require(30048);
      const _0x1855d8 = require(86615);
      const _0x331742 = require(19995);
      const _0x4be058 = require(19892);
      const _0x341251 = require(47351);
      exports.SkipMarker = '__skip__completion__';
      function _0x28231a(_0x54adc5) {
        if (_0x179784.NotebookUriMapper.isNotebookCell(_0x54adc5)) {
          if (_0x54adc5.scheme === 'vscode-interactive-input') {
            return 'interactive';
          } else {
            return 'cell';
          }
        } else {
          return 'regular';
        }
      }
      class _0xfd09b5 extends _0x5b652c.CompletionProvider {
        constructor(_0x199b2d, _0x5e3057, _0x2da0f6, _0x2bd6e1, _0x20b5af, _0x2e5184) {
          var _0x5b20db;
          super(_0x199b2d, _0x5e3057, _0x2da0f6, _0x2bd6e1, _0x2e5184);
          this._autoImportMaps = _0x20b5af;
          this._chainedUri = (_0x5b20db = this.program.getSourceFileInfo(_0x5e3057)?.chainedSourceFile) === null || _0x5b20db === undefined ? undefined : _0x5b20db.sourceFile.getUri();
          this._slowCompletionInfo = {
            completionType: 'regular',
            fileType: _0x28231a(this.fileUri)
          };
        }
        getMemberAccessInfo() {
          return this._memberAccessInfo;
        }
        getAutoImportInfo() {
          return this._autoImportInfo;
        }
        getSlowCompletionInfo() {
          return this._slowCompletionInfo;
        }
        createAutoImporter(_0x3550b3, _0x1d0277) {
          const _0xabf534 = this.program.serviceProvider.tryGet(_0x39e66b.PylanceServiceKeys.packageDiscoverer);
          if (this._pylanceOptions.showOnlyDirectDependenciesInAutoImport) {
            if (_0xabf534 === null || _0xabf534 === undefined) {
              undefined;
            } else {
              _0xabf534.ensureDistributionToPackageMap(this.program);
            }
          }
          return new _0x1855d8.AutoImporter(this.program, this.execEnv, this.parseResults, this.position, _0x3550b3, _0x1855d8.buildModuleSymbolsMap(this.program, this.execEnv, this._autoImportMaps.indices, this.fileUri, this._pylanceOptions.includeAliasesFromUserFiles, false, this.cancellationToken), {
            indices: this._autoImportMaps.indices,
            lazyEdit: _0x1d0277,
            importFormat: this._pylanceOptions.importFormat,
            includeAliasesFromUserFiles: this._pylanceOptions.includeAliasesFromUserFiles,
            allowOnlyDirectDependencies: _0xabf534 === null || _0xabf534 === undefined ? undefined : _0xabf534.getDirectDependencies(this.program)
          });
        }
        shouldProcessDeclaration(_0x51fb4e) {
          if (!this._chainedUri || _0x51fb4e?.type !== 8) {
            return true;
          }
          if (!_0x51fb4e.moduleName.endsWith(exports.SkipMarker)) {
            return true;
          }
          const _0x2f48c6 = _0x2a3513.getFileInfo(_0x51fb4e.node);
          return !(_0x2f48c6 === null || _0x2f48c6 === undefined ? undefined : _0x2f48c6.fileUri.equals(this._chainedUri));
        }
        addAutoImportCompletions(_0x5bfdc2, _0x1bfb79, _0x45bcf0, _0x52171c, _0x237697) {
          var _0x57252f;
          if (!this.configOptions.autoImportCompletions || !this._pylanceOptions.autoImport) {
            return;
          }
          const _0x5064de = this.createAutoImporter(_0x52171c, _0x45bcf0);
          const _0x65e5ef = [];
          const _0x374407 = (_0x57252f = this._autoImportMaps.nameMap) === null || _0x57252f === undefined ? undefined : _0x57252f.get(_0x5bfdc2);
          if (_0x374407 && _0x5bfdc2.length > 1 && !_0x52171c.has(_0x5bfdc2)) {
            _0x5d1bdc.appendArray(_0x65e5ef, _0x5064de.getAutoImportCandidatesForAbbr(_0x5bfdc2, _0x374407, this.cancellationToken));
          }
          _0x65e5ef.push(..._0x5064de.getAutoImportCandidates(_0x5bfdc2, _0x1bfb79, undefined, this.cancellationToken));
          const _0x344554 = _0x5064de.getPerfInfo();
          const _0x275ee4 = new _0x2921e5.Duration();
          this.addImportResults(_0x65e5ef, _0x5bfdc2, _0x52171c, _0x237697);
          this._autoImportInfo = {
            indexUsed: _0x344554.indexUsed,
            totalTimeInMS: _0x344554.totalInMs,
            moduleTimeInMS: _0x344554.moduleTimeInMS,
            indexTimeInMS: _0x344554.indexTimeInMS,
            importAliasTimeInMS: _0x344554.importAliasTimeInMS,
            itemCount: _0x65e5ef.length,
            symbolCount: _0x344554.symbolCount,
            indexCount: _0x344554.indexCount,
            importAliasCount: _0x344554.importAliasCount,
            additionTimeInMS: _0x275ee4.getDurationInMilliseconds()
          };
        }
        getMethodOverrideCompletions(_0x417fd6, _0x2946df, _0x142960) {
          const _0x5dbe08 = _0x1d6e1e.getEnclosingClass(_0x2946df, true);
          if (!_0x5dbe08) {
            return undefined;
          }
          const _0x706d4b = this.evaluator.getTypeOfClass(_0x5dbe08);
          if (!_0x706d4b) {
            return undefined;
          }
          const _0x570e5c = _0x1d508c.hasAsyncKeyword(this.parseResults, _0x2946df);
          const _0x17c39d = (_0x142960 === null || _0x142960 === undefined ? undefined : _0x142960.some(_0x3918f0 => _0x1d6e1e.checkDecorator(_0x3918f0, 'staticmethod'))) ?? false;
          const _0x10dcf4 = (_0x142960 === null || _0x142960 === undefined ? undefined : _0x142960.some(_0x3c9394 => _0x1d6e1e.checkDecorator(_0x3c9394, 'classmethod'))) ?? false;
          const _0x20f3d1 = new _0x5b652c.CompletionMap();
          const _0x30ffaf = _0x590d44.getClassFieldsRecursive(_0x706d4b.classType);
          _0x30ffaf.forEach((_0x4b03d2, _0x5bd2e6) => this._appendMember(_0x417fd6, _0x2946df, _0x570e5c, _0x17c39d, _0x10dcf4, _0x706d4b, _0x4b03d2, _0x5bd2e6, _0x20f3d1));
          if (_0x706d4b.classType.shared.effectiveMetaclass && !_0x4ef59e.isUnknown(_0x706d4b.classType.shared.effectiveMetaclass)) {
            const _0xb57f7f = _0x590d44.getClassFieldsRecursive(_0x706d4b.classType.shared.effectiveMetaclass);
            _0xb57f7f.forEach((_0x2d15f8, _0x1161fd) => this._appendMember(_0x417fd6, _0x2946df, _0x570e5c, _0x17c39d, _0x10dcf4, _0x706d4b, _0x2d15f8, _0x1161fd, _0x20f3d1));
          }
          this._slowCompletionInfo = {
            completionType: 'override',
            fileType: _0x28231a(this.fileUri)
          };
          return _0x20f3d1;
        }
        getMemberAccessCompletions(_0x2b0036, _0x4e3edc) {
          const _0x485de6 = this._appendGetAttrLiteralMembers(_0x2b0036, _0x4e3edc, super.getMemberAccessCompletions(_0x2b0036, _0x4e3edc));
          let _0x53186a = this.evaluator.getType(_0x2b0036);
          if (_0x53186a) {
            _0x53186a = this.evaluator.makeTopLevelTypeVarsConcrete(_0x53186a);
            if (_0x4ef59e.isUnknown(_0x53186a) && _0x53186a.priv.possibleType) {
              _0x53186a = this.evaluator.makeTopLevelTypeVarsConcrete(_0x53186a.priv.possibleType);
            }
            if (_0x53186a.category === 7) {
              this._getSubmoduleCompletion(_0x2b0036, _0x53186a, _0x485de6);
            }
          }
          this._memberAccessInfo = this._getLastKnownModule(_0x2b0036, _0x53186a);
          this._slowCompletionInfo = {
            completionType: 'memberAccess',
            fileType: _0x28231a(this.fileUri)
          };
          return _0x485de6;
        }
        addExtraCommitChar(_0x5e18a7) {
          if (!this._pylanceOptions.extraCommitChars || !_0x5e18a7.kind) {
            return;
          }
          const _0x1c3a9e = this._getExtraCommitCharsForKind(_0x5e18a7.kind);
          if (_0x1c3a9e.length === 0) {
            return;
          }
          _0x5e18a7.commitCharacters = _0x1c3a9e;
        }
        getCompletionItemData(_0x179e3d) {
          if (_0x179e3d.data) {
            return _0x341251.CompletionListConverter.fromLSP(_0x179e3d).data;
          }
          return super.getCompletionItemData(_0x179e3d);
        }
        get _pylanceOptions() {
          return this.options;
        }
        _appendGetAttrLiteralMembers(_0x37ed29, _0x1caaa8, _0x23dbc1) {
          const _0x1d28a0 = this._getMode(_0x37ed29.parent);
          _0x23dbc1 = _0x23dbc1 ?? new _0x5b652c.CompletionMap();
          if (this._tryAppendGetAttrLiteralMembersForMode(_0x37ed29, _0x1caaa8, _0x23dbc1, _0x1d28a0)) {
            return _0x23dbc1;
          }
          if (_0x1d28a0 !== 'get') {
            this._tryAppendGetAttrLiteralMembersForMode(_0x37ed29, _0x1caaa8, _0x23dbc1, 'get');
          }
          return _0x23dbc1;
        }
        _tryAppendGetAttrLiteralMembersForMode(_0x1b14f0, _0x4dcb1c, _0x4b7cbe, _0x2e5f37) {
          const _0x181543 = _0x3fa03a.getGetAttrMethods(this.evaluator, _0x1b14f0, _0x2e5f37);
          if (_0x181543.length === 0) {
            return false;
          }
          let _0x16505a = 0;
          for (const _0x50587f of _0x181543) {
            const _0x2f559e = _0x50587f.shared.declaredReturnType ?? this.evaluator.getInferredReturnType(_0x50587f);
            const _0x4f2530 = _0x590d44.isCallableType(_0x2f559e) ? _0x25c167.CompletionItemKind.Function : _0x25c167.CompletionItemKind.Field;
            const _0x314011 = _0x3fa03a.firstParamsExcludingSelf(_0x50587f);
            if (!_0x314011) {
              continue;
            }
            const _0x506538 = new Set();
            if (_0x314011._type.category === 6) {
              _0x506538.add(_0x314011._type.priv.literalValue);
            } else {
              const _0x3f684c = _0x314011._type;
              if (_0x3f684c.priv.literalClasses.literalStrMap) {
                for (const _0xda8605 of _0x3f684c.priv.literalClasses.literalStrMap.keys()) {
                  _0x506538.add(_0xda8605);
                }
              }
              if (_0x3f684c.priv.literalInstances.literalStrMap) {
                for (const _0x5afa81 of _0x3f684c.priv.literalInstances.literalStrMap.keys()) {
                  _0x506538.add(_0x5afa81);
                }
              }
            }
            _0x16505a += _0x506538.size;
            for (const _0x39504c of _0x506538) {
              this.addNameToCompletions(_0x39504c, _0x4f2530, _0x4dcb1c, _0x4b7cbe, {
                typeDetail: _0x5d335f.getTypeDetail(this.evaluator, _0x50587f, _0x50587f.shared.declaration, _0x50587f.shared.name, undefined, this.configOptions.functionSignatureDisplay),
                documentation: _0x13d161.getDocumentationPartsForTypeAndDecl(this.sourceMapper, _0x50587f, _0x50587f.shared.declaration, this.evaluator, {
                  name: _0x50587f.shared.name
                })
              });
            }
          }
          return _0x16505a > 0;
        }
        _getMode(_0x49555b) {
          if (_0x49555b?.nodeType === 35) {
            return _0x3fa03a.getAttrMode(_0x49555b);
          }
          if (_0x49555b?.nodeType === 0) {
            if (_0x49555b.parent?.nodeType === 47 && _0x49555b.parent.d.statements.some(_0x5cdbbb => _0x5cdbbb === _0x49555b) && this._containsToken(this.parseResults, _0x49555b, _0x12eb25 => _0x12eb25.type === 9 && _0x12eb25.operatorType === 2)) {
              return 'set';
            }
          }
          return 'get';
        }
        _containsToken(_0x368579, _0x39b657, _0x2e449e) {
          const _0x9641cb = _0x368579.tokenizerOutput.tokens.getItemAtPosition(_0x39b657.start);
          const _0x585aeb = _0x368579.tokenizerOutput.tokens.getItemAtPosition(_0x3acddc.TextRange.getEnd(_0x39b657));
          for (let _0x57be6e = _0x9641cb; _0x57be6e <= _0x585aeb; _0x57be6e++) {
            const _0xb2fe31 = _0x368579.tokenizerOutput.tokens.getItemAt(_0x57be6e);
            if (_0x2e449e(_0xb2fe31)) {
              return true;
            }
          }
          return false;
        }
        _getLastKnownModule(_0x12bd21, _0x20448a) {
          let _0x4a92f2 = _0x12bd21;
          let _0x177a43 = _0x20448a;
          let _0x171169 = _0x12bd21.nodeType === 35 ? _0x12bd21 === null || _0x12bd21 === undefined ? undefined : _0x12bd21.d.member.d.value : undefined;
          while (_0x4a92f2) {
            if (_0x4a92f2.nodeType === 9 || _0x4a92f2.nodeType === 35) {
              _0x4a92f2 = _0x4a92f2.d.leftExpr;
              if (_0x171169 === undefined) {
                _0x171169 = _0x4a92f2.nodeType === 35 ? (_0x4a92f2 === null || _0x4a92f2 === undefined ? undefined : _0x4a92f2.d.member.d.value) ?? '' : '';
              }
            } else {
              break;
            }
            if (_0x4a92f2) {
              _0x177a43 = this.evaluator.getType(_0x4a92f2);
              if (_0x177a43 !== undefined && !_0x4ef59e.isUnknown(_0x177a43) && !_0x4ef59e.isUnbound(_0x177a43)) {
                break;
              }
            }
          }
          const _0x15e059 = {};
          if (_0x177a43 && !_0x4ef59e.isUnknown(_0x177a43) && !_0x4ef59e.isUnbound(_0x177a43) && _0x4a92f2) {
            const _0x424b87 = _0x590d44.getDeclaringModulesForType(_0x177a43);
            _0x15e059.lastKnownModule = _0x424b87.find(_0x2c500a => _0x2c500a !== 'typing');
            if (_0x4a92f2.nodeType === 35) {
              _0x15e059.lastKnownMemberName = _0x4a92f2.d.member.d.value;
            } else {
              if (_0x4a92f2.nodeType === 38 && _0x4ef59e.isInstantiableClass(_0x177a43)) {
                _0x15e059.lastKnownMemberName = _0x177a43.shared.name;
              } else {
                if (_0x4a92f2.nodeType === 38 && _0x4ef59e.isClassInstance(_0x177a43)) {
                  _0x15e059.lastKnownMemberName = _0x177a43.shared.name;
                }
              }
            }
            _0x15e059.unknownMemberName = _0x171169;
          }
          return _0x15e059;
        }
        _appendMember(_0x41d1ea, _0x2591df, _0x1a73e9, _0x5f107a, _0x38ce39, _0x47f4d7, _0x123f9b, _0x5029b5, _0x5f2707) {
          if (!_0x4ef59e.isInstantiableClass(_0x123f9b.classType) || _0x123f9b.classType.shared === _0x47f4d7.classType.shared || !_0x5c2ec1.isPatternInSymbol(_0x2591df.d.value, _0x5029b5)) {
            return;
          }
          const _0x5b8bce = _0x123f9b.symbol;
          const _0x486ae2 = _0x2e919.getLastTypedDeclarationForSymbol(_0x5b8bce);
          if (!_0x486ae2 || _0x486ae2.type !== 5) {
            return;
          }
          const _0x3b197a = this.evaluator.getTypeOfMember(_0x123f9b);
          if (!_0x3b197a) {
            return;
          }
          const _0x3df42a = _0x4ef59e.isFunction(_0x3b197a) && _0x4ef59e.FunctionType.isStaticMethod(_0x3b197a);
          const _0x2379ea = _0x4ef59e.isFunction(_0x3b197a) && _0x4ef59e.FunctionType.isClassMethod(_0x3b197a) && _0x5029b5 !== '__init_subclass__';
          if (_0x5f107a !== _0x3df42a || _0x38ce39 !== _0x2379ea) {
            return;
          }
          let _0x42ecb5 = _0x4ef59e.isClassInstance(_0x3b197a) && _0x4ef59e.ClassType.isPropertyClass(_0x3b197a);
          if (_0x3a186f.isDunderName(_0x5029b5)) {
            _0x42ecb5 = false;
          }
          let _0x91d543 = undefined;
          if (_0x4ef59e.isFunction(_0x3b197a)) {
            _0x91d543 = _0x3b197a;
          } else {
            if (_0x42ecb5 && _0x4ef59e.isClassInstance(_0x3b197a)) {
              const _0x432d76 = _0x590d44.lookUpClassMember(_0x3b197a, 'fget');
              if (!_0x432d76) {
                return;
              }
              const _0x2bf5cf = this.evaluator.getTypeOfMember(_0x432d76);
              if (!_0x4ef59e.isFunction(_0x2bf5cf)) {
                return;
              }
              _0x91d543 = _0x2bf5cf;
            }
          }
          if (!_0x91d543 || !_0x91d543.shared.declaration) {
            return;
          }
          const _0x4ce89a = this._useLazyEdit(_0x5029b5);
          if (_0x4ce89a && this.itemToResolve) {
            return;
          }
          const _0x3fc05a = new _0x331742.ImportAdder(this.program);
          const _0x54e74b = new _0x4be058.MethodSignaturesGenerator(this.program, this.fileUri, _0x47f4d7.classType, _0x91d543, {
            importAdder: _0x3fc05a,
            enableTrackingAddImports: _0x4ce89a,
            hasAsyncKeyword: _0x1a73e9,
            dontAddTypeAnnotation: this._pylanceOptions.dontAddTypeAnnotation
          }, this.cancellationToken);
          const _0x56ab7e = _0x54e74b.getMethodSignature();
          let _0x36a5fe;
          if (_0x1cb91f.isStubFile(this.fileUri)) {
            _0x36a5fe = _0x56ab7e.methodSignature + ': ...';
          } else {
            const _0x543613 = this.printOverriddenMethodBody(_0x47f4d7.classType, _0x3df42a, _0x42ecb5, _0x486ae2, _0x1a73e9 && _0x56ab7e.useAwait);
            _0x36a5fe = _0x56ab7e.methodSignature + ':\n' + _0x543613;
          }
          const _0x250601 = this.createReplaceEdits(_0x41d1ea, _0x2591df, _0x36a5fe);
          const _0x4db775 = _0x4ce89a ? undefined : _0x3fc05a.applyImports(this.fileUri, this.parseResults, _0x2591df.start, 'absolute', this.cancellationToken);
          this.addSymbol(_0x5029b5, _0x5b8bce, _0x2591df.d.value, _0x5f2707, {
            funcParensDisabled: true,
            edits: {
              format: this.options.snippet ? _0x25c167.InsertTextFormat.Snippet : undefined,
              textEdit: _0x250601,
              additionalTextEdits: _0x4db775
            }
          });
        }
        _useLazyEdit(_0x43639b) {
          if (!this.options.lazyEdit) {
            return false;
          }
          if (!this.itemToResolve) {
            return true;
          }
          const _0xb3a08a = this.getCompletionItemData(this.itemToResolve);
          return _0xb3a08a.symbolLabel !== _0x43639b;
        }
        _getExtraCommitCharsForKind(_0x5e1641) {
          switch (_0x5e1641) {
            case _0x25c167.CompletionItemKind.Class:
              return ['.', '('];
            case _0x25c167.CompletionItemKind.Function:
            case _0x25c167.CompletionItemKind.Method:
              return ['('];
            case _0x25c167.CompletionItemKind.Module:
            case _0x25c167.CompletionItemKind.Enum:
              return ['.'];
            default:
              return [];
          }
        }
        _getSubmoduleCompletion(_0xe95441, _0x1ef342, _0x253efc) {
          if (this.itemToResolve) {
            return;
          }
          const _0x4ab40a = this._getNodeValue(_0xe95441, '');
          const _0x1968d2 = _0x1ef342.priv.moduleName;
          if (_0x4ab40a !== _0x1968d2) {
            return;
          }
          const _0x1afd75 = {
            leadingDots: 0,
            hasTrailingDot: true,
            nameParts: _0x1968d2.split('.'),
            importedSymbols: new Set()
          };
          const _0x530409 = this.importResolver.getCompletionSuggestions(this.fileUri, this.execEnv, _0x1afd75);
          const _0x21318f = _0x2c4ead.getTopLevelImports(this.parseResults.parserOutput.parseTree);
          _0x530409.forEach((_0x46168c, _0x5618ab) => {
            if (_0x253efc && _0x253efc.has(_0x5618ab)) {
              return;
            }
            const _0x42e367 = _0x1968d2 + '.' + _0x5618ab;
            const _0x2118d1 = this.importResolver.getModuleNameForImport(_0x46168c, this.execEnv);
            this.addNameToCompletions(_0x5618ab, _0x25c167.CompletionItemKind.Module, _0x1968d2, _0x253efc, {
              autoImportText: this.getAutoImportText(_0x42e367),
              edits: {
                additionalTextEdits: _0x2c4ead.getTextEditsForAutoImportInsertion([], {
                  name: _0x42e367
                }, _0x21318f, _0x2c4ead.getImportGroupFromModuleNameAndType(_0x2118d1), this.parseResults, this.position)
              }
            });
          });
        }
        _getNodeValue(_0x2d3c4f, _0x16ee63) {
          if (_0x2d3c4f.nodeType === 38) {
            return _0x2d3c4f.d.value.concat(_0x16ee63);
          }
          if (_0x2d3c4f.nodeType === 35) {
            _0x16ee63 = `.${_0x2d3c4f.d.member.d.value.concat(_0x16ee63)}`;
            return this._getNodeValue(_0x2d3c4f.d.leftExpr, _0x16ee63);
          }
          return _0x16ee63;
        }
      }
      exports.CompletionProvider = _0xfd09b5;
    },
    66609: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceDiagnosticSink = exports.PylanceTextRangeDiagnosticSink = undefined;
      exports.getDiagnosticsSeen = _0x422d11;
      exports.getDiagnosticCode = _0x288a0d;
      const _0x35faef = require(36316);
      function _0x422d11(_0x56a2d2) {
        const _0x2da7dd = new Map();
        for (const _0x28f4d6 of _0x56a2d2) {
          for (const _0x46cb00 of _0x28f4d6.diagnostics) {
            const _0x2c8004 = _0x288a0d(_0x46cb00);
            if (_0x2c8004) {
              _0x2da7dd.set(_0x2c8004, (_0x2da7dd.get(_0x2c8004) ?? 0) + 1);
            }
          }
        }
        return [..._0x2da7dd.entries()].map(_0x1dcb11 => _0x1dcb11[0] + ':' + _0x1dcb11[1]).join(';');
      }
      function _0x288a0d(_0x10c992) {
        var _0x30bf70;
        const _0x134ad1 = (_0x30bf70 = _0x10c992.getActions()) === null || _0x30bf70 === undefined ? undefined : _0x30bf70.find(_0x456a64 => _0x456a64.action === 'diagnostic.code');
        if (_0x134ad1) {
          return _0x134ad1.code;
        } else {
          return undefined;
        }
      }
      function _0x4b964e(_0x2f7a57, _0x462eec) {
        const _0x29fabe = {
          action: 'diagnostic.code',
          code: _0x462eec
        };
        _0x2f7a57.addAction(_0x29fabe);
      }
      class _0x3a1a3d extends _0x35faef.TextRangeDiagnosticSink {
        constructor(_0x2a892b, _0x56ac60) {
          super(_0x56ac60);
          this._getCode = _0x2a892b;
        }
        addDiagnostic(_0x51c01b) {
          const _0x579568 = this._getCode(_0x51c01b);
          if (_0x579568) {
            _0x4b964e(_0x51c01b, _0x579568);
          }
          super.addDiagnostic(_0x51c01b);
          return _0x51c01b;
        }
      }
      exports.PylanceTextRangeDiagnosticSink = _0x3a1a3d;
      class _0x6a3be extends _0x35faef.DiagnosticSink {
        constructor(_0x195416) {
          super();
          this._getCode = _0x195416;
        }
        addDiagnostic(_0x56a996) {
          const _0x4947fa = this._getCode(_0x56a996);
          if (_0x4947fa) {
            _0x4b964e(_0x56a996, _0x4947fa);
          }
          super.addDiagnostic(_0x56a996);
          return _0x56a996;
        }
      }
      exports.PylanceDiagnosticSink = _0x6a3be;
    },
    68021: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DiagnosticsRemapper = undefined;
      const _0x1f9c3f = require(15986);
      const _0x22a3b8 = require(54802);
      class _0x321ba7 {
        constructor() {
          this._boundGetDiagnosticCode = this._getDiagnosticCode.bind(this);
          this._originalGetRawString = _0x1f9c3f.setGetRawString(this._redirectLocalization.bind(this));
        }
        createSourceFile(_0x9bf749, _0x104574, _0x5d88e7, _0x1f6509, _0x2383f2, _0x106866, _0x468de3, _0x44f755, _0x33a91a) {
          return _0x22a3b8.createPylanceSourceFile(this._boundGetDiagnosticCode, _0x9bf749, _0x104574, _0x5d88e7, _0x1f6509, _0x2383f2, _0x106866, _0x468de3, _0x44f755, _0x33a91a);
        }
        _redirectLocalization(_0x2fc001) {
          if (_0x2fc001.startsWith('Diagnostic')) {
            this._lastDiagnosticKey = _0x2fc001;
          }
          return this._originalGetRawString(_0x2fc001);
        }
        _getDiagnosticCode(_0x4fdba7) {
          return this._lastDiagnosticKey;
        }
      }
      exports.DiagnosticsRemapper = _0x321ba7;
    },
    4449: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.canProvideDocstringTemplate = _0xab1207;
      exports.getDocstringTemplates = _0x278dfd;
      exports.getDocstringTemplatesinString = _0x50f494;
      const _0x5b265c = require(26687);
      const _0x4ccfbf = require(41557);
      const _0x4836f4 = require(56814);
      const _0x2ea380 = require(88754);
      const _0x39f4cb = require(15986);
      function _0xab1207(_0x1af7c0, _0x4cd0a2) {
        const _0xb3375f = _0x4ccfbf.findNodeByPosition(_0x1af7c0.parserOutput.parseTree, _0x4cd0a2, _0x1af7c0.tokenizerOutput.lines);
        if (!_0xb3375f || _0xb3375f.nodeType !== 49) {
          return false;
        }
        if (!(_0xb3375f.d.token.flags & 4)) {
          return false;
        }
        const _0x5e8f76 = _0x4ccfbf.getParentNodeOfType(_0xb3375f, 47);
        if (!_0x5e8f76 || !_0x4ccfbf.isDocString(_0x5e8f76)) {
          return false;
        }
        const _0x484ab3 = _0x4836f4.convertPositionToOffset(_0x4cd0a2, _0x1af7c0.tokenizerOutput.lines);
        if (!_0x484ab3) {
          return false;
        }
        if (!_0x2ea380.TextRange.contains(_0xb3375f, _0x484ab3)) {
          return false;
        }
        if (_0x484ab3 === _0xb3375f.start) {
          return false;
        }
        if (_0xb3375f.d.value.trim().length !== 0) {
          return false;
        }
        const _0x2e70dd = _0x4ccfbf.getEnclosingClassOrFunction(_0xb3375f);
        const _0x3687de = _0x4ccfbf.getEnclosingModule(_0xb3375f);
        if (_0x2e70dd) {
          const _0x23a2fd = _0x4ccfbf.getParentNodeOfType(_0xb3375f, 50);
          if (_0x23a2fd.d.statements[0] !== _0x5e8f76) {
            return false;
          }
        } else {
          if (_0x3687de) {
            if (_0x3687de.d.statements[0] !== _0x5e8f76) {
              return false;
            }
          } else {
            return false;
          }
        }
        return true;
      }
      function _0x278dfd(_0x9d50da, _0x2277af, _0x17f2ff) {
        if (!_0x9d50da) {
          return undefined;
        }
        const _0x2af7d0 = _0x4ccfbf.findNodeByPosition(_0x9d50da.parserOutput.parseTree, _0x2277af, _0x9d50da.tokenizerOutput.lines);
        if (!_0x2af7d0 || _0x2af7d0.nodeType !== 49) {
          return undefined;
        }
        const _0x111baa = _0x4ccfbf.getParentNodeOfType(_0x2af7d0, 47);
        const _0x19880d = _0x4ccfbf.getEnclosingClassOrFunction(_0x2af7d0);
        const _0x59a96d = _0x4ccfbf.getEnclosingModule(_0x2af7d0);
        let _0x4d7049;
        if (_0x19880d) {
          const _0x59e2e2 = _0x4ccfbf.getParentNodeOfType(_0x2af7d0, 50);
          if (_0x19880d.nodeType === 31) {
            const _0x51f117 = {
              name: '',
              args: [],
              returns: undefined
            };
            _0x51f117.name = _0x19880d.d.name.d.value;
            _0x19880d.d.params.forEach(_0xbef250 => {
              var _0x34caa1;
              if (_0xbef250.d.name) {
                const _0x555864 = _0xbef250.d.annotation;
                let _0x21c693;
                if (_0x555864 && _0x555864.nodeType === 38) {
                  _0x21c693 = _0x555864.d.value;
                }
                if ((_0x34caa1 = _0x51f117.args) === null || _0x34caa1 === undefined) {
                  undefined;
                } else {
                  _0x34caa1.push({
                    var: _0xbef250.d.name.d.value,
                    type: _0x21c693 ?? ''
                  });
                }
              }
            });
            const _0x58a132 = _0x17f2ff.getTypeOfFunction(_0x19880d);
            if (_0x58a132) {
              const _0x33523d = _0x17f2ff.getInferredReturnType(_0x58a132.functionType);
              const _0x23d614 = _0x17f2ff.printType(_0x33523d, {
                expandTypeAlias: false,
                enforcePythonSyntax: true
              });
              _0x51f117.returns = {
                type: _0x23d614
              };
            }
            _0x4d7049 = _0x709d37(_0x51f117);
          } else {
            if (_0x19880d.nodeType === 10) {
              const _0x5e0f48 = {
                name: '',
                variables: []
              };
              _0x5e0f48.name = _0x19880d.d.name.d.value;
              _0x59e2e2.d.statements.forEach(_0x5be963 => {
                if (_0x5be963.nodeType === 47) {
                  const _0x231b31 = _0x5be963.d.statements[0];
                  if (_0x231b31.nodeType === 3) {
                    const _0x1f090c = _0x231b31.d.leftExpr;
                    if (_0x1f090c?.nodeType === 54) {
                      const _0x589f3c = _0x1f090c.d.annotation;
                      let _0x40882d;
                      let _0x4270f3;
                      if (_0x589f3c && _0x589f3c.nodeType === 38) {
                        _0x40882d = _0x589f3c.d.value;
                      }
                      const _0x88c60a = _0x1f090c.d.valueExpr;
                      if (_0x88c60a && _0x88c60a.nodeType === 38) {
                        _0x4270f3 = _0x88c60a.d.value;
                      }
                      if (_0x40882d && _0x4270f3) {
                        _0x5e0f48.variables.push({
                          var: _0x4270f3,
                          type: _0x40882d
                        });
                      }
                    } else {
                      if (_0x1f090c?.nodeType === 38) {
                        const _0x497421 = _0x17f2ff.getTypeOfExpression(_0x231b31.d.rightExpr).type;
                        const _0x35c0e5 = _0x17f2ff.printType(_0x497421, {
                          expandTypeAlias: false,
                          enforcePythonSyntax: true
                        });
                        _0x5e0f48.variables.push({
                          var: _0x1f090c.d.value,
                          type: _0x35c0e5
                        });
                      }
                    }
                  }
                }
              });
              _0x4d7049 = _0x578f3(_0x5e0f48);
            }
          }
        } else {
          if (_0x59a96d?.nodeType === 36) {
            const _0x462519 = _0x5b265c.getFileInfo(_0x59a96d);
            const _0x5474fd = _0x462519.moduleName;
            _0x4d7049 = [_0x39f4cb.Localizer.DocstringTemplate.docstringForName().format({
              name: _0x5474fd
            })];
            if (_0x59a96d.d.statements[0] !== _0x111baa) {
              return undefined;
            }
          } else {
            return undefined;
          }
        }
        return _0x4d7049;
      }
      function _0x50f494(_0x5171aa, _0x478164, _0x39e927, _0x57ed30) {
        const _0xcc2cf5 = _0x278dfd(_0x5171aa, _0x478164, _0x39e927);
        if (!_0xcc2cf5) {
          return undefined;
        }
        const _0x4a2057 = _0x57ed30.createIndentationString(_0x5171aa, _0x57ed30.getIndentationFromText(_0x5171aa, _0x478164.line).indentation);
        const _0x240e1a = _0xcc2cf5.reduce((_0x127081, _0x45ee82, _0x5f1772) => {
          const _0x13fb3a = _0xcc2cf5[_0x5f1772].trim().length === 0 ? _0x5171aa.tokenizerOutput.predominantEndOfLineSequence : _0x5171aa.tokenizerOutput.predominantEndOfLineSequence + _0x4a2057;
          return _0x127081 + _0x13fb3a + _0x45ee82;
        }, '');
        return _0x240e1a;
      }
      function _0x709d37(_0x127357) {
        var _0x4a8f8c;
        const _0x16dc95 = 'param';
        const _0x3b951b = 'type';
        const _0x516490 = 'return';
        const _0x5198d1 = 'rtype';
        const _0x4300ef = _0x39f4cb.Localizer.DocstringTemplate.description();
        const _0x6fd4b2 = [];
        const _0x2d2d29 = _0x39f4cb.Localizer.DocstringTemplate.docstringForName().format({
          name: _0x127357.name
        });
        _0x6fd4b2.push(_0x2d2d29);
        _0x6fd4b2.push('');
        if ((_0x4a8f8c = _0x127357.args) === null || _0x4a8f8c === undefined) {
          undefined;
        } else {
          _0x4a8f8c.forEach(_0x379fce => {
            const _0x56d502 = `:${_0x16dc95} ${_0x379fce.var}: ${_0x4300ef}`;
            const _0x1cb292 = `:${_0x3b951b} ${_0x379fce.var}: ${_0x379fce.type}`;
            _0x6fd4b2.push(_0x56d502);
            _0x6fd4b2.push(_0x1cb292);
          });
        }
        if (_0x127357.returns && _0x127357.returns.type !== 'None') {
          const _0x4dcffd = `:${_0x516490}: ${_0x4300ef}`;
          _0x6fd4b2.push(_0x4dcffd);
          const _0x47796c = `:${_0x5198d1}: ${_0x127357.returns?.type}`;
          _0x6fd4b2.push(_0x47796c);
        }
        return _0x6fd4b2;
      }
      function _0x578f3(_0x51502f) {
        var _0x1366a2;
        const _0x1a5018 = [];
        const _0x58c20d = _0x39f4cb.Localizer.DocstringTemplate.description();
        const _0x5f1567 = _0x39f4cb.Localizer.DocstringTemplate.docstringForName().format({
          name: _0x51502f.name
        });
        _0x1a5018.push(_0x5f1567);
        _0x1a5018.push('');
        if (_0x51502f.variables.length !== 0) {
          const _0x3687f7 = 'var';
          const _0x540830 = 'vartype';
          if ((_0x1366a2 = _0x51502f.variables) === null || _0x1366a2 === undefined) {
            undefined;
          } else {
            _0x1366a2.forEach(_0x2c965d => {
              const _0x4f346c = `:${_0x3687f7} ${_0x2c965d.var}: ${_0x58c20d}`;
              const _0x25eb46 = `:${_0x540830} ${_0x2c965d.var}: ${_0x2c965d.type}`;
              _0x1a5018.push(_0x4f346c);
              _0x1a5018.push(_0x25eb46);
            });
          }
        }
        return _0x1a5018;
      }
    },
    51995: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DocstringTemplateCompletionProvider = undefined;
      const _0x2a0026 = require(56911);
      const _0x10ca96 = require(5737);
      const _0x509148 = require(4449);
      class _0x516027 {
        constructor(_0x2715e8, _0x37365a, _0xb4c277, _0x40fdd7, _0x5b4e4b) {
          this._program = _0x2715e8;
          this._fileUri = _0x37365a;
          this._position = _0xb4c277;
          this._options = _0x40fdd7;
          this._cancellationToken = _0x5b4e4b;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._evaluator = this._program.evaluator;
        }
        getCompletions() {
          if (!this._parseResults) {
            return null;
          }
          const _0x2a79e2 = this._getDocstringTemplatesinCompletion(this._parseResults, this._position, this._evaluator);
          if (!_0x2a79e2) {
            return null;
          }
          return _0x2a0026.CompletionList.create(_0x2a79e2 === null || _0x2a79e2 === undefined ? undefined : _0x2a79e2.toArray());
        }
        resolveCompletionItem(_0x4d93b3) {}
        _getDocstringTemplatesinCompletion(_0x40b91f, _0x5a0a4d, _0x508b13) {
          const _0x4d276e = new _0x10ca96.CompletionMap();
          if (!_0x509148.canProvideDocstringTemplate(_0x40b91f, _0x5a0a4d)) {
            return undefined;
          }
          const _0x5c2bb7 = _0x509148.getDocstringTemplates(_0x40b91f, _0x5a0a4d, _0x508b13);
          if (!_0x5c2bb7) {
            return undefined;
          }
          const _0x31a083 = _0x2a0026.CompletionItem.create(_0x5c2bb7.join(_0x40b91f.tokenizerOutput.predominantEndOfLineSequence));
          if (!_0x31a083) {
            return undefined;
          }
          _0x31a083.kind = _0x2a0026.CompletionItemKind.Text;
          _0x4d276e.set(_0x31a083);
          return _0x4d276e;
        }
      }
      exports.DocstringTemplateCompletionProvider = _0x516027;
    },
    50753: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DocumentSymbolProvider = undefined;
      const _0x388c8a = require(86846);
      class _0x2da125 extends _0x388c8a.DocumentSymbolProvider {
        constructor(_0x2b2f6a, _0x4b6a55, _0x1aa321, _0x3ef742, _0x2e583a) {
          super(_0x4b6a55, _0x1aa321, _0x3ef742, {
            includeAliases: false
          }, _0x2e583a);
          this._globalIndices = _0x2b2f6a;
        }
        getHierarchicalSymbols() {
          const _0x2892dd = this.program.getSourceFileInfo(this.uri);
          if (!_0x2892dd) {
            return [];
          }
          const _0x545705 = this._globalIndices.getIndices(this.program).getSourceIndex(this.uri);
          if (!_0x545705) {
            return super.getHierarchicalSymbols();
          }
          if (_0x2892dd.isOpenByClient && _0x545705.clientVersion !== _0x2892dd.sourceFile.getClientVersion()) {
            return super.getHierarchicalSymbols();
          }
          const _0x19482d = [];
          this.appendDocumentSymbolsRecursive(_0x545705.symbols, _0x19482d);
          return _0x19482d;
        }
      }
      exports.DocumentSymbolProvider = _0x2da125;
    },
    84014: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FoldingRangeProvider = exports.PylanceFoldingRangeKind = undefined;
      const _0x20e8da = require(56911);
      const _0x45b95a = require(41557);
      const _0x3dfb1b = require(88744);
      const _0x100d40 = require(91426);
      const _0x3e3c58 = require(56814);
      const _0x4ae56c = require(88754);
      const _0x3ee893 = require(59133);
      const _0x52a2ae = require(98920);
      var _0x400367;
      (function (_0x1dbc80) {
        _0x1dbc80.PylanceDocstring = 'Pylance-docstring';
      })(_0x400367 || (exports.PylanceFoldingRangeKind = _0x400367 = {}));
      class _0x4bba99 {
        static getFoldingRanges(_0x594927, _0x52e1e2) {
          _0x100d40.throwIfCancellationRequested(_0x52e1e2);
          const _0x5b5ac6 = this._getRegionMetadata(_0x594927);
          const _0x47167b = new _0x4c0899(_0x594927, _0x5b5ac6);
          _0x47167b.walk(_0x594927.parserOutput.parseTree);
          const _0x33b5f7 = _0x47167b.getFoldingRanges();
          return _0x5b5ac6.ranges.concat(_0x33b5f7);
        }
        static _getRegionMetadata(_0x33249e) {
          const _0x14bd91 = {
            ranges: [],
            startLines: new Set(),
            endLines: new Map()
          };
          const _0xcdfe8a = [];
          const _0x37b784 = _0x52a2ae.getRegionComments(_0x33249e);
          _0x37b784.forEach(_0x48d446 => {
            if (_0x48d446.type === 0) {
              _0xcdfe8a.push(_0x48d446);
            } else {
              if (_0xcdfe8a.length > 0) {
                const _0x17e1c8 = _0xcdfe8a.pop();
                const _0x3e2268 = _0x3e3c58.convertOffsetToPosition(_0x17e1c8.comment.start - 1, _0x33249e.tokenizerOutput.lines);
                const _0x309642 = _0x3e3c58.convertOffsetToPosition(_0x4ae56c.TextRange.getEnd(_0x48d446.comment), _0x33249e.tokenizerOutput.lines);
                _0x14bd91.ranges.push({
                  startLine: _0x3e2268.line,
                  startCharacter: _0x3e2268.character,
                  endLine: _0x309642.line,
                  endCharacter: _0x309642.character,
                  kind: _0x20e8da.FoldingRangeKind.Region
                });
                _0x14bd91.startLines.add(_0x3e2268.line);
                _0x14bd91.endLines.set(_0x309642.line, _0x3e2268.line);
              }
            }
          });
          return _0x14bd91;
        }
      }
      exports.FoldingRangeProvider = _0x4bba99;
      class _0x4c0899 extends _0x3dfb1b.ParseTreeWalker {
        constructor(_0xc37083, _0x597e6a) {
          super();
          this._parseResults = _0xc37083;
          this._regionMetadata = _0x597e6a;
          this._foldingRanges = [];
          this._firstImport = undefined;
          this._lastImport = undefined;
        }
        getFoldingRanges() {
          this._addImports();
          return this._foldingRanges;
        }
        visitAssert(_0x2b8952) {
          this._addNodeRange(_0x2b8952);
          return true;
        }
        visitCall(_0x5cc780) {
          this._addNodeRange(_0x5cc780);
          return true;
        }
        visitClass(_0x2f455f) {
          this._addTwoNodeRange(_0x2f455f.d.name, _0x2f455f.d.suite);
          return true;
        }
        visitDictionary(_0x2c2659) {
          this._addNodeRange(_0x2c2659);
          return true;
        }
        visitFunction(_0x1f27af) {
          this._addTwoNodeRange(_0x1f27af.d.name, _0x1f27af.d.suite);
          return true;
        }
        visitImport(_0x446d03) {
          this._visitImport(_0x446d03);
          return true;
        }
        visitImportAs(_0x1ce1f8) {
          this._visitImport(_0x1ce1f8);
          return true;
        }
        visitImportFrom(_0x57c65a) {
          this._visitImport(_0x57c65a);
          return true;
        }
        visitImportFromAs(_0x56e051) {
          this._visitImport(_0x56e051);
          return true;
        }
        visitList(_0x956050) {
          this._addNodeRange(_0x956050);
          return true;
        }
        visitMatch(_0x479f45) {
          this._addNodeRange(_0x479f45);
          return true;
        }
        visitSet(_0x509a1a) {
          this._addNodeRange(_0x509a1a);
          return true;
        }
        visitStringList(_0x52aae0) {
          const _0x521b15 = this._isDocstring(_0x52aae0);
          this._addTwoNodeRange(_0x52aae0, _0x52aae0, _0x521b15 ? _0x400367.PylanceDocstring : undefined);
          return true;
        }
        visitSuite(_0x4588b9) {
          if (_0x4588b9.parent?.nodeType !== 10 && _0x4588b9.parent?.nodeType !== 31) {
            this._addNodeRange(_0x4588b9);
          }
          return true;
        }
        visitTuple(_0x3762db) {
          this._addNodeRange(_0x3762db);
          return true;
        }
        _visitImport(_0x4a61d6) {
          if (this._firstImport) {
            this._lastImport = _0x4a61d6;
          } else {
            this._firstImport = _0x4a61d6;
          }
        }
        _addNodeRange(_0x4fbd5b) {
          this._addTwoNodeRange(_0x4fbd5b, _0x4fbd5b);
        }
        _addImports() {
          if (this._firstImport) {
            this._addTwoNodeRange(this._firstImport, this._lastImport ?? this._firstImport, _0x20e8da.FoldingRangeKind.Imports);
            this._firstImport = this._lastImport = undefined;
          }
        }
        _addTwoNodeRange(_0xf6a8bb, _0x2b101d, _0xc79a91 = undefined) {
          if (_0xc79a91 !== _0x20e8da.FoldingRangeKind.Imports) {
            this._addImports();
          }
          const _0x2d4aba = this._getStartPos(_0xf6a8bb);
          const _0x6789ef = this._getEndPos(_0xf6a8bb, _0x2b101d);
          if (_0x2d4aba.line === _0x6789ef.line) {
            return;
          }
          this._foldingRanges.push({
            startLine: _0x2d4aba.line,
            startCharacter: _0x2d4aba.character,
            endLine: _0x6789ef.line,
            endCharacter: _0x6789ef.character,
            kind: _0xc79a91
          });
        }
        _isDocstring(_0xe8863f) {
          const _0x452cf9 = _0x45b95a.getParentNodeOfType(_0xe8863f, 47);
          return _0x452cf9 && _0x45b95a.isDocString(_0x452cf9);
        }
        _getEndPos(_0xae8218, _0x22d57f) {
          const _0x25771a = _0x3e3c58.convertOffsetToPosition(_0xae8218.start, this._parseResults.tokenizerOutput.lines);
          const _0x2a9e4b = _0x4ae56c.TextRange.getEnd(_0x22d57f);
          let _0x1a9dcf = _0x3e3c58.convertOffsetToPosition(_0x2a9e4b, this._parseResults.tokenizerOutput.lines);
          if (_0x1a9dcf.line > _0x25771a.line) {
            _0x1a9dcf = this._extendRangeToIncludeTrailingComments(_0x25771a, _0x1a9dcf, _0x2a9e4b);
          }
          return _0x1a9dcf;
        }
        _extendRangeToIncludeTrailingComments(_0x51533d, _0xf48dcf, _0xc4acb5) {
          const _0x245856 = this._getTokenForTrailingComments(_0xc4acb5);
          if (!_0x245856?.comments || _0x245856.comments.length === 0) {
            return _0xf48dcf;
          }
          const _0x463a29 = new _0x3ee893.IndentationUtils();
          const _0x27687b = _0x463a29.getIndentationFromText(this._parseResults, _0x51533d.line);
          for (let _0x353e4d = 0; _0x353e4d < _0x245856.comments.length; ++_0x353e4d) {
            const _0x3bb317 = _0x3e3c58.convertOffsetToPosition(_0x245856.comments[_0x353e4d].start, this._parseResults.tokenizerOutput.lines);
            if (this._regionMetadata.startLines.has(_0x3bb317.line)) {
              break;
            }
            const _0x115f9e = this._regionMetadata.endLines.get(_0x3bb317.line);
            if (_0x115f9e !== undefined) {
              if (_0x115f9e <= _0x51533d.line) {
                break;
              }
            } else {
              const _0xc8be5f = _0x463a29.getIndentationFromText(this._parseResults, _0x3bb317.line);
              if (_0xc8be5f.indentation <= _0x27687b.indentation) {
                break;
              }
            }
            _0xf48dcf.line = _0x3bb317.line;
            _0xf48dcf.character = _0x3bb317.character + _0x245856.comments[_0x353e4d].length;
          }
          return _0xf48dcf;
        }
        _getTokenForTrailingComments(_0x402a3e) {
          let _0x11d581 = this._parseResults.tokenizerOutput.tokens.getItemAtPosition(_0x402a3e);
          let _0x124d98;
          do {
            _0x11d581++;
            if (_0x11d581 > this._parseResults.tokenizerOutput.tokens.count - 1) {
              return undefined;
            }
            _0x124d98 = this._parseResults.tokenizerOutput.tokens.getItemAt(_0x11d581);
          } while (_0x124d98.type === 2);
          return _0x124d98;
        }
        _getStartPos(_0x3449b3) {
          const _0x38f847 = this._parseResults.tokenizerOutput.lines;
          const _0x57a1d3 = _0x3e3c58.convertOffsetToPosition(_0x3449b3.start, _0x38f847);
          return _0x3e3c58.getLineEndPosition(this._parseResults.tokenizerOutput, this._parseResults.text, _0x57a1d3.line);
        }
      }
    },
    4866: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FormatOnTypeDynamicFeature = undefined;
      const _0x3e8a0f = require(56911);
      const _0x450ea0 = require(55275);
      const _0x25b5fe = require(8398);
      class _0x42d455 extends _0x450ea0.DynamicFeature {
        constructor(_0x3f0bfd, _0x4575ee, _0x3e4cf7, _0x57ee54) {
          super('format on type');
          this._connection = _0x3f0bfd;
          this._documentSelector = _0x4575ee;
          this._autoIndent = _0x3e4cf7;
          this._autoFormatStrings = _0x57ee54;
        }
        update(_0x417571) {
          const _0xd44e78 = _0x417571;
          this._autoIndent = _0xd44e78.autoIndent ?? false;
          this._autoFormatStrings = _0xd44e78.autoFormatStrings ?? false;
          this.register();
        }
        registerFeature() {
          const _0x2ff975 = _0x25b5fe.getDocumentOnTypeFormattingOption(this._autoIndent, this._autoFormatStrings, this._connection.console);
          if (_0x2ff975 === undefined) {
            return Promise.resolve(_0x3e8a0f.Disposable.create(() => {}));
          }
          return this._connection.client.register(_0x3e8a0f.DocumentOnTypeFormattingRequest.type, {
            documentSelector: this._documentSelector,
            ..._0x2ff975
          });
        }
      }
      exports.FormatOnTypeDynamicFeature = _0x42d455;
    },
    85040: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.GetAttrMemberDefinitionProvider = undefined;
      const _0x15e4a1 = require(41557);
      const _0x17a897 = require(88744);
      const _0x148133 = require(21024);
      const _0x5eb4da = require(91426);
      const _0x2896ba = require(56814);
      const _0x2d004a = require(24835);
      const _0x56df28 = require(61904);
      class _0x442020 {
        constructor(_0x30bf18, _0x4521c4, _0x402007, _0x492626) {
          this._program = _0x30bf18;
          this._fileUri = _0x4521c4;
          this._position = _0x402007;
          this._token = _0x492626;
          this._parseResults = this._program.getParseResults(this._fileUri);
        }
        getDefinitions() {
          _0x5eb4da.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return undefined;
          }
          const _0x8ff982 = _0x2896ba.convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x8ff982 === undefined) {
            return undefined;
          }
          const _0x29efb5 = _0x15e4a1.findNodeByOffset(this._parseResults.parserOutput.parseTree, _0x8ff982);
          if (_0x29efb5?.nodeType !== 38) {
            return undefined;
          }
          const _0x4595bd = _0x29efb5.parent;
          if (_0x4595bd?.nodeType !== 35) {
            return undefined;
          }
          const _0x1d2919 = _0x2d004a.getBestMatchGetAttrMethods(this._evaluator, _0x4595bd, _0x2d004a.getAttrMode(_0x4595bd));
          if (!_0x1d2919) {
            return undefined;
          }
          const _0x15f148 = this._getDocumentRange(_0x29efb5, _0x1d2919);
          if (!_0x15f148) {
            return undefined;
          }
          return [_0x15f148];
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _getDocumentRange(_0x54503e, _0x77a254) {
          const _0x7ab6 = _0x77a254.shared.declaration;
          if (!_0x7ab6) {
            return undefined;
          }
          const _0x263885 = this._program.getParseResults(_0x7ab6.uri);
          const _0x78dadd = _0x2d004a.firstParamsExcludingSelf(_0x77a254);
          if (!_0x78dadd) {
            return undefined;
          }
          if (_0x148133.FunctionParam.isTypeDeclared(_0x78dadd) && _0x263885) {
            const _0xc1a928 = _0x56df28.getFunctionParameterNode(_0x7ab6.node, _0x78dadd.name);
            if (!_0xc1a928) {
              return _0x7ab6;
            }
            const _0x2ebf0d = _0x56df28.getParameterAnnotationNode(_0xc1a928);
            if (!_0x2ebf0d) {
              return _0x7ab6;
            }
            const _0x52f347 = _0x68a29a.find(_0x54503e.d.value, _0x2ebf0d);
            if (_0x52f347) {
              return {
                uri: _0x7ab6.uri,
                range: _0x2896ba.convertTextRangeToRange(_0x52f347, _0x263885.tokenizerOutput.lines)
              };
            }
          }
          return _0x7ab6;
        }
      }
      exports.GetAttrMemberDefinitionProvider = _0x442020;
      class _0x68a29a extends _0x17a897.ParseTreeWalker {
        constructor(_0x287aec) {
          super();
          this._memberName = _0x287aec;
        }
        static find(_0x1bb066, _0x1bba16) {
          const _0x3b7f42 = new _0x68a29a(_0x1bb066);
          _0x3b7f42.walk(_0x1bba16);
          return _0x3b7f42._matchingNode;
        }
        visit(_0x1dd22c) {
          if (this._matchingNode) {
            return false;
          }
          return super.visit(_0x1dd22c);
        }
        visitString(_0x561dc3) {
          if (_0x561dc3.d.value === this._memberName) {
            this._matchingNode = _0x561dc3;
          }
          return false;
        }
      }
    },
    21575: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.getInlayHints = _0x2ad31b;
      exports.resolveInlayHints = _0x2fe399;
      exports.canInsertHintEdit = _0x2f3922;
      const _0x5e81df = require(56911);
      const _0x158730 = require(44321);
      const _0x16c041 = require(41557);
      const _0x281183 = require(88744);
      const _0x46d068 = require(21024);
      const _0xccaa14 = require(92324);
      const _0x1ecbb6 = require(8307);
      const _0x68d07a = require(91426);
      const _0x709724 = require(34455);
      const _0x10102e = require(56412);
      const _0x159e28 = require(56814);
      const _0x29ad98 = require(89740);
      const _0x49f0a0 = require(88754);
      const _0x594b3d = require(27113);
      const _0x8856e1 = require(39426);
      const _0x1b6300 = require(30048);
      const _0x5d180b = require(34365);
      const _0x34d695 = require(97125);
      const _0x5a6007 = require(44657);
      const _0x8fa2db = 32;
      const _0x1272a9 = 64;
      function _0x2ad31b(_0x42b8af, _0x305eb8, _0x12f425, _0x4a3498, _0x35ca38) {
        _0x68d07a.throwIfCancellationRequested(_0x35ca38);
        const _0x405469 = _0x42b8af.getParseResults(_0x305eb8);
        if (_0x405469 === undefined || !_0x42b8af.evaluator) {
          return [];
        }
        const _0x105cc9 = new _0x3567d6(_0x42b8af, _0x305eb8, _0x12f425, _0x4a3498, _0x35ca38);
        return _0x105cc9.collects();
      }
      function _0x2fe399(_0x599a44, _0x39d61a, _0x36f2b0, _0x54716) {
        _0x68d07a.throwIfCancellationRequested(_0x54716);
        if (_0x39d61a.textEdits !== undefined && Array.isArray(_0x39d61a.label) && _0x39d61a.label.some(_0x2412fd => _0x2412fd.location !== undefined)) {
          return _0x39d61a;
        }
        const _0x131ad0 = _0x10102e.fromLSPAny(_0x39d61a.data);
        const _0x166aaf = _0x594b3d.Uri.parse(_0x131ad0.fileUri, _0x599a44.serviceProvider);
        const _0x58b185 = _0x599a44.getParseResults(_0x166aaf);
        if (_0x58b185 === undefined || !_0x599a44.evaluator) {
          return _0x39d61a;
        }
        const _0x5694a9 = _0x16c041.getFirstAncestorOrSelfOfKind(_0x16c041.findNodeByOffset(_0x58b185.parserOutput.parseTree, _0x131ad0.offset), _0x131ad0.type);
        if (!_0x5694a9) {
          return _0x39d61a;
        }
        const _0x5a939b = new _0x3567d6(_0x599a44, _0x166aaf, undefined, {
          callArgumentNameInlayHints: _0x5a6007.CallArgumentNameModes.all,
          variableInlayTypeHints: true,
          functionReturnInlayTypeHints: true,
          pytestParametersInlayTypeHints: true,
          supportedResolveSet: _0x36f2b0,
          lazyEdit: false
        }, _0x54716);
        const _0x24fbde = _0xf8e47e(_0x5694a9);
        if (_0x24fbde?.textEdits) {
          _0x39d61a.textEdits = _0x24fbde.textEdits;
        }
        if (_0x24fbde?.label) {
          _0x39d61a.label = _0x24fbde.label;
        }
        return _0x39d61a;
        function _0xf8e47e(_0xcde57e) {
          switch (_0xcde57e.nodeType) {
            case 38:
              return _0x5a939b.getVariableInlayHint(_0xcde57e);
            case 41:
              return _0x5a939b.getParameterInlayHint(_0xcde57e);
            case 31:
              return _0x5a939b.getFunctionInlayHint(_0xcde57e);
            default:
              return _0x39d61a;
          }
        }
      }
      class _0x3567d6 extends _0x281183.ParseTreeWalker {
        constructor(_0x3db1ec, _0x4f84ab, _0x2cd9de, _0x595135, _0x2f2291) {
          super();
          this._program = _0x3db1ec;
          this._fileUri = _0x4f84ab;
          this._preferences = _0x595135;
          this._cancellationToken = _0x2f2291;
          this._builder = [];
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._evaluator = this._program.evaluator;
          this._fixtureFinder = this._program.serviceProvider.tryGet(_0x1b6300.PylanceServiceKeys.fixtureFinder);
          if (_0x2cd9de) {
            this._range = _0x159e28.convertRangeToTextRange(_0x2cd9de, this._parseResults.tokenizerOutput.lines);
          }
        }
        collects() {
          this.walk(this._parseResults.parserOutput.parseTree);
          return this._builder;
        }
        getVariableInlayHint(_0x53763e) {
          _0x68d07a.throwIfCancellationRequested(this._cancellationToken);
          if (_0x4fadba(_0x53763e)) {
            return undefined;
          }
          const _0x360144 = this._evaluator.getDeclInfoForNameNode(_0x53763e)?.decls;
          if (!_0x360144 || _0x360144.length === 0) {
            return undefined;
          }
          if (_0x360144.some(_0x4c0db6 => _0x66a1ae(_0x4c0db6))) {
            return undefined;
          }
          const _0x3a3ff0 = _0x360144.find(_0x1e05ff => _0x1e05ff.node.id === _0x53763e.id);
          if (!_0x3a3ff0) {
            return undefined;
          }
          if (_0x3a3ff0.type !== 1) {
            return undefined;
          }
          if (_0x3a3ff0.inferredTypeSource?.nodeType === 14 || _0x3a3ff0.inferredTypeSource?.nodeType === 40 || _0x3a3ff0.inferredTypeSource?.nodeType === 21) {
            return undefined;
          }
          let _0x230197;
          if (_0x3a3ff0.inferredTypeSource?.nodeType === 9) {
            const _0x219c82 = this._evaluator.getType(_0x3a3ff0.inferredTypeSource.d.leftExpr);
            if (_0x219c82?.category === 6 && (!_0x46d068.isClassInstance(_0x219c82) || _0x219c82.priv.literalValue)) {
              return undefined;
            }
            _0x230197 = _0x8856e1.getTypeForToolTip(this._evaluator, _0x53763e);
          } else {
            _0x230197 = _0x8856e1.getTypeForToolTip(this._evaluator, _0x53763e);
            if (!_0x230197 || _0x230197.props?.typeAliasInfo || _0x46d068.isClass(_0x230197) && (_0x230197.priv.literalValue || !_0x46d068.isClassInstance(_0x230197))) {
              return undefined;
            }
          }
          if (!_0x230197) {
            return undefined;
          }
          return this._buildHint(_0x53763e, _0x230197, _0x53763e, _0x49f0a0.TextRange.getEnd(_0x53763e), ': ', _0x8fa2db);
        }
        getParameterInlayHint(_0x11a395) {
          _0x68d07a.throwIfCancellationRequested(this._cancellationToken);
          if (_0x11a395.d.annotation || _0x11a395.d.name === undefined) {
            return undefined;
          }
          if (!this._fixtureFinder || !this._preferences.pytestParametersInlayTypeHints) {
            return undefined;
          }
          const _0x44a794 = _0x5d180b.tryGetParameterNodeType(this._fixtureFinder, this._evaluator, _0x11a395, this._cancellationToken);
          if (!_0x44a794) {
            return undefined;
          }
          return this._buildHint(_0x11a395, _0x44a794, _0x11a395.d.name, _0x49f0a0.TextRange.getEnd(_0x11a395), ': ', _0x8fa2db, _0x5e81df.InlayHintKind.Type);
        }
        getFunctionInlayHint(_0x46e6f8) {
          _0x68d07a.throwIfCancellationRequested(this._cancellationToken);
          if (!this._preferences.functionReturnInlayTypeHints) {
            return undefined;
          }
          if (_0x46e6f8.d.returnAnnotation || this._hasEllipseForBody(_0x46e6f8)) {
            return undefined;
          }
          if (this._isIncompleteFunction(_0x46e6f8)) {
            return undefined;
          }
          const _0x52325e = this._evaluator.getTypeOfFunction(_0x46e6f8);
          if (!_0x52325e) {
            return undefined;
          }
          const _0x4db386 = this._evaluator.getInferredReturnType(_0x52325e.functionType);
          const _0x55b6aa = this._buildHint(_0x46e6f8, _0x4db386, _0x46e6f8.d.name, _0x46e6f8.d.suite.start, ' -> ', _0x1272a9);
          if (!_0x2f3922(_0x46e6f8, _0x4db386)) {
            _0x55b6aa.textEdits = [this._generateTextEditsFromLabel(_0x55b6aa)];
          }
          this._addQuotesToReturnTypeAnnotations(_0x55b6aa.textEdits, _0x52325e.functionType, _0x4db386);
          return _0x55b6aa;
        }
        visitSuite(_0x569f82) {
          if (this._isNodeInRange(_0x569f82)) {
            return true;
          } else {
            return false;
          }
        }
        visitStatementList(_0x536afd) {
          if (this._isNodeInRange(_0x536afd)) {
            return true;
          } else {
            return false;
          }
        }
        visitName(_0x46e00c) {
          return false;
        }
        visitParameter(_0x119c72) {
          if (!this._isNodeInRange(_0x119c72)) {
            return false;
          }
          this._addInlayHint(this.getParameterInlayHint(_0x119c72));
          return true;
        }
        visitCall(_0x2e9658) {
          _0x68d07a.throwIfCancellationRequested(this._cancellationToken);
          if (this._preferences.callArgumentNameInlayHints === _0x5a6007.CallArgumentNameModes.off) {
            return true;
          }
          let _0x22dd43;
          if (_0x2e9658.d.leftExpr.nodeType === 38) {
            _0x22dd43 = _0x2e9658.d.leftExpr;
          } else {
            if (_0x2e9658.d.leftExpr.nodeType === 35) {
              _0x22dd43 = _0x2e9658.d.leftExpr.d.member;
            }
          }
          if (!_0x22dd43) {
            return true;
          }
          const _0x13d93e = this._evaluator.getDeclInfoForNameNode(_0x22dd43)?.decls;
          if (!_0x13d93e || _0x13d93e.length === 0) {
            return true;
          }
          const _0x39779a = _0x13d93e[0];
          const _0x7ff256 = this._evaluator.resolveAliasDeclaration(_0x39779a, true);
          if (_0x7ff256?.type === 6) {
            const _0x2a4e47 = _0x8856e1.getClassAndConstructorTypes(_0x22dd43, this._evaluator);
            if (_0x2a4e47?.methodType?.category === 4) {
              this._addArgNameHintsForCall(_0x2a4e47.methodType, _0x2e9658);
            }
          } else {
            if (_0x7ff256?.type === 1 || _0x7ff256?.type === 5) {
              const _0x514a06 = _0x8856e1.getTypeForToolTip(this._evaluator, _0x22dd43);
              if (_0x514a06.category === 4) {
                this._addArgNameHintsForCall(_0x514a06, _0x2e9658);
              }
            }
          }
          return true;
        }
        visitFunction(_0x41ec48) {
          if (!this._isNodeInRange(_0x41ec48)) {
            return false;
          }
          this._addInlayHint(this.getFunctionInlayHint(_0x41ec48));
          return true;
        }
        visitAssignment(_0x18c8fa) {
          if (!this._isNodeInRange(_0x18c8fa)) {
            return false;
          }
          if (!this._preferences.variableInlayTypeHints) {
            return true;
          }
          _0x68d07a.throwIfCancellationRequested(this._cancellationToken);
          if (_0x18c8fa.d.leftExpr.nodeType === 52) {
            _0x18c8fa.d.leftExpr.d.items.forEach(_0x30fed9 => {
              this._addHintForExpression(_0x30fed9);
            });
          } else {
            this._addHintForExpression(_0x18c8fa.d.leftExpr);
          }
          return true;
        }
        _generateTextEditsFromLabel(_0x1b8223) {
          const _0x5b1113 = _0x1b8223.label;
          const _0x3e8cad = _0x1b8223.position;
          const _0xb9eb80 = _0x709724.isString(_0x5b1113) ? _0x5b1113 : _0x5b1113.map(_0x2583d5 => _0x2583d5.value).join('');
          return _0x5e81df.TextEdit.insert(_0x3e8cad, `:#${_0xb9eb80}`);
        }
        _addInlayHint(_0x210482) {
          if (!_0x210482) {
            return;
          }
          this._builder.push(_0x210482);
        }
        _addArgNameHintsForCall(_0x2dad21, _0x170ced) {
          if (this._preferences.callArgumentNameInlayHints === _0x5a6007.CallArgumentNameModes.off) {
            return;
          }
          const _0x5783bc = _0x158730.getParamListDetails(_0x2dad21);
          const _0x2add37 = 0;
          _0x170ced.d.args.forEach((_0x504cff, _0x37de47) => {
            if (_0x504cff.d.argCategory === 1 || _0x504cff.d.argCategory === 2) {
              return;
            }
            const _0x49a8fa = _0x37de47;
            let _0x54a4c4 = false;
            const _0x37bc76 = _0x504cff.d.name !== undefined;
            const _0x9c675 = this._preferences.callArgumentNameInlayHints;
            const _0x2f960c = _0x9c675 === _0x5a6007.CallArgumentNameModes.all || _0x9c675 === _0x5a6007.CallArgumentNameModes.partial;
            let _0x25f967;
            if (_0x2f960c && _0x2add37 === 0 && !_0x37bc76 && _0x49a8fa < _0x5783bc.positionParamCount) {
              _0x25f967 = _0x5783bc.params[_0x49a8fa].param.name;
              const _0x289d4a = _0x37de47 < _0x5783bc.positionOnlyParamCount;
              if (_0x289d4a) {
                _0x54a4c4 = true;
                _0x25f967 = _0x9c675 === _0x5a6007.CallArgumentNameModes.partial ? undefined : _0x25f967 + '/';
              }
            }
            if (_0x25f967 !== undefined && this._preferences.callArgumentNameInlayHints !== _0x5a6007.CallArgumentNameModes.off) {
              const _0x4aebc1 = _0x504cff.start;
              const _0x93f083 = _0x159e28.convertOffsetToPosition(_0x4aebc1, this._parseResults.tokenizerOutput.lines);
              const _0x365183 = _0x54a4c4 ? `${_0x25f967}` : _0x25f967 + '=';
              const _0x7ef0b7 = _0x54a4c4 ? [] : [_0x5e81df.TextEdit.insert(_0x93f083, _0x365183)];
              const _0x2e4590 = _0x29ad98.truncate(_0x365183, _0x8fa2db);
              this._addInlayHint({
                label: _0x2e4590,
                position: _0x93f083,
                kind: _0x5e81df.InlayHintKind.Parameter,
                textEdits: _0x7ef0b7
              });
            }
          });
        }
        _hasEllipseForBody(_0x5c6389) {
          return _0x5c6389.d.suite.d.statements.length > 0 && _0x5c6389.d.suite.d.statements[0].nodeType === 47 && _0x5c6389.d.suite.d.statements[0].d.statements.length === 1 && _0x5c6389.d.suite.d.statements[0].d.statements[0].nodeType === 21;
        }
        _isIncompleteFunction(_0x3279ba) {
          return _0x3279ba.d.suite.d.statements.length === 0 || _0x3279ba.d.suite.d.statements.length > 0 && _0x3279ba.d.suite.d.statements[0].length === 0 || !this._functionHasColon(_0x3279ba);
        }
        _functionHasColon(_0x34a9a4) {
          const _0x5cec46 = this._parseResults.tokenizerOutput.tokens;
          const _0x1d2ea6 = _0x5cec46.getItemAtPosition(_0x34a9a4.d.suite.start);
          const _0x447b1b = _0x5cec46.getItemAt(_0x1d2ea6);
          return _0x447b1b?.type === 10;
        }
        _addQuotesToReturnTypeAnnotations(_0xc44e73, _0x1bb6db, _0x39b918) {
          if (_0x39b918.category !== 6 || !_0x1bb6db.shared.methodClass || !_0x46d068.ClassType.isSameGenericClass(_0x46d068.ClassType.cloneAsInstantiable(_0x39b918), _0x1bb6db.shared.methodClass)) {
            return;
          }
          for (const _0x18bdd9 of _0xc44e73 ?? []) {
            if (_0x18bdd9.newText === ` -> ${_0x39b918.shared.name}`) {
              _0x18bdd9.newText = ` -> "${_0x39b918.shared.name}"`;
              return;
            }
          }
        }
        _isNodeInRange(_0x1abdfb) {
          if (this._range === undefined) {
            return true;
          }
          return _0x49f0a0.TextRange.overlapsRange(this._range, _0x1abdfb);
        }
        _addHintForExpression(_0x31b2d6) {
          if (_0x31b2d6.nodeType !== 38 && _0x31b2d6.nodeType !== 35) {
            return;
          }
          this._addInlayHint(this.getVariableInlayHint(_0x31b2d6.nodeType === 38 ? _0x31b2d6 : _0x31b2d6.d.member));
        }
        _buildHint(_0x478dad, _0x3004be, _0x582366, _0x455c04, _0x45e34b, _0x585d37, _0x571c3e = _0x5e81df.InlayHintKind.Type) {
          const _0x38578e = _0x159e28.convertOffsetToPosition(_0x455c04, this._parseResults.tokenizerOutput.lines);
          const _0x5759b0 = `${_0x45e34b}${this._evaluator.printType(_0x3004be, {
            expandTypeAlias: false,
            enforcePythonSyntax: true
          })}`;
          const _0x3dd11b = _0x5e81df.InlayHint.create(_0x38578e, _0x29ad98.truncate(_0x5759b0, _0x585d37), _0x571c3e);
          _0x3dd11b.textEdits = [_0x5e81df.TextEdit.insert(_0x3dd11b.position, _0x5759b0)];
          if (this._isResolveSupported('label.location')) {
            _0x3dd11b.label = _0x34d695.buildLabel(this._program, _0x3004be, this._fileUri, _0x585d37, _0x45e34b, !this._preferences.lazyEdit, this._cancellationToken);
          }
          if (this._isResolveSupported('textEdits')) {
            _0x3dd11b.textEdits = _0x34d695.buildTextEdits(this._program, this._parseResults, this._fileUri, _0x478dad, _0x582366, _0x3004be, _0x38578e, _0x45e34b, this._preferences.lazyEdit, this._cancellationToken);
          }
          if (this._preferences.lazyEdit) {
            _0x3dd11b.data = this._createItemData(_0x478dad);
          }
          return _0x3dd11b;
        }
        _isResolveSupported(_0xb68c0f) {
          var _0x26e536;
          if ((_0x26e536 = this._preferences.supportedResolveSet) === null || _0x26e536 === undefined) {
            return undefined;
          } else {
            return _0x26e536.has(_0xb68c0f);
          }
        }
        _createItemData(_0x4200c5) {
          return _0x10102e.toLSPAny({
            fileUri: this._fileUri.toString(),
            offset: _0x4200c5.start,
            type: _0x4200c5.nodeType
          });
        }
      }
      function _0x2f3922(_0x2a2e02, _0x237434) {
        return (_0x2a2e02.nodeType !== 38 || !_0x3ab2e4(_0x2a2e02) && !_0x35945d(_0x2a2e02)) && !_0x46d068.isAnyOrUnknown(_0x237434) && !_0x25abad(_0x237434, _0x2a2e02) && !_0xdf7100(_0x237434) && !_0xccaa14.isPartlyUnknown(_0x237434);
      }
      function _0x25abad(_0x11be4c, _0xa0375f) {
        let _0x3a44fc = false;
        if (_0x11be4c?.props?.typeAliasInfo) {
          const _0x4d309e = _0x46d068.getTypeAliasInfo(_0x11be4c);
          if (_0xa0375f.nodeType === 38 && (_0x4d309e === null || _0x4d309e === undefined ? undefined : _0x4d309e.shared.name) === _0xa0375f.d.value) {
            if (!_0x46d068.isTypeVar(_0x11be4c)) {
              _0x3a44fc = true;
            }
          }
        }
        return _0x3a44fc;
      }
      function _0x3ab2e4(_0x410091) {
        return _0x410091.parent?.nodeType === 52;
      }
      function _0x35945d(_0x2c4bc7) {
        return _0x2c4bc7.parent?.nodeType === 3 && _0x2c4bc7.parent.d.rightExpr.nodeType === 3 || _0x2c4bc7.parent?.nodeType === 3 && _0x2c4bc7.parent.parent?.nodeType === 3;
      }
      function _0xdf7100(_0x3c279d) {
        class _0x53e4aa extends _0x1ecbb6.TypeWalker {
          constructor() {
            super();
            this.contains = false;
          }
          visitFunction(_0x4aabfb) {
            this.contains = true;
            this.cancelWalk();
          }
        }
        const _0x3518e6 = new _0x53e4aa();
        _0x3518e6.walk(_0x3c279d);
        return _0x3518e6.contains;
      }
      function _0x4fadba(_0x377f46) {
        return _0x377f46.parent?.nodeType === 54;
      }
      function _0x66a1ae(_0x266e7e) {
        return _0x266e7e.type === 1 && _0x266e7e.typeAnnotationNode !== undefined || _0x266e7e.type === 2 && _0x266e7e.node.d.annotation !== undefined;
      }
    },
    88287: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MagicMethodDefinitionProvider = undefined;
      const _0x4db5d8 = require(41557);
      const _0x2ee6cf = require(21024);
      const _0x1df020 = require(91426);
      const _0x4d3d79 = require(34455);
      const _0x8414d0 = require(56814);
      const _0x2ed385 = require(65574);
      const _0x4d11c0 = require(4250);
      class _0x4001c6 {
        constructor(_0x2de631, _0x35edd7, _0x48db57, _0x2b99b4, _0x1a9c32) {
          this._program = _0x2de631;
          this._fileUri = _0x35edd7;
          this._position = _0x48db57;
          this._filter = _0x2b99b4;
          this._token = _0x1a9c32;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._sourceMapper = this._program.getSourceMapper(this._fileUri, this._token);
        }
        getDefinitions() {
          _0x1df020.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return undefined;
          }
          const _0x491ff3 = _0x8414d0.convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x491ff3 === undefined) {
            return undefined;
          }
          const _0x3df59f = _0x4db5d8.getTokenOverlapping(this._parseResults.tokenizerOutput.tokens, _0x491ff3);
          if (_0x3df59f?.type === 9) {
            return this._handleOperator(_0x3df59f);
          }
          if (_0x3df59f?.type === 8) {
            return this._handleKeyword(_0x3df59f);
          }
          if (_0x3df59f?.type === 7) {
            return this._handleIdentifier(_0x3df59f);
          }
          return undefined;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _handleOperator(_0x48f7e9) {
          const _0xd2a5e7 = _0x4d11c0.getMagicMethodInfoForOperator(this._evaluator, this._parseResults.parserOutput, _0x48f7e9);
          if (!_0xd2a5e7) {
            return undefined;
          }
          return this._handleCore(_0x48f7e9, _0xd2a5e7);
        }
        _handleKeyword(_0xccd89f) {
          const _0x4220d9 = _0x4d11c0.getMagicMethodInfoForKeyword(this._evaluator, this._parseResults.parserOutput, _0xccd89f);
          if (!_0x4220d9) {
            return undefined;
          }
          return this._handleCore(_0xccd89f, _0x4220d9);
        }
        _handleIdentifier(_0x1d4baa) {
          const _0x3ebe0f = _0x4d11c0.getMagicMethodInfoForIdentifier(this._evaluator, this._parseResults.parserOutput, _0x1d4baa);
          if (!_0x3ebe0f) {
            return undefined;
          }
          return this._handleCore(_0x1d4baa, _0x3ebe0f);
        }
        _handleCore(_0x2a9202, _0x299bd3) {
          const _0x147ace = _0x299bd3.method;
          if (!_0x147ace) {
            return undefined;
          }
          const _0x1e28a6 = (_0x2ee6cf.isFunction(_0x147ace) ? [_0x147ace.shared.declaration] : _0x2ee6cf.OverloadedType.getOverloads(_0x147ace).map(_0x39523c => _0x39523c.shared.declaration)).filter(_0x4d3d79.isDefined);
          const _0x8b94d8 = [];
          _0x2ed385.addDeclarationsToDefinitions(this._evaluator, this._sourceMapper, _0x1e28a6, _0x8b94d8);
          if (_0x8b94d8.length === 0) {
            return undefined;
          }
          return _0x2ed385.filterDefinitions(this._filter, _0x8b94d8);
        }
      }
      exports.MagicMethodDefinitionProvider = _0x4001c6;
    },
    16372: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MagicMethodHoverProvider = undefined;
      const _0x3f2df2 = require(41557);
      const _0x423bfc = require(21024);
      const _0x371023 = require(91426);
      const _0x4def35 = require(56814);
      const _0x201156 = require(88754);
      const _0x498da9 = require(79943);
      const _0x3a22af = require(39426);
      const _0x1e2e39 = require(4250);
      class _0x34fbc1 {
        constructor(_0x4a8978, _0x3504cf, _0x4f62a8, _0x4d380f, _0x36bf12) {
          this._program = _0x4a8978;
          this._fileUri = _0x3504cf;
          this._position = _0x4f62a8;
          this._format = _0x4d380f;
          this._token = _0x36bf12;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._sourceMapper = this._program.getSourceMapper(this._fileUri, this._token, true);
        }
        getHover() {
          return _0x498da9.convertHoverResults(this._getHoverResult(), this._format);
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        get _functionSignatureDisplay() {
          return this._program.configOptions.functionSignatureDisplay;
        }
        _getHoverResult() {
          _0x371023.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return null;
          }
          const _0x45e529 = _0x4def35.convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x45e529 === undefined) {
            return null;
          }
          const _0x5f51af = _0x3f2df2.getTokenOverlapping(this._parseResults.tokenizerOutput.tokens, _0x45e529);
          if (_0x5f51af?.type === 9) {
            return this._handleOperator(_0x5f51af);
          }
          if (_0x5f51af?.type === 8) {
            return this._handleKeyword(_0x5f51af);
          }
          return null;
        }
        _handleKeyword(_0x3c3327) {
          const _0x1897af = _0x1e2e39.getMagicMethodInfoForKeyword(this._evaluator, this._parseResults.parserOutput, _0x3c3327);
          if (!_0x1897af) {
            return null;
          }
          return this._handleCore(_0x3c3327, _0x1897af);
        }
        _handleOperator(_0x1fea10) {
          const _0x358ff8 = _0x1e2e39.getMagicMethodInfoForOperator(this._evaluator, this._parseResults.parserOutput, _0x1fea10);
          if (!_0x358ff8) {
            return null;
          }
          return this._handleCore(_0x1fea10, _0x358ff8);
        }
        _handleCore(_0x1e6415, _0xba4fe9) {
          if (!_0xba4fe9.method) {
            return null;
          }
          if (_0x423bfc.isFunction(_0xba4fe9.method) && _0x1e2e39.isMagicMethodFromBuiltinTypes(_0xba4fe9.method.shared.moduleName)) {
            return null;
          }
          if (_0x423bfc.isOverloaded(_0xba4fe9.method) && _0x423bfc.OverloadedType.getOverloads(_0xba4fe9.method).every(_0x5e11da => _0x1e2e39.isMagicMethodFromBuiltinTypes(_0x5e11da.shared.moduleName))) {
            return null;
          }
          if (_0x423bfc.isOverloaded(_0xba4fe9.method) && _0x423bfc.OverloadedType.getImplementation(_0xba4fe9.method)) {
            if (_0x1e2e39.isMagicMethodFromBuiltinTypes(_0x423bfc.OverloadedType.getImplementation(_0xba4fe9.method)?.shared?.moduleName)) {
              return null;
            }
          }
          const _0x16f1aa = [];
          this._addResultsForDeclaration(_0xba4fe9.name, _0xba4fe9.method, _0x16f1aa);
          const _0x47b011 = {
            parts: _0x16f1aa,
            range: {
              start: _0x4def35.convertOffsetToPosition(_0x1e6415.start, this._parseResults.tokenizerOutput.lines),
              end: _0x4def35.convertOffsetToPosition(_0x201156.TextRange.getEnd(_0x1e6415), this._parseResults.tokenizerOutput.lines)
            }
          };
          if (_0x47b011.parts.length > 0) {
            return _0x47b011;
          } else {
            return null;
          }
        }
        _addResultsForDeclaration(_0x19bf21, _0xab3d84, _0x1fd562) {
          const _0x47aca4 = _0x3a22af.getToolTipForType(_0xab3d84, 'function', _0x19bf21, this._evaluator, false, this._functionSignatureDisplay);
          _0x1fd562.push({
            text: _0x47aca4,
            python: true
          });
          const _0x4ba4f3 = _0x423bfc.isFunction(_0xab3d84) ? _0xab3d84.shared.declaration : undefined;
          const _0x10df8c = _0x3a22af.getDocumentationPartsForTypeAndDecl(this._sourceMapper, _0xab3d84, _0x4ba4f3, this._evaluator);
          _0x498da9.addDocumentationResultsPart(this._program.serviceProvider, _0x10df8c, this._format, _0x1fd562, _0x4ba4f3);
        }
      }
      exports.MagicMethodHoverProvider = _0x34fbc1;
    },
    31605: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MoveSymbolProvider = undefined;
      const _0x4499d4 = require(26687);
      const _0x5d29ec = require(28445);
      const _0x47a696 = require(41557);
      const _0x4a0220 = require(53266);
      const _0x3c07d4 = require(12097);
      const _0x55b1f1 = require(91426);
      const _0x3ba63a = require(58147);
      const _0x1e487a = require(12522);
      const _0x18b0a4 = require(56814);
      const _0x56e37e = require(93779);
      const _0x524387 = require(88754);
      const _0x2b38cb = require(95418);
      const _0x540479 = require(74382);
      const _0x3d9b76 = require(67032);
      const _0x4e1028 = require(85114);
      const _0x504906 = require(33474);
      const _0x3a7470 = require(59133);
      const _0x4e1283 = require(11855);
      const _0x2477f0 = require(15986);
      const _0x504cc3 = require(19995);
      const _0x42f546 = require(82458);
      class _0x6134d8 {
        constructor(_0xde572, _0x35f15f, _0x27fa77, _0x359d2c, _0x51ed68, _0x68131e) {
          this._program = _0xde572;
          this._fileUri = _0x35f15f;
          this._newFileUri = _0x27fa77;
          this._position = _0x359d2c;
          this._options = _0x51ed68;
          this._token = _0x68131e;
        }
        static canMoveSymbol(_0x49c9f9, _0x40c539, _0x321968) {
          const _0xe7be8b = _0x4499d4.getFileInfo(_0x321968)?.fileUri;
          if (!_0xe7be8b || !_0x1e487a.matchFileSpecs(_0x49c9f9, _0xe7be8b, true)) {
            return {
              succeeded: false,
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileNotUserFile().format({
                name: _0xe7be8b.fileName
              })
            };
          }
          if (_0x3c07d4.isPrivateName(_0x321968.d.value)) {
            return {
              succeeded: false,
              failedReason: _0x2477f0.Localizer.Refactoring.moveFilePrivateSymbol().format({
                name: _0x321968.d.value
              })
            };
          }
          const _0x36cfda = _0x40c539.lookUpSymbolRecursive(_0x321968, _0x321968.d.value, false);
          if (_0x36cfda === undefined || _0x36cfda.scope.type !== 4) {
            return {
              succeeded: false,
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileImportableOnly()
            };
          }
          const _0x2ca49c = _0x36cfda.symbol.getDeclarations();
          if (_0x2ca49c.length === 0) {
            return {
              succeeded: false,
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileUnsupportedSymbol()
            };
          }
          const _0x3f36bb = new Set();
          const _0x375601 = _0x2ca49c.every(_0x297956 => {
            if (!_0x524387.TextRange.containsRange(_0x297956.node, _0x321968)) {
              _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileMultipleDeclarations());
              return false;
            }
            if (_0x5d29ec.isFunctionDeclaration(_0x297956) || _0x5d29ec.isClassDeclaration(_0x297956)) {
              return true;
            }
            if (_0x5d29ec.isVariableDeclaration(_0x297956)) {
              if (_0x40c539.isExplicitTypeAliasDeclaration(_0x297956)) {
                _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileSimpleAssignmentsOnly());
                return false;
              }
              if (_0x297956.inferredTypeSource && _0x4e1028.isExpressionNode(_0x297956.inferredTypeSource)) {
                const _0x587996 = _0x40c539.getType(_0x297956.inferredTypeSource);
                if (_0x587996?.category === 9) {
                  _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileSimpleAssignmentsOnly());
                  return false;
                }
              }
              const _0x2c802d = _0x297956.node.parent?.nodeType === 54 ? _0x297956.node.parent.parent : _0x297956.node.parent;
              if (_0x2c802d?.nodeType !== 3 || _0x2c802d?.parent?.nodeType !== 47) {
                _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileSimpleAssignmentsOnly());
                return false;
              }
              if (_0x297956.node.start !== _0x2c802d.start) {
                _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileSimpleAssignmentsOnly());
                return false;
              }
              return true;
            }
            _0x3f36bb.add(_0x2477f0.Localizer.Refactoring.moveFileUnsupportedSymbol());
            return false;
          });
          return {
            succeeded: _0x375601,
            failedReason: [..._0x3f36bb].join('\n')
          };
        }
        moveSymbol() {
          const _0x142a3c = this._fileUri.lastExtension;
          const _0x30e5fe = this._newFileUri.lastExtension;
          if (_0x142a3c.toLowerCase() !== _0x30e5fe.toLowerCase()) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileExtensionMismatch().format({
                src: this._fileUri.fileName,
                dest: this._newFileUri.fileName
              }),
              edits: null
            };
          }
          const _0x503dc6 = this._program.getSourceFileInfo(this._fileUri);
          if (!_0x503dc6) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileMissingInfo().format({
                name: this._fileUri.fileName
              }),
              edits: null
            };
          }
          const _0x57c29d = this._program.getSourceFileInfo(this._newFileUri);
          if (_0x503dc6 === _0x57c29d) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileSameFile(),
              edits: null
            };
          }
          const _0x258109 = this._program.getParseResults(this._fileUri);
          if (!_0x258109) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileMissingInfo().format({
                name: this._fileUri.fileName
              }),
              edits: null
            };
          }
          const _0x36aafc = _0x18b0a4.convertPositionToOffset(this._position, _0x258109.tokenizerOutput.lines);
          if (_0x36aafc === undefined) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileSymbolNotFound().format({
                position: `(${this._position.line}:${this._position.character})`
              }),
              edits: null
            };
          }
          const _0x572425 = _0x47a696.findNodeByOffset(_0x258109.parserOutput.parseTree, _0x36aafc);
          if (_0x572425 === undefined) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileSymbolNotFound().format({
                position: `(${this._position.line}:${this._position.character})`
              }),
              edits: null
            };
          }
          if (_0x572425.nodeType !== 38) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileSymbolNotFound().format({
                position: `(${this._position.line}:${this._position.character})`
              }),
              edits: null
            };
          }
          const _0x153e31 = _0x6134d8.canMoveSymbol(this._program.configOptions, this._evaluator, _0x572425);
          if (!_0x153e31.succeeded) {
            return {
              failedReason: _0x153e31.failedReason,
              edits: null
            };
          }
          const _0x27c956 = _0x3d9b76.DocumentSymbolCollector.getDeclarationsForNode(this._program, _0x572425, false, this._token);
          const _0xbdd111 = _0x42f546.SymbolReferenceUpdator.createForSymbol(this._program, this._fileUri, this._newFileUri, _0x27c956, this._token);
          if (!_0xbdd111) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileAbsentSymbol(),
              edits: null
            };
          }
          _0xbdd111.processModuleReferences(_0x572425.d.value, this._fileUri);
          const _0x4ec55c = _0xbdd111.declarations.find(_0x3f6325 => _0x3f6325.node && _0x3f6325.uri.lastExtension === _0x142a3c);
          if (!_0x4ec55c) {
            return {
              failedReason: _0x2477f0.Localizer.Refactoring.moveFileAbsentSymbol(),
              edits: null
            };
          }
          const _0x3b7ed3 = this._getSymbolTextRange(_0x258109, _0x4ec55c);
          const _0x4a02e5 = new _0x504cc3.ImportAdder(this._program, {
            usageKind: 'move'
          });
          const _0x5a944b = _0x4a02e5.collectImportsForSymbolsUsed(_0x258109.parserOutput, _0x3b7ed3, this._token);
          let _0x562a78 = 0;
          let _0x139ebd = 0;
          const _0x436c49 = new _0x3a7470.IndentationUtils();
          const _0x1f3fcf = this._program.getParseResults(this._newFileUri);
          if (_0x1f3fcf) {
            const _0xfa5270 = _0xbdd111.tryGetFirstSymbolUsage(_0x1f3fcf.parserOutput);
            _0x562a78 = _0x4e1283.getInsertionPointForSymbolUnderModule(this._evaluator, _0x1f3fcf, _0x572425.d.value, {
              symbolDeclToIgnore: _0x4ec55c.uri,
              insertBefore: _0xfa5270
            });
            if (_0x562a78 === undefined) {
              return {
                failedReason: _0x2477f0.Localizer.Refactoring.moveFileInsertLocation().format({
                  name: this._newFileUri.fileName
                }),
                edits: null
              };
            }
            _0x139ebd = _0x436c49.getModuleStatementIndentation(_0x1f3fcf);
          }
          const _0x186359 = _0x436c49.reindentSpan(_0x258109, _0x3b7ed3, _0x139ebd);
          const _0xffc0ea = this._getSymbolFullStatementTextRange(_0x258109, _0x4ec55c);
          _0xbdd111.textEditTracker.addEdit(this._fileUri, _0x18b0a4.convertTextRangeToRange(_0x524387.TextRange.combine([_0x186359.originalSpan, _0xffc0ea]), _0x258109.tokenizerOutput.lines), '');
          const _0x1358d7 = [];
          let _0x4fa74d = _0x186359.text;
          if (_0x1f3fcf) {
            const _0x25ce14 = _0x18b0a4.convertTextRangeToRange({
              start: _0x562a78,
              length: 0
            }, _0x1f3fcf.tokenizerOutput.lines);
            const _0x4aaf0c = this._getNumberOfBlankLinesToInsert(_0x1f3fcf, _0x4ec55c, _0x25ce14.end);
            _0x4fa74d = '\n'.repeat(_0x4aaf0c) + _0x4fa74d;
            _0xbdd111.textEditTracker.addEdit(this._newFileUri, _0x25ce14, _0x4fa74d);
          } else {
            _0x1358d7.push({
              kind: 'create',
              fileUri: this._newFileUri
            });
            _0xbdd111.textEditTracker.addEdit(this._newFileUri, _0x524387.getEmptyRange(), _0x4fa74d);
          }
          const _0x554eb2 = this._program.clone();
          let _0x1c4c81 = _0xbdd111.getEdits();
          const _0x25852e = _0x540479.applyTextEditsToString(_0x1c4c81.filter(_0xc7f2d2 => _0xc7f2d2.fileUri.equals(this._newFileUri)), (_0x1f3fcf === null || _0x1f3fcf === undefined ? undefined : _0x1f3fcf.tokenizerOutput.lines) ?? new _0x2b38cb.TextRangeCollection([]), (_0x57c29d === null || _0x57c29d === undefined ? undefined : _0x57c29d.sourceFile.getFileContent()) ?? '');
          this._updateFileContent(_0x554eb2, this._newFileUri, _0x25852e);
          const _0x5a49e3 = this._tryGetTextAfterImportsAdded(_0x554eb2, this._newFileUri, _0x4a02e5, _0x562a78, this._token);
          _0x1c4c81 = this._updateFileEditActions(_0x1c4c81, this._newFileUri, _0x1f3fcf, _0x25852e, _0x5a49e3);
          const _0x4b5c17 = _0x540479.applyTextEditsToString(_0x1c4c81.filter(_0x3c9401 => _0x3c9401.fileUri.equals(this._fileUri)), _0x258109.tokenizerOutput.lines, _0x503dc6.sourceFile.getFileContent());
          this._updateFileContent(_0x554eb2, this._fileUri, _0x4b5c17);
          const _0x2ffad2 = this._tryGetTextAfterUnusedImportsRemoved(_0x554eb2, this._fileUri, _0x5a944b, 0, this._token);
          _0x1c4c81 = this._updateFileEditActions(_0x1c4c81, this._fileUri, _0x258109, _0x4b5c17, _0x2ffad2);
          _0x554eb2.dispose();
          return {
            failedReason: '',
            edits: _0x540479.convertToWorkspaceEdit(this._program.fileSystem, {
              edits: _0x1c4c81,
              fileOperations: _0x1358d7
            })
          };
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _getSymbolTextRange(_0x5c3483, _0x35d490) {
          if (_0x5d29ec.isVariableDeclaration(_0x35d490)) {
            const _0x228eb4 = _0x47a696.getFirstAncestorOrSelfOfKind(_0x35d490.node, 3) ?? _0x35d490.node;
            const _0x5bf5c1 = _0x47a696.getFullStatementRange(_0x228eb4, _0x5c3483);
            let _0x2ad8d8 = _0x18b0a4.convertRangeToTextRange(_0x5bf5c1, _0x5c3483.tokenizerOutput.lines) ?? _0x228eb4;
            if (_0x35d490.docString !== undefined) {
              const _0x2184e0 = _0x47a696.getVariableDocStringNode(_0x35d490.node);
              if (_0x2184e0) {
                _0x2ad8d8 = _0x524387.TextRange.extend(_0x2ad8d8, _0x2184e0);
              }
            }
            return _0x2ad8d8;
          }
          return _0x35d490.node;
        }
        _getSymbolFullStatementTextRange(_0x5b4e6b, _0x5f4987) {
          var _0xa534fa;
          const _0x5e8733 = _0x5d29ec.isVariableDeclaration(_0x5f4987) ? _0x47a696.getFirstAncestorOrSelfOfKind(_0x5f4987.node, 3) ?? _0x5f4987.node : _0x5f4987.node;
          const _0x469a16 = _0x47a696.getFullStatementRange(_0x5e8733, _0x5b4e6b, {
            includeTrailingBlankLines: true
          });
          if ((_0xa534fa = _0x18b0a4.convertRangeToTextRange(_0x469a16, _0x5b4e6b.tokenizerOutput.lines)) !== null && _0xa534fa !== undefined) {
            return _0xa534fa;
          } else {
            return _0x5e8733;
          }
        }
        _updateFileEditActions(_0x1e4212, _0x477b63, _0x57d33f, _0x3d741c, _0x2b72ec) {
          if (_0x2b72ec === undefined || _0x3d741c === _0x2b72ec) {
            return _0x1e4212;
          }
          _0x1e4212 = _0x1e4212.filter(_0x1bfbdd => !_0x1bfbdd.fileUri.equals(_0x477b63));
          _0x1e4212.push({
            fileUri: _0x477b63,
            range: _0x57d33f ? _0x18b0a4.convertTextRangeToRange(_0x57d33f.parserOutput.parseTree, _0x57d33f.tokenizerOutput.lines) : _0x524387.getEmptyRange(),
            replacementText: _0x2b72ec
          });
          return _0x1e4212;
        }
        _tryGetTextAfterImportsAdded(_0x2fadf2, _0x41a1fc, _0x256ca3, _0x441350, _0x1d95e9) {
          const _0x2c8f88 = _0x2fadf2.getBoundSourceFile(_0x41a1fc);
          const _0x5d4803 = _0x2c8f88 === null || _0x2c8f88 === undefined ? undefined : _0x2c8f88.getParseResults();
          if (!_0x5d4803) {
            return undefined;
          }
          const _0x5e6d69 = _0x256ca3.applyImports(_0x41a1fc, _0x5d4803, _0x441350, this._options.importFormat, _0x1d95e9);
          return _0x540479.applyTextEditsToString(_0x5e6d69, _0x5d4803.tokenizerOutput.lines, _0x2c8f88.getFileContent());
        }
        _tryGetTextAfterUnusedImportsRemoved(_0x574342, _0x3eca73, _0x5ebfa5, _0x4cb935, _0x4b9b12) {
          _0x55b1f1.throwIfCancellationRequested(_0x4b9b12);
          _0x574342.analyzeFile(_0x3eca73, _0x4b9b12);
          const _0x582a6b = _0x574342.getBoundSourceFile(_0x3eca73);
          const _0x456470 = _0x582a6b === null || _0x582a6b === undefined ? undefined : _0x582a6b.getParseResults();
          if (!_0x456470) {
            return undefined;
          }
          const _0x1e7966 = new _0x56e37e.TextEditTracker();
          for (const _0x279f26 of _0x504906.getUnusedImportDiagnosticsForRange(_0x574342, _0x3eca73, _0x18b0a4.convertTextRangeToRange(_0x456470.parserOutput.parseTree, _0x456470.tokenizerOutput.lines))) {
            const _0x55ba74 = _0x47a696.findNodeByPosition(_0x456470.parserOutput.parseTree, _0x279f26.range.start, _0x456470.tokenizerOutput.lines);
            if (_0x55ba74?.nodeType !== 38) {
              continue;
            }
            const _0x51bced = _0x55ba74.parent?.nodeType === 37 ? _0x55ba74.parent.d.nameParts : [_0x55ba74];
            for (const [_0x1b200c, _0x1d4be1] of _0x5ebfa5.declarations) {
              if (_0x1b200c.node) {
                if (_0x524387.TextRange.containsRange(_0x1b200c.node, _0x55ba74)) {
                  _0x1e7966.removeNodes({
                    node: _0x55ba74,
                    parseFileResults: _0x456470
                  });
                  break;
                }
              }
              const _0x530373 = _0x47a696.getDottedName(_0x47a696.getDottedNameWithGivenNodeAsLastName(_0x1d4be1[0]));
              if (_0x530373 && _0x3ba63a.arrayEquals(_0x51bced, _0x530373, (_0x1a5136, _0x38901d) => _0x1a5136.d.value === _0x38901d.d.value)) {
                _0x1e7966.removeNodes({
                  node: _0x55ba74,
                  parseFileResults: _0x456470
                });
                break;
              }
            }
          }
          const _0x3ff101 = _0x582a6b.getFileContent();
          const _0x437089 = _0x540479.applyTextEditsToString(_0x1e7966.getEdits(_0x4b9b12).filter(_0x3c87d6 => _0x3c87d6.fileUri.equals(_0x3eca73)), _0x456470.tokenizerOutput.lines, _0x3ff101);
          if (_0x4cb935 > 10 || _0x3ff101 === _0x437089) {
            return _0x437089;
          }
          this._updateFileContent(_0x574342, _0x3eca73, _0x437089);
          return this._tryGetTextAfterUnusedImportsRemoved(_0x574342, _0x3eca73, _0x5ebfa5, _0x4cb935 + 1, _0x4b9b12);
        }
        _updateFileContent(_0x199b98, _0x437100, _0x5ec44d) {
          var _0x24846e;
          const _0x5c4dfb = _0x199b98.getSourceFileInfo(_0x437100);
          const _0x25cc98 = _0x5c4dfb ? (_0x5c4dfb.sourceFile.getClientVersion() ?? 0) + 1 : 0;
          const _0x362676 = _0x5c4dfb ? (_0x24846e = _0x5c4dfb.chainedSourceFile) === null || _0x24846e === undefined ? undefined : _0x24846e.sourceFile.getUri() : undefined;
          const _0x55f7a3 = _0x5c4dfb ? _0x5c4dfb.sourceFile.getIPythonMode() : _0x4a0220.IPythonMode.None;
          const _0x4d49e4 = _0x5c4dfb ? _0x5c4dfb.isTracked : true;
          _0x199b98.setFileOpened(_0x437100, _0x25cc98, _0x5ec44d, {
            chainedFileUri: _0x362676,
            ipythonMode: _0x55f7a3,
            isTracked: _0x4d49e4
          });
        }
        _getNumberOfBlankLinesToInsert(_0x38b2e2, _0x5d2f2f, _0x405378) {
          if (_0x405378.line === 0 && _0x405378.character === 0) {
            return 0;
          }
          let _0x3b4531;
          const _0x5d8141 = _0x18b0a4.convertPositionToOffset(_0x405378, _0x38b2e2.tokenizerOutput.lines);
          if (_0x5d8141 && _0x38b2e2.parserOutput.parseTree.d.statements.length > 0) {
            _0x3b4531 = _0x38b2e2.parserOutput.parseTree.d.statements.reduce((_0x2c1933, _0xaa1edb) => _0x5d8141 < _0xaa1edb.start ? _0x2c1933 : _0xaa1edb);
          }
          let _0x11c325 = 0;
          if (_0x3b4531) {
            if (_0x5d29ec.isVariableDeclaration(_0x5d2f2f)) {
              switch (_0x3b4531.nodeType) {
                case 47:
                  _0x11c325 = 0;
                  break;
                case 10:
                case 31:
                  _0x11c325 = 2;
                  break;
                default:
                  _0x11c325 = 1;
              }
            } else {
              _0x11c325 = 2;
            }
          }
          _0x11c325 += _0x405378.character !== 0 ? 1 : 0;
          const _0x2388df = _0x11c325;
          const _0x3df390 = _0x405378.character !== 0 ? _0x405378.line : _0x405378.line - 1;
          for (let _0x481744 = 0; _0x481744 < _0x2388df; _0x481744++) {
            const _0x3a13de = _0x3df390 - _0x481744;
            if (_0x3a13de < 0 || !_0x47a696.isBlankLine(_0x38b2e2.tokenizerOutput, _0x38b2e2.text, _0x3a13de)) {
              break;
            }
            _0x11c325--;
          }
          return _0x11c325;
        }
      }
      exports.MoveSymbolProvider = _0x6134d8;
    },
    30308: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PythonFormatOnTypeProvider = undefined;
      const _0xc700de = require(56911);
      const _0x1f0f9b = require(41557);
      const _0x27f8ab = require(91426);
      const _0x4fc3e0 = require(56814);
      const _0x303d0f = require(88754);
      const _0x21a5db = require(59133);
      const _0x275d4c = require(95349);
      class _0x7ca54d {
        constructor(_0x87355a, _0x57f940, _0x11d69e, _0xf7a9c, _0x580d50, _0x540306, _0x526f40) {
          this._fs = _0x87355a;
          this._sourceFile = _0x57f940;
          this._position = _0x11d69e;
          this._triggerChar = _0xf7a9c;
          this._connection = _0x540306;
          this._cancellationToken = _0x526f40;
          this._parseResults = this._sourceFile.getParseResults();
          this._indentationUtils = new _0x21a5db.IndentationUtils(_0x580d50 ?? _0x21a5db.DefaultEditorIndentConfig);
        }
        formatOnType() {
          if (!this._parseResults) {
            return undefined;
          }
          switch (this._triggerChar) {
            case ':':
              return _0x7ca54d._formatOnTypeColon(this._parseResults, this._position, this._indentationUtils, this._cancellationToken);
            case '\n':
              return _0x7ca54d._formatOnTypeEnter(this._parseResults, this._position, this._indentationUtils, this._cancellationToken);
            case '{':
              return _0x7ca54d._formatOnTypeOpenCurlyBracket(this._fs, this._parseResults, this._sourceFile, this._position, this._connection, this._cancellationToken);
            default:
              return undefined;
          }
        }
        static _formatOnTypeOpenCurlyBracket(_0x18936b, _0x1e16ff, _0x31776b, _0x268896, _0x5c060b, _0x4b2136) {
          const _0x5dfed8 = _0x1f0f9b.findNodeByPosition(_0x1e16ff.parserOutput.parseTree, _0x268896, _0x1e16ff.tokenizerOutput.lines);
          if (_0x5dfed8 && _0x5dfed8.nodeType === 49) {
            const _0xb26ab0 = _0x1f0f9b.getParentNodeOfType(_0x5dfed8, 47);
            if (_0xb26ab0 && _0x1f0f9b.isDocString(_0xb26ab0)) {
              return undefined;
            }
            const _0x2918ed = _0x1f0f9b.getTokenAt(_0x1e16ff.tokenizerOutput.tokens, _0x5dfed8.start + _0x5dfed8.length);
            if (_0x5dfed8.d.value.split('{').length < 3 && _0x5dfed8.d.token.prefixLength === 0 && (!_0x2918ed || _0x2918ed.type !== 20)) {
              const _0x3d6ee9 = _0x4fc3e0.convertOffsetToPosition(_0x5dfed8.start, _0x1e16ff.tokenizerOutput.lines);
              const _0x3e87ff = [{
                range: {
                  start: _0x3d6ee9,
                  end: _0x3d6ee9
                },
                newText: 'f'
              }];
              const _0x236379 = {
                textDocument: {
                  uri: _0x31776b.getUri().toString(),
                  version: _0x31776b.getClientVersion() ?? null
                },
                edits: _0x3e87ff,
                cursorPosition: {
                  line: _0x268896.line,
                  character: _0x268896.character + 1
                }
              };
              _0x5c060b.sendRequest(_0x275d4c.CustomLSP.Requests.ApplyCursorMovingEdit, _0x236379);
            }
          }
          return undefined;
        }
        static _formatOnTypeEnter(_0x3cbab8, _0x5032b0, _0x29a9ed, _0x522b54) {
          _0x27f8ab.throwIfCancellationRequested(_0x522b54);
          const _0x102c23 = _0x4fc3e0.convertPositionToOffset(_0x5032b0, _0x3cbab8.tokenizerOutput.lines);
          if (!_0x102c23) {
            return undefined;
          }
          const _0xc0c986 = _0x3cbab8.tokenizerOutput.lines.getItemAtPosition(_0x102c23);
          const _0x35e5e4 = _0x4fc3e0.getLineEndOffset(_0x3cbab8.tokenizerOutput, _0x3cbab8.text, _0xc0c986);
          const _0x16f192 = _0x102c23 > 0 && _0x35e5e4 > _0x102c23 ? _0x102c23 - 1 : _0x102c23;
          const _0x479f8f = _0x29a9ed.findNonWhitespaceTokenAtOrBeforeOffset(_0x3cbab8.tokenizerOutput.tokens, _0x16f192);
          let _0x35e075 = undefined;
          if (_0x479f8f) {
            const _0x2d9f87 = _0x303d0f.TextRange.getEnd(_0x479f8f);
            const _0x2feb8a = _0x4fc3e0.convertOffsetToPosition(_0x2d9f87, _0x3cbab8.tokenizerOutput.lines);
            if (_0x2feb8a.line < _0x5032b0.line - 1) {
              const _0x1e3b90 = _0x29a9ed.findCommentAtOrBeforeOffset(_0x3cbab8.tokenizerOutput.tokens, _0x16f192);
              if (_0x1e3b90) {
                const _0x518628 = _0x303d0f.TextRange.getEnd(_0x1e3b90);
                const _0x5e8c0d = _0x4fc3e0.convertOffsetToPosition(_0x518628, _0x3cbab8.tokenizerOutput.lines);
                if (_0x5e8c0d.line < _0x5032b0.line - 1) {
                  return undefined;
                }
                const _0x5c874f = _0x29a9ed.getIndentationFromText(_0x3cbab8, _0x5032b0.line - 1);
                _0x35e075 = _0x5c874f.indentation;
              } else {
                return undefined;
              }
            }
          }
          _0x35e075 = _0x35e075 ?? _0x29a9ed.getNewlineIndentation(_0x3cbab8, _0x16f192);
          const _0x1a2d06 = _0x7ca54d._getCurrentIndent(_0x3cbab8, _0x5032b0, _0x102c23) ?? _0x5032b0;
          const _0x278b52 = _0x29a9ed.getSliceFromText(_0x3cbab8, _0x5032b0.line, _0x1a2d06.character);
          if (_0x278b52.trim().length === 0) {
            return [_0xc700de.TextEdit.replace({
              start: {
                character: 0,
                line: _0x5032b0.line
              },
              end: _0x1a2d06
            }, _0x29a9ed.createIndentationString(_0x3cbab8, _0x35e075))];
          } else {
            return undefined;
          }
        }
        static _formatOnTypeColon(_0x4c8aaa, _0x1defe0, _0x3d3b7f, _0xc59488) {
          _0x27f8ab.throwIfCancellationRequested(_0xc59488);
          const _0x1aa1f8 = _0x4fc3e0.convertPositionToOffset(_0x1defe0, _0x4c8aaa.tokenizerOutput.lines);
          if (!_0x1aa1f8 || _0x1aa1f8 < 1) {
            return undefined;
          }
          const _0x595371 = _0x2af099(_0x1defe0, _0x1aa1f8);
          if (!_0x595371) {
            return undefined;
          }
          const _0x4139ac = _0x1e304e(_0x595371, _0x1aa1f8);
          if (_0x4139ac < 1) {
            return undefined;
          }
          return [_0xc700de.TextEdit.del({
            start: {
              character: 0,
              line: _0x1defe0.line
            },
            end: {
              character: _0x4139ac,
              line: _0x1defe0.line
            }
          })];
          function _0x2af099(_0x3e500e, _0x885227) {
            const _0x3f92b0 = _0x4c8aaa.tokenizerOutput.tokens.getItemAtPosition(_0x885227 - 1);
            if (_0x3f92b0 < 0) {
              return undefined;
            }
            const _0x1ee0eb = _0x4c8aaa.tokenizerOutput.tokens.getItemAt(_0x3f92b0);
            if (!_0x1ee0eb || _0x1ee0eb.type !== 10) {
              return undefined;
            }
            const _0x520fe7 = _0x4c8aaa.tokenizerOutput.lines.getItemAt(_0x3e500e.line).start;
            for (let _0x260188 = _0x3f92b0; _0x260188 >= 0; --_0x260188) {
              const _0x2ebc52 = _0x4c8aaa.tokenizerOutput.tokens.getItemAt(_0x260188);
              if (!_0x2ebc52) {
                return undefined;
              }
              if (_0x2ebc52.start < _0x520fe7) {
                return undefined;
              }
              if (_0x2ebc52.type === 8) {
                const _0x5e79af = _0x2ebc52;
                if (_0x3bab3e(_0x5e79af.keywordType)) {
                  return _0x5e79af;
                }
              }
            }
            return undefined;
          }
          function _0x3bab3e(_0x53c305) {
            switch (_0x53c305) {
              case 12:
              case 13:
              case 14:
              case 16:
                return true;
              default:
                return false;
            }
          }
          function _0x1e304e(_0x2f126d, _0x484058) {
            const _0x181281 = _0x1f0f9b.findNodeByOffset(_0x4c8aaa.parserOutput.parseTree, _0x484058);
            const _0x5a16cf = _0x1f0f9b.findNodeByOffset(_0x4c8aaa.parserOutput.parseTree, _0x303d0f.TextRange.getEnd(_0x2f126d));
            if (!_0x181281 || !_0x5a16cf) {
              return 0;
            }
            if (_0x5a16cf.nodeType !== 0) {
              return 0;
            }
            const _0x41caeb = _0x1f0f9b.getFirstAncestorOrSelfOfKind(_0x181281, 50);
            const _0xff404b = _0x1f0f9b.getFirstAncestorOrSelfOfKind(_0x5a16cf, 50);
            let _0x2a9233 = _0x41caeb;
            if (!_0x2a9233 || !_0x2a9233.parent || _0xff404b && _0xff404b.start > _0x2a9233.start) {
              _0x2a9233 = _0xff404b;
            }
            if (!_0x2a9233 || !_0x2a9233.parent) {
              return 0;
            }
            const _0x2a838b = _0x4fc3e0.convertOffsetToPosition(_0x2a9233.parent.start, _0x4c8aaa.tokenizerOutput.lines);
            const _0x112c9e = _0x3d3b7f.getIndentationFromText(_0x4c8aaa, _0x2a838b.line);
            const _0x2235a4 = _0x3d3b7f.getIndentationFromText(_0x4c8aaa, _0x1defe0.line);
            if (_0x112c9e.containsSpaces && _0x112c9e.containsTabs || _0x2235a4.containsSpaces && _0x2235a4.containsTabs) {
              return 0;
            }
            if (_0x112c9e.charOffset >= _0x2235a4.charOffset) {
              return 0;
            }
            if (_0x112c9e.charOffset > 0 && (_0x112c9e.containsSpaces !== _0x2235a4.containsSpaces || _0x112c9e.containsTabs !== _0x2235a4.containsTabs)) {
              return 0;
            }
            return _0x2235a4.charOffset - _0x112c9e.charOffset;
          }
        }
        static _getCurrentIndent(_0xfce71, _0x2d1b91, _0x22703f) {
          let _0x180e17 = _0x22703f;
          const _0x1d136a = _0xfce71.tokenizerOutput.tokens.getItemAtPosition(_0x22703f);
          const _0x51f6fb = _0xfce71.tokenizerOutput.tokens.getItemAt(_0x1d136a);
          if (_0x51f6fb && _0x51f6fb.type === 3) {
            const _0x5b3d7a = _0x303d0f.TextRange.getEnd(_0x51f6fb);
            const _0x57b9e0 = _0xfce71.tokenizerOutput.lines.getItemAtPosition(_0x5b3d7a);
            if (_0x57b9e0 === _0x2d1b91.line && _0x5b3d7a > _0x180e17) {
              _0x180e17 = _0x5b3d7a;
            }
          }
          if (_0x180e17 === _0x22703f) {
            return _0x2d1b91;
          } else {
            return _0x4fc3e0.convertOffsetToPosition(_0x180e17, _0xfce71.tokenizerOutput.lines);
          }
        }
      }
      exports.PythonFormatOnTypeProvider = _0x7ca54d;
    },
    76966: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ExtractMethodProvider = exports.CannotExtractReason = undefined;
      const _0x170f1e = __importStar(require(26687));
      const _0x5de7d1 = require(15157);
      const _0x328b5a = require(41557);
      const _0x576f61 = __importStar(require(41557));
      const _0x1cc5f5 = require(88744);
      const _0x34f5e4 = require(21024);
      const _0x36fc69 = require(92324);
      const _0x24d5a5 = require(56507);
      const _0x2adfb7 = require(56814);
      const _0x100520 = require(88754);
      const _0x3e1cf8 = require(26005);
      const _0x264f88 = require(85114);
      const _0x316815 = require(93819);
      var _0x1294b1;
      (function (_0x512e53) {
        _0x512e53[_0x512e53.None = 0] = 'None';
        _0x512e53.InvalidTargetSelected = 'Invalid Target Selected';
        _0x512e53.InvalidExpressionSelected = 'Invalid Expression Selected';
        _0x512e53.InvalidExpressionAndStatementSelected = 'Invalid Expression and Statement Selected';
        _0x512e53.ContainsYieldExpression = 'Cannot extract yield';
        _0x512e53.ContainsContinueWithoutLoop = 'Cannot extract continue without enclosing while/for loop';
        _0x512e53.ContainsBreakWithoutLoop = 'Cannot extract break without enclosing while/for loop';
        _0x512e53.ContainsReturnExpression = 'Cannot extract return';
        _0x512e53.ContainsMultipleReturns = 'Cannot extract multiple returns';
        _0x512e53.ReturnShouldBeLastStatement = 'Return should be last statement';
        _0x512e53.ContainsPartialIfElseStatement = 'Cannot extract partial if/else statement';
        _0x512e53.PartialCommentSelected = 'Cannot extract partial comment';
      })(_0x1294b1 || (exports.CannotExtractReason = _0x1294b1 = {}));
      class _0x565dbc {
        static extractVariable(_0x6e17be, _0x49543a, _0x5f4a23, _0x5176c9) {
          if (_0x49543a === undefined || _0x6e17be.isEmpty()) {
            return;
          }
          const _0x4e68bb = _0x2adfb7.convertRangeToTextRange(_0x5f4a23, _0x49543a.tokenizerOutput.lines);
          if (!_0x4e68bb) {
            return;
          }
          const _0x59d839 = this.canExtractVariable(_0x49543a, _0x4e68bb);
          if (_0x59d839.failedReason !== _0x1294b1.None) {
            throw new Error(_0x59d839.failedReason);
          }
          if (_0x5176c9.isCancellationRequested) {
            return;
          }
          const _0x3cef5d = this._extractVariableGenerator(_0x6e17be, _0x59d839, _0x49543a);
          if (!_0x3cef5d) {
            return;
          }
          return {
            newSymbolName: _0x3cef5d.newSymbolName,
            actions: _0x3cef5d.actions
          };
        }
        static extractMethod(_0x4ec90c, _0x28e950, _0x136367, _0x5b5cc3) {
          const _0x598507 = _0x4ec90c.getParseResults(_0x28e950);
          if (_0x598507 === undefined || _0x4ec90c.evaluator === undefined || _0x28e950 === undefined) {
            return;
          }
          const _0x15266a = _0x2adfb7.convertRangeToTextRange(_0x136367, _0x598507.tokenizerOutput.lines);
          if (!_0x15266a) {
            return;
          }
          const _0xcac8bd = this.canExtractMethod(_0x598507, _0x15266a, _0x4ec90c.evaluator);
          if (_0xcac8bd.failedReason !== _0x1294b1.None) {
            throw new Error(_0xcac8bd.failedReason);
          }
          if (_0x5b5cc3.isCancellationRequested) {
            return;
          }
          if (_0xcac8bd.range === undefined || _0xcac8bd.bodyNodes === undefined || _0xcac8bd.parentNode === undefined) {
            throw new Error(_0x1294b1.InvalidTargetSelected);
          }
          const _0x1ef02d = _0x576f61.getEvaluationScopeNode(_0xcac8bd.parentNode).node;
          const _0x28af00 = _0x170f1e.getScope(_0x1ef02d);
          const _0x681730 = _0x28af00 === null || _0x28af00 === undefined ? undefined : _0x28af00.getGlobalScope().scope;
          const _0x45bc9e = this._findSymbolsReferences(_0x4ec90c, _0x28e950, _0xcac8bd.parentNode, _0x28af00, _0x5b5cc3);
          const _0x482442 = this._findSignatureSymbols(_0x681730, _0x45bc9e, _0xcac8bd.range, _0x598507, _0x5b5cc3);
          const _0x33fb44 = this._findOutputSymbols(_0x45bc9e, _0xcac8bd.range, _0x598507, _0x5b5cc3);
          if (_0x5b5cc3.isCancellationRequested) {
            return;
          }
          const _0x1e51b7 = this._extractMethodGenerator(_0x482442, _0x33fb44, _0xcac8bd, _0x598507, _0x4ec90c.evaluator, _0x28e950);
          if (!_0x1e51b7) {
            return;
          }
          return {
            newSymbolName: _0x1e51b7.newSymbolName,
            actions: _0x1e51b7.actions
          };
        }
        static canExtractVariable(_0x1b1981, _0x4beeb5) {
          let _0x209087 = undefined;
          let _0x2011e6 = undefined;
          let _0x220324 = undefined;
          try {
            if (_0x4beeb5.length === 0) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            _0x220324 = this.verifyAndAdjustSelectionNodes(_0x1b1981, _0x4beeb5);
            if (_0x220324 === undefined) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            if (!this._containsOnlyExpressions(_0x1b1981.parserOutput, _0x220324)) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            _0x209087 = _0x45b63e(_0x1b1981, _0x220324);
            if (!_0x209087) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            _0x2011e6 = this._findNodesInRange(_0x209087, _0x220324);
            if (_0x2011e6 === undefined || _0x2011e6.length === 0) {
              return {
                failedReason: _0x1294b1.InvalidTargetSelected
              };
            }
            const _0x246bbc = _0x2011e6.every(_0x313cf3 => this._isExpression(_0x313cf3));
            const _0x23e402 = _0x328b5a.findNodeByOffset(_0x1b1981.parserOutput.parseTree, _0x220324.start);
            if (!_0x23e402) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            if (!this._isValidExtractionNode(_0x23e402)) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            const _0x408fb6 = this._checkUnsupportedExpressions(_0x209087, _0x2011e6, _0x220324, _0x246bbc);
            return {
              range: _0x220324,
              parentNode: _0x209087,
              bodyNodes: _0x2011e6,
              failedReason: _0x408fb6,
              isExpression: _0x246bbc
            };
          } catch (_0x12d8b5) {
            return {
              failedReason: _0x1294b1.InvalidExpressionSelected
            };
          }
        }
        static canExtractMethod(_0x42f809, _0xdf1667, _0x375b99) {
          try {
            if (_0xdf1667.length === 0) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            if (_0x375b99 === undefined) {
              return {
                failedReason: _0x1294b1.InvalidExpressionSelected
              };
            }
            const _0x52dbe6 = this.verifyAndAdjustSelectionNodes(_0x42f809, _0xdf1667);
            if (_0x52dbe6 === undefined) {
              return {
                failedReason: _0x1294b1.InvalidTargetSelected
              };
            }
            if (this._selectionInsideComment(_0x42f809, _0x52dbe6)) {
              return {
                failedReason: _0x1294b1.PartialCommentSelected
              };
            }
            const _0x5ee6dc = _0x45b63e(_0x42f809, _0x52dbe6);
            if (!_0x5ee6dc) {
              return {
                failedReason: _0x1294b1.InvalidTargetSelected
              };
            }
            const _0x1bcab7 = _0x5ee6dc.nodeType === 36 ? _0x5ee6dc : _0x328b5a.getEnclosingClassOrModule(_0x5ee6dc);
            const _0x3f8311 = _0x576f61.getEnclosingFunction(_0x5ee6dc);
            if (_0x1bcab7?.nodeType === 10 && _0x3f8311 === undefined) {
              return {
                failedReason: _0x1294b1.InvalidExpressionAndStatementSelected
              };
            }
            const _0x1d95d9 = this._verifyReturnStatements(_0x5ee6dc, _0x375b99, _0x52dbe6);
            if (_0x1d95d9 !== _0x1294b1.None) {
              return {
                failedReason: _0x1d95d9
              };
            }
            const _0x54d917 = this._findNodesInRange(_0x5ee6dc, _0x52dbe6);
            if (_0x54d917 === undefined || _0x54d917.length === 0) {
              return {
                failedReason: _0x1294b1.InvalidTargetSelected
              };
            }
            const _0x346772 = _0x54d917.every(_0x389882 => this._isExpression(_0x389882));
            const _0x5d0718 = this._checkUnsupportedExpressions(_0x5ee6dc, _0x54d917, _0x52dbe6, _0x346772);
            return {
              range: _0x52dbe6,
              parentNode: _0x5ee6dc,
              bodyNodes: _0x54d917,
              failedReason: _0x5d0718,
              isExpression: _0x346772
            };
          } catch (_0x55c100) {
            return {
              failedReason: _0x1294b1.InvalidExpressionAndStatementSelected
            };
          }
        }
        static verifyAndAdjustSelectionNodes(_0x25b493, _0x9de080) {
          const _0x296c7b = _0x25b493.parserOutput.parseTree;
          const _0x5e6a61 = _0x2e833c(_0x9de080, _0x25b493.text);
          const _0x448eb9 = _0x328b5a.findNodeByOffset(_0x296c7b, _0x5e6a61.start);
          if (!_0x448eb9) {
            return;
          }
          if (_0x568c0f(_0x448eb9)) {
            return;
          }
          if (!_0x448eb9 || !_0x504b8e(_0x5e6a61, _0x448eb9)) {
            return;
          }
          const _0x2ecca1 = _0x100520.TextRange.getEnd(_0x5e6a61);
          const _0x551ce4 = _0x328b5a.findNodeByOffset(_0x296c7b, _0x2ecca1);
          if (!_0x551ce4) {
            return;
          }
          const _0x2a2be3 = _0x504b8e(_0x5e6a61, _0x551ce4);
          if (_0x100520.TextRange.contains(_0x5e6a61, _0x551ce4.start) && !_0x2a2be3) {
            return;
          }
          const _0x17f188 = _0x576f61.getTypeVarScopeNode(_0x448eb9);
          const _0x45f7da = _0x576f61.getTypeVarScopeNode(_0x551ce4);
          const _0x314020 = _0x17f188 && _0x45f7da && _0x17f188.id !== _0x45f7da.id;
          if (_0x314020) {
            return;
          }
          if (!this._isValidExtractionNode(_0x551ce4)) {
            return;
          }
          if (_0x551ce4 && _0x448eb9.start > _0x551ce4?.start) {
            return;
          }
          if (_0x448eb9.parent?.nodeType === 11) {
            if (!_0x504b8e(_0x5e6a61, _0x448eb9.parent)) {
              return;
            }
          }
          return _0x5e6a61;
        }
        static _containsOnlyExpressions(_0x49c627, _0x530fde) {
          const _0x97bd71 = _0x328b5a.findNodeByOffset(_0x49c627.parseTree, _0x530fde.start);
          const _0x22f816 = _0x328b5a.findNodeByOffset(_0x49c627.parseTree, _0x100520.TextRange.getEnd(_0x530fde));
          const _0xe232d3 = _0x5c5779(_0x97bd71, _0x22f816);
          if (!_0xe232d3) {
            return false;
          }
          return _0x264f88.isExpressionNode(_0xe232d3);
        }
        static _extractVariableGenerator(_0x305453, _0x12f2d4, _0x36cfc9) {
          var _0x3ed45f;
          if (_0x12f2d4.parentNode === undefined || _0x12f2d4.bodyNodes === undefined || _0x12f2d4.range === undefined) {
            return;
          }
          let _0xf9d57;
          const _0x56b886 = _0x576f61.getEnclosingFunction(_0x12f2d4.parentNode);
          if (_0x56b886 !== undefined) {
            _0xf9d57 = _0x315526('new_var', _0x56b886);
          } else {
            _0xf9d57 = _0x152693('new_var', _0x12f2d4.parentNode);
          }
          const _0x12a527 = _0xf9d57 + ' = ' + this._expressionNodesToString(_0x12f2d4.bodyNodes, _0x36cfc9, _0x12f2d4.range);
          const _0x1562b5 = [];
          _0x1562b5.push({
            replacementText: _0xf9d57,
            fileUri: _0x305453,
            range: _0x2adfb7.convertTextRangeToRange(_0x12f2d4.range, _0x36cfc9.tokenizerOutput.lines)
          });
          const _0x32175a = _0x12f2d4.parentNode.nodeType === 50 || _0x12f2d4.parentNode.nodeType === 36 ? _0x12f2d4.parentNode : _0x328b5a.getEnclosingSuiteOrModule(_0x12f2d4.parentNode, false, false);
          const _0xa45445 = (_0x3ed45f = _0x32175a === null || _0x32175a === undefined ? undefined : _0x32175a.d.statements) === null || _0x3ed45f === undefined ? undefined : _0x3ed45f.find(_0x4926ef => {
            const _0x205f15 = _0x100520.TextRange.create(_0x4926ef.start, _0x4926ef.length);
            return _0x100520.TextRange.contains(_0x205f15, _0x12f2d4.range.start);
          });
          if (_0xa45445) {
            const _0x4e28fb = _0xa45445.start;
            const _0x5217e8 = _0x2adfb7.convertOffsetToPosition(_0xa45445.start, _0x36cfc9.tokenizerOutput.lines).character;
            _0x1562b5.push({
              replacementText: _0x12a527 + '\n' + ' '.repeat(_0x5217e8),
              fileUri: _0x305453,
              range: _0x2adfb7.convertOffsetsToRange(_0x4e28fb, _0x4e28fb, _0x36cfc9.tokenizerOutput.lines)
            });
          }
          return {
            actions: _0x1562b5,
            newSymbolName: _0xf9d57
          };
        }
        static _findSymbolsReferences(_0x39db35, _0x582f18, _0x347e47, _0x11e747, _0x138dbe) {
          const _0x5837bd = new Map();
          if (_0x11e747 === undefined || _0x347e47 === undefined) {
            return _0x5837bd;
          }
          if (_0x11e747 === null || _0x11e747 === undefined) {
            undefined;
          } else {
            _0x11e747.symbolTable.forEach((_0x108af8, _0x70b278) => {
              if (_0x138dbe.isCancellationRequested) {
                return;
              }
              const _0x380fef = false;
              const _0x310dcd = new _0x3e1cf8.ReferencesResult(_0x380fef, _0x347e47, [_0x70b278], _0x108af8.getDeclarations(), _0x24d5a5.ReferenceUseCase.References, []);
              const _0x2a3691 = true;
              const _0x42f471 = new _0x3e1cf8.FindReferencesTreeWalker(_0x39db35, _0x582f18, _0x310dcd, _0x2a3691, _0x138dbe);
              _0x310dcd.addResults(..._0x42f471.findReferences());
              _0x5837bd.set(_0x70b278, _0x310dcd);
            });
          }
          return _0x5837bd;
        }
        static _verifyReturnStatements(_0x52993e, _0x43e487, _0x4d93de) {
          const _0x4d76d1 = _0x576f61.getEnclosingFunction(_0x52993e);
          if (_0x4d76d1 !== undefined) {
            const _0xee859c = _0x43e487.getTypeOfFunction(_0x4d76d1);
            const _0x12b0af = (_0xee859c === null || _0xee859c === undefined ? undefined : _0xee859c.functionType.shared.declaration)?.returnStatements;
            if (_0x12b0af && _0x12b0af.length > 1) {
              const _0x17f301 = _0x12b0af.filter(_0x2f07b3 => _0x100520.TextRange.contains(_0x4d93de, _0x2f07b3.start));
              if (_0x17f301.length > 1) {
                return _0x1294b1.ContainsMultipleReturns;
              }
              const _0x98ce3f = _0x12b0af.slice(0, -1).some(_0x377dad => _0x100520.TextRange.contains(_0x4d93de, _0x377dad.start));
              if (_0x98ce3f) {
                return _0x1294b1.ReturnShouldBeLastStatement;
              }
            }
          }
          return _0x1294b1.None;
        }
        static _checkUnsupportedExpressions(_0x2e9358, _0x216a76, _0x4dfc14, _0x3ade6c) {
          if (_0x216a76.length === 0 || _0x216a76[0] === undefined) {
            return _0x1294b1.InvalidTargetSelected;
          }
          const _0x2c4d62 = new _0x7d42c3(_0x4dfc14);
          _0x2c4d62.check(_0x2e9358);
          if (_0x2c4d62.hasNonEnclosedContinue) {
            return _0x1294b1.ContainsContinueWithoutLoop;
          }
          if (_0x2c4d62.hasNonEnclosedBreak) {
            return _0x1294b1.ContainsBreakWithoutLoop;
          }
          if (_0x2e9358.nodeType === 41) {
            return _0x1294b1.InvalidExpressionSelected;
          }
          if (!_0x3ade6c) {
            const _0x4db5ce = _0x216a76.some(_0x20cdad => {
              if (_0x20cdad) {
                const _0x444fd5 = _0x216a76.find(_0x569928 => {
                  return _0x569928 && _0x569928.id === _0x20cdad.parent?.id;
                });
                if (!_0x444fd5) {
                  return this._isExpression(_0x20cdad);
                }
                return false;
              }
              return false;
            });
            const _0x19df83 = _0x216a76.some(_0x2187cc => _0x2187cc && _0x2187cc.nodeType === 1 && _0x2187cc.d.name !== undefined);
            if (_0x4db5ce || _0x19df83) {
              return _0x1294b1.InvalidExpressionAndStatementSelected;
            }
            const _0x43688c = _0x216a76.some(_0x236f1e => _0x236f1e?.nodeType === 16);
            if (_0x43688c) {
              return _0x1294b1.InvalidTargetSelected;
            }
          }
          const _0x38e93f = _0x216a76.length === 1 && _0x216a76[0].nodeType === 38;
          if (_0x38e93f) {
            return _0x1294b1.InvalidTargetSelected;
          }
          const _0x3f25e8 = new _0x5de7d1.YieldFinder();
          const _0x542660 = _0x216a76.some(_0x5c5064 => _0x5c5064 && _0x3f25e8.checkContainsYield(_0x5c5064));
          if (_0x542660) {
            return _0x1294b1.ContainsYieldExpression;
          }
          const _0x26f5f2 = _0x216a76.some(_0x312ecd => {
            return _0x312ecd?.nodeType === 22 && _0x312ecd.parent?.nodeType === 22 && !_0x504b8e(_0x4dfc14, _0x312ecd.parent);
          });
          if (_0x26f5f2) {
            return _0x1294b1.ContainsPartialIfElseStatement;
          }
          return _0x1294b1.None;
        }
        static _extractMethodGenerator(_0xeb29aa, _0x4ee9a4, _0x3cac02, _0x2c9287, _0x198169, _0x4c2f2f) {
          if (_0x3cac02.parentNode === undefined || _0x3cac02.bodyNodes === undefined || _0x3cac02.range === undefined) {
            return;
          }
          let _0x565b0d = false;
          const _0xeb8afc = _0x2c9287.tokenizerOutput.lines;
          let _0x10d60e = 0;
          let _0x1a2447 = _0x2adfb7.convertOffsetToPosition(_0x3cac02.range.start, _0xeb8afc);
          const _0x241bd7 = this._getEnclosingFunctionInfo(_0x3cac02, _0x198169, _0xeb8afc);
          if (_0x241bd7 && _0x241bd7.functionTypeResult) {
            const _0x18715e = _0x241bd7.functionTypeResult.functionType.shared.parameters;
            if ((_0x241bd7.isClassMethod || _0x241bd7.isBoundToClass) && !_0x241bd7.isStaticMethod && _0x18715e.length > 0 && _0x18715e[0].name !== undefined) {
              if (!_0xeb29aa.find(_0x5b6888 => _0x5b6888 === _0x18715e[0].name)) {
                _0xeb29aa.unshift(_0x18715e[0].name);
              }
            }
            _0x10d60e = _0x241bd7.indentionOffset;
            _0x1a2447 = _0x241bd7.insertPosition;
          } else {
            _0x565b0d = true;
            const _0x169624 = _0x3cac02.parentNode.nodeType === 36 ? _0x3cac02.parentNode : _0x576f61.getEnclosingClassOrModule(_0x3cac02.parentNode);
            if (_0x169624?.nodeType === 36 && _0x3cac02?.range) {
              const _0x45d480 = _0x3cac02.range.start;
              const _0x43d700 = _0x169624 === null || _0x169624 === undefined ? undefined : _0x169624.d.statements.find(_0x20e65c => _0x20e65c.start <= _0x45d480 && _0x100520.TextRange.getEnd(_0x20e65c) >= _0x45d480);
              if (_0x43d700) {
                _0x1a2447 = _0x2adfb7.convertOffsetToPosition(_0x43d700.start, _0xeb8afc);
              }
            }
          }
          const _0x165421 = _0x241bd7?.className ? 'new_method' : 'new_func';
          const _0x1f72a3 = _0x152693(_0x165421, _0x3cac02.parentNode);
          const _0xf0305 = _0x565dbc._buildMethodBody(_0x3cac02, _0x2c9287, _0x4ee9a4, _0x10d60e, _0x198169);
          const _0x1d0ecb = new _0x3c07a6();
          const _0x4d11b7 = _0x1d0ecb.containsAwait(_0x3cac02.bodyNodes);
          const _0x2bb850 = this._buildFunctionDefinition(_0x1f72a3, _0xeb29aa.join(', '), _0xf0305, _0x241bd7, _0x10d60e, _0x4d11b7);
          let _0x34418d = _0x565b0d ? '' : '\n\n';
          const _0x1d60af = {
            fileUri: _0x4c2f2f,
            range: {
              start: _0x1a2447,
              end: _0x1a2447
            },
            replacementText: _0x34418d + _0x2bb850
          };
          const _0x1d4b1c = this._buildCallDefinition(_0x1f72a3, _0xeb29aa, _0x4ee9a4, _0x241bd7, _0x3cac02.bodyNodes, _0x4d11b7);
          _0x34418d = _0x2c9287.text.substr(_0x100520.TextRange.getEnd(_0x3cac02.range) - 1, 1) === '\n' ? '\n' : '';
          const _0x14b2c9 = {
            fileUri: _0x4c2f2f,
            range: _0x2adfb7.convertTextRangeToRange(_0x3cac02.range, _0xeb8afc),
            replacementText: _0x1d4b1c + _0x34418d
          };
          const _0x4718a1 = [];
          if (_0x565b0d) {
            _0x1d60af.replacementText += '\n\n';
            _0x4718a1.push(_0x1d60af);
            _0x4718a1.push(_0x14b2c9);
          } else {
            _0x4718a1.push(_0x14b2c9);
            _0x4718a1.push(_0x1d60af);
          }
          return {
            actions: _0x4718a1,
            newSymbolName: _0x1f72a3
          };
        }
        static _getEnclosingFunctionInfo(_0x5c6dd3, _0x15d110, _0x23b5bf) {
          if (_0x5c6dd3.parentNode === undefined) {
            return;
          }
          const _0x28be40 = _0x576f61.getEnclosingFunction(_0x5c6dd3.parentNode);
          if (_0x28be40 === undefined) {
            return;
          }
          const _0x5ae9fd = _0x2adfb7.convertOffsetToPosition(_0x100520.TextRange.getEnd(_0x28be40), _0x23b5bf);
          _0x5ae9fd.character += 1;
          const _0x2fc2cc = {
            isStaticMethod: false,
            isClassMethod: false,
            isBoundToClass: false,
            node: _0x28be40,
            indentionOffset: _0x2adfb7.convertOffsetToPosition(_0x28be40.start, _0x23b5bf).character,
            insertPosition: _0x5ae9fd
          };
          const _0x20ce49 = _0x15d110.getTypeOfFunction(_0x28be40);
          if (_0x20ce49) {
            _0x2fc2cc.functionTypeResult = _0x20ce49;
            _0x2fc2cc.isStaticMethod = _0x34f5e4.FunctionType.isStaticMethod(_0x20ce49.functionType);
            _0x2fc2cc.isClassMethod = _0x34f5e4.FunctionType.isClassMethod(_0x20ce49.functionType);
            const _0x48cba7 = _0x576f61.getEnclosingClassOrModule(_0x5c6dd3.parentNode);
            if (_0x48cba7?.nodeType === 10) {
              _0x2fc2cc.className = _0x48cba7.d.name.d.value;
              _0x2fc2cc.isBoundToClass = true;
            }
          }
          return _0x2fc2cc;
        }
        static _buildMethodBody(_0xee1435, _0x101d0f, _0x41b51e, _0x23a10e, _0x7ff792) {
          if (_0xee1435.bodyNodes === undefined || _0xee1435.range === undefined || _0xee1435.bodyNodes.length === 0) {
            return [];
          }
          const _0x4dea6b = this._convertNodesToString(_0xee1435.bodyNodes, _0x101d0f, _0xee1435.range, _0x23a10e);
          const _0x4cdbec = ' '.repeat(_0x23a10e + 4);
          const _0xd9440f = _0xee1435.bodyNodes.slice(-1)[0];
          if (_0xd9440f !== undefined && _0xee1435.range.start < _0xd9440f.start) {
            const _0x1634f0 = _0xd9440f.start - _0xee1435.range.start;
            const _0x560100 = _0x101d0f.text.substr(_0xee1435.range.start, _0x1634f0);
            _0x4dea6b[0] = _0x4cdbec + _0x560100.trimStart() + _0x4dea6b[0];
          }
          let _0x4acab1 = 'return ';
          if (_0xee1435.isExpression || _0xee1435.bodyNodes.every(_0x12aca7 => _0x12aca7?.nodeType === 1)) {
            _0x4acab1 = _0x5eec1f(_0xee1435, _0x7ff792) ? '' : _0x4acab1;
            _0x4dea6b[0] = _0x4cdbec + _0x4acab1 + _0x4dea6b[0].trimStart();
          } else {
            if (_0x41b51e.length > 0) {
              const _0xcdda = _0x4cdbec + _0x4acab1 + _0x41b51e.join(',');
              _0x4dea6b.push(_0xcdda);
            }
          }
          return _0x4dea6b;
        }
        static _isExpression(_0x174b09) {
          if ((_0x174b09?.parent?.nodeType === 3 || _0x174b09?.parent?.nodeType === 5 || _0x174b09?.parent?.nodeType === 9) && _0x174b09.parent.d.leftExpr.id === _0x174b09.id) {
            return false;
          }
          const _0x30b6cb = _0x174b09 && _0x264f88.isExpressionNode(_0x174b09);
          if (_0x30b6cb !== null && _0x30b6cb !== undefined) {
            return _0x30b6cb;
          } else {
            return false;
          }
        }
        static _buildCallDefinition(_0x4770a3, _0x410e32, _0x1ebfb9, _0x5be30a, _0x2c0a75, _0x39b77e) {
          let _0x5d4db7 = '';
          if (_0x1ebfb9.length > 0) {
            _0x5d4db7 += _0x1ebfb9.join(', ');
            _0x5d4db7 += ' = ';
          }
          if (_0x39b77e) {
            _0x5d4db7 += 'await ';
          }
          if (_0x5be30a) {
            if (_0x5be30a.isStaticMethod && _0x5be30a.className !== undefined) {
              _0x5d4db7 += _0x5be30a.className + '.' + _0x4770a3;
            } else {
              if ((_0x5be30a.isClassMethod || _0x5be30a.isBoundToClass) && _0x410e32.length >= 1) {
                const _0x5b096d = _0x410e32.shift();
                _0x5d4db7 += _0x5b096d + '.' + _0x4770a3;
              } else {
                _0x5d4db7 += _0x4770a3;
              }
            }
          } else {
            _0x5d4db7 += _0x4770a3;
          }
          _0x5d4db7 += '(';
          _0x5d4db7 += _0x410e32.join(', ');
          _0x5d4db7 += ')';
          const _0x5ab4d6 = new _0x5de7d1.ReturnFinder();
          const _0x1aa4bb = _0x2c0a75.some(_0x3a469e => _0x3a469e && _0x5ab4d6.checkContainsReturn(_0x3a469e));
          if (_0x1aa4bb) {
            _0x5d4db7 = `return ${_0x5d4db7}`;
          }
          return _0x5d4db7;
        }
        static _buildFunctionDefinition(_0xa5fe4, _0x1a0aa9, _0x31e57d, _0x315fe7, _0x134465, _0x155fcc) {
          let _0x586ff2;
          if (_0x315fe7) {
            if (_0x315fe7.isStaticMethod) {
              _0x586ff2 = '@staticmethod';
            } else {
              if (_0x315fe7.isClassMethod) {
                _0x586ff2 = '@classmethod';
              }
            }
          }
          const _0x2f936d = ' '.repeat(_0x134465);
          let _0xd76a4c = '';
          if (_0x586ff2) {
            _0xd76a4c += `${_0x2f936d}${_0x586ff2}
`;
          }
          const _0x5244bb = _0x155fcc ? 'async ' : '';
          _0xd76a4c += `${_0x2f936d}${_0x5244bb}def ${_0xa5fe4}`;
          if (_0x1a0aa9.length > 0) {
            _0xd76a4c += `(${_0x1a0aa9}):
`;
          } else {
            _0xd76a4c += '():\n';
          }
          _0xd76a4c += _0x31e57d.join('\n');
          return _0xd76a4c.trimEnd();
        }
        static _findNodesInRange(_0x4cc023, _0x4dcceb) {
          if (_0x4cc023.start > _0x100520.TextRange.getEnd(_0x4dcceb) || _0x100520.TextRange.getEnd(_0x4cc023) < _0x4dcceb.start) {
            return [];
          }
          const _0x4fbf73 = [];
          const _0x252611 = new _0x1cc5f5.ParseTreeWalker();
          const _0x194977 = _0x252611.visitNode(_0x4cc023);
          const _0xe62756 = _0x4cc023.start >= _0x4dcceb.start && _0x100520.TextRange.getEnd(_0x4cc023) <= _0x100520.TextRange.getEnd(_0x4dcceb);
          if (_0xe62756) {
            _0x4fbf73.push(_0x4cc023);
            if (_0x194977.length === 0 || _0x264f88.isExpressionNode(_0x4cc023) || _0x4cc023.nodeType === 47 || _0x4cc023.nodeType === 1) {
              return _0x4fbf73;
            }
          }
          for (const _0x39f584 of _0x194977) {
            if (_0x39f584) {
              const _0x28fcb4 = this._findNodesInRange(_0x39f584, _0x4dcceb);
              _0x28fcb4.forEach(_0x198fc3 => {
                _0x4fbf73.push(_0x198fc3);
              });
            }
          }
          return _0x4fbf73;
        }
        static _convertNodesToString(_0x37740e, _0x12c234, _0x2d2165, _0x38f647) {
          const _0x588d92 = [];
          let _0xfa0e9 = _0x2d2165;
          let _0x12eee2 = _0x100520.TextRange.getEnd(_0xfa0e9);
          let _0x5c245b = _0x2adfb7.convertTextRangeToRange(_0xfa0e9, _0x12c234.tokenizerOutput.lines);
          let _0x21073d = _0x5c245b.end;
          const _0x5a0980 = _0x2adfb7.convertOffsetToPosition(_0x2d2165.start, _0x12c234.tokenizerOutput.lines).character;
          _0x37740e.reverse().forEach(_0xcdc373 => {
            if (!_0xcdc373) {
              return;
            }
            _0xfa0e9 = _0xcdc373;
            if (!_0x100520.TextRange.contains(_0x2d2165, _0xcdc373.start)) {
              _0xfa0e9 = _0x2d2165;
            }
            _0x5c245b = _0x2adfb7.convertTextRangeToRange(_0xfa0e9, _0x12c234.tokenizerOutput.lines);
            let _0x28b2a0 = _0xcdc373.length;
            const _0x8c56e4 = _0xfa0e9.start;
            if (_0x8c56e4 + _0x28b2a0 > _0x12eee2) {
              _0x28b2a0 = _0x12eee2 - _0x8c56e4;
            }
            const _0x2f68dc = _0x12c234.text.substr(_0x8c56e4, _0x28b2a0);
            const _0xfb003d = _0x316815.formatCode(_0x2f68dc);
            const _0x50c028 = _0x100520.TextRange.getEnd(_0xcdc373);
            _0x1e8981(_0x50c028, _0x12eee2, _0x12c234, _0x588d92, _0xfb003d);
            if (_0x5c245b.start.line !== _0x21073d.line) {
              const _0x4cf223 = _0x12c234.tokenizerOutput.tokens.getItemAtPosition(_0x12eee2);
              const _0x400c3e = _0x12c234.tokenizerOutput.tokens.getItemAt(_0x4cf223);
              if (_0x400c3e.type === 10 && _0x5c245b.end.line === _0x21073d.line) {
                const _0x2711a9 = _0x588d92.pop();
                const _0x4ab63c = (_0xfb003d.pop() ?? '') + _0x2711a9;
                _0xfb003d.push(_0x4ab63c);
              } else {
                _0x3f9d12(_0x21073d.line, _0x12c234, _0x5a0980, _0x588d92, _0x38f647);
              }
              _0x588d92.push(..._0xfb003d.reverse());
            } else {
              if (_0x588d92.length === 0) {
                _0x588d92.push(..._0xfb003d.reverse());
              } else {
                const _0x3feaa8 = _0xfb003d.join('') + (_0x588d92.pop() ?? '');
                _0x588d92.push(_0x3feaa8);
              }
            }
            _0x12eee2 = _0x8c56e4;
            _0x21073d = _0x5c245b.start;
          });
          _0x3f9d12(_0x21073d.line, _0x12c234, _0x5a0980, _0x588d92, _0x38f647);
          return _0x588d92.reverse();
        }
        static _findSignatureSymbols(_0x3289ab, _0x756381, _0x3131b4, _0x53db82, _0x34da47) {
          if (_0x3131b4 === undefined || _0x3289ab === undefined) {
            return [];
          }
          const _0x39b6b1 = new Map();
          _0x756381.forEach((_0xff83a9, _0xec7ed) => {
            _0xff83a9.locations.forEach(_0x30ff0e => {
              if (_0x39b6b1.has(_0xec7ed)) {
                return;
              }
              if (_0x34da47.isCancellationRequested) {
                return;
              }
              const _0x498564 = _0x2adfb7.convertRangeToTextRange(_0x30ff0e.range, _0x53db82.tokenizerOutput.lines);
              const _0x8cb7e7 = _0xff83a9.declarations.find(_0x1dfe48 => _0x498564.start === _0x1dfe48.node.start);
              if (_0x8cb7e7) {
                return;
              }
              const _0xa16845 = _0x3289ab === null || _0x3289ab === undefined ? undefined : _0x3289ab.lookUpSymbol(_0xec7ed);
              if (_0xa16845 === null || _0xa16845 === undefined ? undefined : _0xa16845.getDeclarations().find(_0x25de86 => _0xff83a9.declarations.find(_0x116343 => _0x116343.node.start === _0x25de86.node.start && _0x568c0f(_0x25de86.node)) !== undefined)) {
                return;
              }
              const _0x25b2cd = _0x100520.TextRange.contains(_0x3131b4, _0x498564.start);
              if (_0x25b2cd) {
                const _0x444ab1 = _0xff83a9.declarations.some((_0x2a4786, _0x574789) => _0x100520.TextRange.contains(_0x3131b4, _0x2a4786.node.start) && _0x36ef26(_0x2a4786, _0x498564.start, _0x53db82));
                if (!_0x444ab1) {
                  const _0x3ee7f1 = _0xff83a9.declarations.some((_0x3774d0, _0x460e10) => _0x36ef26(_0x3774d0, _0x3131b4.start, _0x53db82) && _0x36ef26(_0x3774d0, _0x100520.TextRange.getEnd(_0x3131b4), _0x53db82));
                  if (_0x3ee7f1) {
                    _0x39b6b1.set(_0xec7ed, _0xec7ed);
                  }
                }
              }
            });
          });
          return Array.from(_0x39b6b1.keys());
        }
        static _findOutputSymbols(_0x262a3a, _0x1fc42b, _0x509e57, _0x44a912) {
          const _0x20e9f8 = _0x27da75(_0x262a3a, _0x44a912, _0x1fc42b);
          const _0x5e2709 = _0x2adfb7.convertOffsetToPosition(_0x100520.TextRange.getEnd(_0x1fc42b), _0x509e57.tokenizerOutput.lines);
          const _0x2c8678 = new Map();
          _0x262a3a.forEach((_0x293d04, _0x1eb9b3) => {
            if (!_0x20e9f8.has(_0x1eb9b3)) {
              return;
            }
            const _0x5e4452 = _0x293d04.locations.filter(_0x5966b1 => _0x100520.comparePositions(_0x5966b1.range.start, _0x5e2709) > 0);
            const _0x438da5 = _0x293d04.declarations.filter(_0x1420d5 => _0x1420d5.node.start > _0x100520.TextRange.getEnd(_0x1fc42b));
            _0x5e4452.forEach(_0x333b37 => {
              if (_0x44a912.isCancellationRequested) {
                return;
              }
              if (_0x2c8678.has(_0x1eb9b3)) {
                return;
              }
              const _0xde428c = _0x2adfb7.convertRangeToTextRange(_0x333b37.range, _0x509e57.tokenizerOutput.lines);
              if (_0xde428c === undefined) {
                return;
              }
              const _0x444397 = _0x438da5.find(_0x3e0c3f => _0xde428c.start === _0x3e0c3f.node.start);
              if (_0x444397) {
                return;
              }
              const _0x546d17 = _0x438da5.some(_0x469b06 => _0x36ef26(_0x469b06, _0xde428c.start, _0x509e57));
              if (!_0x546d17) {
                _0x2c8678.set(_0x1eb9b3, _0x1eb9b3);
              }
            });
          });
          return Array.from(_0x2c8678.keys());
        }
        static _selectionInsideComment(_0x131cbb, _0x3d42cf) {
          let _0x176bc6 = false;
          if (_0x3d42cf.start <= 0) {
            return _0x176bc6;
          }
          let _0x4a8c4f = _0x131cbb.tokenizerOutput.tokens.getItemAtPosition(_0x3d42cf.start);
          let _0x275a7d = _0x131cbb.tokenizerOutput.tokens.getItemAt(_0x4a8c4f);
          if (_0x275a7d.type === 5 && _0x275a7d.start < _0x3d42cf.start) {
            _0x176bc6 = true;
          }
          if (_0x275a7d.start < _0x3d42cf.start && _0x4a8c4f < _0x131cbb.tokenizerOutput.tokens.length - 1) {
            _0x4a8c4f += 1;
            _0x275a7d = _0x131cbb.tokenizerOutput.tokens.getItemAt(_0x4a8c4f);
            if (_0x275a7d.comments && _0x275a7d.comments.length > 0 && _0x275a7d.comments[0].start < _0x3d42cf.start) {
              _0x176bc6 = true;
            }
          }
          return _0x176bc6;
        }
        static _isValidExtractionNode(_0x2d7217) {
          return _0x2d7217.nodeType !== 14 || _0x2d7217.d.constType === 26 || _0x2d7217.d.constType === 33 || _0x2d7217.d.constType === 15;
        }
        static _expressionNodesToString(_0x37a615, _0x59823c, _0x12259c) {
          return this._convertNodesToString(_0x37a615, _0x59823c, _0x12259c, 0).join('\n').trimStart();
        }
      }
      exports.ExtractMethodProvider = _0x565dbc;
      function _0x5eec1f(_0x93ee26, _0x262ad9) {
        if (_0x93ee26 && _0x93ee26.bodyNodes?.length === 1 && (_0x93ee26 === null || _0x93ee26 === undefined ? undefined : _0x93ee26.bodyNodes[0])?.nodeType === 9) {
          const _0xefb330 = _0x93ee26 === null || _0x93ee26 === undefined ? undefined : _0x93ee26.bodyNodes[0];
          const _0x4dd193 = _0x262ad9.getType(_0xefb330.d.leftExpr);
          if (_0x4dd193 && _0x34f5e4.isFunction(_0x4dd193)) {
            const _0x5a293b = _0x4dd193.shared.declaredReturnType ?? _0x262ad9.getInferredReturnType(_0x4dd193);
            if (_0x36fc69.isNoneInstance(_0x5a293b)) {
              return true;
            }
          } else {
            if (_0x4dd193 && _0x34f5e4.isOverloaded(_0x4dd193)) {
              const _0x1a6621 = _0x5279e8(_0x4dd193, _0x262ad9).every(_0x1a17dd => _0x36fc69.isNoneInstance(_0x1a17dd));
              return _0x1a6621;
            }
          }
        }
        return false;
      }
      function _0x5279e8(_0x42d0ff, _0xd8306c) {
        const _0x4077c0 = [];
        _0x34f5e4.OverloadedType.getOverloads(_0x42d0ff).forEach(_0x60f44f => {
          const _0x14a499 = _0x60f44f.shared.declaredReturnType ?? _0xd8306c.getInferredReturnType(_0x60f44f);
          _0x4077c0.push(_0x14a499);
        });
        const _0x23f438 = _0x34f5e4.OverloadedType.getImplementation(_0x42d0ff);
        if (_0x23f438 && _0x34f5e4.isFunction(_0x23f438)) {
          _0x4077c0.push(_0x23f438.shared.declaredReturnType ?? _0xd8306c.getInferredReturnType(_0x23f438));
        }
        return _0x4077c0;
      }
      function _0x30943e(_0x35ad65, _0x104944, _0x24fa5a) {
        const _0x56d9ff = _0x104944 - _0x35ad65;
        if (_0x56d9ff > 0) {
          const _0x198753 = _0x24fa5a.text.substr(_0x35ad65, _0x56d9ff);
          const _0x103c54 = _0x316815.splitCodeLines(_0x198753);
          return _0x103c54;
        }
        return [];
      }
      function _0x568c0f(_0x10855f) {
        const _0x5f2b67 = [37, 23, 24, 25, 26];
        return _0x5f2b67.find(_0x22942c => _0x22942c === _0x10855f.nodeType) !== undefined || _0x3199a9(_0x10855f, _0x5f2b67) !== undefined;
      }
      function _0x45b63e(_0x91aaf5, _0xe114b5) {
        const _0x9b5f48 = _0x328b5a.findNodeByOffset(_0x91aaf5.parserOutput.parseTree, _0xe114b5.start);
        if (_0x9b5f48 === undefined) {
          return;
        }
        const _0x4cf19e = _0x100520.TextRange.getEnd(_0xe114b5);
        let _0x303096 = _0x328b5a.findNodeByOffset(_0x91aaf5.parserOutput.parseTree, _0x4cf19e);
        if (_0x303096 === undefined) {
          return;
        }
        if (_0x9b5f48.start > _0x303096.start) {
          const _0x146816 = _0x91aaf5.tokenizerOutput.tokens.getItemAtPosition(_0xe114b5.start + _0xe114b5.length);
          let _0x5d068e = _0x91aaf5.tokenizerOutput.tokens.getItemAt(_0x146816);
          if (_0x5d068e.type === 2 && _0x146816 > 0) {
            _0x5d068e = _0x91aaf5.tokenizerOutput.tokens.getItemAt(_0x146816 - 1);
            _0x303096 = _0x328b5a.findNodeByOffset(_0x91aaf5.parserOutput.parseTree, _0x5d068e.start);
            if (_0x303096 === undefined) {
              return;
            }
          }
        }
        const _0xe89fc8 = _0x3951ca(_0x9b5f48, _0x303096, _0xe114b5);
        return _0xe89fc8;
      }
      function _0x5c5779(_0x4357cd, _0x1855d7) {
        const _0x13ce95 = new Set(_0x576f61.getAncestorsIncludingSelf(_0x4357cd));
        return _0x576f61.getFirstAncestorOrSelf(_0x1855d7, _0x365733 => _0x13ce95.has(_0x365733));
      }
      function _0x3951ca(_0x5d118a, _0x23a8be, _0x3d9466) {
        const _0x27a38b = _0x29d7ea(_0x5d118a, _0x3d9466);
        const _0x12fa29 = _0x29d7ea(_0x23a8be, _0x3d9466);
        if (_0x27a38b === _0x12fa29) {
          return _0x27a38b;
        }
        return undefined;
      }
      function _0x29d7ea(_0x3cdbe4, _0x5bad21) {
        let _0x2d5a6a = _0x3cdbe4;
        while (_0x2d5a6a && _0x100520.TextRange.getEnd(_0x2d5a6a) <= _0x100520.TextRange.getEnd(_0x5bad21) && _0x2d5a6a.start >= _0x5bad21.start) {
          if (_0x2d5a6a.parent === undefined || _0x2d5a6a.parent.nodeType === 31) {
            break;
          }
          if (_0x2d5a6a.nodeType === 47 || _0x504b8e(_0x5bad21, _0x2d5a6a)) {
            _0x2d5a6a = _0x2d5a6a.parent;
          } else {
            break;
          }
        }
        return _0x2d5a6a;
      }
      function _0x36ef26(_0x1cde1b, _0x37e34d, _0x37bc7e) {
        const _0x15d520 = _0x2adfb7.convertOffsetToPosition(_0x1cde1b.node.start, _0x37bc7e.tokenizerOutput.lines);
        const _0x51aaaf = _0x2adfb7.convertOffsetToPosition(_0x37e34d, _0x37bc7e.tokenizerOutput.lines);
        let _0x23da92 = _0x15d520.line < _0x51aaaf.line;
        if (_0x15d520.line === _0x51aaaf.line) {
          _0x23da92 = _0x15d520.character > _0x51aaaf.character;
        }
        return _0x23da92;
      }
      function _0x27da75(_0x32ab98, _0x4340fa, _0x50f1a7) {
        const _0x139dab = new Map();
        _0x32ab98.forEach((_0x8a9bff, _0x504966) => {
          _0x8a9bff.declarations.forEach((_0x19f494, _0x3082eb) => {
            if (_0x139dab.has(_0x504966)) {
              return;
            }
            if (_0x4340fa.isCancellationRequested) {
              return;
            }
            const _0x42eb56 = _0x100520.TextRange.contains(_0x50f1a7, _0x19f494.node.start);
            if (_0x42eb56) {
              _0x139dab.set(_0x504966, _0x504966);
            }
          });
        });
        return _0x139dab;
      }
      function _0x2e833c(_0x2f104f, _0x564775) {
        let _0x54b8d4 = _0x2f104f.start;
        while (_0x54b8d4 < _0x564775.length) {
          const _0x2c79c6 = _0x564775.substr(_0x54b8d4, 1);
          if (_0x2c79c6 !== ' ' && _0x2c79c6 !== '\n' && _0x2c79c6 !== '\r') {
            break;
          }
          _0x54b8d4++;
        }
        const _0x268355 = _0x54b8d4;
        _0x54b8d4 = _0x100520.TextRange.getEnd(_0x2f104f);
        while (_0x54b8d4 > _0x268355) {
          const _0x2db301 = _0x564775.substr(_0x54b8d4 - 1, 1);
          if (_0x2db301 !== ' ' && _0x2db301 !== '\n' && _0x2db301 !== '\r') {
            break;
          }
          _0x54b8d4--;
        }
        return _0x100520.TextRange.fromBounds(_0x268355, _0x54b8d4);
      }
      function _0x504b8e(_0x5bcb72, _0x36a5a6) {
        return _0x5bcb72.start <= _0x36a5a6.start && _0x100520.TextRange.getEnd(_0x36a5a6) <= _0x100520.TextRange.getEnd(_0x5bcb72);
      }
      function _0x152693(_0x268645, _0x50d864) {
        let _0x6d869d = _0x268645;
        let _0x1fc70f = 1;
        const _0x146511 = _0x50d864.nodeType === 36 ? _0x50d864 : _0x328b5a.getEnclosingClassOrModule(_0x50d864);
        if (_0x146511 !== undefined) {
          const _0x4b564e = _0x170f1e.getScope(_0x146511);
          while ((_0x4b564e === null || _0x4b564e === undefined ? undefined : _0x4b564e.lookUpSymbol(_0x6d869d)) !== undefined) {
            _0x6d869d = _0x268645 + _0x1fc70f++;
          }
        }
        return _0x6d869d;
      }
      function _0x315526(_0x30f9e6, _0x2d2cde) {
        let _0x5d02d7 = _0x30f9e6;
        let _0x3c5b74 = 1;
        if (_0x2d2cde !== undefined) {
          const _0x569f41 = _0x170f1e.getScope(_0x2d2cde);
          while ((_0x569f41 === null || _0x569f41 === undefined ? undefined : _0x569f41.lookUpSymbol(_0x5d02d7)) !== undefined) {
            _0x5d02d7 = _0x30f9e6 + _0x3c5b74++;
          }
        }
        return _0x5d02d7;
      }
      class _0x7d42c3 extends _0x1cc5f5.ParseTreeWalker {
        constructor(_0x41f6af) {
          super();
          this._selectionRange = _0x41f6af;
          this.hasNonEnclosedContinue = false;
          this.hasNonEnclosedBreak = false;
          this._loopTypes = [57, 29];
        }
        check(_0x4b4d72) {
          this.walk(_0x4b4d72);
        }
        visitContinue(_0x1626fc) {
          if (_0x504b8e(this._selectionRange, _0x1626fc)) {
            this.hasNonEnclosedContinue = !_0x22b3f2(_0x1626fc, this._loopTypes, this._selectionRange);
          }
          return false;
        }
        visitBreak(_0x2d9bb2) {
          if (_0x504b8e(this._selectionRange, _0x2d9bb2)) {
            this.hasNonEnclosedBreak = !_0x22b3f2(_0x2d9bb2, this._loopTypes, this._selectionRange);
          }
          return false;
        }
      }
      function _0x22b3f2(_0x1cef6c, _0x3863c5, _0x42f3e0) {
        let _0x2aa2a1 = _0x1cef6c;
        while (_0x2aa2a1 !== undefined && _0x42f3e0 && _0x504b8e(_0x42f3e0, _0x2aa2a1)) {
          if (_0x3863c5.some(_0x16214e => _0x16214e === _0x2aa2a1.nodeType)) {
            return _0x2aa2a1;
          }
          _0x2aa2a1 = _0x2aa2a1.parent;
        }
        return undefined;
      }
      function _0x3199a9(_0x44d42d, _0x522c6a) {
        let _0xfeaa2e = _0x44d42d;
        while (_0xfeaa2e !== undefined) {
          if (_0x522c6a.some(_0x4b3555 => _0x4b3555 === _0xfeaa2e.nodeType)) {
            return _0xfeaa2e;
          }
          _0xfeaa2e = _0xfeaa2e.parent;
        }
        return undefined;
      }
      class _0x3c07a6 extends _0x1cc5f5.ParseTreeWalker {
        constructor() {
          super(...arguments);
          this._containsAwait = false;
        }
        containsAwait(_0x41fe51) {
          return _0x41fe51.some(_0x355670 => _0x355670 && this._nodeContainsAwait(_0x355670));
        }
        visitAwait(_0x5e8997) {
          this._containsAwait = true;
          return false;
        }
        _nodeContainsAwait(_0x13fb9b) {
          this.walk(_0x13fb9b);
          return this._containsAwait;
        }
      }
      function _0x3f9d12(_0x1e3f96, _0x521869, _0x34e9cc, _0x452541, _0x1298c4) {
        const _0x1b4358 = _0x521869.tokenizerOutput.lines.getItemAt(_0x1e3f96);
        const _0x1bf0ea = _0x521869.text.substr(_0x1b4358.start, _0x1b4358.length);
        const _0x4ae604 = _0x1bf0ea.indexOf(_0x1bf0ea.trimStart());
        if (_0x4ae604 >= _0x34e9cc && _0x452541.length > 0) {
          const _0x1e3c27 = _0x4ae604 - _0x34e9cc + 4 + _0x1298c4;
          let _0x19af73 = _0x452541[_0x452541.length - 1];
          _0x19af73 = !_0x19af73 ? _0x19af73 : _0x19af73.trimStart();
          _0x452541[_0x452541.length - 1] = ' '.repeat(_0x1e3c27) + _0x19af73;
        }
      }
      function _0x1e8981(_0x216bd9, _0x94ae60, _0x58c68e, _0x32b124, _0x1b69f2) {
        const _0x4aee72 = _0x30943e(_0x216bd9, _0x94ae60, _0x58c68e);
        if (_0x4aee72.length > 1) {
          const _0x3513cc = _0x1b69f2.pop() + _0x4aee72[0];
          _0x1b69f2.push(_0x3513cc);
          _0x4aee72.slice(1, -1).forEach(_0x1df8d5 => {
            _0x1b69f2.push(_0x1df8d5);
          });
          const _0x1fb89b = _0x4aee72.slice(-1);
          const _0x3b0533 = _0x1fb89b + (_0x32b124.pop() ?? '');
          _0x32b124.push(_0x3b0533);
        } else {
          const _0x2e0572 = _0x4aee72.join('') + (_0x32b124.pop() ?? '');
          _0x32b124.push(_0x2e0572);
        }
      }
    },
    83244: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncRenameFileProvider = exports.RenameFileProvider = undefined;
      const _0x59fbef = require(56911);
      const _0x52ff4d = require(75130);
      const _0x32dc09 = require(3113);
      const _0xb0572f = require(12522);
      const _0x2cd5bd = require(27113);
      const _0x2e0149 = require(5884);
      const _0x5171d5 = require(74382);
      const _0x36f07c = require(69482);
      const _0x5bd7f1 = require(15986);
      const _0x188d6d = require(42580);
      class _0x1f8814 {
        static setMatrix(_0x39603d, _0x1af797, _0x4d817b) {
          _0x4d817b.addCustomProperty('type', _0x39603d, '');
          if (_0x1af797?.documentChanges) {
            _0x4d817b.addCustomMeasure('affectedFilesCount', _0x1af797.documentChanges.length, undefined, '');
          }
          if (_0x39603d === 'file') {
            _0x4d817b.addCustomProperty('fileRenamed', _0x1af797?.changeAnnotations?.fileRename ? 'true' : 'false', '');
          }
        }
        executeDirectoryRename(_0x555ff1, _0x3a8f5e, _0x26bcb4, _0x1065fc, _0x190bd1) {
          if (_0x26bcb4 !== _0x1065fc || !_0x1065fc.rootUri) {
            return null;
          }
          if (_0x2e0149.getDirectoryChangeKind(_0x26bcb4.service.fs, _0x555ff1, _0x3a8f5e) !== 'Renamed') {
            return null;
          }
          return _0x1065fc.service.run(_0x397fd0 => {
            const _0x1e054e = new _0x188d6d.ModuleRenamer(_0x397fd0, _0x555ff1, _0x3a8f5e, _0x190bd1).renameModule();
            if (!_0x1e054e) {
              return null;
            }
            const _0x5873a8 = this._getNameRelativeToRoot(_0x26bcb4.rootUri, _0x555ff1);
            const _0x51d60e = this._getNameRelativeToRoot(_0x1065fc.rootUri, _0x3a8f5e);
            return this._constructWorkspaceEdits(_0x397fd0.fileSystem, _0x5873a8, _0x51d60e, _0x1e054e);
          }, _0x190bd1);
        }
        executeFileRename(_0xc22238, _0x5e0968, _0x1462ea, _0x577b62, _0x56f179) {
          if (_0xc22238.lastExtension !== _0x5e0968.lastExtension) {
            return null;
          }
          if (!_0x52ff4d.supportedFileExtensions.some(_0x5630d1 => _0x5e0968.hasExtension(_0x5630d1))) {
            return null;
          }
          if (_0x1462ea !== _0x577b62 || !_0x577b62.rootUri) {
            return null;
          }
          const _0x2d77e3 = _0x577b62.service;
          const _0x56571f = _0xb0572f.matchFileSpecs(_0x2d77e3.getConfigOptions(), _0xc22238);
          const _0x2746c5 = _0xb0572f.matchFileSpecs(_0x2d77e3.getConfigOptions(), _0x5e0968);
          if (_0x56571f !== _0x2746c5 || !_0x2746c5) {
            return null;
          }
          if (_0x5e0968.hasExtension('.py') && !this._getStubAndFilePairInfo(_0x2d77e3, _0x5e0968)) {
            return null;
          }
          const _0x3e2e21 = this._getStubAndFilePairInfo(_0x2d77e3, _0xc22238);
          const _0x41c3a3 = _0x3e2e21?.stubFile ?? _0x3e2e21?.pythonFile;
          if (!_0x41c3a3) {
            return null;
          }
          if (_0x3e2e21.stubFile && _0x3e2e21.pythonFile) {
            const _0xa0f9d8 = _0x5e0968.replaceExtension('.py');
            if (_0x1462ea.service.fs.existsSync(_0xa0f9d8)) {
              return null;
            }
          }
          return _0x577b62.service.run(_0x498426 => {
            var _0xcf357b;
            const _0x292f34 = new _0x188d6d.ModuleRenamer(_0x498426, _0xc22238, _0x5e0968, _0x56f179);
            const _0x251ba3 = _0x292f34.renameModule();
            if (!_0x251ba3) {
              return null;
            }
            const _0x5e4fe2 = this._getNameRelativeToRoot(_0x1462ea.rootUri, _0xc22238);
            const _0x54c64d = this._getNameRelativeToRoot(_0x577b62.rootUri, _0x5e0968);
            const _0x2a1f9e = this._constructWorkspaceEdits(_0x498426.fileSystem, _0x5e4fe2, _0x54c64d, _0x251ba3);
            if (_0x3e2e21.stubFile && _0x3e2e21.pythonFile) {
              _0x2a1f9e.changeAnnotations.fileRename = {
                label: _0x5bd7f1.Localizer.Refactoring.moveFileLabel().format({
                  oldModuleName: _0x5e4fe2,
                  newModuleName: _0x54c64d
                }),
                description: _0x5bd7f1.Localizer.Refactoring.moveFileDescription().format({
                  oldModuleName: _0x5e4fe2,
                  newModuleName: _0x54c64d
                }),
                needsConfirmation: false
              };
              if ((_0xcf357b = _0x2a1f9e.documentChanges) === null || _0xcf357b === undefined) {
                undefined;
              } else {
                _0xcf357b.push(_0x59fbef.RenameFile.create(_0x2e0149.convertUriToLspUriString(_0x1462ea.service.fs, _0x3e2e21.pythonFile), _0x2e0149.convertUriToLspUriString(_0x1462ea.service.fs, _0x5e0968.replaceExtension('.py')), {
                  ignoreIfExists: true
                }, 'fileRename'));
              }
            }
            return _0x2a1f9e;
          }, _0x56f179);
        }
        _getNameRelativeToRoot(_0x2db67e, _0x2f91ee) {
          var _0x2457df;
          if ((_0x2457df = _0x2db67e.getRelativePathComponents(_0x2f91ee).join('/')) !== null && _0x2457df !== undefined) {
            return _0x2457df;
          } else {
            return '';
          }
        }
        _constructWorkspaceEdits(_0x3a5ed4, _0x5a14ad, _0x5aae8b, _0x2e5399) {
          const _0xd1e4c5 = {
            oldModuleName: _0x5a14ad,
            newModuleName: _0x5aae8b
          };
          const _0x177a64 = {
            label: _0x5bd7f1.Localizer.Refactoring.moveFileLabel().format(_0xd1e4c5),
            description: _0x5bd7f1.Localizer.Refactoring.moveFileDescription().format(_0xd1e4c5),
            needsConfirmation: false
          };
          return _0x5171d5.convertToWorkspaceEdit(_0x3a5ed4, _0x2e5399, {
            textEdit: _0x177a64
          }, 'textEdit');
        }
        _getStubAndFilePairInfo(_0x2998d9, _0x579327) {
          const _0x4cfea2 = _0x2998d9.getConfigOptions().findExecEnvironment(_0x579327);
          if (!_0x4cfea2.root) {
            return undefined;
          }
          const _0x394bef = _0x2998d9.getImportResolver().getModuleNameForImport(_0x579327, _0x4cfea2);
          if (!_0x394bef.moduleName) {
            return undefined;
          }
          const _0x25d13b = _0x32dc09.isStubFile(_0x579327) ? _0x579327 : undefined;
          const _0x435d30 = _0x25d13b ? undefined : _0x579327;
          const _0x109f9e = _0x2998d9.getImportResolver().resolveImport(_0x579327, _0x4cfea2, _0x52ff4d.createImportedModuleDescriptor(_0x394bef.moduleName));
          if (!_0x109f9e.isImportFound) {
            return {
              stubFile: _0x25d13b,
              pythonFile: _0x435d30
            };
          }
          const _0x379f66 = _0x109f9e.resolvedUris[_0x109f9e.resolvedUris.length - 1];
          if (!_0x379f66.startsWith(_0x4cfea2.root)) {
            return {
              stubFile: _0x25d13b,
              pythonFile: _0x435d30
            };
          }
          if (_0x579327.equals(_0x379f66)) {
            if (_0x25d13b) {
              if (_0x109f9e.nonStubImportResult?.isImportFound) {
                const _0x5cebd1 = _0x109f9e.nonStubImportResult.resolvedUris[_0x109f9e.nonStubImportResult.resolvedUris.length - 1];
                return {
                  stubFile: _0x25d13b,
                  pythonFile: _0x5cebd1
                };
              }
              return {
                stubFile: _0x25d13b,
                pythonFile: _0x435d30
              };
            }
            if (_0x435d30) {
              return {
                stubFile: _0x25d13b,
                pythonFile: _0x435d30
              };
            }
          }
          if (_0x25d13b && _0x109f9e.isStubFile || _0x435d30 && !_0x109f9e.isStubFile) {
            return undefined;
          }
          if (_0x435d30 && _0x109f9e.isStubFile) {
            return undefined;
          }
          return {
            stubFile: _0x25d13b,
            pythonFile: _0x379f66
          };
        }
      }
      class _0x10b9d9 extends _0x1f8814 {
        constructor(_0x1fbfb6) {
          super();
          this._ls = _0x1fbfb6;
        }
        static async renameFiles(_0x37fc44, _0x589d73, _0x4fe91d, _0xc9e48d) {
          return _0x36f07c.trackPerf(_0x589d73, _0x36f07c.TelemetryEventName.RENAME_FILES, async _0x4824fd => {
            const _0xfe01b2 = new _0x10b9d9(_0x37fc44);
            const _0x20d6a4 = await _0xfe01b2._renameFiles(_0x4fe91d, _0xc9e48d);
            this.setMatrix(_0x20d6a4.renameType, _0x20d6a4.edits, _0x4824fd);
            if ((_0x20d6a4.edits?.documentChanges?.length ?? 0) > 0) {
              return _0x20d6a4.edits;
            } else {
              return null;
            }
          }, 0);
        }
        async _renameFiles(_0x4ac7ed, _0x3e33d0) {
          let _0x143c1b = 'unknown';
          let _0x305563 = null;
          if (_0x4ac7ed.files.length !== 1) {
            return {
              renameType: _0x143c1b,
              edits: _0x305563
            };
          }
          if (!this._ls.supportAdvancedEdits) {
            return {
              renameType: _0x143c1b,
              edits: _0x305563
            };
          }
          const _0x26f471 = _0x4ac7ed.files[0];
          const _0x933b1 = _0x2cd5bd.Uri.parse(_0x26f471.oldUri, this._ls.serviceProvider);
          const _0x3e342a = _0x2cd5bd.Uri.parse(_0x26f471.newUri, this._ls.serviceProvider);
          if (_0x933b1.equals(_0x3e342a)) {
            return {
              renameType: _0x143c1b,
              edits: _0x305563
            };
          }
          const _0x7a1214 = await this._ls.getWorkspaceForFile(_0x933b1);
          const _0x2f6ed3 = await this._ls.getWorkspaceForFile(_0x3e342a);
          if (_0x2e0149.isFile(_0x7a1214.service.fs, _0x933b1)) {
            _0x143c1b = 'file';
            _0x305563 = this.executeFileRename(_0x933b1, _0x3e342a, _0x7a1214, _0x2f6ed3, _0x3e33d0);
          } else {
            if (_0x2e0149.isDirectory(_0x7a1214.service.fs, _0x933b1)) {
              _0x143c1b = 'folder';
              _0x305563 = this.executeDirectoryRename(_0x933b1, _0x3e342a, _0x7a1214, _0x2f6ed3, _0x3e33d0);
            }
          }
          return {
            renameType: _0x143c1b,
            edits: _0x305563
          };
        }
      }
      exports.RenameFileProvider = _0x10b9d9;
      class _0x5de1f1 extends _0x1f8814 {
        constructor(_0x4fb89a) {
          super();
          this._ls = _0x4fb89a;
        }
        static async renameFiles(_0x55b944, _0xd41886, _0x4f2e99, _0x433d2a) {
          return _0x36f07c.trackPerf(_0xd41886, _0x36f07c.TelemetryEventName.RENAME_FILES, _0x3582d4 => {
            const _0x134f6f = new _0x5de1f1(_0x55b944);
            const _0x1c55f2 = _0x134f6f._renameFiles(_0x4f2e99, _0x433d2a);
            this.setMatrix(_0x1c55f2.renameType, _0x1c55f2.edits, _0x3582d4);
            if ((_0x1c55f2.edits?.documentChanges?.length ?? 0) > 0) {
              return _0x1c55f2.edits;
            } else {
              return null;
            }
          }, 0);
        }
        _renameFiles(_0x412ecc, _0x301192) {
          let _0x319eb1 = 'unknown';
          let _0x30150b = null;
          if (_0x412ecc.files.length !== 1) {
            return {
              renameType: _0x319eb1,
              edits: _0x30150b
            };
          }
          if (!this._ls.supportAdvancedEdits) {
            return {
              renameType: _0x319eb1,
              edits: _0x30150b
            };
          }
          const _0x415e9e = _0x412ecc.files[0];
          const _0x2f4492 = _0x2cd5bd.Uri.parse(_0x415e9e.oldUri, this._ls.serviceProvider);
          const _0x22e0a5 = _0x2cd5bd.Uri.parse(_0x415e9e.newUri, this._ls.serviceProvider);
          if (_0x2f4492.equals(_0x22e0a5)) {
            return {
              renameType: _0x319eb1,
              edits: _0x30150b
            };
          }
          const _0x1f7685 = this._ls.getWorkspaceForFileSync(_0x2f4492);
          const _0x117ecb = this._ls.getWorkspaceForFileSync(_0x22e0a5);
          if (_0x2e0149.isFile(_0x1f7685.service.fs, _0x2f4492)) {
            _0x319eb1 = 'file';
            _0x30150b = this.executeFileRename(_0x2f4492, _0x22e0a5, _0x1f7685, _0x117ecb, _0x301192);
          } else {
            if (_0x2e0149.isDirectory(_0x1f7685.service.fs, _0x2f4492)) {
              _0x319eb1 = 'folder';
              _0x30150b = this.executeDirectoryRename(_0x2f4492, _0x22e0a5, _0x1f7685, _0x117ecb, _0x301192);
            }
          }
          return {
            renameType: _0x319eb1,
            edits: _0x30150b
          };
        }
      }
      exports.SyncRenameFileProvider = _0x5de1f1;
    },
    78926: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RenameModuleProvider = undefined;
      const _0x5dcc5a = require(3433);
      const _0x389b21 = require(3113);
      const _0x4addf7 = require(91426);
      const _0x3412f6 = require(56507);
      const _0x18324e = require(56814);
      const _0x20b845 = require(74382);
      const _0x14f6ff = require(26005);
      const _0x32cb07 = require(79725);
      const _0x104147 = require(42580);
      class _0x83ff89 {
        constructor(_0x5dc71d, _0xbed16c, _0x222066, _0x19b970) {
          this._program = _0x5dc71d;
          this._fileUri = _0xbed16c;
          this._position = _0x222066;
          this._token = _0x19b970;
          this._parseResults = this._program.getParseResults(this._fileUri);
        }
        canRenameSymbol(_0x12a23d, _0x281728) {
          _0x4addf7.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return null;
          }
          const _0x417abe = this._getReferenceResult(_0x12a23d);
          if (!_0x417abe) {
            return null;
          }
          const _0x273b2d = _0x32cb07.RenameProvider.getRenameSymbolMode(this._program, this._fileUri, _0x417abe, _0x12a23d, _0x281728);
          if (_0x273b2d === 'none') {
            return null;
          }
          return _0x18324e.convertTextRangeToRange(_0x417abe.nodeAtOffset, this._parseResults.tokenizerOutput.lines);
        }
        renameSymbol(_0x190d26, _0x59dba8, _0x4060e4) {
          _0x4addf7.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return null;
          }
          const _0x4aef9c = this._getReferenceResult(_0x59dba8);
          if (!_0x4aef9c) {
            return null;
          }
          const _0x4f152c = _0x104147.ModuleRenamer.getRenameModulePathInfo(_0x104147.ModuleRenamer.getRenameModulePath(_0x4aef9c.declarations), _0x190d26);
          if (!_0x4f152c) {
            return null;
          }
          const _0x4a9793 = new _0x104147.ModuleRenamer(this._program, _0x4f152c.fileUri, _0x4f152c.newFileUri, this._token).renameModule();
          if (!_0x4a9793) {
            return null;
          }
          _0x4a9793.fileOperations.push({
            kind: 'rename',
            oldFileUri: _0x4f152c.fileUri,
            newFileUri: _0x4f152c.newFileUri
          });
          if (_0x389b21.isStubFile(_0x4f152c.fileUri)) {
            const _0x5c3b58 = this._program.importResolver.getSourceFilesFromStub(_0x4f152c.fileUri, this._program.configOptions.findExecEnvironment(this._fileUri), false);
            for (const _0x29379a of _0x5c3b58) {
              const _0x2d049a = _0x104147.ModuleRenamer.getRenameModulePathInfo(_0x29379a, _0x190d26);
              if (_0x2d049a) {
                if (!_0x4a9793.fileOperations.some(_0x1028f8 => _0x1028f8.kind === 'rename' && _0x1028f8.newFileUri.equals(_0x2d049a.newFileUri) && _0x1028f8.oldFileUri.equals(_0x2d049a.fileUri))) {
                  _0x4a9793.fileOperations.push({
                    kind: 'rename',
                    oldFileUri: _0x2d049a.fileUri,
                    newFileUri: _0x2d049a.newFileUri
                  });
                }
              }
            }
          }
          return _0x20b845.convertToWorkspaceEdit(this._program.fileSystem, _0x4a9793);
        }
        _supportRenameModule(_0x54922b, _0x159ff8) {
          return !_0x159ff8 && _0x54922b.every(_0x3ad2e4 => _0x5dcc5a.isUserCode(this._program.getSourceFileInfo(_0x3ad2e4.uri)));
        }
        _getReferenceResult(_0x210823) {
          const _0x34885e = _0x14f6ff.ReferencesProvider.getDeclarationForPosition(this._program, this._fileUri, this._position, undefined, _0x3412f6.ReferenceUseCase.Rename, this._token);
          if (!_0x34885e) {
            return undefined;
          }
          if (!_0x34885e.containsOnlyImportDecls || !this._supportRenameModule(_0x34885e.declarations, _0x210823)) {
            return undefined;
          }
          return _0x34885e;
        }
      }
      exports.RenameModuleProvider = _0x83ff89;
    },
    96285: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SemanticTokenProvider = undefined;
      exports.getSemanticTokens = _0x3c0a82;
      const _0x3567ad = require(56911);
      const _0x397d51 = require(41557);
      const _0x26be11 = require(88744);
      const _0x5b01dd = require(12097);
      const _0x5544b1 = require(21024);
      const _0x189689 = require(92324);
      const _0x5277d0 = require(91426);
      const _0x52ad2d = require(34455);
      const _0x2c9712 = require(48281);
      const _0x336d62 = require(56814);
      const _0x281d77 = require(88754);
      const _0x5bbc1d = require(4250);
      var _0x2a2716;
      (function (_0x1a9de4) {
        _0x1a9de4[_0x1a9de4.comment = 0] = 'comment';
        _0x1a9de4[_0x1a9de4.keyword = 1] = 'keyword';
        _0x1a9de4[_0x1a9de4.operator = 2] = 'operator';
        _0x1a9de4[_0x1a9de4.string = 3] = 'string';
        _0x1a9de4[_0x1a9de4.number = 4] = 'number';
        _0x1a9de4[_0x1a9de4.regexp = 5] = 'regexp';
        _0x1a9de4[_0x1a9de4.type = 6] = 'type';
        _0x1a9de4[_0x1a9de4.class = 7] = 'class';
        _0x1a9de4[_0x1a9de4.interface = 8] = 'interface';
        _0x1a9de4[_0x1a9de4.enum = 9] = 'enum';
        _0x1a9de4[_0x1a9de4.enumMember = 10] = 'enumMember';
        _0x1a9de4[_0x1a9de4.typeParameter = 11] = 'typeParameter';
        _0x1a9de4[_0x1a9de4.function = 12] = 'function';
        _0x1a9de4[_0x1a9de4.method = 13] = 'method';
        _0x1a9de4[_0x1a9de4.property = 14] = 'property';
        _0x1a9de4[_0x1a9de4.variable = 15] = 'variable';
        _0x1a9de4[_0x1a9de4.parameter = 16] = 'parameter';
        _0x1a9de4[_0x1a9de4.module = 17] = 'module';
        _0x1a9de4[_0x1a9de4.intrinsic = 18] = 'intrinsic';
        _0x1a9de4[_0x1a9de4.selfParameter = 19] = 'selfParameter';
        _0x1a9de4[_0x1a9de4.clsParameter = 20] = 'clsParameter';
        _0x1a9de4[_0x1a9de4.magicFunction = 21] = 'magicFunction';
        _0x1a9de4[_0x1a9de4.builtinConstant = 22] = 'builtinConstant';
        _0x1a9de4[_0x1a9de4.parenthesis = 23] = 'parenthesis';
        _0x1a9de4[_0x1a9de4.curlybrace = 24] = 'curlybrace';
        _0x1a9de4[_0x1a9de4.bracket = 25] = 'bracket';
        _0x1a9de4[_0x1a9de4.colon = 26] = 'colon';
        _0x1a9de4[_0x1a9de4.semicolon = 27] = 'semicolon';
        _0x1a9de4[_0x1a9de4.arrow = 28] = 'arrow';
      })(_0x2a2716 ||= {});
      var _0x398aab;
      (function (_0x369cf8) {
        _0x369cf8[_0x369cf8.none = 0] = 'none';
        _0x369cf8[_0x369cf8.declaration = 1] = 'declaration';
        _0x369cf8[_0x369cf8.static = 2] = 'static';
        _0x369cf8[_0x369cf8.abstract = 4] = 'abstract';
        _0x369cf8[_0x369cf8.async = 8] = 'async';
        _0x369cf8[_0x369cf8.documentation = 16] = 'documentation';
        _0x369cf8[_0x369cf8.typeHint = 32] = 'typeHint';
        _0x369cf8[_0x369cf8.typeHintComment = 64] = 'typeHintComment';
        _0x369cf8[_0x369cf8.readonly = 128] = 'readonly';
        _0x369cf8[_0x369cf8.decorator = 256] = 'decorator';
        _0x369cf8[_0x369cf8.builtin = 512] = 'builtin';
        _0x369cf8[_0x369cf8.overridden = 1024] = 'overridden';
      })(_0x398aab ||= {});
      const _0x4c06e0 = {
        [63]: 'match'.length,
        [64]: 'case'.length
      };
      function _0x3c0a82(_0x444389, _0x3ad831, _0x46435d, _0x42d19a, _0x276d5b, _0x1b4548) {
        var _0x5dbd79;
        const _0x15436f = _0x444389.getParseResults(_0x3ad831);
        if (_0x15436f === undefined || _0x15436f.text.length === 0) {
          return {
            data: []
          };
        }
        const _0x284812 = ((_0x5dbd79 = _0x444389.getSourceFile(_0x3ad831)) === null || _0x5dbd79 === undefined ? undefined : _0x5dbd79.getDiagnosticVersion()) ?? 0;
        return _0x8c7c53.getTokens(_0x15436f, _0x3ad831, _0x444389.evaluator, _0x46435d, _0x42d19a, _0x276d5b, _0x284812, _0x1b4548);
      }
      class _0x8c7c53 {
        static computeLegend(_0x58058b) {
          const _0x5bff05 = _0x52ad2d.getEnumNames(_0x2a2716);
          const _0x11321c = _0x52ad2d.getEnumNames(_0x398aab).filter(_0x5646b0 => _0x5646b0 !== _0x398aab[_0x398aab.none]);
          return {
            tokenTypes: _0x5bff05,
            tokenModifiers: _0x11321c
          };
        }
        static getTokens(_0x18f3ee, _0x1058a3, _0x190d8f, _0x1a2b70, _0x184117, _0x1cf3d5, _0x10d219, _0x58c22f) {
          _0x5277d0.throwIfCancellationRequested(_0x58c22f);
          const _0x5a689c = _0x1a2b70 ? new _0x3567ad.SemanticTokensBuilder() : _0x10730b(_0x1058a3, _0x1cf3d5, _0x10d219);
          if (_0x5a689c === undefined) {
            return {
              resultId: _0x1cf3d5,
              edits: []
            };
          }
          const _0x144a11 = _0x184117 ? new _0xc265eb(_0x5a689c) : _0x5a689c;
          if (_0x184117) {
            const _0x2c6aeb = new _0x42ed4a(_0x144a11, _0x18f3ee, _0x1a2b70, _0x58c22f);
            _0x2c6aeb.walk();
          }
          const _0x40a6b3 = new _0x495ca0(_0x144a11, _0x18f3ee, _0x190d8f, _0x184117, _0x1a2b70, _0x58c22f);
          _0x40a6b3.walk(_0x18f3ee.parserOutput.parseTree);
          _0x40a6b3.fillBuilder();
          if (_0x144a11.canBuildEdits()) {
            return _0x144a11.buildEdits();
          } else {
            return _0x144a11.build();
          }
        }
      }
      exports.SemanticTokenProvider = _0x8c7c53;
      const _0x408a76 = new Map();
      function _0x10730b(_0x463c08, _0x27c4d6 = undefined, _0x969e08 = 0) {
        let _0x48f2ea = _0x408a76.get(_0x463c08.key);
        if (_0x48f2ea && _0x48f2ea.builder.id === _0x27c4d6 && _0x48f2ea.version === _0x969e08) {
          return undefined;
        }
        if (_0x48f2ea !== undefined && _0x27c4d6 !== undefined) {
          _0x48f2ea.version = _0x969e08;
          _0x48f2ea.builder.previousResult(_0x27c4d6);
          return _0x48f2ea.builder;
        }
        _0x48f2ea = {
          version: _0x969e08,
          builder: new _0x3567ad.SemanticTokensBuilder()
        };
        _0x408a76.set(_0x463c08.key, _0x48f2ea);
        return _0x48f2ea.builder;
      }
      class _0x42ed4a {
        constructor(_0x4b8efd, _0xec16da, _0x5959fe, _0x49a0f3) {
          this._builder = _0x4b8efd;
          this._parseResults = _0xec16da;
          this._cancellationToken = _0x49a0f3;
          if (_0x5959fe) {
            this._range = _0x336d62.convertRangeToTextRange(_0x5959fe, this._parseResults.tokenizerOutput.lines);
          }
        }
        walk() {
          const _0x36084c = this._parseResults.tokenizerOutput.tokens;
          const _0x1c5584 = Math.max(this._range ? _0x36084c.getItemAtPosition(this._range.start) : 0, 0);
          const _0xa4ffce = Math.min(this._range ? _0x36084c.getItemAtPosition(_0x281d77.TextRange.getEnd(this._range)) + 1 : _0x36084c.count, _0x36084c.count);
          for (let _0x286f15 = _0x1c5584; _0x286f15 < _0xa4ffce; _0x286f15++) {
            _0x5277d0.throwIfCancellationRequested(this._cancellationToken);
            const _0x30e352 = this._parseResults.tokenizerOutput.tokens.getItemAt(_0x286f15);
            const _0x28b9ab = _0x42ed4a._map.get(_0x30e352.type);
            if (_0x28b9ab) {
              this._pushToken(_0x30e352, _0x28b9ab);
            } else {
              this._pushComments(_0x30e352.comments);
            }
          }
        }
        _pushToken(_0x25ff34, _0x2383d7) {
          this._pushComments(_0x25ff34.comments);
          this._push(_0x25ff34, _0x2383d7);
        }
        _pushComments(_0x29fc9d) {
          if (!_0x29fc9d) {
            return;
          }
          for (const _0x110563 of _0x29fc9d) {
            if (_0x110563.type !== 0) {
              continue;
            }
            this._push({
              start: _0x110563.start - 1,
              length: _0x110563.length + 1
            }, _0x2a2716.comment);
          }
        }
        _push(_0x5f3a0a, _0x946747) {
          const _0x41dde1 = _0x336d62.convertOffsetToPosition(_0x5f3a0a.start, this._parseResults.tokenizerOutput.lines);
          this._builder.push(_0x41dde1.line, _0x41dde1.character, _0x5f3a0a.length, _0x946747, _0x398aab.none);
        }
      }
      _0x42ed4a._map = new Map([[8, _0x2a2716.keyword], [6, _0x2a2716.number], [5, _0x2a2716.string], [9, _0x2a2716.operator], [13, _0x2a2716.parenthesis], [14, _0x2a2716.parenthesis], [15, _0x2a2716.bracket], [16, _0x2a2716.bracket], [17, _0x2a2716.curlybrace], [18, _0x2a2716.curlybrace], [10, _0x2a2716.colon], [11, _0x2a2716.semicolon], [21, _0x2a2716.arrow]]);
      class _0x495ca0 extends _0x26be11.ParseTreeWalker {
        constructor(_0x32a67d, _0x4ca197, _0x4f8684, _0x10b704, _0x38e379, _0x5b7350) {
          super();
          this._builder = _0x32a67d;
          this._parseResults = _0x4ca197;
          this._evaluator = _0x4f8684;
          this._includeSyntaxToken = _0x10b704;
          this._cancellationToken = _0x5b7350;
          this._cachedNodeTokenInfo = new Map();
          this._pushQueue = [];
          this._previousTokenStart = -1;
          this._sawOutOfOrderTokens = false;
          if (_0x38e379) {
            this._range = _0x336d62.convertRangeToTextRange(_0x38e379, this._parseResults.tokenizerOutput.lines);
          }
        }
        visitSuite(_0x5ace21) {
          if (this._isNodeInRange(_0x5ace21)) {
            return true;
          } else {
            return false;
          }
        }
        visitStatementList(_0x39ed33) {
          if (this._isNodeInRange(_0x39ed33)) {
            return true;
          } else {
            return false;
          }
        }
        visitName(_0x256115) {
          _0x5277d0.throwIfCancellationRequested(this._cancellationToken);
          if (!this._isNodeInRange(_0x256115)) {
            return false;
          }
          const _0x4b797f = this._getNameNodeToken(_0x256115);
          if (_0x4b797f) {
            this._pushToken(_0x256115, _0x4b797f.type, _0x4b797f.modifiers);
          }
          return true;
        }
        visitString(_0x9f8aa) {
          return true;
        }
        visitFormatString(_0x1ebb11) {
          if (!this._isNodeInRange(_0x1ebb11)) {
            return false;
          }
          if (this._includeSyntaxToken) {
            this._pushToken(_0x1ebb11, _0x2a2716.string, _0x398aab.none);
          }
          return true;
        }
        visitMatch(_0xf5b9f1) {
          if (!this._isNodeInRange(_0xf5b9f1)) {
            return false;
          }
          this._pushKeywordNotSupportedByTextMate(_0xf5b9f1);
          return true;
        }
        visitCase(_0x3a9cad) {
          if (!this._isNodeInRange(_0x3a9cad)) {
            return false;
          }
          this._pushKeywordNotSupportedByTextMate(_0x3a9cad);
          return true;
        }
        visitConstant(_0x1e81f5) {
          const _0x4e9c5b = this._getTypeAnnotationModifiers(_0x1e81f5);
          this._pushToken(_0x1e81f5, _0x2a2716.builtinConstant, _0x398aab.builtin | _0x398aab.readonly | _0x4e9c5b);
          return true;
        }
        visitFor(_0x55f6dc) {
          return this._handleOverriddenKeyword(_0x55f6dc);
        }
        visitBinaryOperation(_0x1eeee0) {
          if (_0x1eeee0.d.operatorToken.type === 8) {
            return this._handleOverriddenKeyword(_0x1eeee0);
          }
          return this._handleOverriddenOperator(_0x1eeee0);
        }
        visitUnaryOperation(_0x25775c) {
          return this._handleOverriddenOperator(_0x25775c);
        }
        visitAugmentedAssignment(_0x2bdde4) {
          return this._handleOverriddenOperator(_0x2bdde4);
        }
        fillBuilder() {
          if (this._sawOutOfOrderTokens) {
            this._pushQueue.sort((_0x53ba72, _0x29df9f) => _0x53ba72.start - _0x29df9f.start);
          }
          for (const _0x1df7ea of this._pushQueue) {
            const _0x14c962 = _0x1df7ea.start;
            const _0x2e5a8c = _0x1df7ea.length;
            const _0x1aceca = _0x1df7ea.tokenType;
            const _0x572944 = _0x1df7ea.tokenModifiers;
            const _0x1fdcb3 = _0x336d62.convertOffsetsToRange(_0x14c962, _0x14c962 + _0x2e5a8c, this._parseResults.tokenizerOutput.lines);
            if (_0x1fdcb3.start.line !== _0x1fdcb3.end.line) {
              this._pushMultiLineToken(_0x14c962, _0x2e5a8c, _0x1aceca, _0x572944);
            } else {
              const _0x7ff95c = _0x336d62.convertOffsetToPosition(_0x14c962, this._parseResults.tokenizerOutput.lines);
              this._builder.push(_0x7ff95c.line, _0x7ff95c.character, _0x2e5a8c, _0x1aceca, _0x572944);
            }
          }
        }
        _isNodeInRange(_0x41e2d1) {
          if (this._range === undefined) {
            return true;
          }
          return _0x281d77.TextRange.overlapsRange(this._range, _0x41e2d1);
        }
        _getOverridenModifiers(_0x3d3595) {
          if (_0x3d3595.parent?.nodeType !== 9 || _0x3d3595.parent.d.leftExpr !== _0x3d3595) {
            return _0x398aab.none;
          }
          const _0x335e3c = _0x3d3595.parent;
          if (!_0x5bbc1d.hasMagicMethodForIdentifier(this._evaluator, _0x335e3c)) {
            return _0x398aab.none;
          }
          return _0x398aab.overridden;
        }
        _handleOverriddenKeyword(_0x257b9d) {
          _0x5277d0.throwIfCancellationRequested(this._cancellationToken);
          if (!this._isNodeInRange(_0x257b9d)) {
            return false;
          }
          if (!_0x5bbc1d.hasMagicMethodForKeyword(this._evaluator, _0x257b9d)) {
            return true;
          }
          const _0x3a3745 = this._getOverridenToken(_0x257b9d);
          if (!_0x3a3745) {
            return true;
          }
          this._pushToken(_0x3a3745, _0x2a2716.keyword, _0x398aab.overridden);
          return true;
        }
        _handleOverriddenOperator(_0x4a7c0a) {
          _0x5277d0.throwIfCancellationRequested(this._cancellationToken);
          if (!this._isNodeInRange(_0x4a7c0a)) {
            return false;
          }
          if (!_0x5bbc1d.hasMagicMethodForOperator(this._evaluator, _0x4a7c0a)) {
            return true;
          }
          const _0x215403 = this._getOverridenToken(_0x4a7c0a);
          if (!_0x215403) {
            return true;
          }
          this._pushToken(_0x215403, _0x2a2716.operator, _0x398aab.overridden);
          return true;
        }
        _getOverridenToken(_0x4fff16) {
          if (_0x4fff16.nodeType === 29) {
            return this._getToken(_0x281d77.TextRange.getEnd(_0x4fff16.d.targetExpr), _0x4fff16.d.iterableExpr.start, 8);
          }
          if (_0x4fff16.nodeType !== 5) {
            return _0x4fff16.d.operatorToken;
          }
          return this._getToken(_0x281d77.TextRange.getEnd(_0x4fff16.d.leftExpr), _0x4fff16.d.rightExpr.start, 9);
        }
        _getToken(_0x18d403, _0x468360, _0x337912) {
          const _0x1662a7 = this._parseResults.tokenizerOutput.tokens.getItemAtPosition(_0x18d403);
          const _0x4b3040 = this._parseResults.tokenizerOutput.tokens.getItemAtPosition(_0x468360);
          for (let _0x2ee21e = _0x1662a7; _0x2ee21e <= _0x4b3040; _0x2ee21e++) {
            const _0x51cfc8 = this._parseResults.tokenizerOutput.tokens.getItemAt(_0x2ee21e);
            if (_0x51cfc8.type === _0x337912) {
              return _0x51cfc8;
            }
          }
          return undefined;
        }
        _getParameterTokenType(_0x3a411b) {
          var _0x6611d3;
          var _0x355878;
          const _0x2bbf2f = (_0x6611d3 = _0x3a411b.node.d.name) === null || _0x6611d3 === undefined ? undefined : _0x6611d3.d.value;
          const _0x455277 = _0x3a411b.node.parent;
          if (_0x455277?.nodeType === 31) {
            if (_0x455277.d.params.length > 0 && ((_0x355878 = _0x455277.d.params[0].d.name) === null || _0x355878 === undefined ? undefined : _0x355878.d.value) === _0x2bbf2f) {
              switch (_0x2bbf2f) {
                case 'self':
                  return _0x2a2716.selfParameter;
                case 'cls':
                  return _0x2a2716.clsParameter;
                default:
                  return _0x2a2716.parameter;
              }
            }
          }
          return _0x2a2716.parameter;
        }
        _getEnclosingDecorator(_0x22b20) {
          let _0x369f1d = _0x22b20.parent;
          while (_0x369f1d) {
            if (_0x369f1d.nodeType === 16) {
              return _0x369f1d;
            }
            if (_0x369f1d.nodeType === 10 || _0x369f1d.nodeType === 31 || _0x369f1d.nodeType === 41 || _0x369f1d.nodeType === 1) {
              return undefined;
            }
            _0x369f1d = _0x369f1d.parent;
          }
          return undefined;
        }
        _getDecoratorModifiers(_0x2136d1) {
          if (this._getEnclosingDecorator(_0x2136d1) !== undefined) {
            return _0x398aab.decorator;
          } else {
            return _0x398aab.none;
          }
        }
        _getFunctionTokenType(_0x52b761, _0xd1caa) {
          if (_0x5b01dd.isDunderName(_0x52b761.d.value)) {
            return _0x2a2716.magicFunction;
          } else {
            if (_0xd1caa.shared.methodClass) {
              return _0x2a2716.method;
            } else {
              return _0x2a2716.function;
            }
          }
        }
        _getBuiltinModifiers(_0x1ac3b2) {
          if (_0x1ac3b2 === 'builtins') {
            return _0x398aab.builtin;
          } else {
            return _0x398aab.none;
          }
        }
        _getTypeAnnotationModifiers(_0x2af899) {
          if (_0x397d51.isWithinAnnotationComment(_0x2af899)) {
            return _0x398aab.typeHintComment;
          } else {
            if (_0x397d51.isWithinTypeAnnotation(_0x2af899, false)) {
              return _0x398aab.typeHint;
            } else {
              return _0x398aab.none;
            }
          }
        }
        _getNameNodeToken(_0x310bdf) {
          var _0x1af105;
          if (this._cachedNodeTokenInfo.has(_0x310bdf)) {
            return this._cachedNodeTokenInfo.get(_0x310bdf);
          }
          const _0x49c13a = this._evaluator.getDeclInfoForNameNode(_0x310bdf, true);
          let _0x48f8e2 = _0x49c13a?.decls;
          if ((!_0x48f8e2 || _0x48f8e2.length === 0) && _0x49c13a?.synthesizedTypes) {
            for (const _0x10e4a1 of _0x49c13a.synthesizedTypes) {
              if (_0x10e4a1.node) {
                const _0x3c58f5 = this._evaluator.getDeclInfoForNameNode(_0x10e4a1.node, true);
                _0x48f8e2 = _0x3c58f5?.decls;
                break;
              }
            }
          }
          if (_0x48f8e2 && _0x48f8e2.length > 0) {
            const _0x571bcd = this._evaluator.resolveAliasDeclaration(_0x48f8e2[0], true);
            if (_0x571bcd) {
              const _0x21883 = this._getBuiltinModifiers(_0x571bcd.moduleName);
              const _0xc97976 = this._getTypeAnnotationModifiers(_0x310bdf);
              switch (_0x571bcd.type) {
                case 0:
                  return {
                    type: _0x2a2716.variable,
                    modifiers: _0x398aab.builtin
                  };
                case 2:
                  {
                    const _0x5eeaf8 = _0x310bdf.parent?.nodeType === 41 ? _0x398aab.declaration : _0x398aab.none;
                    return {
                      type: this._getParameterTokenType(_0x571bcd),
                      modifiers: _0x5eeaf8
                    };
                  }
                case 7:
                  return {
                    type: _0x2a2716.class,
                    modifiers: _0xc97976 | _0x21883
                  };
                case 6:
                  {
                    const _0x27aac9 = _0x310bdf.parent?.nodeType === 10 ? _0x398aab.declaration : _0x398aab.none;
                    const _0x430b95 = this._getDecoratorModifiers(_0x310bdf);
                    const _0x102649 = this._getOverridenModifiers(_0x310bdf);
                    const _0x279cde = this._evaluator.getTypeOfClass(_0x571bcd.node);
                    const _0x455293 = _0xc97976 | _0x430b95 | _0x102649 | _0x27aac9 | _0x21883;
                    if (_0x279cde && _0x5544b1.ClassType.isEnumClass(_0x279cde.classType)) {
                      return {
                        type: _0x2a2716.enum,
                        modifiers: _0x455293
                      };
                    } else {
                      return {
                        type: _0x2a2716.class,
                        modifiers: _0x455293
                      };
                    }
                  }
                case 5:
                  {
                    const _0x29ebfe = this._evaluator.getTypeForDeclaration(_0x571bcd)?.type;
                    return this._getFunctionSemanticTokenInfo(_0x310bdf, _0x29ebfe, _0x571bcd);
                  }
                case 1:
                  {
                    const _0x507da7 = _0x571bcd.node.id === _0x310bdf.id ? _0x398aab.declaration : _0x398aab.none;
                    const _0x511632 = this._getDecoratorModifiers(_0x310bdf) | _0x507da7 | _0xc97976 | _0x21883;
                    const _0x504bb7 = _0x397d51.getEnclosingClass(_0x571bcd.node, true);
                    if (_0x504bb7) {
                      const _0x40a987 = this._evaluator.getTypeOfClass(_0x504bb7);
                      if (_0x40a987 && _0x5544b1.ClassType.isEnumClass(_0x40a987.classType)) {
                        return {
                          type: _0x2a2716.enumMember,
                          modifiers: _0x511632
                        };
                      } else {
                        return {
                          type: _0x2a2716.property,
                          modifiers: _0x511632
                        };
                      }
                    } else {
                      if (_0x310bdf.parent?.nodeType === 35 && ((_0x1af105 = _0x310bdf.parent) === null || _0x1af105 === undefined ? undefined : _0x1af105.d.member.id) === _0x310bdf.id) {
                        return {
                          type: _0x2a2716.property,
                          modifiers: _0x511632
                        };
                      }
                      return {
                        type: _0x2a2716.variable,
                        modifiers: _0x5b01dd.isConstantName(_0x310bdf.d.value) ? _0x511632 | _0x398aab.readonly : _0x511632
                      };
                    }
                  }
                case 8:
                  {
                    const _0x3aa2a5 = this._getDecoratorModifiers(_0x310bdf) | _0xc97976;
                    return {
                      type: _0x2a2716.module,
                      modifiers: _0x3aa2a5
                    };
                  }
              }
            }
          } else {
            const _0x427522 = this._getDecoratorModifiers(_0x310bdf);
            const _0x78b590 = this._evaluator.getType(_0x310bdf);
            if (_0x78b590?.category === 7) {
              return {
                type: _0x2a2716.module,
                modifiers: _0x427522
              };
            } else {
              if (_0x310bdf.parent?.nodeType === 37) {
                const _0x4ba372 = _0x310bdf.parent;
                if (_0x4ba372.d.nameParts.length > 1) {
                  const _0x4de82b = _0x4ba372.d.nameParts[_0x4ba372.d.nameParts.length - 1];
                  if (_0x4de82b !== _0x310bdf) {
                    const _0x5cdda7 = this._getNameNodeToken(_0x4de82b);
                    this._cachedNodeTokenInfo.set(_0x4de82b, _0x5cdda7);
                    return _0x5cdda7;
                  }
                }
              } else {
                if (_0x49c13a?.synthesizedTypes) {
                  return this._getSynthesizedTypeToken(_0x310bdf, _0x49c13a.synthesizedTypes);
                }
              }
            }
          }
          return undefined;
        }
        _getSynthesizedTypeToken(_0x31993b, _0x501f03) {
          for (const _0x2940ff of _0x501f03) {
            let _0x3b8b63 = _0x2940ff.type;
            if (_0x3b8b63.category === 5) {
              const _0x28c0fa = _0x5544b1.OverloadedType.getOverloads(_0x3b8b63);
              if (_0x28c0fa.length === 0) {
                return undefined;
              }
              _0x3b8b63 = _0x28c0fa[0];
            }
            if (_0x3b8b63.category === 4) {
              return this._getFunctionSemanticTokenInfo(_0x31993b, _0x3b8b63);
            }
          }
          return undefined;
        }
        _getFunctionSemanticTokenInfo(_0x450899, _0x34e860, _0x29bcc9) {
          let _0x36dd12 = _0x2a2716.function;
          const _0x3a9d45 = _0x450899.parent?.nodeType === 31 ? _0x398aab.declaration : _0x398aab.none;
          const _0x4167a4 = this._getBuiltinModifiers(_0x29bcc9?.moduleName ?? '');
          let _0x7f8c6a = this._getDecoratorModifiers(_0x450899) | this._getOverridenModifiers(_0x450899) | _0x3a9d45 | _0x4167a4;
          if (_0x34e860) {
            if (_0x29bcc9?.isMethod && _0x189689.isMaybeDescriptorInstance(_0x34e860, false)) {
              _0x36dd12 = _0x2a2716.property;
            }
            if (_0x34e860.category === 4) {
              _0x36dd12 = this._getFunctionTokenType(_0x450899, _0x34e860);
              if (_0x34e860.shared.flags & 8) {
                _0x7f8c6a = _0x7f8c6a | _0x398aab.abstract;
              }
              if (_0x34e860.shared.flags & 4) {
                _0x7f8c6a = _0x7f8c6a | _0x398aab.static;
              }
              if (_0x34e860.shared.flags & 512 || (_0x29bcc9 === null || _0x29bcc9 === undefined ? undefined : _0x29bcc9.node.d.isAsync)) {
                _0x7f8c6a = _0x7f8c6a | _0x398aab.async;
              }
            }
          }
          return {
            type: _0x36dd12,
            modifiers: _0x7f8c6a
          };
        }
        _pushKeywordNotSupportedByTextMate(_0x506e10) {
          if (this._includeSyntaxToken) {
            return;
          }
          const _0x30450e = _0x4c06e0[_0x506e10.nodeType];
          _0x2c9712.assertDefined(_0x30450e, 'unknown keyword');
          this._pushToken(_0x281d77.TextRange.create(_0x506e10.start, _0x30450e), _0x2a2716.keyword, _0x398aab.none);
        }
        _pushToken(_0x5aa1b2, _0x19c62b, _0x45d5fb) {
          if (_0x5aa1b2.length === 0) {
            return;
          }
          if (this._range) {
            if (!_0x281d77.TextRange.overlapsRange(_0x5aa1b2, this._range)) {
              return;
            }
          }
          this._pushQueue.push({
            start: _0x5aa1b2.start,
            length: _0x5aa1b2.length,
            tokenType: _0x19c62b,
            tokenModifiers: _0x45d5fb
          });
          if (this._previousTokenStart > _0x5aa1b2.start) {
            this._sawOutOfOrderTokens = true;
          }
          this._previousTokenStart = _0x5aa1b2.start;
        }
        _pushMultiLineToken(_0x3eb2f, _0x55daad, _0x4de42d, _0x7da272) {
          const _0x20566f = _0x3eb2f + _0x55daad;
          let _0x546b78 = this._parseResults.tokenizerOutput.tokens.getItemAtPosition(_0x3eb2f);
          while (_0x546b78 >= 0 && _0x546b78 < this._parseResults.tokenizerOutput.tokens.count) {
            const _0x2e22b6 = this._parseResults.tokenizerOutput.tokens.getItemAt(_0x546b78);
            if (_0x2e22b6.start >= _0x20566f) {
              break;
            }
            const _0x3bf050 = _0x2e22b6.start + _0x2e22b6.length;
            if (_0x2e22b6.start >= _0x3eb2f && _0x3bf050 <= _0x20566f) {
              const _0x344898 = _0x336d62.convertOffsetToPosition(_0x2e22b6.start, this._parseResults.tokenizerOutput.lines);
              this._builder.push(_0x344898.line, _0x344898.character, _0x2e22b6.length, _0x4de42d, _0x7da272);
            }
            _0x546b78++;
          }
        }
      }
      class _0xc265eb {
        constructor(_0x4a4cb7) {
          this._builder = _0x4a4cb7;
          this._tokens = [];
        }
        push(_0x4dcace, _0x1d9f1a, _0x1721d9, _0x4420ff, _0x2cbe1e) {
          this._tokens.push({
            line: _0x4dcace,
            character: _0x1d9f1a,
            length: _0x1721d9,
            tokenType: _0x4420ff,
            tokenModifiers: _0x2cbe1e
          });
        }
        canBuildEdits() {
          return this._builder.canBuildEdits();
        }
        build() {
          this._ensureData();
          return this._builder.build();
        }
        buildEdits() {
          this._ensureData();
          return this._builder.buildEdits();
        }
        _ensureData() {
          this._tokens.sort((_0x499c30, _0x2eb766) => {
            const _0x4c0e22 = _0x281d77.comparePositions(_0x499c30, _0x2eb766);
            if (_0x4c0e22 !== 0) {
              return _0x4c0e22;
            }
            if (_0x499c30.length < _0x2eb766.length) {
              return -1;
            } else {
              if (_0x499c30.length > _0x2eb766.length) {
                return 1;
              } else {
                if (_0x499c30.tokenType < _0x2eb766.tokenType) {
                  return -1;
                } else {
                  if (_0x499c30.tokenType > _0x2eb766.tokenType) {
                    return 1;
                  } else {
                    if (_0x499c30.tokenModifiers < _0x2eb766.tokenModifiers) {
                      return -1;
                    } else {
                      if (_0x499c30.tokenModifiers > _0x2eb766.tokenModifiers) {
                        return 1;
                      }
                    }
                  }
                }
              }
            }
            return 0;
          });
          this._tokens.forEach(_0x13aa62 => this._builder.push(_0x13aa62.line, _0x13aa62.character, _0x13aa62.length, _0x13aa62.tokenType, _0x13aa62.tokenModifiers));
        }
      }
    },
    67619: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ShortLivedCache = undefined;
      class _0x146151 {
        constructor(_0x1b69ca) {
          this._cache = [];
          const _0x236966 = Math.min(_0x1b69ca, 4096);
          for (let _0x4dd476 = 0; _0x4dd476 < _0x236966; _0x4dd476++) {
            this._cache.push([]);
          }
        }
        get(_0x2f2496) {
          if (_0x2f2496?.id === undefined) {
            return undefined;
          }
          const _0x2f5197 = _0x2f2496.id >> 20;
          const _0x29cac9 = _0x2f2496.id & 1048575;
          if (_0x2f5197 >= this._cache.length) {
            return undefined;
          }
          const _0x26255a = this._cache[_0x2f5197];
          if (_0x29cac9 >= _0x26255a.length) {
            return undefined;
          }
          return _0x26255a[_0x29cac9];
        }
        add(_0x5de0a2, _0x16d8c7) {
          const _0x50b4ed = _0x5de0a2 % this._cache.length;
          const _0x1a5291 = this._cache[_0x50b4ed];
          const _0x3e1abe = _0x1a5291.length;
          _0x1a5291.push(_0x16d8c7);
          return {
            id: _0x50b4ed << 20 | _0x3e1abe
          };
        }
      }
      exports.ShortLivedCache = _0x146151;
    },
    48205: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SmartSelectionProvider = undefined;
      const _0x292c3d = __importStar(require(41557));
      const _0x4dfc72 = require(91426);
      const _0x3a6ca2 = require(56814);
      const _0x516c7f = require(88754);
      class _0x458853 {
        static getSmartSelectionRange(_0x2b6f7, _0x2988ac, _0x5bc82c) {
          _0x4dfc72.throwIfCancellationRequested(_0x5bc82c);
          const _0x38e3f7 = _0x292c3d.findNodeByPosition(_0x2b6f7.parserOutput.parseTree, _0x2988ac, _0x2b6f7.tokenizerOutput.lines);
          if (!_0x38e3f7) {
            return undefined;
          }
          let _0x458b51;
          let _0x36d0bc;
          const _0x49df10 = _0x3a6ca2.convertPositionToOffset(_0x2988ac, _0x2b6f7.tokenizerOutput.lines);
          if (!_0x49df10) {
            return undefined;
          }
          for (let _0x27487b = _0x38e3f7; _0x27487b !== undefined; _0x27487b = _0x27487b.parent) {
            if (_0x27487b.nodeType === 9) {
              _0x5b8f49(_0x27487b.d.args);
            } else {
              if (_0x27487b.nodeType === 31) {
                _0x5b8f49(_0x27487b.d.params);
              } else {
                if (_0x27487b.nodeType === 52) {
                  _0x5b8f49(_0x27487b.d.items);
                } else {
                  if (_0x27487b.nodeType === 33) {
                    _0x5b8f49(_0x27487b.d.params);
                  } else {
                    if (_0x27487b.nodeType === 30) {
                      _0x5b8f49(_0x27487b.d.formatExprs);
                      _0x5b8f49(_0x27487b.d.fieldExprs);
                    } else {
                      if (_0x27487b.nodeType === 18) {
                        _0x5b8f49(_0x27487b.d.items);
                      } else {
                        if (_0x27487b.nodeType === 45) {
                          _0x5b8f49(_0x27487b.d.items);
                        } else {
                          if (_0x27487b.nodeType === 34) {
                            _0x5b8f49(_0x27487b.d.items);
                          } else {
                            if (_0x27487b.nodeType === 17) {
                              _0x5b8f49(_0x27487b.d.targets);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _0x1960c8(_0x27487b);
          }
          return _0x458b51;
          function _0x5b8f49(_0x5d9844) {
            const _0x4c0452 = _0x516c7f.TextRange.combine(_0x5d9844);
            if (_0x4c0452) {
              const _0x4511da = _0x3a6ca2.convertTextRangeToRange(_0x4c0452, _0x2b6f7.tokenizerOutput.lines);
              _0x3be30f(_0x4511da);
            }
          }
          function _0x1960c8(_0x33dae2) {
            if (_0x33dae2.nodeType === 50) {
              return;
            }
            const _0x3d8f2a = _0x33dae2.start;
            const _0x5f0ce4 = _0x516c7f.TextRange.getEnd(_0x33dae2);
            if (_0x3d8f2a === _0x5f0ce4) {
              return;
            }
            const _0x5d4820 = _0x3a6ca2.convertOffsetsToRange(_0x3d8f2a, _0x5f0ce4, _0x2b6f7.tokenizerOutput.lines);
            _0x3be30f(_0x5d4820);
          }
          function _0x3be30f(_0x2d9077) {
            if (!_0x516c7f.doesRangeContain(_0x2d9077, _0x2988ac)) {
              return;
            }
            if (!_0x36d0bc) {
              _0x458b51 = {
                range: _0x2d9077
              };
              _0x36d0bc = _0x458b51;
            } else {
              if (!_0x516c7f.doesRangeContain(_0x36d0bc.range, _0x2d9077)) {
                _0x36d0bc.parent = {
                  range: _0x2d9077
                };
                _0x36d0bc = _0x36d0bc.parent;
              }
            }
          }
        }
      }
      exports.SmartSelectionProvider = _0x458853;
    },
    34838: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceSourceFile = undefined;
      const _0x4ed6e6 = require(53266);
      const _0x29b181 = require(8398);
      const _0x1d9a0e = require(66609);
      class _0x4e4732 extends _0x4ed6e6.SourceFile {
        constructor(_0x34c955, _0x524079, _0x3419c9, _0x4cd6e8, _0x3170dc, _0x378f69, _0x118863, _0x33dd58, _0x36fa47, _0x102bbc) {
          super(_0x524079, _0x3419c9, _0x4cd6e8, _0x3170dc, _0x378f69, _0x118863, _0x33dd58, _0x36fa47, _0x102bbc || _0x29b181.getIPythonMode(_0x3419c9));
          this._getDiagnosticCode = _0x34c955;
        }
        createDiagnosticSink() {
          return new _0x1d9a0e.PylanceDiagnosticSink(this._getDiagnosticCode);
        }
        createTextRangeDiagnosticSink(_0x591e6b) {
          return new _0x1d9a0e.PylanceTextRangeDiagnosticSink(this._getDiagnosticCode, _0x591e6b);
        }
      }
      exports.PylanceSourceFile = _0x4e4732;
    },
    54802: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DefaultPylanceSourceFileFactory = undefined;
      exports.createPylanceSourceFile = _0x3aa864;
      const _0x547f64 = require(34838);
      exports.DefaultPylanceSourceFileFactory = {
        createSourceFile(_0x52fa54, _0x1dc8e1, _0x57af9c, _0xded024, _0x3a0ba4, _0x4208d4, _0x1719e0, _0x20f67c, _0x435d1c) {
          const _0x2ed4c6 = _0x1fae79 => {
            return undefined;
          };
          return _0x3aa864(_0x2ed4c6, _0x52fa54, _0x1dc8e1, _0x57af9c, _0xded024, _0x3a0ba4, _0x4208d4, _0x1719e0, _0x20f67c, _0x435d1c);
        }
      };
      function _0x3aa864(_0x52b436, _0x5db0d6, _0x4027d4, _0x14c7bc, _0x31291d, _0x6959ce, _0x34889e, _0x424379, _0x47e0e4, _0x55b624) {
        return new _0x547f64.PylanceSourceFile(_0x52b436, _0x5db0d6, _0x4027d4, _0x14c7bc, _0x31291d, _0x6959ce, _0x34889e, _0x424379, _0x47e0e4, _0x55b624);
      }
    },
    60942: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StringDefinitionHoverProvider = undefined;
      const _0x4392c1 = require(41557);
      const _0x3fb247 = require(58253);
      const _0x52808d = require(21024);
      const _0x1e318c = require(92324);
      const _0x5d633a = require(91426);
      const _0x317b57 = require(56814);
      const _0x59bb05 = require(88754);
      const _0x3cbad2 = require(79943);
      const _0x345344 = require(39426);
      const _0x2edfe5 = require(30048);
      class _0x34e04f {
        constructor(_0x1bd21f, _0xf66edb, _0x2f148c, _0x5d57aa, _0x1fa655) {
          this._program = _0x1bd21f;
          this._fileUri = _0xf66edb;
          this._position = _0x2f148c;
          this._format = _0x5d57aa;
          this._token = _0x1fa655;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._sourceMapper = this._program.getSourceMapper(this._fileUri, this._token, true);
          this._stringDefinitionFinder = this._program.serviceProvider.tryGet(_0x2edfe5.PylanceServiceKeys.stringDefinitionFinder);
        }
        getHover() {
          return _0x3cbad2.convertHoverResults(this._getHoverResult(), this._format);
        }
        get _functionSignatureDisplay() {
          return this._program.configOptions.functionSignatureDisplay;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _getHoverResult() {
          _0x5d633a.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return null;
          }
          const _0x5b081f = _0x317b57.convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x5b081f === undefined) {
            return null;
          }
          const _0x183f01 = _0x4392c1.findNodeByOffset(this._parseResults.parserOutput.parseTree, _0x5b081f);
          if (_0x183f01 === undefined) {
            return null;
          }
          if (_0x183f01.nodeType !== 49) {
            return null;
          }
          const _0xc34a26 = this._tryGetDeclarations(_0x183f01, _0x5b081f);
          if (_0xc34a26.length === 0) {
            return null;
          }
          const _0x59266b = this._stringDefinitionFinder.getWordAtOffset(_0x183f01, _0x5b081f).split('.');
          if (_0x59266b.length === 0) {
            return null;
          }
          const _0x16910d = [];
          const _0x280561 = _0x59266b[_0x59266b.length - 1];
          if (_0x280561.length === 0) {
            return null;
          }
          const _0x178d25 = _0x3cbad2.HoverProvider.getPrimaryDeclaration(_0xc34a26);
          this._addResultsForDeclaration(_0x16910d, _0x178d25, _0x280561);
          if (_0x16910d.length === 0) {
            return null;
          }
          const _0x4536c1 = this._getTextRange(_0x183f01, _0x5b081f, _0x280561);
          return {
            parts: _0x16910d,
            range: {
              start: _0x317b57.convertOffsetToPosition(_0x4536c1.start, this._parseResults.tokenizerOutput.lines),
              end: _0x317b57.convertOffsetToPosition(_0x59bb05.TextRange.getEnd(_0x4536c1), this._parseResults.tokenizerOutput.lines)
            }
          };
        }
        _getTextRange(_0x28c167, _0x705fd5, _0x545709) {
          const _0x1fdc0f = this._parseResults.text.substring(_0x28c167.start, _0x59bb05.TextRange.getEnd(_0x28c167));
          const _0x2188ba = _0x705fd5 - _0x28c167.start;
          let _0xa5d3fb = _0x28c167.start;
          let _0x2d0d4b = 0;
          do {
            _0x2d0d4b = _0x1fdc0f.indexOf(_0x545709, _0x2d0d4b);
            if (_0x2d0d4b < 0) {
              return _0x28c167;
            }
            if (_0x2d0d4b <= _0x2188ba && _0x2188ba <= _0x2d0d4b + _0x545709.length) {
              _0xa5d3fb = _0x28c167.start + _0x2d0d4b;
              break;
            }
            _0x2d0d4b += _0x545709.length;
          } while (true);
          return {
            start: _0xa5d3fb,
            length: _0x545709.length
          };
        }
        _addResultsForDeclaration(_0x5a0299, _0x5b51d6, _0x5714c8) {
          const _0x2db60c = this._evaluator.resolveAliasDeclaration(_0x5b51d6, true, {
            allowExternallyHiddenAccess: true,
            skipFileNeededCheck: true
          });
          if (!_0x2db60c) {
            return;
          }
          const _0xc96a93 = this._getTypeForDeclaration(_0x2db60c);
          if (!_0xc96a93.type) {
            return;
          }
          switch (_0x2db60c.type) {
            case 1:
              {
                const _0x43b8be = this._getVariableTypeText(_0x2db60c, _0x5714c8, _0xc96a93);
                this._addResultsPart(_0x5a0299, _0x43b8be, true);
                this._addDocumentationPartForType(_0x5a0299, _0xc96a93.type, _0x2db60c, _0x5714c8);
                break;
              }
            case 6:
            case 7:
              {
                this._addResultsPart(_0x5a0299, `(class) ${_0x5714c8}`, true);
                this._addDocumentationPartForType(_0x5a0299, _0xc96a93.type, _0x2db60c, _0x5714c8);
                break;
              }
            case 5:
              {
                let _0x2b8d46 = 'function';
                let _0x3108f8 = false;
                if (_0x2db60c.isMethod) {
                  const _0x2cb679 = this._evaluator.getTypeForDeclaration(_0x2db60c)?.type;
                  _0x3108f8 = !!_0x2cb679 && _0x1e318c.isMaybeDescriptorInstance(_0x2cb679, false);
                  _0x2b8d46 = _0x3108f8 ? 'property' : 'method';
                }
                const _0x5cd562 = _0x345344.getToolTipForType(_0xc96a93.type, _0x2b8d46, _0x5714c8, this._evaluator, _0x3108f8, this._functionSignatureDisplay);
                this._addResultsPart(_0x5a0299, _0x5cd562, true);
                this._addDocumentationPartForType(_0x5a0299, _0xc96a93.type, _0x2db60c, _0x5714c8);
                break;
              }
            case 8:
              {
                this._addResultsPart(_0x5a0299, `(module) ${_0x5714c8}`, true);
                this._addDocumentationPartForType(_0x5a0299, _0xc96a93.type, _0x2db60c, _0x5714c8);
                break;
              }
            case 4:
              {
                const _0x326492 = _0x5714c8 + this._getTypeText(_0xc96a93.type, {
                  expandTypeAlias: true
                });
                this._addResultsPart(_0x5a0299, `(type alias) ${_0x326492}`, true);
                this._addDocumentationPartForType(_0x5a0299, _0xc96a93.type, _0x2db60c, _0x5714c8);
                break;
              }
          }
        }
        _getTypeForDeclaration(_0x2ee9eb) {
          const _0x5418cf = this._evaluator.getTypeForDeclaration(_0x2ee9eb);
          if (_0x5418cf.type) {
            return _0x5418cf;
          }
          const _0x5d1b66 = new _0x3fb247.Symbol(0);
          const _0x5aa205 = this._evaluator.getInferredTypeOfDeclaration(_0x5d1b66, _0x2ee9eb);
          return {
            type: _0x5aa205,
            isTypeAlias: _0x5aa205?.props?.typeAliasInfo !== undefined
          };
        }
        _getVariableTypeText(_0x4d2c3d, _0x35f05a, _0x482bf9) {
          const _0x17c86c = _0x482bf9.type;
          let _0x9a083f = _0x4d2c3d.isConstant || this._evaluator.isFinalVariableDeclaration(_0x4d2c3d) ? 'constant' : 'variable';
          let _0x21de6b = false;
          let _0x307fd8;
          if (_0x482bf9.isTypeAlias) {
            const _0x1b4278 = _0x52808d.getTypeAliasInfo(_0x17c86c);
            if ((_0x1b4278 === null || _0x1b4278 === undefined ? undefined : _0x1b4278.shared.name) === _0x35f05a) {
              if (_0x52808d.isTypeVar(_0x17c86c)) {
                _0x9a083f = _0x17c86c.shared.isTypeParamSyntax ? 'param spec' : 'type variable';
                _0x307fd8 = _0x17c86c.shared.name;
              } else {
                _0x21de6b = true;
                _0x9a083f = 'type alias';
              }
            }
          }
          if (_0x17c86c.category === 4 || _0x17c86c.category === 5) {
            return _0x345344.getToolTipForType(_0x17c86c, _0x9a083f, _0x35f05a, this._evaluator, false, this._functionSignatureDisplay);
          }
          const _0x2c4029 = _0x307fd8 || _0x35f05a + ': ' + this._evaluator.printType(_0x17c86c, {
            expandTypeAlias: _0x21de6b
          });
          return `(${_0x9a083f}) ${_0x2c4029}`;
        }
        _addDocumentationPartForType(_0x90c1e4, _0x400500, _0x32cac4, _0x5a1619) {
          const _0x3de33a = _0x345344.getDocumentationPartsForTypeAndDecl(this._sourceMapper, _0x400500, _0x32cac4, this._evaluator, {
            name: _0x5a1619
          });
          _0x3cbad2.addDocumentationResultsPart(this._program.serviceProvider, _0x3de33a, this._format, _0x90c1e4, _0x32cac4);
          return !!_0x3de33a;
        }
        _addResultsPart(_0x48f231, _0x35dcc6, _0x368727 = false) {
          _0x48f231.push({
            python: _0x368727,
            text: _0x35dcc6
          });
        }
        _getTypeText(_0x469d42, _0x29d28) {
          return `: ${this._evaluator.printType(_0x469d42, _0x29d28)}`;
        }
        _tryGetDeclarations(_0xa8d3f3, _0x25545e) {
          if (!this._stringDefinitionFinder) {
            return [];
          }
          return this._stringDefinitionFinder.tryGetDeclarations(_0xa8d3f3, _0x25545e, this._token);
        }
      }
      exports.StringDefinitionHoverProvider = _0x34e04f;
    },
    37036: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.StringDefinitionFinder = undefined;
      const _0x524f91 = require(26687);
      const _0x127510 = require(95952);
      const _0x5d6aa2 = require(91426);
      const _0x4d5711 = require(67032);
      const _0x49b311 = require(69482);
      function _0x5e0804(_0x114d8f) {
        let _0x3fbb77 = 0;
        while (_0x114d8f[_0x3fbb77] === '.') {
          _0x3fbb77++;
        }
        return _0x3fbb77;
      }
      function _0x30e9f2(_0x1613ec, _0x116339) {
        let _0x245099 = 0;
        let _0x3d64dc = 0;
        while (_0x245099 < _0x1613ec.length && _0x245099 < _0x116339) {
          if (_0x1613ec[_0x245099] === ' ' || _0x1613ec[_0x245099] === '\t') {
            _0x3d64dc = _0x245099 + 1;
          }
          _0x245099++;
        }
        let _0x4e98d1 = _0x116339;
        while (_0x4e98d1 < _0x1613ec.length && _0x1613ec[_0x4e98d1] !== ' ' && _0x1613ec[_0x4e98d1] !== '\t' && _0x1613ec[_0x4e98d1] !== '.') {
          _0x4e98d1++;
        }
        return _0x1613ec.substring(_0x3d64dc, _0x4e98d1);
      }
      function _0x365125(_0xffc316, _0x52af5c, _0x377e15) {
        return {
          node: _0xffc316,
          type: 8,
          usesLocalName: false,
          uri: _0x377e15,
          range: {
            start: {
              line: 0,
              character: 0
            },
            end: {
              line: 0,
              character: 0
            }
          },
          loadSymbolsFromPath: false,
          moduleName: _0x52af5c,
          isInExceptSuite: false
        };
      }
      class _0x3b8ac3 {
        constructor(_0xaa0821, _0x3ede87, _0x505686) {
          this._view = _0xaa0821;
          this._mutator = _0x3ede87;
          this._telemetryReporter = _0x505686;
          this._enabled = true;
        }
        onUpdateSettings(_0x3f7bdd) {
          this._enabled = !!_0x3f7bdd.gotoDefinitionInStringLiteral;
        }
        tryGetDeclarations(_0x1c3bf8, _0x4ff129, _0x905aab) {
          const _0x20520d = [];
          if (!this._enabled) {
            return _0x20520d;
          }
          try {
            return this._tryGetDeclarations(_0x1c3bf8, _0x4ff129, _0x905aab);
          } finally {
            if (_0x1c3bf8.nodeType === 49) {
              const _0x4c9ebc = new _0x49b311.TelemetryEvent(_0x49b311.TelemetryEventName.GOTODEF_INSIDE_STRING);
              _0x4c9ebc.Properties.resultLength = _0x20520d.length.toString();
              this._telemetryReporter.sendTelemetry(_0x4c9ebc);
            }
          }
        }
        getWordAtOffset(_0x12b4d2, _0x21f7d0) {
          return _0x30e9f2(_0x12b4d2.d.value, _0x21f7d0 - (_0x12b4d2.start + _0x12b4d2.d.token.quoteMarkLength));
        }
        _tryGetDeclarations(_0x23976f, _0x21cffc, _0x49d210) {
          if (_0x23976f.nodeType !== 49) {
            return [];
          }
          const _0x1d19b1 = this.getWordAtOffset(_0x23976f, _0x21cffc);
          const _0x5ebc6d = _0x524f91.getFileInfo(_0x23976f);
          const _0x29824e = this._view.importResolver;
          const _0x52531a = this._view.configOptions.findExecEnvironment(_0x5ebc6d.fileUri);
          if (!_0x52531a || !_0x29824e) {
            return [];
          }
          const _0x134cd2 = {
            leadingDots: _0x5e0804(_0x1d19b1),
            nameParts: _0x1d19b1.split('.'),
            importedSymbols: new Set()
          };
          const _0x386389 = _0x29824e.resolveImport(_0x5ebc6d.fileUri, _0x52531a, _0x134cd2);
          if (_0x386389 && _0x386389.resolvedUris.length > 0 && _0x386389.isImportFound) {
            return [_0x365125(_0x23976f, _0x386389.importName, _0x386389.resolvedUris[_0x386389.resolvedUris.length - 1])];
          }
          if (_0x134cd2.nameParts.length <= 1) {
            return [];
          }
          const _0x34ab3b = _0x134cd2.nameParts.pop();
          const _0x2f1a18 = _0x29824e.resolveImport(_0x5ebc6d.fileUri, _0x52531a, _0x134cd2);
          if (_0x2f1a18 && _0x2f1a18.resolvedUris.length > 0 && _0x34ab3b && _0x2f1a18.isImportFound) {
            return this._getMemberDeclarations(_0x2f1a18.resolvedUris[_0x2f1a18.resolvedUris.length - 1], _0x34ab3b, _0x49d210);
          }
          return [];
        }
        _getFileSystem() {
          return this._view.importResolver.fileSystem;
        }
        _getParseResults(_0x2fbb7b, _0x4fc940) {
          _0x5d6aa2.throwIfCancellationRequested(_0x4fc940);
          let _0x50db44 = this._view.getParseResults(_0x2fbb7b);
          if (!_0x50db44 && this._getFileSystem().existsSync(_0x2fbb7b)) {
            this._mutator.addInterimFile(_0x2fbb7b);
            _0x50db44 = this._view.getParseResults(_0x2fbb7b);
          }
          return _0x50db44;
        }
        _getMemberDeclarations(_0x7bbe3b, _0x5567ff, _0x238b70) {
          _0x5d6aa2.throwIfCancellationRequested(_0x238b70);
          const _0x166196 = this._getParseResults(_0x7bbe3b, _0x238b70);
          if (!_0x166196 || !_0x166196.text.includes(_0x5567ff)) {
            return [];
          }
          const _0x34698f = _0x127510.getScopeForNode(_0x166196.parserOutput.parseTree);
          const _0x3b8cda = _0x34698f === null || _0x34698f === undefined ? undefined : _0x34698f.lookUpSymbol(_0x5567ff);
          if (!_0x3b8cda || !_0x3b8cda.hasDeclarations()) {
            return [];
          }
          const _0x31e2c6 = [];
          for (const _0x1bed32 of _0x3b8cda.getDeclarations()) {
            const _0xf23268 = this._view.evaluator.resolveAliasDeclaration(_0x1bed32, true, {
              allowExternallyHiddenAccess: true,
              skipFileNeededCheck: true
            });
            if (!_0xf23268) {
              continue;
            }
            _0x4d5711.addDeclarationIfUnique(_0x31e2c6, _0xf23268);
          }
          return _0x31e2c6;
        }
      }
      exports.StringDefinitionFinder = _0x3b8ac3;
    },
    2565: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.WorkspaceSymbolProvider = undefined;
      const _0x2427c5 = require(46292);
      class _0x350cc9 extends _0x2427c5.WorkspaceSymbolProvider {
        constructor(_0x2471b8, _0x53d735, _0x35eaf2, _0x15c65a, _0x5ec307) {
          super(_0x53d735, _0x35eaf2, _0x15c65a, _0x5ec307);
          this._globalIndices = _0x2471b8;
        }
        getSymbolsForDocument(_0x5218a5, _0x29081f) {
          const _0x2e6001 = this._globalIndices.getIndices(_0x5218a5).getSourceIndex(_0x29081f);
          if (_0x2e6001) {
            const _0x5589fe = [];
            this.appendWorkspaceSymbolsRecursive(_0x2e6001.symbols, _0x5218a5, _0x29081f, '', _0x5589fe);
            return _0x5589fe;
          }
          return super.getSymbolsForDocument(_0x5218a5, _0x29081f);
        }
      }
      exports.WorkspaceSymbolProvider = _0x350cc9;
    },
    15986: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.Localizer = undefined;
      exports.setGetRawString = _0x3602cf;
      const _0x36fe50 = require(18721);
      const _0x1ab625 = require(52420);
      const _0x1cb8d1 = require(76463);
      const _0x398820 = require(32535);
      const _0x17f1b2 = require(47011);
      const _0x141bc2 = require(94814);
      const _0x1e5bfa = require(29150);
      const _0x223f9b = require(14997);
      const _0x5967e8 = require(42235);
      const _0x14e0c3 = require(6842);
      const _0x4b68f1 = require(39452);
      const _0x27a7ec = require(53802);
      const _0x430f76 = require(49381);
      const _0x138ff9 = require(70417);
      const _0x545358 = require(41101);
      const _0x58efb8 = require(67703);
      const _0xeedfe6 = 'en-us';
      const _0x998708 = new Map([['cs', _0x36fe50], ['de', _0x1ab625], ['en-us', _0x1cb8d1], ['en', _0x1cb8d1], ['es', _0x398820], ['fr', _0x17f1b2], ['it', _0x141bc2], ['ja', _0x1e5bfa], ['ko', _0x223f9b], ['pl', _0x5967e8], ['pt-br', _0x14e0c3], ['qps-ploc', _0x4b68f1], ['ru', _0x27a7ec], ['tr', _0x430f76], ['zh-cn', _0x138ff9], ['zh-tw', _0x545358]]);
      let _0x27049e = undefined;
      let _0x1e8aab = {};
      function _0xcab5dc(_0x52d3ee) {
        if (_0x27049e === undefined) {
          _0x27049e = _0x5dcae3();
        }
        const _0x26c96a = _0x52d3ee.split('.');
        const _0x5d62df = _0x58efb8.getRawStringFromMap(_0x27049e, _0x26c96a) || _0x58efb8.getRawStringFromMap(_0x1e8aab, _0x26c96a);
        if (_0x5d62df) {
          return _0x5d62df;
        }
        return _0x4d3126(_0x52d3ee);
      }
      let _0x5bee18 = _0xcab5dc;
      const _0x4d3126 = _0x58efb8.setGetRawString(_0x5bee18);
      function _0x3602cf(_0x337908) {
        const _0x523e0d = _0x5bee18;
        _0x5bee18 = _0x337908;
        _0x58efb8.setGetRawString(_0x337908);
        return _0x523e0d;
      }
      function _0x5dcae3() {
        _0x1e8aab = _0x3e7d4c();
        const _0x330fc3 = _0x58efb8.getLocaleFromEnv();
        return _0x58efb8.loadStringsForLocale(_0x330fc3, _0x998708);
      }
      function _0x3e7d4c() {
        const _0x34717f = _0x998708.get(_0xeedfe6);
        if (_0x34717f) {
          return _0x34717f;
        }
        console.error('Could not load default strings');
        return {};
      }
      var _0x1e3740;
      (function (_0xed5832) {
        let _0x3df414;
        (function (_0x11d2f2) {
          _0x11d2f2.fixtureNotFound = () => new _0x58efb8.ParameterizedString(_0x5bee18('Pytest.fixtureNotFound'));
          _0x11d2f2.addTypeAnnnotation = () => new _0x58efb8.ParameterizedString(_0x5bee18('Pytest.addTypeAnnotation'));
          _0x11d2f2.addTypeAnnnotations = () => _0x5bee18('Pytest.addTypeAnnotations');
        })(_0x3df414 = _0xed5832.Pytest ||= {});
        let _0x3e9942;
        (function (_0x809592) {
          _0x809592.moveFile = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFile'));
          _0x809592.moveFileLabel = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileLabel'));
          _0x809592.moveFileDescription = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileDescription'));
          _0x809592.moveFileNotUserFile = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileNotUserFile'));
          _0x809592.moveFilePrivateSymbol = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFilePrivateSymbol'));
          _0x809592.moveFileImportableOnly = () => _0x5bee18('Refactoring.moveFileImportableOnly');
          _0x809592.moveFileUnsupportedSymbol = () => _0x5bee18('Refactoring.moveFileUnsupportedSymbol');
          _0x809592.moveFileMultipleDeclarations = () => _0x5bee18('Refactoring.moveFileMultipleDeclarations');
          _0x809592.moveFileSimpleAssignmentsOnly = () => _0x5bee18('Refactoring.moveFileSimpleAssignmentsOnly');
          _0x809592.moveFileExtensionMismatch = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileExtensionMismatch'));
          _0x809592.moveFileMissingInfo = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileMissingInfo'));
          _0x809592.moveFileSameFile = () => _0x5bee18('Refactoring.moveFileSameFile');
          _0x809592.moveFileSymbolNotFound = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileSymbolNotFound'));
          _0x809592.moveFileAbsentSymbol = () => _0x5bee18('Refactoring.moveFileAbsentSymbol');
          _0x809592.moveFileInsertLocation = () => new _0x58efb8.ParameterizedString(_0x5bee18('Refactoring.moveFileInsertLocation'));
        })(_0x3e9942 = _0xed5832.Refactoring ||= {});
        let _0x111f6a;
        (function (_0x2669d6) {
          let _0x170080;
          (function (_0x394a7e) {
            _0x394a7e.commandTitle = () => _0x5bee18('CodeAction.MoveSymbol.commandTitle');
            _0x394a7e.moveSymbolsTo = () => _0x5bee18('CodeAction.MoveSymbol.moveSymbolsTo');
            _0x394a7e.moveSymbolsToNewFile = () => _0x5bee18('CodeAction.MoveSymbol.moveSymbolsToNewFile');
          })(_0x170080 = _0x2669d6.MoveSymbol ||= {});
          let _0x321c20;
          (function (_0x3d5291) {
            _0x3d5291.method = () => _0x5bee18('CodeAction.Extract.method');
            _0x3d5291.variable = () => _0x5bee18('CodeAction.Extract.variable');
          })(_0x321c20 = _0x2669d6.Extract ||= {});
          let _0x3ec28d;
          (function (_0x96f41e) {
            _0x96f41e.removeUnusedImport = () => _0x5bee18('CodeAction.RemoveUnusedImport.removeUnusedImport');
            _0x96f41e.removeAllUnusedImports = () => _0x5bee18('CodeAction.RemoveUnusedImport.removeAllUnusedImports');
          })(_0x3ec28d = _0x2669d6.RemoveUnusedImport ||= {});
          let _0xd42573;
          (function (_0x1f3647) {
            _0x1f3647.convertToRelativePath = () => _0x5bee18('CodeAction.ToggleImportPath.convertToRelativePath');
            _0x1f3647.convertAllToRelativePath = () => _0x5bee18('CodeAction.ToggleImportPath.convertAllToRelativePath');
            _0x1f3647.convertToAbsolutePath = () => _0x5bee18('CodeAction.ToggleImportPath.convertToAbsolutePath');
            _0x1f3647.convertAllToAbsolutePath = () => _0x5bee18('CodeAction.ToggleImportPath.convertAllToAbsolutePath');
            _0x1f3647.convertAllFormat = () => _0x5bee18('CodeAction.ToggleImportPath.convertAllFormat');
          })(_0xd42573 = _0x2669d6.ToggleImportPath ||= {});
          let _0x337627;
          (function (_0x297fa8) {
            _0x297fa8.addExtraPath = () => new _0x58efb8.ParameterizedString(_0x5bee18('CodeAction.ExtraPath.addExtraPath'));
          })(_0x337627 = _0x2669d6.ExtraPath ||= {});
          let _0x2b0183;
          (function (_0x40ed1e) {
            _0x40ed1e.addAutoImport = () => new _0x58efb8.ParameterizedString(_0x5bee18('CodeAction.AutoImport.addAutoImport'));
            _0x40ed1e.searchImport = () => _0x5bee18('CodeAction.AutoImport.searchImport');
          })(_0x2b0183 = _0x2669d6.AutoImport ||= {});
          let _0x1a4cb7;
          (function (_0x2f8b65) {
            _0x2f8b65.changeSpellingTo = () => new _0x58efb8.ParameterizedString(_0x5bee18('CodeAction.ChangeSpelling.changeSpellingTo'));
          })(_0x1a4cb7 = _0x2669d6.ChangeSpelling ||= {});
          let _0x354c95;
          (function (_0x1f3c2b) {
            _0x1f3c2b.runFixAll = () => _0x5bee18('CodeAction.FixAll.runFixAll');
          })(_0x354c95 = _0x2669d6.FixAll ||= {});
          let _0x26d712;
          (function (_0xf867d6) {
            _0xf867d6.selectInterpreterTitle = () => _0x5bee18('CodeAction.UnresolvedImports.selectInterpreterTitle');
            _0xf867d6.selectKernelTitle = () => _0x5bee18('CodeAction.UnresolvedImports.selectKernelTitle');
            _0xf867d6.learnMoreTitle = () => _0x5bee18('CodeAction.UnresolvedImports.learnMoreTitle');
          })(_0x26d712 = _0x2669d6.UnresolvedImports ||= {});
          let _0x3e1524;
          (function (_0x20105e) {
            _0x20105e.implementAllAbstractClasses = () => _0x5bee18('CodeAction.ImplementAbstractClass.implementAllAbstractClasses');
            _0x20105e.implementAllAbstractClassesWithCopilot = () => _0x5bee18('Copilot.implementAllInheritedAbstractClasseswithCopilot');
          })(_0x3e1524 = _0x2669d6.ImplementAbstractClass ||= {});
          let _0x1d0ab2;
          (function (_0x2ca004) {
            _0x2ca004.generateDocstring = () => _0x5bee18('DocstringTemplate.GenerateDocstring');
            _0x2ca004.generateDocstringWithCopilot = () => _0x5bee18('Copilot.GenerateDocstringWithCopilot');
          })(_0x1d0ab2 = _0x2669d6.GenerateDocstring ||= {});
        })(_0x111f6a = _0xed5832.CodeAction ||= {});
        let _0x46dc9a;
        (function (_0x1e48ed) {
          _0x1e48ed.importResolveRedirect = () => new _0x58efb8.ParameterizedString(_0x5bee18('Diagnostic.importResolveRedirect'));
        })(_0x46dc9a = _0xed5832.Diagnostic ||= {});
        let _0x1deff3;
        (function (_0x5804f7) {
          _0x5804f7.defaultPythonEnvironmentName = () => _0x5bee18('Messages.defaultPythonEnvironmentName');
          _0x5804f7.windowsStoreEnvironmentName = () => _0x5bee18('Messages.windowsStoreEnvironmentName');
          _0x5804f7.globalEnvironmentName = () => _0x5bee18('Messages.globalEnvironmentName');
          _0x5804f7.singularFileAndSingularCellToAnalyze = () => _0x5bee18('Messages.singularFileAndSingularCellToAnalyze');
          _0x5804f7.singularFileAndPluralCellsToAnalyze = () => new _0x58efb8.ParameterizedString(_0x5bee18('Messages.singularFileAndPluralCellsToAnalyze'));
          _0x5804f7.pluralFilesAndSingularCellToAnalyze = () => new _0x58efb8.ParameterizedString(_0x5bee18('Messages.pluralFilesAndSingularCellToAnalyze'));
          _0x5804f7.pluralFilesAndPluralCellsToAnalyze = () => new _0x58efb8.ParameterizedString(_0x5bee18('Messages.pluralFilesAndPluralCellsToAnalyze'));
        })(_0x1deff3 = _0xed5832.Messages ||= {});
        let _0x33c74d;
        (function (_0x3c4ab6) {
          let _0x5f0f8d;
          (function (_0x24921a) {
            _0x24921a.profilingDataSaved = () => new _0x58efb8.ParameterizedString(_0x5bee18('Commands.ProfilingCommand.profilingDataSaved'));
          })(_0x5f0f8d = _0x3c4ab6.ProfilingCommand ||= {});
          let _0x326e0d;
          (function (_0x1e6ebb) {
            _0x1e6ebb.loggingDataSaved = () => new _0x58efb8.ParameterizedString(_0x5bee18('Commands.LoggingCommand.loggingDataSaved'));
          })(_0x326e0d = _0x3c4ab6.LoggingCommand ||= {});
          _0x3c4ab6.gotoOutputCommand = () => _0x5bee18('Commands.gotoOutputCommand');
        })(_0x33c74d = _0xed5832.Commands ||= {});
        let _0x90495d;
        (function (_0x25e8b0) {
          _0x25e8b0.title = () => _0x5bee18('PerformanceTracking.title');
          _0x25e8b0.button = () => _0x5bee18('PerformanceTracking.button');
        })(_0x90495d = _0xed5832.PerformanceTracking ||= {});
        let _0x2a2476;
        (function (_0x1f4ba1) {
          _0x1f4ba1.docstringForName = () => new _0x58efb8.ParameterizedString(_0x5bee18('DocstringTemplate.docstringForName'));
          _0x1f4ba1.description = () => _0x5bee18('DocstringTemplate.description');
        })(_0x2a2476 = _0xed5832.DocstringTemplate ||= {});
      })(_0x1e3740 || (exports.Localizer = _0x1e3740 = {}));
    },
    97219: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncApplyEditFeature = undefined;
      const _0x541a30 = require(8067);
      const _0x5b7993 = _0x10c649 => {
        return class extends _0x10c649 {
          applyEditSync(_0x33bcbe) {
            var _0x34c6d3;
            if (!this._clientConnection) {
              throw new Error('Client connection not attached');
            }
            const _0x5219c6 = (_0x34c6d3 = this._clientConnection) === null || _0x34c6d3 === undefined ? undefined : _0x34c6d3.sendRequest('workspace/applyEditSync', _0x33bcbe, new _0x541a30.VariableResult('json'));
            if (_0x5219c6.errno === 0 && _0x5219c6.data) {
              return _0x5219c6.data;
            }
            throw new Error(`applyEditSync failed with error ${_0x5219c6.errno}`);
          }
          attachClient(_0x1bc44d) {
            this._clientConnection = _0x1bc44d;
          }
        };
      };
      exports.SyncApplyEditFeature = _0x5b7993;
    },
    54341: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncConfigurationFeature = undefined;
      const _0x61bd17 = require(8067);
      const _0x411f64 = _0x368943 => {
        return class extends _0x368943 {
          getConfigurationSync(_0x2b125c) {
            var _0x2714ca;
            if (!this._clientConnection) {
              throw new Error('Client connection not attached');
            }
            let _0x18a824 = false;
            const _0xea1eec = [];
            if (typeof _0x2b125c === 'string') {
              _0xea1eec.push({
                section: _0x2b125c
              });
              _0x18a824 = true;
            } else {
              if (Array.isArray(_0x2b125c)) {
                _0xea1eec.push(..._0x2b125c);
              } else {
                if (_0x2b125c) {
                  _0xea1eec.push(_0x2b125c);
                  _0x18a824 = true;
                }
              }
            }
            const _0x3247dd = (_0x2714ca = this._clientConnection) === null || _0x2714ca === undefined ? undefined : _0x2714ca.sendRequest('workspace/configurationSync', {
              items: _0xea1eec
            }, new _0x61bd17.VariableResult('json'));
            if (_0x3247dd.errno === 0 && _0x3247dd.data) {
              let _0x2f2ce8 = _0x3247dd.data;
              if (_0x18a824 && Array.isArray(_0x2f2ce8)) {
                _0x2f2ce8 = _0x2f2ce8[0];
              }
              return _0x2f2ce8;
            }
            throw new Error(`getConfigurationSync failed with error ${_0x3247dd.errno}`);
          }
          attachClient(_0xed39f) {
            this._clientConnection = _0xed39f;
          }
        };
      };
      exports.SyncConfigurationFeature = _0x411f64;
    },
    24131: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncConnection = undefined;
      const _0x23fc16 = require(56911);
      const _0x2483a9 = require(97219);
      const _0x28f08b = require(54341);
      const _0x5646d2 = require(35040);
      const _0x3468ef = require(80520);
      const _0x2f09bb = require(22265);
      var _0x69e0ae;
      (function (_0x3e2c77) {
        _0x3e2c77.all = {
          __brand: 'features',
          workspace: _0x23fc16.combineWorkspaceFeatures(_0x23fc16.combineWorkspaceFeatures(_0x23fc16.combineWorkspaceFeatures(_0x2483a9.SyncApplyEditFeature, _0x28f08b.SyncConfigurationFeature), _0x5646d2.SyncFileSystemFeature), _0x2f09bb.SyncWorkspaceFoldersFeature),
          window: _0x3468ef.SyncProgressFeature
        };
      })(_0x69e0ae || (exports.SyncConnection = _0x69e0ae = {}));
    },
    35040: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncFileSystemFeature = undefined;
      const _0x1d7da7 = require(8067);
      const _0x1dbdcd = _0x1b2253 => {
        return class extends _0x1b2253 {
          get fileSystem() {
            return {
              readSync: _0x4067c7 => {
                var _0x2ee4b7;
                if (!this._clientConnection) {
                  throw new Error('Client connection not attached');
                }
                const _0x41a45f = (_0x2ee4b7 = this._clientConnection) === null || _0x2ee4b7 === undefined ? undefined : _0x2ee4b7.sendRequest('file/readSync', {
                  uri: _0x4067c7
                }, new _0x1d7da7.VariableResult('binary'));
                if (_0x41a45f.errno === 0 && _0x41a45f.data) {
                  return _0x41a45f.data;
                }
                throw new Error(`readSync failed with error ${_0x41a45f.errno}`);
              },
              readDirectorySync: _0x56490c => {
                var _0x100631;
                if (!this._clientConnection) {
                  throw new Error('Client connection not attached');
                }
                const _0x536a0d = (_0x100631 = this._clientConnection) === null || _0x100631 === undefined ? undefined : _0x100631.sendRequest('file/readDirectorySync', {
                  uri: _0x56490c
                }, new _0x1d7da7.VariableResult('json'));
                if (_0x536a0d.errno === 0 && _0x536a0d.data) {
                  return _0x536a0d.data;
                }
                throw new Error(`readDirectorySync failed with error ${_0x536a0d.errno}`);
              },
              statSync: _0x19fef9 => {
                var _0x4b16ae;
                if (!this._clientConnection) {
                  throw new Error('Client connection not attached');
                }
                const _0x363732 = (_0x4b16ae = this._clientConnection) === null || _0x4b16ae === undefined ? undefined : _0x4b16ae.sendRequest('file/statSync', {
                  uri: _0x19fef9
                }, new _0x1d7da7.VariableResult('json'));
                if (_0x363732.errno === 0 && _0x363732.data) {
                  return _0x363732.data;
                }
                if (_0x363732.errno === 0 && _0x363732.data === null) {
                  return {
                    size: 0,
                    mtime: 0,
                    type: 'unknown'
                  };
                }
                throw new Error(`statSync failed with error ${_0x363732.errno}`);
              }
            };
          }
          attachClient(_0x107b4d) {
            this._clientConnection = _0x107b4d;
          }
        };
      };
      exports.SyncFileSystemFeature = _0x1dbdcd;
    },
    80520: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncProgressFeature = undefined;
      const _0x314ff9 = require(8067);
      const _0x4dfdf9 = require(2582);
      const _0x3d4c78 = _0x3496b7 => {
        return class extends _0x3496b7 {
          createWorkDoneProgressSync() {
            var _0x3c1cdc;
            if (!this._clientConnection) {
              throw new Error('Client connection not attached');
            }
            const _0x44c671 = (_0x3c1cdc = this._clientConnection) === null || _0x3c1cdc === undefined ? undefined : _0x3c1cdc.sendRequest('window/workDoneProgress/createSync', new _0x314ff9.VariableResult('json'));
            if (_0x44c671.errno === 0 && _0x44c671.data) {
              const _0xc8ca1 = _0x44c671.data.token;
              const _0x174866 = _0x4dfdf9.attachWorkDone(this.connection, {
                workDoneToken: _0xc8ca1
              });
              const _0x4737af = this._clientConnection;
              return new class {
                get token() {
                  return {
                    get isCancellationRequested() {
                      const _0x3f9f82 = _0x4737af === null || _0x4737af === undefined ? undefined : _0x4737af.sendRequest('window/workDoneProgress/isCanceledSync', {
                        token: _0xc8ca1
                      }, new _0x314ff9.VariableResult('json'));
                      if (_0x3f9f82.errno === 0) {
                        return _0x3f9f82.data;
                      }
                      throw new Error(`isCanceledSync failed with error ${_0x3f9f82.errno}`);
                    },
                    onCancellationRequested() {
                      throw new Error('onCanncellationRequested not implemented');
                    }
                  };
                }
                begin(_0x5503fc, _0x264586, _0x190df1, _0x250896) {
                  _0x174866.begin(_0x5503fc, _0x264586, _0x190df1, _0x250896);
                }
                report(_0x19b8cc, _0x3ae6b0) {
                  if (typeof _0x19b8cc === 'number') {
                    _0x174866.report(_0x19b8cc, _0x3ae6b0 || '');
                  } else {
                    _0x174866.report(_0x19b8cc);
                  }
                }
                done() {
                  _0x174866.done();
                }
              }();
            }
            throw new Error(`readSync failed with error ${_0x44c671.errno}`);
          }
          attachClient(_0x84501c) {
            this._clientConnection = _0x84501c;
          }
        };
      };
      exports.SyncProgressFeature = _0x3d4c78;
    },
    22265: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SyncWorkspaceFoldersFeature = undefined;
      const _0x4177c2 = require(8067);
      const _0x5bdba = _0x28a742 => {
        return class extends _0x28a742 {
          getWorkspaceFoldersSync() {
            var _0x39c769;
            if (!this._clientConnection) {
              throw new Error('Client connection not attached');
            }
            const _0x3dcc0d = (_0x39c769 = this._clientConnection) === null || _0x39c769 === undefined ? undefined : _0x39c769.sendRequest('workspace/workspaceFoldersSync', undefined, new _0x4177c2.VariableResult('json'));
            if (_0x3dcc0d.errno === 0 && _0x3dcc0d.data) {
              return _0x3dcc0d.data;
            }
            throw new Error(`workspaceFoldersSync failed with error ${_0x3dcc0d.errno}`);
          }
          attachClient(_0x3dcac2) {
            this._clientConnection = _0x3dcac2;
          }
        };
      };
      exports.SyncWorkspaceFoldersFeature = _0x5bdba;
    },
    68189: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.createConnectionToClient = _0x5ad771;
      const _0x3ffa80 = require(18851);
      const _0x32b79a = require(81658);
      const _0x3fa8da = require(28167);
      const _0x40c326 = require(24131);
      function _0x5ad771(_0x510ffb, _0x1e71d4, _0x38935e) {
        const _0x5a895d = _0x32b79a.createConnection(_0x40c326.SyncConnection.all, _0x510ffb, _0x1e71d4, _0x38935e);
        const _0x331feb = new _0x3ffa80.ClientConnection(_0x3fa8da.parentPort);
        _0x5a895d.window.attachClient(_0x331feb);
        _0x5a895d.workspace.attachClient(_0x331feb);
        return {
          ..._0x5a895d,
          syncConnection: _0x331feb
        };
      }
    },
    22205: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FilteringWorker = undefined;
      class _0x211dea {
        constructor(_0x141705, _0x2d7e45) {
          this._worker = _0x141705;
          this._filter = _0x2d7e45;
        }
        get stdin() {
          return this._worker.stdin;
        }
        get stdout() {
          return this._worker.stdout;
        }
        get stderr() {
          return this._worker.stderr;
        }
        get threadId() {
          return this._worker.threadId;
        }
        get performance() {
          return this._worker.performance;
        }
        postMessage(_0x20919b, _0x33e6d5) {
          this._worker.postMessage(_0x20919b, _0x33e6d5);
        }
        postMessageToThread(_0x1c6f47, _0x5ae153, _0x4a106b, _0x455c3d) {
          if (typeof _0x4a106b === 'number' || _0x4a106b === undefined) {
            return this._worker.postMessageToThread(_0x1c6f47, _0x5ae153, _0x4a106b);
          } else {
            return this._worker.postMessageToThread(_0x1c6f47, _0x5ae153, _0x4a106b, _0x455c3d);
          }
        }
        ref() {
          this._worker.ref();
        }
        unref() {
          this._worker.unref();
        }
        terminate() {
          return this._worker.terminate();
        }
        getHeapSnapshot() {
          return this._worker.getHeapSnapshot();
        }
        addListener(_0x9e52ff, _0x191b41) {
          this._worker.addListener(_0x9e52ff, _0x3032e0 => {
            if (this._filter(_0x3032e0)) {
              _0x191b41(_0x3032e0);
            }
          });
          return this;
        }
        emit(_0x302e92, _0x4d0a60, ..._0x48966c) {
          return this._worker.emit(_0x302e92, _0x4d0a60, ..._0x48966c);
        }
        once(_0xd9a815, _0xc6fdd8) {
          this._worker.once(_0xd9a815, _0xc6fdd8);
          return this;
        }
        prependListener(_0x5e03eb, _0x7bc998) {
          this._worker.prependListener(_0x5e03eb, _0x7bc998);
          return this;
        }
        prependOnceListener(_0x1e7dba, _0x26ac76) {
          this._worker.prependOnceListener(_0x1e7dba, _0x26ac76);
          return this;
        }
        removeListener(_0x4ed101, _0x48101b) {
          this._worker.removeListener(_0x4ed101, _0x48101b);
          return this;
        }
        off(_0x19caa4, _0x487514) {
          this._worker.off(_0x19caa4, _0x487514);
          return this;
        }
        removeAllListeners(_0x278f54) {
          this._worker.removeAllListeners(_0x278f54);
          return this;
        }
        setMaxListeners(_0x534877) {
          this._worker.setMaxListeners(_0x534877);
          return this;
        }
        getMaxListeners() {
          return this._worker.getMaxListeners();
        }
        listeners(_0x1a3bb3) {
          return this._worker.listeners(_0x1a3bb3);
        }
        rawListeners(_0x201e8f) {
          return this._worker.rawListeners(_0x201e8f);
        }
        listenerCount(_0x2ddf5a) {
          return this._worker.listenerCount(_0x2ddf5a);
        }
        eventNames() {
          return this._worker.eventNames();
        }
        on(_0xd1a080, _0x3358d2) {
          this._worker.on(_0xd1a080, _0x14d456 => {
            if (this._filter(_0x14d456)) {
              _0x3358d2(_0x14d456);
            }
          });
          return this;
        }
      }
      exports.FilteringWorker = _0x211dea;
    },
    96627: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.createNodeServiceProviders = _0x348177;
      const _0x37c144 = require(32720);
      const _0x21821d = require(27113);
      const _0x40ea44 = require(61569);
      const _0x5e00b9 = require(65409);
      const _0x5c06b5 = require(61231);
      const _0x2576c3 = require(84590);
      const _0x64c9ae = require(71069);
      const _0x422e95 = require(94818);
      const _0x4de219 = require(30048);
      const _0x364d0a = require(3777);
      const _0x179380 = require(69482);
      const _0x215ed9 = require(77981);
      const _0x1a3424 = require(1044);
      const _0x162a44 = require(53062);
      const _0x251a93 = require(31756);
      const _0x2627b8 = require(77907);
      function _0x348177(_0x47c5b7, _0x1d171c, _0x38fd73, _0x3ef8fc, _0x4e1642, _0x1e2d8c) {
        const _0x2045a4 = new _0x179380.TelemetryService(_0x1d171c);
        const _0x54f752 = new _0x5e00b9.LogService(_0x4e1642);
        const _0x350617 = new _0x2576c3.Platform();
        const _0x28ca5c = new _0x37c144.CacheManager();
        const _0x1eb9b7 = new _0x162a44.MRUQueues();
        const _0x86650b = new _0x5c06b5.LSPService(_0x1d171c);
        const _0x31a1f6 = _0x21821d.Uri.file(_0x47c5b7, _0x1e2d8c, true);
        const _0x117771 = _0x31a1f6.combinePaths('bundled', 'wasm', 'tree-sitter.wasm');
        const _0x39a6b8 = _0x31a1f6.combinePaths('bundled', 'wasm', 'tree-sitter-rst.wasm');
        const _0x53da50 = new _0x64c9ae.PylanceDocStringService(_0x38fd73, _0x117771, _0x39a6b8, _0x4e1642);
        const _0x3678e4 = _0x4de219.createPylanceServiceProvider(_0x38fd73, _0x3ef8fc, _0x1e2d8c, _0x4e1642, _0x2045a4, _0x54f752, _0x350617, new _0x1a3424.IndicesManager(), new _0x215ed9.IntelliCodeService(_0x54f752, _0x350617, _0x2045a4), _0x28ca5c, new _0x364d0a.LimitedSettingTransformer(), _0x1eb9b7, _0x86650b, _0x53da50, new _0x251a93.PackageDiscoverer());
        _0x3678e4.add(_0x4de219.PylanceServiceKeys.backgroundAnalysisFactory, new _0x40ea44.BackgroundAnalysisFactory(_0x3678e4));
        _0x3678e4.add(_0x4de219.PylanceServiceKeys.hostFactory, new _0x422e95.PylanceFullAccessHostFactory(_0x3678e4));
        _0x3678e4.add(_0x4de219.PylanceServiceKeys.profilingService, new _0x2627b8.ProfilingService(_0x3678e4, 'FG_'));
        return _0x3678e4;
      }
    },
    91693: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.run = _0x18ca7f;
      const _0x251280 = require(81658);
      const _0x4ee3f8 = require(28167);
      const _0x1f0bf6 = require(64330);
      const _0x9f71b5 = require(25075);
      const _0x46be9f = require(34487);
      const _0x5bba48 = require(27643);
      const _0x2430c6 = require(27113);
      const _0x1c0f29 = require(86500);
      const _0x5b5428 = require(85417);
      const _0x169b05 = require(67299);
      const _0x1f98fa = require(99504);
      const _0x30b4b9 = require(44889);
      const _0x59b537 = require(45210);
      const _0x41d4a5 = require(79524);
      const _0x18e384 = require(68189);
      const _0x3be1cd = require(93307);
      const _0x1cf461 = require(96627);
      const _0x34cb86 = __dirname;
      function _0xe22472() {
        try {
          const _0xca81a6 = new _0x251280.PortMessageReader(_0x4ee3f8.parentPort);
          const _0x32baa8 = new _0x251280.PortMessageWriter(_0x4ee3f8.parentPort);
          const _0x144047 = _0x18e384.createConnectionToClient(_0xca81a6, _0x32baa8, _0x1c0f29.getConnectionOptions());
          const _0x2e28c7 = new _0x5bba48.RealTempFile();
          const _0x3c8970 = new _0x9f71b5.ConsoleWithLogLevel(_0x144047.console, process.pid.toString());
          const _0x18af64 = new _0x5bba48.WorkspaceFileWatcherProvider();
          const _0x3ac718 = _0x5bba48.createFromRealFileSystem(_0x2e28c7, _0x3c8970, _0x18af64);
          const _0x1eb824 = new _0x30b4b9.NotebookUriMapper(_0x2e28c7);
          const _0x16b64e = _0x41d4a5.PylanceFileSystem.createFromConnection(_0x144047, _0x3ac718, _0x1eb824);
          const _0x4051b6 = _0x1cf461.createNodeServiceProviders(_0x34cb86, _0x144047, _0x16b64e, _0x1eb824, _0x3c8970, _0x2e28c7);
          const _0x4f28b8 = _0x2430c6.Uri.file(_0x34cb86, _0x4051b6, true);
          const _0x202444 = {
            productName: 'Pylance',
            rootDirectory: _0x4f28b8,
            version: _0x1f98fa.VERSION + ' (pyright version ' + _0x1f98fa.PYRIGHT_VERSION + ', commit ' + _0x1f98fa.PYRIGHT_COMMIT.substring(0, 8) + ')',
            serviceProvider: _0x4051b6,
            fileWatcherHandler: _0x18af64,
            cancellationProvider: new _0x46be9f.FileBasedCancellationProvider('bg'),
            supportedCommands: _0x169b05.SyncCommandController.supportedCommands(),
            supportedCodeActions: [_0x251280.CodeActionKind.QuickFix, _0x251280.CodeActionKind.Refactor, _0x251280.CodeActionKind.RefactorExtract, _0x251280.CodeActionKind.SourceFixAll, ..._0x59b537.pylanceCodeActionKinds],
            supportsTelemetry: true,
            hasVSCodeExtension: true
          };
          new _0x3be1cd.PylanceSyncServer(_0x202444, _0x144047);
        } catch (_0x5c24e7) {
          console.error(_0x5c24e7);
          throw _0x5c24e7;
        }
      }
      const _0x1d5228 = 'worker_started';
      async function _0x18ca7f() {
        await _0x1f0bf6.initializeDependencies();
        if (_0x4ee3f8.getEnvironmentData(_0x1d5228) === 'true') {
          _0x5b5428.runBackgroundThread();
        } else {
          _0x4ee3f8.setEnvironmentData(_0x1d5228, 'true');
          _0xe22472();
        }
      }
    },
    31753: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PackageScanner = undefined;
      const _0x505cae = require(75130);
      const _0x591523 = require(92031);
      const _0x291a50 = require(12097);
      const _0x217ab9 = require(91426);
      const _0x113660 = require(58147);
      const _0x46b14f = require(34455);
      const _0x27c804 = __importStar(require(48281));
      const _0x5d1e16 = require(27113);
      const _0x22aec6 = require(5884);
      const _0x565213 = require(30371);
      const _0x3271fa = require(77001);
      const _0x15851d = require(7587);
      const _0x405e82 = {
        maxDepth: Number.MAX_VALUE,
        includeAllSymbols: false
      };
      class _0x598195 {
        constructor(_0x23ed45, _0x5c25fe, _0x151ab9, _0x245a54, _0x403867, _0x2819ad, _0xb042c) {
          this._stdLibIndices = _0x151ab9;
          this._includeThirdParty = _0x245a54;
          this._packageOptions = _0x2819ad;
          this._indicesPerExecEnv = new _0x3271fa.UriMap();
          this._executionEnvironments = [];
          this._stdLibPaths = new Map();
          this._thirdPartyPaths = new Map();
          this._excludedStdLibModules = new Set(['__future__', 'this', 'antigravity']);
          this._defaultDepthLimit = _0x46b14f.isNumber(_0x403867) ? {
            maxDepth: _0x403867,
            includeAllSymbols: false
          } : _0x403867;
          this._executionEnvironments = _0x23ed45.getExecutionEnvironments().filter(_0x81a7a7 => !!_0x81a7a7.root);
          for (const _0x22bcaa of this._executionEnvironments) {
            this._stdLibPaths.set(_0x22bcaa.root?.key ?? '', _0x5c25fe.getTypeshedStdLibPath(_0x22bcaa));
            this._thirdPartyPaths.set(_0x22bcaa.root?.key ?? '', _0x5c25fe.getTypeshedThirdPartyPath(_0x22bcaa));
          }
          this._bundledStubPath = _0x565213.getBundledTypeStubsPath(_0x5c25fe.fileSystem.getModulePath());
          this._fs = new _0x46d859(_0x5c25fe, _0xb042c);
        }
        getFileCache() {
          return this._fs.getFileCache();
        }
        getModuleFilesPerExecEnv() {
          var _0x2e33bb;
          const _0x351112 = new _0x15851d.ModuleFilesExecEnvMap();
          const _0x42cca4 = new Map();
          for (const [_0x28ee19, _0x5ed307] of this._indicesPerExecEnv) {
            for (const [, _0x519228] of _0x5ed307) {
              if (!_0x519228.isStdLib && _0x519228.isStub && !_0x519228.shadowed) {
                continue;
              }
              const _0x336ef1 = (_0x2e33bb = this._stdLibIndices) === null || _0x2e33bb === undefined ? undefined : _0x2e33bb.get(_0x28ee19);
              if (_0x336ef1 && _0x519228.isStdLib) {
                continue;
              }
              if (!this._includeThirdParty && !_0x519228.isStdLib) {
                _0x27c804.fail(_0x519228.uri + ' shouldn\'t be included with no third party flag on');
              }
              if (!_0x22aec6.hasPythonExtension(_0x519228.uri)) {
                continue;
              }
              _0x42cca4.set(_0x519228.uri.key, _0x519228);
            }
            _0x351112.set(_0x28ee19, [..._0x42cca4.values()]);
            _0x42cca4.clear();
          }
          return _0x351112;
        }
        scan(_0x5d7896) {
          var _0x1a0818;
          var _0x563719;
          for (const _0x2b3beb of this._executionEnvironments) {
            const _0x35344b = this._stdLibPaths.get(_0x2b3beb.root?.key ?? '');
            const _0x48a73c = this._thirdPartyPaths.get(_0x2b3beb.root?.key ?? '');
            const _0x1824d7 = this._fs.getRoots(_0x2b3beb);
            const _0x38d593 = (_0x1a0818 = this._stdLibIndices) === null || _0x1a0818 === undefined ? undefined : _0x1a0818.get(_0x2b3beb.root ?? _0x5d1e16.Uri.empty());
            if (_0x38d593) {
              this._populateStdLibInfo(_0x2b3beb);
            }
            const _0x1a585e = new Set(this._fs.getTypeshedStdlibExcludeList(_0x2b3beb).map(_0x457dec => _0x457dec.key));
            for (const _0x4cc0ed of _0x1824d7) {
              const _0x551b64 = _0x35344b ? _0x4cc0ed.startsWith(_0x35344b) : false;
              if (_0x38d593 && _0x551b64) {
                continue;
              }
              if (!this._includeThirdParty && !_0x551b64) {
                continue;
              }
              const _0x5e2ac4 = _0x48a73c ? _0x4cc0ed.startsWith(_0x48a73c) : false;
              const _0x1808a2 = _0x4cc0ed.startsWith(this._bundledStubPath);
              for (const _0x2960e2 of this._fs.readdirEntriesSync(_0x4cc0ed)) {
                _0x217ab9.throwIfCancellationRequested(_0x5d7896);
                if (_0x551b64 && _0x1a585e.has(_0x2960e2.uri.key)) {
                  continue;
                }
                if (_0x2960e2.isFile) {
                  if (_0x2960e2.isInit) {
                    continue;
                  }
                  if (_0x2960e2.isStub) {
                    const _0xd85b97 = this._fs.getModuleNameForImport(_0x2960e2.uri, _0x2b3beb);
                    if (_0xd85b97) {
                      this._setMap({
                        execEnv: _0x2b3beb,
                        isStdLib: _0x551b64,
                        isTypeshedStub: _0x5e2ac4,
                        isBundledStub: _0x1808a2,
                        packageName: _0xd85b97,
                        depthLimit: this._defaultDepthLimit
                      }, _0xd85b97, false, _0x2960e2, 1);
                    }
                    continue;
                  }
                }
                if (!_0x2960e2.isFile && _0x2960e2.public) {
                  const _0x35610b = this._fs.getModuleNameForImport(_0x2960e2.uri, _0x2b3beb);
                  const _0x333949 = (_0x563719 = this._packageOptions) === null || _0x563719 === undefined ? undefined : _0x563719.get(_0x35610b);
                  const _0x2eed87 = 1;
                  const _0x147bfc = {
                    execEnv: _0x2b3beb,
                    isStdLib: _0x551b64,
                    isTypeshedStub: _0x5e2ac4,
                    isBundledStub: _0x1808a2,
                    packageName: _0x2960e2.containsInit ? _0x35610b : undefined,
                    depthLimit: _0x333949 ?? (_0x551b64 ? _0x405e82 : this._defaultDepthLimit)
                  };
                  const _0x51f9c0 = _0x2960e2.containsPyTyped ?? false;
                  if (this._include(_0x2eed87, _0x147bfc.depthLimit.maxDepth)) {
                    this._scan(_0x1824d7, _0x147bfc, _0x51f9c0, _0x2960e2.uri, _0x2eed87, _0x5d7896);
                  }
                }
              }
            }
          }
        }
        _scan(_0x376ead, _0x4c653e, _0x26ccf1, _0x1c21e0, _0x31145f, _0x1a1cef) {
          if (_0x376ead.some(_0x4c72f8 => _0x1c21e0.equals(_0x4c72f8))) {
            return;
          }
          const _0x5688e0 = _0x31145f + 1;
          for (const _0x22c210 of this._fs.readdirEntriesSync(_0x1c21e0)) {
            _0x217ab9.throwIfCancellationRequested(_0x1a1cef);
            if (_0x22c210.isFile) {
              if (_0x22c210.isInit) {
                const _0x5cb35c = this._fs.getModuleNameForImport(_0x22c210.uri, _0x4c653e.execEnv);
                if (_0x5cb35c) {
                  this._setMap(_0x4c653e, _0x5cb35c, _0x26ccf1, _0x22c210, _0x31145f);
                }
                continue;
              }
              if (_0x22c210.isStub || _0x22c210.containsInit) {
                const _0x17537c = this._fs.getModuleNameForImport(_0x22c210.uri, _0x4c653e.execEnv);
                if (_0x17537c) {
                  const _0x5060e2 = _0x4c653e.packageName ? _0x4c653e : {
                    ..._0x4c653e,
                    packageName: _0x17537c
                  };
                  this._setMap(_0x5060e2, _0x17537c, _0x26ccf1, _0x22c210, _0x5688e0);
                }
                continue;
              }
            }
            if (!_0x22c210.isFile && _0x22c210.public && this._include(_0x5688e0, _0x4c653e.depthLimit.maxDepth)) {
              const _0x230fa7 = !_0x22c210.containsInit || _0x4c653e.packageName ? _0x4c653e : {
                ..._0x4c653e,
                packageName: this._fs.getModuleNameForImport(_0x22c210.uri, _0x4c653e.execEnv)
              };
              this._scan(_0x376ead, _0x230fa7, _0x26ccf1, _0x22c210.uri, _0x5688e0, _0x1a1cef);
            }
          }
        }
        _populateStdLibInfo(_0x2cd222) {
          const _0xf5fa39 = this._stdLibIndices.get(_0x2cd222.root ?? _0x5d1e16.Uri.empty());
          for (const _0x5e1bc2 of _0xf5fa39.keys()) {
            const _0x4216ac = _0x5e1bc2;
            const _0x2de3a7 = this._fs.getModuleNameForImport(_0x4216ac, _0x2cd222);
            if (_0x2de3a7) {
              this._setMap({
                execEnv: _0x2cd222,
                isStdLib: true,
                isTypeshedStub: false,
                isBundledStub: false,
                packageName: undefined,
                depthLimit: this._defaultDepthLimit
              }, _0x2de3a7, false, {
                isStub: _0x4216ac.hasExtension('.pyi'),
                uri: _0x4216ac
              }, 1);
            }
          }
        }
        _setMap(_0x22019f, _0x5c70c6, _0x364508, _0x381165, _0x4cdaed) {
          if (_0x22019f.isStdLib && this._excludedStdLibModules.has(_0x5c70c6)) {
            return;
          }
          const _0x2a1c2d = _0x113660.getOrAdd(this._indicesPerExecEnv, _0x22019f.execEnv.root ?? _0x5d1e16.Uri.empty(), () => new Map());
          const _0x75d90f = _0x2a1c2d.get(_0x5c70c6);
          if (!_0x75d90f) {
            if (this._include(_0x4cdaed, _0x22019f.depthLimit.maxDepth)) {
              _0x2a1c2d.set(_0x5c70c6, {
                isStdLib: _0x22019f.isStdLib,
                isStub: _0x381165.isStub,
                isTypeshedStub: _0x22019f.isTypeshedStub,
                isBundledStub: _0x22019f.isBundledStub,
                packageName: _0x22019f.packageName,
                uri: _0x381165.uri,
                shadowed: false,
                pyTypedPackage: _0x364508,
                includeAllSymbols: _0x22019f.depthLimit.includeAllSymbols
              });
            }
            return;
          }
          if (_0x75d90f.isStub) {
            _0x75d90f.shadowed = true;
            if (!_0x75d90f.pyTypedPackage && _0x364508) {
              _0x75d90f.isStub = false;
              _0x75d90f.uri = _0x381165.uri;
              _0x75d90f.pyTypedPackage = _0x364508;
            }
            return;
          }
          if (!_0x364508 && _0x75d90f.pyTypedPackage) {
            return;
          }
          _0x75d90f.uri = _0x381165.uri;
          _0x75d90f.isStub = true;
          _0x75d90f.shadowed = true;
          _0x75d90f.pyTypedPackage = _0x364508;
        }
        _include(_0x24dbe4, _0x776a8e) {
          return _0x24dbe4 <= _0x776a8e;
        }
      }
      exports.PackageScanner = _0x598195;
      class _0x46d859 {
        constructor(_0x481bc6, _0x44516c) {
          this._importResolver = _0x481bc6;
          this._fileCache = _0x44516c ?? new Map();
        }
        getFileCache() {
          return this._fileCache;
        }
        readdirEntriesSync(_0x8c75b1) {
          const _0x96e7c = this._fileCache.get(_0x8c75b1.key);
          if (_0x96e7c) {
            return _0x96e7c;
          }
          const _0x46f007 = [];
          const _0x1066a5 = this._containsInit(_0x8c75b1);
          for (const _0x3f9279 of this._fs.readdirEntriesSync(_0x8c75b1)) {
            const _0x2df855 = _0x8c75b1.combinePaths(_0x3f9279.name);
            let _0x295311 = _0x3f9279.isFile();
            let _0x17f412 = _0x3f9279.isDirectory();
            if (_0x3f9279.isSymbolicLink()) {
              const _0x4ce2da = _0x22aec6.tryStat(this._fs, _0x2df855);
              if (_0x4ce2da) {
                _0x295311 = _0x4ce2da.isFile();
                _0x17f412 = _0x4ce2da.isDirectory();
              }
            }
            if (_0x295311) {
              const _0x3db54f = _0x2df855.lastExtension;
              const _0x4896b9 = _0x3db54f === '.pyi';
              const _0x430e9d = !_0x4896b9 && _0x505cae.supportedFileExtensions.some(_0x764c14 => _0x764c14 === _0x3db54f);
              if (!_0x4896b9 && !_0x430e9d) {
                continue;
              }
              const _0x32f640 = _0x3f9279.name === '__init__.py' || _0x3f9279.name === '__init__.pyi';
              _0x46f007.push({
                name: _0x3f9279.name,
                directory: _0x8c75b1,
                uri: _0x2df855,
                isFile: true,
                isInit: _0x32f640,
                containsInit: _0x1066a5,
                isStub: _0x4896b9,
                public: true
              });
            } else {
              if (_0x17f412) {
                const _0x83349e = this._containsInit(_0x2df855);
                const _0x31e1d5 = _0x83349e && !!_0x591523.getPyTypedInfo(this._fs, _0x2df855);
                _0x46f007.push({
                  name: _0x3f9279.name,
                  uri: _0x2df855,
                  isFile: false,
                  isInit: false,
                  containsInit: _0x83349e,
                  isStub: false,
                  public: !_0x291a50.isPrivateOrProtectedName(_0x2df855.fileNameWithoutExtensions),
                  containsPyTyped: _0x31e1d5
                });
              }
            }
          }
          this._fileCache.set(_0x8c75b1.key, _0x46f007);
          return _0x46f007;
        }
        getModuleNameForImport(_0x2693ed, _0x3ed58e) {
          return this._importResolver.getModuleNameForImport(_0x2693ed, _0x3ed58e).moduleName;
        }
        getRoots(_0x3e0344) {
          return this._importResolver.getImportRoots(_0x3e0344).filter(_0x1ad1a7 => _0x1ad1a7 !== _0x3e0344.root && this.existsSync(_0x1ad1a7));
        }
        getTypeshedStdlibExcludeList(_0x19a1ec) {
          return this._importResolver.getTypeshedStdlibExcludeList(this._importResolver.getConfigOptions().typeshedPath, _0x19a1ec.pythonVersion, _0x19a1ec.pythonPlatform);
        }
        existsSync(_0x1a7064) {
          if (this._fileCache.get(_0x1a7064.key)) {
            return true;
          }
          return this._fs.existsSync(_0x1a7064);
        }
        get _fs() {
          return this._importResolver.fileSystem;
        }
        _containsInit(_0x3e6a96) {
          return this._fs.existsSync(_0x3e6a96.initPyUri) || this._fs.existsSync(_0x3e6a96.initPyiUri);
        }
      }
    },
    35355: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceBackgroundAnalysisProgram = undefined;
      const _0x3afb39 = require(82695);
      const _0x3204e4 = require(71745);
      const _0x121c88 = require(24122);
      const _0x24e44f = require(71069);
      const _0x543538 = require(30048);
      const _0x4ac588 = require(69482);
      const _0x449fc5 = require(21575);
      const _0x39e183 = require(96285);
      class _0x340b6a extends _0x3afb39.BackgroundAnalysisProgram {
        constructor(_0x9f8ca6, _0x41c5cc, _0x237f11, _0x3e3848, _0xeea7e8, _0x6fd8ef, _0x3c23fc) {
          super(_0x9f8ca6, _0x41c5cc, _0x237f11, _0x3e3848, _0xeea7e8, _0x6fd8ef, _0x3c23fc);
          this._globalIndices = _0x41c5cc.tryGet(_0x543538.PylanceServiceKeys.globalIndices);
        }
        dispose() {
          var _0xf0cd2c;
          super.dispose();
          if ((_0xf0cd2c = this._globalIndices) === null || _0xf0cd2c === undefined) {
            undefined;
          } else {
            _0xf0cd2c.reset(this.serviceId);
          }
        }
        libraryUpdated() {
          var _0x5ad6f0;
          if ((_0x5ad6f0 = _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis)) === null || _0x5ad6f0 === undefined) {
            return undefined;
          } else {
            return _0x5ad6f0.cancelIndexing();
          }
        }
        invalidateAndForceReanalysis(_0x5460ad) {
          var _0x2bbc82;
          if (_0x5460ad !== _0x3afb39.InvalidatedReason.SourceWatcherChanged) {
            if ((_0x2bbc82 = _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis)) === null || _0x2bbc82 === undefined) {
              undefined;
            } else {
              _0x2bbc82.refreshIndexing(this.configOptions, this.importResolver, this.host.kind, {
                changesOnly: _0x5460ad === _0x3afb39.InvalidatedReason.LibraryWatcherContentOnlyChanged
              });
            }
          }
          if (_0x5460ad === _0x3afb39.InvalidatedReason.LibraryWatcherChanged) {
            const _0x1f77a5 = this.program.serviceProvider.tryGet(_0x543538.PylanceServiceKeys.packageDiscoverer);
            if (_0x1f77a5 === null || _0x1f77a5 === undefined) {
              undefined;
            } else {
              _0x1f77a5.reset(this.program, 'libraryUpdated');
            }
          }
          super.invalidateAndForceReanalysis(_0x5460ad);
        }
        refreshWorkspaceSymbols(_0x14598c) {
          var _0x3fa1c8;
          if ((_0x3fa1c8 = _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis)) === null || _0x3fa1c8 === undefined) {
            undefined;
          } else {
            _0x3fa1c8.refreshWorkspaceSymbols(_0x14598c);
          }
        }
        async getSemanticTokens(_0x33e815, _0x44ff86, _0x4bd06c, _0x352fab, _0x3d7761) {
          if (this.backgroundAnalysis) {
            return _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('getSemanticTokens', {
              fileUri: _0x33e815,
              range: _0x44ff86,
              includeSyntaxToken: _0x4bd06c,
              previousResultId: _0x352fab,
              cancellationToken: _0x3d7761
            });
          }
          return _0x39e183.getSemanticTokens(this.program, _0x33e815, _0x44ff86, _0x4bd06c, _0x352fab, _0x3d7761);
        }
        async onInlayHints(_0x22b12c, _0x3019a0, _0x4709fe, _0x224741) {
          if (this.backgroundAnalysis) {
            return _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('getInlayHints', {
              fileUri: _0x22b12c,
              range: _0x3019a0,
              options: _0x4709fe,
              cancellationToken: _0x224741
            });
          }
          return _0x449fc5.getInlayHints(this.program, _0x22b12c, _0x3019a0, _0x4709fe, _0x224741);
        }
        onResolveInlayHint(_0x4d81f3, _0x110b34, _0x30c402) {
          return _0x4ac588.trackPerf(this.program.serviceProvider.tryGet(_0x543538.PylanceServiceKeys.telemetry), _0x4ac588.TelemetryEventName.RESOLVE_INLAYHINTS_SLOW, () => {
            return _0x449fc5.resolveInlayHints(this.program, _0x4d81f3, _0x110b34, _0x30c402);
          }, 2000);
        }
        startIndexing(_0x29d1cc) {
          var _0x2ed18f;
          if ((_0x2ed18f = _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis)) === null || _0x2ed18f === undefined) {
            undefined;
          } else {
            _0x2ed18f.startIndexing(_0x29d1cc, this.configOptions, this.importResolver, this.host.kind);
          }
        }
        getIndices() {
          var _0x287460;
          if ((_0x287460 = this._globalIndices) === null || _0x287460 === undefined) {
            return undefined;
          } else {
            return _0x287460.getIndices(this.program);
          }
        }
        setExperimentOptions(_0x2e09b1) {
          if (this.backgroundAnalysis) {
            _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('setExperimentOptions', _0x2e09b1);
          }
          const _0x2f4300 = this.program.serviceProvider.tryGet(_0x3204e4.ServiceKeys.docStringService);
          if (_0x2f4300 instanceof _0x24e44f.PylanceDocStringService) {
            const _0x5ce7e8 = !!_0x2e09b1.supportRestructuredText;
            if (_0x5ce7e8 !== _0x2f4300.isRestParsingEnabled) {
              _0x2f4300.enableRestParsing(_0x5ce7e8);
              _0x2f4300.ready.then(() => {
                this.program.markAllFilesDirty(true);
              });
            }
          }
        }
        async startProfiling(_0xfdbee1) {
          if (!this.backgroundAnalysis) {
            return undefined;
          }
          return await _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('startProfiling', _0xfdbee1);
        }
        async stopProfiling() {
          if (!this.backgroundAnalysis) {
            return undefined;
          }
          return await _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('stopProfiling', undefined);
        }
        setNotebookData(_0x2618ee) {
          if (this.backgroundAnalysis) {
            _0x121c88.getBackgroundAnalysis(this.backgroundAnalysis).analysisRequest('setNotebookData', _0x2618ee);
          }
          const _0x46e2fd = this.program.serviceProvider.tryGet(_0x3204e4.ServiceKeys.debugInfoInspector);
          if (_0x46e2fd) {
            _0x46e2fd.setNotebookData(_0x2618ee);
          }
        }
        test_setIndexing(_0x195c9d, _0x157634) {
          var _0x5085c6;
          const _0x237930 = this.getIndices();
          if (!_0x237930) {
            return;
          }
          for (const [_0x50e880, _0x321294] of _0x195c9d) {
            _0x237930.setWorkspaceIndex(_0x50e880, _0x321294);
          }
          for (const [_0x4bbcdd, _0x1190a7] of _0x157634) {
            const _0x4e93ae = this.configOptions.getExecutionEnvironments().find(_0x21546e => {
              var _0x4b0b6c;
              if ((_0x4b0b6c = _0x21546e.root) === null || _0x4b0b6c === undefined) {
                return undefined;
              } else {
                return _0x4b0b6c.equals(_0x4bbcdd);
              }
            });
            if (!_0x4e93ae) {
              continue;
            }
            for (const [_0x212fd2, _0x51c101] of _0x1190a7) {
              if ((_0x5085c6 = this._globalIndices) === null || _0x5085c6 === undefined) {
                undefined;
              } else {
                _0x5085c6.setIndex(this.serviceId, _0x4e93ae, _0x212fd2, _0x51c101);
              }
            }
          }
        }
      }
      exports.PylanceBackgroundAnalysisProgram = _0x340b6a;
    },
    89750: function (module, exports, require) {
      'use strict';

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceImportResolver = undefined;
      exports.createPylanceImportResolver = _0x2788b4;
      const _0x549373 = __importDefault(require(90930));
      const _0x104531 = require(75130);
      const _0x5af4c0 = require(58147);
      const _0x5e4c88 = require(48281);
      const _0x1e4213 = require(71745);
      const _0x1b25b1 = require(27113);
      const _0x448411 = require(5884);
      const _0xe7de47 = require(25747);
      const _0x38a26f = require(99504);
      const _0x29e409 = require(30371);
      const _0x23f834 = require(69482);
      class _0x2358f7 extends _0x104531.ImportResolver {
        constructor(_0xdc982f, _0x47538a, _0x60a957, _0x3b9cd9) {
          super(_0xdc982f, _0x47538a, _0x60a957);
          this._scrapedTmpFiles = new Map();
          this._cachedExistenceForPath = new Map();
          if (_0x3b9cd9) {
            this._importMetrics = new _0x579d1e(this.cachedParentImportResults, _0xdc982f.fs(), _0x3b9cd9);
          }
        }
        resolveImport(_0x2fc1e1, _0x58fa12, _0x5d55c3) {
          var _0x323396;
          const _0x9cbc56 = super.resolveImport(_0x2fc1e1, _0x58fa12, _0x5d55c3);
          if ((_0x323396 = this._importMetrics) === null || _0x323396 === undefined) {
            undefined;
          } else {
            _0x323396.addResultToImportMetrics(_0x2fc1e1, _0x58fa12, _0x5d55c3, _0x9cbc56);
          }
          return _0x9cbc56;
        }
        invalidateCache() {
          var _0x40554e;
          if ((_0x40554e = this._importMetrics) === null || _0x40554e === undefined) {
            undefined;
          } else {
            _0x40554e.reset();
          }
          for (const _0x4f8099 of this._scrapedTmpFiles.values()) {
            if (_0x4f8099) {
              try {
                this.fileSystem.unlinkSync(_0x4f8099);
              } catch (_0x5b79cc) {}
            }
          }
          this._scrapedTmpFiles.clear();
          this._cachedExistenceForPath.clear();
          super.invalidateCache();
        }
        sendTelemetry() {
          var _0x138cb1;
          if ((_0x138cb1 = this._importMetrics) === null || _0x138cb1 === undefined) {
            undefined;
          } else {
            _0x138cb1.report();
          }
        }
        getSourceFilesFromStub(_0x2a72ec, _0x30d9f7, _0x3d6e00) {
          if (_0x3d6e00) {
            const _0x5e76db = _0x29e409.getBundledNativeStubsPath(this.fileSystem.getModulePath());
            if (_0x2a72ec.startsWith(_0x5e76db)) {
              return [_0x2a72ec];
            }
          }
          const _0x37197f = super.getSourceFilesFromStub(_0x2a72ec, _0x30d9f7, _0x3d6e00);
          if (_0x3d6e00) {
            if (_0x37197f.length > 0) {
              if (!_0x2a72ec.matchesRegex(/stdlib[\\/](decimal|ntpath|posixpath)\.pyi/)) {
                return _0x37197f;
              }
            }
            if (this._isScrapable(_0x2a72ec, _0x30d9f7)) {
              const _0x22e4a6 = this._scrapedPath(_0x2a72ec, _0x30d9f7);
              if (_0x22e4a6) {
                _0x37197f.push(_0x22e4a6);
                return _0x37197f;
              }
            }
          }
          return _0x37197f;
        }
        getTypeshedPathEx(_0x51226e, _0x1428dc) {
          return _0x29e409.getBundledTypeStubsPath(this.fileSystem.getModulePath());
        }
        resolveImportEx(_0x5b1473, _0x6f3231, _0x28d927, _0x2632a0, _0x13978e = [], _0x17081f = true) {
          if (_0x17081f) {
            const _0x3673ae = _0x29e409.getBundledTypeStubsPath(this.fileSystem.getModulePath());
            if (_0x3673ae) {
              _0x13978e.push(`Looking in bundled stubs path '${_0x3673ae}'`);
              const _0x51a1ac = this.resolveAbsoluteImport(_0x5b1473, _0x3673ae, _0x6f3231, _0x28d927, _0x2632a0, _0x13978e, undefined, undefined, true, _0x17081f);
              if (_0x51a1ac && _0x51a1ac.isImportFound) {
                _0x51a1ac.importType = 1;
                return _0x51a1ac;
              }
            }
          }
          return undefined;
        }
        resolveNativeImportEx(_0x589a19, _0x2a8481, _0x26196d = []) {
          var _0x458033;
          const _0x1bf139 = _0x33d356(_0x589a19);
          if (!_0x1bf139 || _0x1bf139.length === 0) {
            return undefined;
          }
          if ((_0x458033 = this._importMetrics) === null || _0x458033 === undefined) {
            undefined;
          } else {
            _0x458033.addNativeModule(_0x2a8481);
          }
          const _0xc88cd3 = _0x29e409.getBundledNativeStubsPath(this.fileSystem.getModulePath());
          const _0x1e72dd = this._findNativeStub(_0x1bf139, _0xc88cd3);
          if (_0x1e72dd) {
            return _0x1e72dd;
          }
          const _0x3a52c1 = `Unable to find stub for native module ${_0x2a8481}, file ${_0x589a19} in ${_0xc88cd3}`;
          _0x26196d.push(_0x3a52c1);
          return undefined;
        }
        dirExistsCached(_0x320b64) {
          var _0x5efce3;
          if (_0xe7de47.WebUri.isWebUri(_0x320b64)) {
            if (!this._cachedExistenceForPath.has(_0x320b64.key)) {
              let _0x1e194a = false;
              let _0x253bd9 = _0x448411.tryStat(this.fileSystem, _0x320b64);
              if (_0x253bd9 === null || _0x253bd9 === undefined ? undefined : _0x253bd9.isSymbolicLink()) {
                const _0x1cd0a0 = _0x448411.tryRealpath(this.fileSystem, _0x320b64);
                if (_0x1cd0a0) {
                  _0x253bd9 = _0x448411.tryStat(this.fileSystem, _0x1cd0a0);
                }
              }
              _0x1e194a = (_0x253bd9 === null || _0x253bd9 === undefined ? undefined : _0x253bd9.isDirectory()) ?? false;
              this._cachedExistenceForPath.set(_0x320b64.key, _0x1e194a);
            }
            if ((_0x5efce3 = this._cachedExistenceForPath.get(_0x320b64.key)) !== null && _0x5efce3 !== undefined) {
              return _0x5efce3;
            } else {
              return false;
            }
          }
          return super.dirExistsCached(_0x320b64);
        }
        _isScrapable(_0x431b1a, _0x1870b7) {
          if (!this.getConfigOptions().pythonPath) {
            return false;
          }
          const _0x227b7e = this.getTypeshedStdLibPath(_0x1870b7);
          if (!_0x227b7e || !_0x431b1a.isChild(_0x227b7e)) {
            return false;
          }
          return true;
        }
        _scrapedPath(_0x5b30d3, _0x53cbfc) {
          return _0x5af4c0.getOrAdd(this._scrapedTmpFiles, _0x5b30d3.key, () => this._scrapeModuleToTmpFile(_0x5b30d3, _0x53cbfc)) || undefined;
        }
        _scrapeModuleToTmpFile(_0x3eca5e, _0x1ba49a) {
          var _0x36146f;
          const {
            moduleName: _0x31a5ba
          } = this.getModuleNameForImport(_0x3eca5e, _0x1ba49a);
          try {
            if (this.host.kind !== 0) {
              return false;
            }
            const _0x4b625f = this.host.scrapeModuleFromPython(_0x31a5ba, this.getConfigOptions().pythonPath);
            if (!_0x4b625f) {
              return false;
            }
            const _0x2b9812 = (_0x36146f = this.serviceProvider.tryGet(_0x1e4213.ServiceKeys.tempFile)) === null || _0x36146f === undefined ? undefined : _0x36146f.tmpfile({
              prefix: _0x31a5ba,
              postfix: '.py'
            });
            if (_0x2b9812 === undefined) {
              return false;
            }
            this.fileSystem.writeFileSync(_0x2b9812, _0x4b625f, 'utf8');
            return _0x2b9812;
          } catch {
            return false;
          }
        }
        _findNativeStub(_0x1be481, _0x3a8440) {
          const _0xd39669 = _0x3a8440.combinePaths(..._0x1be481);
          const _0x3106be = this.getNativeModuleName(_0xd39669);
          if (!_0x3106be) {
            return;
          }
          const _0x927082 = _0x1be481.slice(0, -1);
          const _0x53e8dc = _0x3a8440.combinePaths(..._0x927082, _0x3106be + '.pyi');
          if (this.fileSystem.existsSync(_0x53e8dc)) {
            return _0x53e8dc;
          } else {
            return undefined;
          }
        }
      }
      exports.PylanceImportResolver = _0x2358f7;
      function _0x2788b4(_0x5a30e6, _0x22eba8, _0x1b86d7, _0x3bbce6) {
        return new _0x2358f7(_0x5a30e6, _0x22eba8, _0x1b86d7, _0x3bbce6);
      }
      function _0x3e432d(_0x82b2a9, _0x50f409, _0x35ec63 = false) {
        if (_0x82b2a9.length > _0x50f409.length) {
          [_0x82b2a9, _0x50f409] = [_0x50f409, _0x82b2a9];
        }
        if (_0x50f409.startsWith(_0x82b2a9) && (!_0x35ec63 || !_0x50f409.startsWith(_0x82b2a9 + '.'))) {
          return 1;
        }
        return _0x549373.default(_0x50f409, _0x82b2a9);
      }
      function _0x33d356(_0x7b01ce) {
        const _0x251017 = _0x7b01ce.getPathComponents();
        const _0x5a0807 = _0x251017.findIndex(_0x12c8f6 => _0x12c8f6 === _0x2833b2 || _0x12c8f6 === _0xc0f8ce);
        if (_0x5a0807 < 0) {
          return [];
        }
        return _0x251017.slice(_0x5a0807 + 1);
      }
      const _0x2833b2 = 'site-packages';
      const _0xc0f8ce = 'dist-packages';
      const _0x130ffc = 100;
      class _0x579d1e {
        constructor(_0xdb0ef8, _0x16bad7, _0x315370) {
          this._cachedParentImportResults = _0xdb0ef8;
          this._fileSystem = _0x16bad7;
          this._telemetry = _0x315370;
          this._currentNativeModules = new Set();
          this._reportedNativeModules = new Set();
          this._currentUnresolvedModules = new Set();
          this._reportedUnresolvedModules = new Set();
          this._countedAbsolute = new Map();
          this._countedRelative = new Map();
          this._changed = false;
          this._metrics = _0x579d1e._getMetricsInitialValue();
        }
        reset() {
          this._metrics = _0x579d1e._getMetricsInitialValue();
        }
        addNativeModule(_0xf27428) {
          this._addModule(this._reportedNativeModules, this._currentNativeModules, _0xf27428);
        }
        addUnresolvedModule(_0xdb7fb) {
          if (!_0x38a26f.IS_RELEASE) {
            this._addModule(this._reportedUnresolvedModules, this._currentUnresolvedModules, _0xdb7fb);
          }
        }
        addResultToImportMetrics(_0x2b3c60, _0x5edb99, _0x182399, _0x453568) {
          const _0xdb95bf = _0x104531.formatImportName(_0x182399);
          const _0x2439ba = _0x182399.leadingDots > 0;
          const _0x4ff164 = _0x453568.resolvedUris.length > 0 ? _0x453568.resolvedUris[_0x453568.resolvedUris.length - 1] : _0x1b25b1.Uri.empty();
          const _0x43f391 = _0x5af4c0.getOrAdd(_0x2439ba ? this._countedRelative : this._countedAbsolute, _0x4ff164.key, () => new Set());
          const _0x289559 = _0x43f391.has(_0xdb95bf);
          if (_0x289559) {
            return;
          }
          _0x43f391.add(_0xdb95bf);
          this._setChanged();
          this._metrics.total += 1;
          this._metrics.stubs += _0x453568.isStubFile ? 1 : 0;
          if (_0x2439ba) {
            this._metrics.relativeTotal += 1;
            this._metrics.relativeStubs += _0x453568.isStubFile ? 1 : 0;
          } else {
            this._metrics.absoluteTotal += 1;
            this._metrics.absoluteStubs += _0x453568.isStubFile ? 1 : 0;
          }
          if (!_0x453568.isImportFound) {
            let _0x565f37 = true;
            if (this._lastUnresolvedImportName) {
              const _0x4f3c15 = _0x3e432d(this._lastUnresolvedImportName, _0xdb95bf, true);
              if (_0x4f3c15 < 2) {
                _0x565f37 = false;
              }
            }
            let _0xa2ceb3 = _0x565f37 && !_0x2439ba;
            if (_0xa2ceb3) {
              const _0x4a272f = _0x104531.getParentImportResolutionRoot(_0x2b3c60, _0x5edb99.root);
              _0xa2ceb3 = this._cachedParentImportResults.checkValidPath(this._fileSystem, _0x2b3c60, _0x4a272f);
            }
            if (_0xa2ceb3 && this._telemetry) {
              this.addUnresolvedModule(_0xdb95bf);
            }
            this._lastUnresolvedImportName = _0xdb95bf;
            this._metrics.absoluteUserUnresolved += _0xa2ceb3 ? 1 : 0;
            this._metrics.unresolvedTotal += _0x565f37 ? 1 : 0;
            if (_0x2439ba) {
              this._metrics.relativeUnresolved += _0x565f37 ? 1 : 0;
            } else {
              this._metrics.absoluteUnresolved += _0x565f37 ? 1 : 0;
            }
            return;
          }
          if (_0x2439ba) {
            return;
          }
          switch (_0x453568.importType) {
            case 1:
              {
                this._metrics.thirdPartyImportTotal += 1;
                this._metrics.thirdPartyImportStubs += _0x453568.isStubFile ? 1 : 0;
                break;
              }
            case 2:
              {
                this._metrics.localImportTotal += 1;
                this._metrics.localImportStubs += _0x453568.isStubFile ? 1 : 0;
                break;
              }
            case 0:
              {
                this._metrics.builtinImportTotal += 1;
                this._metrics.builtinImportStubs += _0x453568.isStubFile ? 1 : 0;
                break;
              }
            default:
              _0x5e4c88.assertNever(_0x453568.importType);
          }
        }
        report() {
          if (!this._changed) {
            return;
          }
          this._changed = false;
          const _0x1461a3 = new _0x23f834.TelemetryEvent(_0x23f834.TelemetryEventName.IMPORT_METRICS);
          _0x23f834.addMapToEvent(_0x1461a3, this._metrics);
          _0x50c38f('Native', this._getAndResetModuleNames(this._reportedNativeModules, this._currentNativeModules));
          _0x50c38f('Unresolved', this._getAndResetModuleNames(this._reportedUnresolvedModules, this._currentUnresolvedModules));
          this._telemetry.sendTelemetry(_0x1461a3);
          function _0x50c38f(_0x8dcd9f, _0x49687e) {
            if (_0x49687e.length > 0) {
              _0x23f834.hashModuleNamesAndAddToEvent(_0x1461a3, _0x8dcd9f, _0x49687e, _0x8dcd9f === 'Unresolved');
            }
          }
        }
        static _getMetricsInitialValue() {
          return {
            total: 0,
            stubs: 0,
            unresolvedTotal: 0,
            absoluteTotal: 0,
            absoluteStubs: 0,
            absoluteUnresolved: 0,
            absoluteUserUnresolved: 0,
            thirdPartyImportTotal: 0,
            thirdPartyImportStubs: 0,
            localImportTotal: 0,
            localImportStubs: 0,
            builtinImportTotal: 0,
            builtinImportStubs: 0,
            relativeTotal: 0,
            relativeStubs: 0,
            relativeUnresolved: 0
          };
        }
        _setChanged() {
          this._changed = true;
        }
        _addModule(_0x3448d5, _0xa59fde, _0x4cf853) {
          if (_0x3448d5.size > _0x130ffc || _0xa59fde.size > _0x130ffc) {
            return;
          }
          if (!_0x3448d5.has(_0x4cf853)) {
            this._setChanged();
            _0xa59fde.add(_0x4cf853);
          }
        }
        _getAndResetModuleNames(_0x2d44ff, _0x5259d3) {
          _0x5259d3.forEach(_0x5abd46 => _0x2d44ff.add(_0x5abd46));
          const _0x1d57a9 = [..._0x5259d3];
          _0x5259d3.clear();
          return _0x1d57a9;
        }
      }
    },
    72412: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.BackgroundRemoteFileSystem = exports.ForegroundFileRequestHandler = undefined;
      const _0x5c878e = require(18851);
      const _0x4c25ef = require(39023);
      const _0x1e3236 = require(28167);
      const _0x555686 = require(5884);
      const _0x4f4899 = require(35040);
      const _0x5ab554 = require(22205);
      class _0x260cb2 {
        constructor(_0x46fc02, _0x2c71c4) {
          this._disposed = false;
          this._encoder = new _0x4c25ef.TextEncoder();
          const _0x37d25c = new _0x5ab554.FilteringWorker(_0x46fc02, _0x48a9c1 => !!_0x48a9c1.byteLength);
          this._connection = new _0x5c878e.ServiceConnection(_0x37d25c);
          this._connection.onRequest('file/readSync', async _0x2101bb => {
            if (!this._disposed) {
              const _0x2b4cba = _0x2c71c4.readFileSync(_0x555686.UriEx.parse(_0x2101bb.uri), 'utf-8');
              const _0xbaca16 = this._encoder.encode(_0x2b4cba);
              return {
                errno: 0,
                data: _0xbaca16
              };
            }
            return {
              errno: -1
            };
          });
          this._connection.onRequest('file/readDirectorySync', async _0x1e3245 => {
            if (!this._disposed) {
              const _0x4616ba = _0x2c71c4.readdirEntriesSync(_0x555686.UriEx.parse(_0x1e3245.uri));
              const _0xfda503 = _0x4616ba.map(_0x22ca18 => [_0x22ca18.name, _0x22ca18.isFile() ? 1 : 2]);
              return {
                errno: 0,
                data: _0xfda503
              };
            }
            return {
              errno: -1
            };
          });
          this._connection.onRequest('file/statSync', async _0x2010c2 => {
            if (!this._disposed) {
              try {
                const _0x3f7113 = _0x2c71c4.statSync(_0x555686.UriEx.parse(_0x2010c2.uri));
                const _0x179b27 = {
                  size: _0x3f7113.size,
                  mtime: _0x3f7113.mtimeMs,
                  type: _0x3f7113.isFile() ? 'file' : _0x3f7113.isDirectory() ? 'directory' : 'unknown'
                };
                return {
                  errno: 0,
                  data: _0x179b27
                };
              } catch {
                const _0x225390 = {
                  size: 0,
                  mtime: 0,
                  type: 'unknown'
                };
                return {
                  errno: 0,
                  data: _0x225390
                };
              }
            }
            return {
              errno: -1
            };
          });
        }
        dispose() {
          this._disposed = true;
        }
      }
      exports.ForegroundFileRequestHandler = _0x260cb2;
      class _0x29e5ff {
        get connection() {
          throw new Error('Method not implemented.');
        }
        applyEdit(_0x4c8985) {
          throw new Error('Method not implemented.');
        }
        initialize(_0x538654) {
          throw new Error('Method not implemented.');
        }
        fillServerCapabilities(_0x12e8e5) {
          throw new Error('Method not implemented.');
        }
      }
      class _0x116be1 {
        constructor() {
          const _0x523bd5 = new _0x5c878e.ClientConnection(_0x1e3236.parentPort);
          const _0x1a11d1 = _0x4f4899.SyncFileSystemFeature(_0x29e5ff);
          this._syncRequest = new _0x1a11d1();
          this._syncRequest.attachClient(_0x523bd5);
        }
        readSync(_0x479009) {
          return this._syncRequest.fileSystem.readSync(_0x479009);
        }
        readDirectorySync(_0x2647d5) {
          return this._syncRequest.fileSystem.readDirectorySync(_0x2647d5);
        }
        statSync(_0x5218e1) {
          return this._syncRequest.fileSystem.statSync(_0x5218e1);
        }
      }
      exports.BackgroundRemoteFileSystem = _0x116be1;
    },
    21368: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.WorkspacePythonPathKind = undefined;
      var _0xa45f04;
      (function (_0x12b865) {
        _0x12b865.Immutable = 'immutable';
        _0x12b865.Mutable = 'mutable';
      })(_0xa45f04 || (exports.WorkspacePythonPathKind = _0xa45f04 = {}));
    },
    56910: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AddAllFixtureTypeAnnotationsCommand = undefined;
      const _0x2770c6 = require(41557);
      const _0x46d5bc = require(91426);
      const _0x339705 = require(34455);
      const _0x3864bc = require(56814);
      const _0x387de7 = require(27113);
      const _0x5a0a8f = require(27130);
      const _0x4b510f = require(19013);
      const _0x23cee2 = require(30048);
      const _0xd3c980 = require(34365);
      const _0x531fde = require(25430);
      class _0x194cf0 {
        execute(_0x5b4109, _0xe39c90, _0x14c6ca) {
          _0x46d5bc.throwIfCancellationRequested(_0x14c6ca);
          const _0x32df12 = _0x5b4109;
          const _0x393db1 = _0x32df12.service.serviceProvider.tryGet(_0x23cee2.PylanceServiceKeys.fixtureFinder);
          if (!_0x393db1) {
            return;
          }
          if (_0xe39c90.command !== _0x5a0a8f.Commands.addAllFixtureTypeAnnotations || _0xe39c90.arguments?.length !== 1) {
            return;
          }
          const _0x1bebb3 = _0xe39c90.arguments;
          return _0x5b4109.service.run(_0x393924 => {
            const _0x56b0be = _0x387de7.Uri.parse(_0x1bebb3[0], _0x393924.serviceProvider);
            const _0x45fa3a = _0x393924.getParseResults(_0x56b0be);
            if (!_0x45fa3a) {
              return undefined;
            }
            const _0x470b07 = _0x4b510f.getNodesInRange(_0x45fa3a, 41, _0x14c6ca);
            const _0x318199 = _0x470b07.filter(_0x5e9a8f => !_0x5e9a8f.d.annotation && !_0x5e9a8f.d.annotationComment && _0xd3c980.possibleFixtureLocation(_0x393db1, _0x393924.evaluator, _0x5e9a8f) && _0xd3c980.findFixtureFunction(_0x393924, _0x5e9a8f, _0x14c6ca)).map(_0x2f1f4f => _0x3864bc.convertTextRangeToRange(_0x2f1f4f, _0x45fa3a.tokenizerOutput.lines));
            const _0x10e00f = _0x318199.map(_0x3cde9f => _0x2770c6.findNodeByPosition(_0x45fa3a.parserOutput.parseTree, _0x3cde9f.start, _0x45fa3a.tokenizerOutput.lines)).filter(_0x339705.isDefined);
            if (_0x10e00f.length === 0) {
              return undefined;
            }
            return _0x531fde.createParameterTypeAnnotationEdits(_0x393924, _0x10e00f, _0x56b0be, _0x32df12.importFormat, _0x14c6ca);
          }, _0x14c6ca);
        }
        getFile(_0x1408dc) {
          if (_0x1408dc.command !== _0x5a0a8f.Commands.addAllFixtureTypeAnnotations || _0x1408dc.arguments?.length !== 1) {
            return;
          }
          return _0x1408dc.arguments[0];
        }
      }
      exports.AddAllFixtureTypeAnnotationsCommand = _0x194cf0;
    },
    89644: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AddFixtureTypeAnnotationCommand = undefined;
      const _0x42c3e8 = require(41557);
      const _0x13cdde = require(91426);
      const _0x3849c8 = require(27113);
      const _0x1256ac = require(27130);
      const _0x1a7a1f = require(30048);
      const _0xece33a = require(25430);
      class _0x508c7f {
        execute(_0x4ca37a, _0x67122d, _0x4d8187) {
          _0x13cdde.throwIfCancellationRequested(_0x4d8187);
          const _0x4be85e = _0x4ca37a;
          const _0x31f706 = _0x4be85e.service.serviceProvider.tryGet(_0x1a7a1f.PylanceServiceKeys.fixtureFinder);
          if (!_0x31f706) {
            return;
          }
          if (_0x67122d.command !== _0x1256ac.Commands.addFixtureTypeAnnotation || _0x67122d.arguments?.length !== 2) {
            return;
          }
          const _0x40fea4 = _0x67122d.arguments;
          return _0x4ca37a.service.run(_0x2976f6 => {
            const _0x267969 = _0x3849c8.Uri.parse(_0x40fea4[0], _0x2976f6.serviceProvider);
            const _0x2f9a7c = _0x40fea4[1];
            const _0x2619cb = _0x2976f6.getParseResults(_0x267969);
            if (!_0x2619cb) {
              return undefined;
            }
            const _0x43c160 = _0x2619cb ? _0x42c3e8.findNodeByPosition(_0x2619cb.parserOutput.parseTree, _0x2f9a7c.start, _0x2619cb.tokenizerOutput.lines) : undefined;
            if (!_0x43c160) {
              return undefined;
            }
            return _0xece33a.createParameterTypeAnnotationEdits(_0x2976f6, [_0x43c160], _0x267969, _0x4be85e.importFormat, _0x4d8187);
          }, _0x4d8187);
        }
        getFile(_0x13a205) {
          if (_0x13a205.command !== _0x1256ac.Commands.addFixtureTypeAnnotation || _0x13a205.arguments?.length !== 2) {
            return;
          }
          return _0x13a205.arguments[0];
        }
      }
      exports.AddFixtureTypeAnnotationCommand = _0x508c7f;
    },
    25430: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.createParameterTypeAnnotationEdits = _0xf96d31;
      exports.createTypeAnnotationEdits = _0x5cf8a7;
      const _0x45362a = require(56911);
      const _0x571c91 = require(41557);
      const _0x4807b8 = require(34455);
      const _0x289810 = require(56814);
      const _0x4cfebe = require(88754);
      const _0x34f683 = require(74382);
      const _0x460211 = require(30048);
      const _0x168c68 = require(19995);
      const _0xcd06bd = require(13234);
      const _0x2be8ec = require(34365);
      function _0xf96d31(_0xf146c7, _0x4095fa, _0x1cfdf4, _0x58e785, _0x18d289) {
        if (_0x4095fa.length === 0) {
          return _0x34f683.convertToWorkspaceEdit(_0xf146c7.fileSystem, []);
        }
        const _0x1f233b = _0x4095fa[0].start;
        const _0x1016c8 = _0xf146c7.getParseResults(_0x1cfdf4);
        const _0x17d28f = _0xf146c7.evaluator;
        const _0x1ca5b2 = _0xf146c7.serviceProvider.get(_0x460211.PylanceServiceKeys.fixtureFinder);
        const _0x2a347c = new _0x168c68.ImportAdder(_0xf146c7, {
          useTypeAlias: true
        });
        const _0x2b206a = _0x4095fa.map(_0x211d91 => {
          const _0x184b07 = _0x571c91.getEnclosingParam(_0x211d91);
          if (!_0x184b07 || !_0x184b07.d.name || _0x184b07.d.annotation || _0x184b07.d.annotationComment) {
            return undefined;
          }
          const _0x3fb843 = _0x2be8ec.tryGetParameterNodeType(_0x1ca5b2, _0x17d28f, _0x184b07, _0x18d289);
          if (!_0x3fb843) {
            return undefined;
          }
          return {
            type: _0x3fb843,
            node: _0x184b07.d.name
          };
        }).filter(_0x4807b8.isDefined);
        _0x2a347c.appendImportInfoForTypes(_0x1cfdf4, _0x2b206a, _0x18d289);
        _0x2a347c.updateImportInfoForTypeWithAutoImport(_0x1cfdf4, _0x1016c8, _0x1f233b, _0x2b206a.map(_0x23b620 => _0x23b620.type), _0x18d289);
        const _0x1a9775 = new _0xcd06bd.TypeStringGenerator(_0xf146c7, _0x1cfdf4, _0x18d289, _0x2a347c);
        const _0x5a7d22 = _0x2b206a.map(_0x3ba77b => {
          const _0x4401b8 = _0x4cfebe.TextRange.getEnd(_0x3ba77b.node);
          const _0x1ae98a = _0x5cf8a7(_0x1a9775.getTypeString(_0x3ba77b.type), _0x289810.convertOffsetToPosition(_0x4401b8, _0x1016c8.tokenizerOutput.lines), ': ');
          return {
            fileUri: _0x1cfdf4,
            range: _0x1ae98a.range,
            replacementText: _0x1ae98a.newText
          };
        }).flat().filter(_0xf3a386 => !!_0xf3a386);
        const _0x5b5991 = _0x2a347c.applyImports(_0x1cfdf4, _0x1016c8, _0x1f233b, _0x58e785 ?? 'absolute', _0x18d289);
        _0x5a7d22.push(..._0x5b5991.map(_0xd90b66 => ({
          fileUri: _0x1cfdf4,
          range: _0xd90b66.range,
          replacementText: _0xd90b66.replacementText
        })));
        return _0x34f683.convertToWorkspaceEdit(_0xf146c7.fileSystem, _0x5a7d22.filter(_0x364c0b => !!_0x364c0b));
      }
      function _0x5cf8a7(_0x5ee627, _0x6af141, _0x5bb0f6) {
        const _0x5f167c = `${_0x5bb0f6}${_0x5ee627}`;
        return _0x45362a.TextEdit.insert(_0x6af141, _0x5f167c);
      }
    },
    59198: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FixtureFinder = undefined;
      exports.tryAddFixtureFinder = _0x55213a;
      const _0x4f2439 = require(90355);
      const _0x1ce7b1 = require(26687);
      const _0x24a3c5 = require(28445);
      const _0x47d4bf = require(41557);
      const _0x3e39fd = require(91426);
      const _0x20a32c = require(56507);
      const _0x5b11c8 = require(56814);
      const _0x425c14 = require(71745);
      const _0x55bdaf = require(30048);
      const _0x49d48b = require(34365);
      const _0x50bf56 = require(22985);
      const _0x1a2c89 = ['cacheprovider.py', 'capture.py', 'doctest.py', 'fixtures.py', 'junitxml.py', 'legacypath.py', 'logging.py', 'monkeypatch.py', 'recwarn.py', 'tmpdir.py'];
      const _0x5f0502 = 'conftest';
      function _0x55213a(_0x120f5, _0x11a48f, _0x1dccf9, _0x429c7d) {
        const _0x5be332 = _0x120f5.tryGet(_0x55bdaf.PylanceServiceKeys.fixtureFinder);
        if (_0x5be332) {
          if (!_0x11a48f.enablePytestSupport) {
            _0x55bdaf.registerServices(_0x120f5, undefined, _0x55bdaf.PylanceServiceKeys.fixtureFinder);
            return undefined;
          }
          return _0x5be332;
        }
        if (!_0x11a48f.enablePytestSupport) {
          return undefined;
        }
        const _0x75cdaf = new _0x46a352(_0x1dccf9, _0x429c7d);
        _0x55bdaf.registerServices(_0x120f5, _0x75cdaf, _0x55bdaf.PylanceServiceKeys.fixtureFinder, _0x425c14.ServiceKeys.stateMutationListeners, _0x425c14.ServiceKeys.symbolDefinitionProvider, _0x425c14.ServiceKeys.symbolUsageProviderFactory);
        return _0x75cdaf;
      }
      class _0x46a352 {
        constructor(_0x5365b3, _0x5dcc93) {
          this._programView = _0x5365b3;
          this._programMutator = _0x5dcc93;
          this._defaultQueryOptions = {
            classes: [/^Test.*/],
            files: [/^test_.*?\.py$/, /^.*?_test\.py$/],
            functions: [/^test.*/]
          };
          this._pytestQueryEngine = new _0x50bf56.PytestQueryEngine();
          this._cachedUserFixturesMap = new Map();
          this._cachedPredefinedFixturesMap = new Map();
          this._cachedPredefinedFixtures = [];
          this._updateQueryOptions();
        }
        tryCreateProvider(_0x177935, _0x5d6605, _0x42a19f) {
          const _0x419865 = _0xdafb5b(this, _0x177935, this._programView.evaluator, _0x5d6605, _0x42a19f);
          if (!_0x419865 || _0x419865.length === 0) {
            return undefined;
          }
          return new _0x75432f(this._programView, this, _0x177935, _0x419865, _0x42a19f);
        }
        isTestFunction(_0x5dd77b) {
          const _0x159329 = _0x5dd77b.nodeType === 31 ? _0x5dd77b : _0x5dd77b.parent?.nodeType === 31 ? _0x5dd77b.parent : undefined;
          if (!_0x159329) {
            return false;
          }
          const _0x19d5e6 = _0x1ce7b1.getFileInfo(_0x159329);
          if (this.isTestFile(_0x19d5e6.fileUri) && this._isTestFunction(_0x159329)) {
            const _0x631747 = _0x159329.parent ? _0x47d4bf.getEnclosingClass(_0x159329.parent) : undefined;
            if (!_0x631747 || this._isTestClass(_0x631747)) {
              return this.hasPytest();
            }
          }
          return false;
        }
        isTestFile(_0x4723d8) {
          const _0x498620 = this._getQueryOptions();
          const _0x1d0792 = _0x4723d8.fileName;
          return _0x498620.files.some(_0x181947 => _0x181947.test(_0x1d0792));
        }
        isFixtureFunction(_0x19a809, _0x5c03ea) {
          return _0x49d48b.isFixtureFunction(_0x19a809, _0x5c03ea) || this._getPredefinedFixtureFunctions(_0x19a809).some(_0x5c1965 => _0x5c1965.id === _0x5c03ea.id);
        }
        hasPytest() {
          return !!this._getPathToPytest();
        }
        findMatchingFixtures(_0x16c7b9, _0x198a31, _0xa9f5c2, _0x12ab12) {
          return this._getAllowedFixtures(_0x16c7b9, _0x198a31, _0x12ab12).filter(_0xa9f5c2);
        }
        tryGetDeclarations(_0x95cae7, _0x586dff, _0x409dd6) {
          const _0x467870 = [];
          const _0x14963e = this._programView.evaluator;
          if (_0x95cae7.parent?.nodeType === 41) {
            if (_0x49d48b.isInsideTestFunction(this, _0x95cae7.parent) || _0x49d48b.isInsideFixtureFunction(this, _0x14963e, _0x95cae7.parent)) {
              const _0x2aea1d = _0x49d48b.findFixtureFunction(this, _0x14963e, _0x95cae7.parent, _0x409dd6);
              if (_0x2aea1d) {
                _0x467870.push(_0x49d48b.getDeclarationForFixture(_0x2aea1d));
              }
            }
          } else {
            if (_0x95cae7.parent?.nodeType === 31 && this.isFixtureFunction(_0x14963e, _0x95cae7.parent)) {
              _0x467870.push(_0x49d48b.getDeclarationForFixture(_0x95cae7.parent));
            }
          }
          return _0x467870;
        }
        onUpdateSettings(_0x1ec765) {
          this._updatePythonPaths();
        }
        onFileDirty(_0x3753cb) {
          this._cachedUserFixturesMap.delete(_0x3753cb.key);
          if (this._cachedPredefinedFixturesMap.delete(_0x3753cb.key)) {
            this._cachedPredefinedFixtures = [];
          }
        }
        onClearCache() {
          this._cachedPytestPath = undefined;
          this._cachedPredefinedFixturePaths = undefined;
          this._cachedPredefinedFixtures = [];
          this._cachedPredefinedFixturesMap.clear();
          this._cachedUserFixturesMap.clear();
        }
        get _fileSystem() {
          return this._programView.importResolver.fileSystem;
        }
        _updatePythonPaths() {
          this._cachedPytestPath = undefined;
          this._cachedPredefinedFixturePaths = undefined;
          this._cachedPredefinedFixtures = [];
          this._cachedPredefinedFixturesMap.clear();
          if (this._pytestQueryEngine) {
            this._updateQueryOptions();
          }
        }
        _isTestFunction(_0x459e13) {
          const _0xc297be = this._getQueryOptions();
          return _0xc297be.functions.some(_0x3f35f2 => _0x3f35f2.test(_0x459e13.d.name.d.value));
        }
        _isTestClass(_0x8f98d5) {
          const _0x146fc8 = this._getQueryOptions();
          return _0x146fc8.classes.some(_0x187342 => _0x187342.test(_0x8f98d5.d.name.d.value));
        }
        _getQueryOptions() {
          if (this._cachedQueryOptions) {
            return this._cachedQueryOptions;
          }
          return this._defaultQueryOptions;
        }
        async _updateQueryOptions() {
          const _0x4427ae = this._programView.importResolver.host;
          const _0x517f06 = this._programView.configOptions;
          const _0x4f6276 = this._programView.importResolver.fileSystem;
          const _0x347a10 = await this._pytestQueryEngine.getOptions(_0x4427ae, _0x4f6276, this._programView.rootPath, _0x517f06, _0x46a352.queryTimeout);
          const _0x4dfe0e = this._programView.serviceProvider.tryGet(_0x425c14.ServiceKeys.console);
          if (_0x4dfe0e) {
            _0x4dfe0e.log(`pytest configurations: ${JSON.stringify(_0x347a10)}`);
          }
          this._cachedQueryOptions = this._generateQueryOptionsRegexes(_0x347a10);
        }
        _generateQueryOptionsRegexes(_0x45ee2e) {
          const _0x285fd2 = _0x4e19c0 => {
            _0x4e19c0 = _0x4e19c0.replace(/\./g, '\\.');
            if (_0x4e19c0.includes('*')) {
              _0x4e19c0 = `^${_0x4e19c0.replace(/\*/g, '.*?')}\$`;
            } else {
              _0x4e19c0 = `^${_0x4e19c0}.*`;
            }
            return RegExp(_0x4e19c0);
          };
          return {
            classes: _0x45ee2e.classes.map(_0x285fd2),
            files: _0x45ee2e.files.map(_0x285fd2),
            functions: _0x45ee2e.functions.map(_0x285fd2)
          };
        }
        _getAllowedFixtures(_0x4b7930, _0x163182, _0x41a452) {
          const _0x3ef152 = this._getAllowedFixtureNodes(_0x4b7930, _0x163182, _0x41a452);
          const _0x445304 = this._getPredefinedFixtureFunctions(_0x4b7930);
          return [..._0x3ef152, ..._0x445304];
        }
        _getPythonSearchPaths() {
          const _0x2c325e = [];
          return this._programView.importResolver.getPythonSearchPaths(_0x2c325e);
        }
        _getPathToPytest() {
          if (!this._cachedPytestPath) {
            const _0x2ae15c = this._getPythonSearchPaths();
            for (const _0x27e6a1 of _0x2ae15c) {
              const _0x19aae0 = _0x27e6a1.combinePaths('_pytest');
              if (this._fileSystem.existsSync(_0x19aae0)) {
                this._cachedPytestPath = _0x19aae0;
                break;
              }
            }
          }
          return this._cachedPytestPath;
        }
        _getPredefinedFixturePaths(_0x249e6d) {
          if (!_0x249e6d) {
            return [];
          }
          if (!this._cachedPredefinedFixturePaths) {
            this._cachedPredefinedFixturePaths = _0x249e6d ? _0x1a2c89.map(_0x242181 => _0x249e6d.combinePaths(_0x242181)) : [];
          }
          return this._cachedPredefinedFixturePaths;
        }
        _getPredefinedFixtureFunctionsFromPytestPath(_0x347884, _0x359f77) {
          const _0x5b3923 = [...this._getPredefinedFixturePaths(_0x359f77)];
          _0x5b3923.forEach(_0x1d42c8 => {
            const _0x1e3474 = this._cachedPredefinedFixturesMap.get(_0x1d42c8.key);
            if (_0x1e3474) {
              return;
            }
            const _0x1b0174 = this._getModuleNode(_0x1d42c8);
            if (!_0x1b0174) {
              return;
            }
            const _0x53c33f = _0x49d48b.getModuleFixtureNodes(_0x347884, _0x1b0174);
            if (_0x1ce7b1.getFileInfo(_0x1b0174).fileUri.fileName === 'fixtures.py') {
              const _0x254b2c = _0x1b0174.d.statements.find(_0x4cbb3d => _0x4cbb3d.nodeType === 10 && _0x4cbb3d.d.name.d.value === 'FixtureRequest');
              if (_0x254b2c) {
                const _0x50955b = _0x254b2c.d.suite.d.statements.find(_0x12e0b2 => _0x12e0b2.nodeType === 31 && _0x12e0b2.d.name.d.value === '__init__');
                if (_0x50955b) {
                  _0x53c33f.push(_0x50955b);
                }
              }
            }
            this._cachedPredefinedFixturesMap.set(_0x1d42c8.key, _0x53c33f);
          });
          const _0x39d07b = _0x359f77.getDirectory();
          const _0x30920e = this._fileSystem.readdirEntriesSync(_0x39d07b);
          const _0x4c7f15 = new Map();
          _0x30920e.forEach(_0x1d29de => {
            if (_0x1d29de.isDirectory() && _0x1d29de.name.startsWith('pytest_')) {
              const _0x60633c = _0x39d07b.combinePaths(_0x1d29de.name);
              const _0x49f407 = this._fileSystem.readdirEntriesSync(_0x60633c).filter(_0x40d544 => _0x40d544.isFile()).map(_0xd775ed => _0xd775ed.name);
              _0x49f407.forEach(_0x4edf22 => this._getFileFixtureNodes(_0x347884, _0x60633c.combinePaths(_0x4edf22), this._cachedPredefinedFixturesMap, _0x4c7f15, _0x4f2439.CancellationToken.None, 2));
            }
          });
          return [...this._cachedPredefinedFixturesMap.values()].flat();
        }
        _getPredefinedFixtureFunctions(_0x40b089) {
          const _0x2d9e94 = this._getPathToPytest();
          if (this._cachedPredefinedFixtures.length === 0 && _0x2d9e94) {
            this._cachedPredefinedFixtures = this._getPredefinedFixtureFunctionsFromPytestPath(_0x40b089, _0x2d9e94);
          }
          return this._cachedPredefinedFixtures;
        }
        _getSourceFileInfo(_0x245024) {
          const _0x176f41 = this._programView.getSourceFileInfo(_0x245024);
          if (_0x176f41) {
            return _0x176f41;
          }
          if (!this._fileSystem.existsSync(_0x245024)) {
            return undefined;
          }
          this._programMutator.addInterimFile(_0x245024);
          return this._programView.getSourceFileInfo(_0x245024);
        }
        _getModuleNode(_0x110038) {
          var _0x58af48;
          if (!this._getSourceFileInfo(_0x110038)) {
            return undefined;
          }
          if ((_0x58af48 = this._programView.getParseResults(_0x110038)) === null || _0x58af48 === undefined) {
            return undefined;
          } else {
            return _0x58af48.parserOutput.parseTree;
          }
        }
        _getFileFixtureNodes(_0x2dd804, _0x7e7280, _0x403a03, _0x32863b, _0x5ef41f, _0x7edb00 = 0) {
          _0x3e39fd.throwIfCancellationRequested(_0x5ef41f);
          const _0x3e6884 = this._getSourceFileInfo(_0x7e7280);
          if (!_0x3e6884) {
            return;
          }
          let _0x39d449;
          if (!this._cachedUserFixturesMap.has(_0x7e7280.key)) {
            const _0x56fac6 = this._getModuleNode(_0x7e7280);
            if (_0x56fac6) {
              _0x39d449 = _0x49d48b.getModuleFixtureNodes(_0x2dd804, _0x56fac6);
              this._cachedUserFixturesMap.set(_0x7e7280.key, _0x39d449);
            }
          }
          _0x39d449 = _0x39d449 ?? this._cachedUserFixturesMap.get(_0x7e7280.key);
          if (!_0x403a03.has(_0x7e7280.key) && _0x39d449 && _0x39d449.length > 0) {
            _0x403a03.set(_0x7e7280.key, _0x39d449);
          }
          const _0x5a3959 = _0x32863b.get(_0x7e7280.key);
          if (_0x5a3959 === undefined || _0x7edb00 < _0x5a3959) {
            _0x32863b.set(_0x7e7280.key, _0x7edb00);
          }
          if (_0x7edb00 <= 2) {
            _0x3e39fd.throwIfCancellationRequested(_0x5ef41f);
            const _0x2ec2ba = this._getPredefinedFixturePaths(this._getPathToPytest());
            _0x3e6884.imports.forEach(_0x5e2817 => {
              const _0x27b59f = _0x5e2817.sourceFile.getUri();
              if (_0x2ec2ba.some(_0xbe52d7 => _0xbe52d7.equals(_0x27b59f))) {
                return;
              }
              const _0x13c405 = _0x7edb00 + 1;
              const _0x5b7b30 = _0x32863b.get(_0x27b59f.key) ?? Number.MAX_SAFE_INTEGER;
              if (_0x5b7b30 <= _0x13c405) {
                return;
              }
              this._getFileFixtureNodes(_0x2dd804, _0x27b59f, _0x403a03, _0x32863b, _0x5ef41f, _0x13c405);
            });
          }
        }
        _getPluginFiles(_0x2245f8) {
          const _0x305a09 = this._getModuleNode(_0x2245f8);
          if (!_0x305a09) {
            return [];
          }
          const _0x3632c7 = this._programView.importResolver;
          const _0x4d51f8 = this._programView.configOptions.findExecEnvironment(_0x2245f8);
          const _0x17e273 = _0x305a09.d.statements.filter(_0x35f460 => _0x35f460.nodeType === 47);
          const _0x1e62ce = _0x17e273.map(_0x417e3f => _0x417e3f.d.statements).flat().filter(_0x780898 => _0x780898.nodeType === 3);
          const _0x29883a = _0x1e62ce.find(_0x5b72f0 => _0x5b72f0.d.leftExpr.nodeType === 38 && _0x5b72f0.d.leftExpr.d.value === 'pytest_plugins');
          if (_0x29883a && _0x29883a.d.rightExpr.nodeType === 34) {
            const _0x48c61b = _0x49d48b.getStringEntries(_0x29883a.d.rightExpr);
            return _0x48c61b.map(_0x532d8b => _0x3632c7.resolveImport(_0x2245f8, _0x4d51f8, {
              nameParts: _0x532d8b.d.value.split('.'),
              leadingDots: 0,
              importedSymbols: new Set()
            }).resolvedUris).flat().filter(_0x123bbc => !_0x123bbc.isEmpty());
          }
          return [];
        }
        _getPluginFixtureNodes(_0x5ce60a, _0x53067b, _0x3fe624, _0x786cc9, _0x3ca416) {
          const _0x45d425 = this._getPluginFiles(_0x53067b);
          _0x45d425.forEach(_0x3e8eef => this._getFileFixtureNodes(_0x5ce60a, _0x3e8eef, _0x3fe624, _0x786cc9, _0x3ca416));
        }
        _getConfFixtureNodes(_0x45e379, _0x4d1b2a, _0x40e54a, _0x4b6803, _0x59819e) {
          this._getFileFixtureNodes(_0x45e379, _0x4d1b2a, _0x40e54a, _0x4b6803, _0x59819e);
          this._getPluginFixtureNodes(_0x45e379, _0x4d1b2a, _0x40e54a, _0x4b6803, _0x59819e);
        }
        _getModuleFixtureNodesRecursive(_0x32aac7, _0x489b1e, _0x4fa7a1) {
          const _0x4e518b = new Map();
          const _0xe3fc56 = new Map();
          const _0xb0093d = _0x1ce7b1.getFileInfo(_0x489b1e);
          this._getFileFixtureNodes(_0x32aac7, _0xb0093d.fileUri, _0x4e518b, _0xe3fc56, _0x4fa7a1);
          let _0x211ac4 = _0xb0093d.fileUri.getDirectory();
          if (_0xb0093d.moduleName !== _0x5f0502) {
            this._getConfFixtureNodes(_0x32aac7, _0x211ac4.combinePaths(_0x5f0502 + '.py'), _0x4e518b, _0xe3fc56, _0x4fa7a1);
            this._getPluginFixtureNodes(_0x32aac7, _0xb0093d.fileUri, _0x4e518b, _0xe3fc56, _0x4fa7a1);
          }
          _0x211ac4 = _0x211ac4.getDirectory();
          while (_0x211ac4 && this._fileSystem.existsSync(_0x211ac4) && (_0x211ac4.equals(this._programView.rootPath) || _0x211ac4.isChild(this._programView.rootPath))) {
            _0x3e39fd.throwIfCancellationRequested(_0x4fa7a1);
            this._getConfFixtureNodes(_0x32aac7, _0x211ac4.combinePaths(_0x5f0502 + '.py'), _0x4e518b, _0xe3fc56, _0x4fa7a1);
            const _0x460339 = _0x211ac4.getDirectory();
            if (!_0x460339 || _0x460339.equals(_0x211ac4)) {
              break;
            }
            _0x211ac4 = _0x460339;
          }
          return [..._0x4e518b.values()].flat();
        }
        _getAllowedFixtureNodes(_0x1d7713, _0x48dd11, _0x138d80) {
          const _0x10145b = [];
          const _0x2cdb35 = _0x47d4bf.getEnclosingParam(_0x48dd11);
          if (_0x2cdb35) {
            const _0x2cd566 = _0x47d4bf.getEnclosingFunction(_0x2cdb35);
            const _0x38029b = _0x2cd566 ? _0x49d48b.getMarkParameterizedDecorators(_0x1d7713, _0x2cd566) : [];
            _0x38029b.forEach(_0x404f4f => {
              if (_0x404f4f.d.expr.nodeType === 9) {
                const _0x1f1ef2 = _0x404f4f.d.expr.d.args[0].d.valueExpr;
                if (_0x1f1ef2.nodeType === 48) {
                  const _0x4994c8 = _0x1f1ef2.d.strings.map(_0x309c54 => {
                    return _0x309c54.d.value.split(',').map((_0x326ff5, _0x1886ed) => {
                      const _0x23bdca = {
                        ..._0x309c54,
                        index: _0x1886ed,
                        subvalue: _0x326ff5.trim(),
                        parameter: _0x2cdb35
                      };
                      return _0x23bdca;
                    });
                  }).flat();
                  _0x10145b.push(..._0x4994c8);
                }
              }
            });
          }
          const _0xe79be1 = this._getModuleFixtureNodesRecursive(_0x1d7713, _0x47d4bf.getModuleNode(_0x48dd11), _0x138d80);
          const _0x473da4 = _0x48dd11.parent ? _0x47d4bf.getEnclosingClass(_0x48dd11.parent) : undefined;
          const _0x25c6ce = _0xe79be1.filter(_0x597e49 => {
            if (_0x597e49.parent?.parent?.nodeType === 10 && _0x473da4) {
              return _0x473da4.id === _0x597e49.parent.parent.id;
            }
            return true;
          });
          return [..._0x10145b, ..._0x25c6ce];
        }
      }
      exports.FixtureFinder = _0x46a352;
      _0x46a352.queryTimeout = 10000;
      class _0x75432f {
        constructor(_0x2711ad, _0x2be6be, _0x29e321, _0x1dc3a4, _0x4bd01) {
          this._view = _0x2711ad;
          this._fixtureFinder = _0x2be6be;
          this._useCase = _0x29e321;
          this._declarations = _0x1dc3a4;
          this._token = _0x4bd01;
        }
        appendSymbolNamesTo(_0xecd38a) {}
        appendDeclarationsTo(_0x314c65) {
          _0x314c65.push(...this._declarations);
        }
        appendDeclarationsAt(_0x31bd5a, _0x16fb03, _0x137303) {
          _0x137303.push(...(_0xdafb5b(this._fixtureFinder, this._useCase, this._view.evaluator, _0x16fb03, this._token) ?? []));
        }
      }
      function _0xdafb5b(_0x1bfff3, _0x4de009, _0x369150, _0x541dc8, _0x1f5a53) {
        const _0x29f2cf = _0x541dc8.find(_0x24a3c5.isParamDeclaration);
        if (_0x29f2cf) {
          const _0x216a20 = _0x29f2cf.node;
          if (!_0x49d48b.isInsideTestFunction(_0x1bfff3, _0x216a20) && !_0x49d48b.isInsideFixtureFunction(_0x1bfff3, _0x369150, _0x216a20)) {
            return undefined;
          }
          const _0x1a768e = _0x49d48b.findFixtureFunction(_0x1bfff3, _0x369150, _0x216a20, _0x1f5a53);
          if (!_0x1a768e) {
            return undefined;
          }
          if (_0x1a768e.nodeType === 31 && _0x4de009 === _0x20a32c.ReferenceUseCase.Rename) {
            const _0x1b7c94 = _0x49d48b.getFixtureNameDecoratorString(_0x1a768e);
            const _0x560e16 = _0x1b7c94?.parent;
            if (_0x560e16 && _0x1b7c94) {
              const _0x1baca4 = _0x1ce7b1.getFileInfo(_0x1b7c94);
              return [{
                type: 1,
                node: _0x560e16,
                uri: _0x1baca4.fileUri,
                range: _0x5b11c8.convertTextRangeToRange(_0x560e16, _0x1baca4.lines),
                moduleName: _0x1baca4.moduleName,
                isInExceptSuite: false
              }];
            }
          }
          return [_0x49d48b.getDeclarationForFixture(_0x1a768e)];
        }
        const _0x42235c = _0x541dc8.find(_0x24a3c5.isFunctionDeclaration);
        if (!_0x42235c) {
          return undefined;
        }
        const _0x403569 = _0x42235c.node;
        if (!_0x1bfff3.isFixtureFunction(_0x369150, _0x403569)) {
          return undefined;
        }
        return [_0x49d48b.getDeclarationForFixture(_0x403569)];
      }
    },
    34365: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.isFixtureFunction = _0x30a8a1;
      exports.getMarkParameterizedDecorators = _0xaaee0b;
      exports.getTypeNodes = _0x6b5564;
      exports.getStringEntries = _0x1002db;
      exports.getFixtureNameDecoratorString = _0x5e268c;
      exports.getFixtureName = _0x2a5928;
      exports.getModuleFixtureNodes = _0xe25bd;
      exports.getModuleTestFunctions = _0x1ea675;
      exports.findFixtureFunction = _0x1d4d5d;
      exports.possibleFixtureLocation = _0x57dc1e;
      exports.tryGetParameterNodeType = _0x4e9258;
      exports.isInsideTestFunction = _0x66fcfb;
      exports.isInsideFixtureFunction = _0x1754c6;
      exports.getFixtureType = _0x5f5094;
      exports.getDeclarationForFixture = _0x531207;
      const _0x5b6692 = require(26687);
      const _0x2392d3 = require(41557);
      const _0x187971 = require(88744);
      const _0x229982 = require(21024);
      const _0x320222 = require(56814);
      const _0x4dcee9 = require(39426);
      const _0x2d6199 = require(30048);
      function _0x41043c(_0x20162e, _0x182ee6) {
        if (_0x229982.isFunction(_0x20162e)) {
          return _0x182ee6.some(_0x22cc5c => _0x22cc5c === _0x20162e.shared.fullName);
        }
        if (_0x229982.isClassInstance(_0x20162e)) {
          return _0x182ee6.some(_0x5e3eb6 => _0x5e3eb6 === _0x20162e.shared.fullName);
        }
        if (_0x229982.isUnion(_0x20162e)) {
          return _0x20162e.priv.subtypes.some(_0xecb0b7 => _0x41043c(_0xecb0b7, _0x182ee6));
        }
        if (_0x229982.isOverloaded(_0x20162e)) {
          if (_0x229982.OverloadedType.getOverloads(_0x20162e).some(_0x86e088 => _0x41043c(_0x86e088, _0x182ee6))) {
            return true;
          }
          const _0x57c163 = _0x229982.OverloadedType.getImplementation(_0x20162e);
          return !!_0x57c163 && _0x41043c(_0x57c163, _0x182ee6);
        }
        return false;
      }
      function _0x5d8893(_0x22ca08, _0x347733, _0x8db267) {
        return _0x347733.d.decorators.filter(_0x2f86b1 => {
          _0x27812f(_0x22ca08, _0x2f86b1.d.expr);
          const _0xed7ea1 = _0x22ca08.getType(_0x2f86b1.d.expr);
          if (_0xed7ea1) {
            return _0x41043c(_0xed7ea1, _0x8db267);
          } else {
            return false;
          }
        });
      }
      function _0x27812f(_0x483c7b, _0x2e43e9) {
        var _0x2de615;
        if (_0x2e43e9.nodeType !== 38 && _0x2e43e9.nodeType !== 35) {
          return;
        }
        const _0x2c9f09 = _0x2392d3.getFirstNameOfDottedName(_0x2e43e9);
        if (!_0x2c9f09) {
          return;
        }
        if ((_0x2de615 = _0x483c7b.getDeclInfoForNameNode(_0x2c9f09, false)?.decls) === null || _0x2de615 === undefined) {
          undefined;
        } else {
          _0x2de615.forEach(_0xa69dd => _0x483c7b.resolveAliasDeclaration(_0xa69dd, true, {
            allowExternallyHiddenAccess: true,
            skipFileNeededCheck: true
          }));
        }
      }
      function _0x30a8a1(_0xf43226, _0x83efa) {
        const _0x53c298 = _0x5d8893(_0xf43226, _0x83efa, ['pytest.fixture', 'pytest.yield_fixture', '_pytest.fixtures.fixture', '_pytest.fixtures.yield_fixture', 'pytest.FixtureFunction', 'pytest.FixtureFunctionMarker', '_pytest.fixtures.FixtureFunction', '_pytest.fixtures.FixtureFunctionMarker']);
        return _0x53c298.length > 0;
      }
      function _0xaaee0b(_0x1f553c, _0x50fea4) {
        return _0x5d8893(_0x1f553c, _0x50fea4, ['pytest.MarkDecorator', 'pytest.MarkGenerator', '_pytest.mark.structures.MarkDecorator', '_pytest.mark.structures.MarkGenerator']).filter(_0x244d81 => {
          return _0x244d81.d.expr.nodeType === 9 && _0x244d81.d.expr.d.leftExpr.nodeType === 35 && _0x244d81.d.expr.d.leftExpr.d.member.d.value === 'parametrize';
        });
      }
      function _0x2405bb(_0x5c3970, _0x47753) {
        return _0x47753.map(_0x2e3f74 => {
          if (_0x2e3f74.nodeType === 52) {
            return _0x2e3f74.d.items[_0x5c3970.index];
          } else {
            if (_0x2e3f74.nodeType === 9 && _0x2e3f74.d.leftExpr.nodeType === 35 && _0x2e3f74.d.leftExpr.d.member.d.value === 'param' && _0x2e3f74.d.leftExpr.d.leftExpr.nodeType === 38 && _0x2e3f74.d.leftExpr.d.leftExpr.d.value === 'pytest') {
              return _0x2e3f74.d.args[_0x5c3970.index].d.valueExpr;
            }
          }
          return _0x2e3f74;
        });
      }
      function _0x6b5564(_0x41f8d5) {
        const _0x2a3dda = _0x41f8d5.parent;
        const _0x31a7dd = _0x2a3dda.parent?.parent;
        const _0x3af60c = (_0x31a7dd === null || _0x31a7dd === undefined ? undefined : _0x31a7dd.d.args) && (_0x31a7dd === null || _0x31a7dd === undefined ? undefined : _0x31a7dd.d.args.length) > 0 ? _0x31a7dd.d.args[1].d.valueExpr : undefined;
        let _0x47ca24 = [];
        if (_0x3af60c && _0x3af60c.nodeType === 34) {
          _0x47ca24 = _0x2405bb(_0x41f8d5, _0x3af60c.d.items);
        } else {
          if (_0x3af60c && _0x3af60c.nodeType === 52) {
            _0x47ca24 = _0x2405bb(_0x41f8d5, _0x3af60c.d.items);
          } else {
            if (_0x3af60c) {
              _0x47ca24 = [_0x3af60c];
            }
          }
        }
        return _0x47ca24;
      }
      function _0x1002db(_0x206308) {
        const _0x3b51c5 = [];
        if (_0x206308.nodeType === 34) {
          _0x206308.d.items.forEach(_0x470905 => {
            if (_0x470905.nodeType === 48) {
              _0x3b51c5.push(..._0x470905.d.strings);
            } else {
              if (_0x470905.nodeType === 9 && _0x470905.d.leftExpr.nodeType === 38 && _0x470905.d.leftExpr.d.value === 'str') {
                const _0x1891c = _0x470905.d.args.filter(_0x9db74a => _0x9db74a.d.valueExpr.nodeType === 48).map(_0x2bd43e => _0x2bd43e.d.valueExpr.d.strings).flat();
                _0x3b51c5.push(..._0x1891c);
              }
            }
          });
        } else {
          _0x3b51c5.push(..._0x206308.d.strings);
        }
        return _0x3b51c5;
      }
      function _0x5e268c(_0x38fab9) {
        const _0x1a8029 = _0x38fab9.d.decorators.find(_0xf5d607 => {
          var _0x464820;
          if ((_0x464820 = _0x2392d3.getDecoratorName(_0xf5d607)) === null || _0x464820 === undefined) {
            return undefined;
          } else {
            return _0x464820.includes('fixture');
          }
        });
        const _0x4cc69f = (_0x1a8029 === null || _0x1a8029 === undefined ? undefined : _0x1a8029.d.expr.nodeType) === 9 ? _0x1a8029.d.expr.d.args.find(_0x31d570 => {
          var _0xaca097;
          return ((_0xaca097 = _0x31d570.d.name) === null || _0xaca097 === undefined ? undefined : _0xaca097.d.value) === 'name';
        }) : undefined;
        const _0x3bd506 = _0x4cc69f && (_0x4cc69f === null || _0x4cc69f === undefined ? undefined : _0x4cc69f.d.valueExpr.nodeType) === 48 ? _0x1002db(_0x4cc69f === null || _0x4cc69f === undefined ? undefined : _0x4cc69f.d.valueExpr).filter(_0x5104bb => _0x5104bb.nodeType === 49) : [];
        if (_0x3bd506 && _0x3bd506.length > 0) {
          return _0x3bd506[0];
        } else {
          return undefined;
        }
      }
      function _0x2a5928(_0x5c1d56, _0x1fb03c) {
        if (_0x5c1d56.nodeType === 31) {
          if (_0x5c1d56.d.name.d.value === '__init__' && _0x5c1d56.parent) {
            const _0x4f026c = _0x2392d3.getEnclosingClass(_0x5c1d56.parent);
            if (_0x4f026c && _0x4f026c.d.name.d.value === 'FixtureRequest') {
              return 'request';
            }
          }
          if (_0x1fb03c) {
            const _0xf3a64a = _0x5e268c(_0x5c1d56);
            if (_0xf3a64a) {
              return _0xf3a64a.d.value;
            } else {
              return _0x5c1d56.d.name.d.value;
            }
          }
          return _0x5c1d56.d.name.d.value;
        } else {
          if (_0x5c1d56.nodeType === 38) {
            return _0x5c1d56.d.value;
          } else {
            return _0x5c1d56.subvalue;
          }
        }
      }
      function _0xe25bd(_0x41e25c, _0x213378) {
        const _0x2216c5 = _0x213378.d.statements.filter(_0x53f847 => _0x53f847.nodeType === 31 && _0x30a8a1(_0x41e25c, _0x53f847));
        const _0x4fbbb9 = _0x213378.d.statements.filter(_0x462555 => _0x462555.nodeType === 10);
        const _0x5877be = _0x4fbbb9.map(_0x6895eb => _0x6895eb.d.suite).flat().map(_0x38bf96 => _0x38bf96.d.statements).flat().filter(_0x4d6ea0 => _0x4d6ea0.nodeType === 31 && _0x30a8a1(_0x41e25c, _0x4d6ea0));
        const _0x4ab805 = _0x213378.d.statements.map(_0x2ec760 => {
          if (_0x2ec760.nodeType === 47 && _0x2ec760.d.statements.length === 1 && _0x2ec760.d.statements[0].nodeType === 3 && _0x2ec760.d.statements[0].d.rightExpr.nodeType === 9 && _0x2ec760.d.statements[0].d.rightExpr.d.leftExpr.nodeType === 9 && _0x2ec760.d.statements[0].d.rightExpr.d.leftExpr.d.leftExpr.nodeType === 35 && _0x2ec760.d.statements[0].d.rightExpr.d.leftExpr.d.leftExpr.d.member.d.value === 'fixture' && _0x2ec760.d.statements[0].d.rightExpr.d.leftExpr.d.leftExpr.d.leftExpr.nodeType === 38 && _0x2ec760.d.statements[0].d.rightExpr.d.leftExpr.d.leftExpr.d.leftExpr.d.value === 'pytest' && _0x2ec760.d.statements[0].d.leftExpr.nodeType === 38 && _0x2ec760.d.statements[0].d.rightExpr.d.args.length === 1) {
            return {
              ..._0x2ec760.d.statements[0].d.leftExpr,
              alternativeTypeNode: _0x2ec760.d.statements[0].d.rightExpr.d.args[0].d.valueExpr
            };
          }
          return undefined;
        }).filter(_0x36ab6c => !!_0x36ab6c);
        return [..._0x2216c5, ..._0x5877be, ..._0x4ab805];
      }
      function _0x1ea675(_0x4e27ac, _0x631195) {
        const _0x3c8c94 = [];
        class _0x4a124c extends _0x187971.ParseTreeWalker {
          visitClass(_0xa91fd9) {
            return _0x631195.classes.some(_0x51b39c => _0x51b39c.test(_0xa91fd9.d.name.d.value));
          }
          visitFunction(_0x208e40) {
            if (_0x631195.functions.some(_0x3a0b10 => _0x3a0b10.test(_0x208e40.d.name.d.value))) {
              _0x3c8c94.push(_0x208e40);
            }
            return false;
          }
        }
        const _0x31f8b1 = new _0x4a124c();
        _0x31f8b1.walk(_0x4e27ac);
        return _0x3c8c94;
      }
      function _0x1d4d5d(_0x48c58e, _0x12e442, _0x343646, _0x3de30b) {
        if (_0x3de30b) {
          return _0x28e77e(_0x48c58e, _0x12e442, _0x343646, _0x3de30b);
        }
        return _0x392954(_0x48c58e, _0x12e442, _0x343646);
      }
      function _0x392954(_0x146b13, _0xf64244, _0x4fd5c5) {
        const _0x330d48 = _0x146b13.serviceProvider.tryGet(_0x2d6199.PylanceServiceKeys.fixtureFinder);
        const _0x2a387b = _0x146b13.evaluator;
        if (_0x330d48 && _0x2a387b) {
          return _0x28e77e(_0x330d48, _0x2a387b, _0xf64244, _0x4fd5c5);
        } else {
          return undefined;
        }
      }
      function _0x28e77e(_0x418e35, _0x40fad6, _0x1236ff, _0x14ab7e) {
        if (_0x1236ff.d.name) {
          return _0x418e35.findMatchingFixtures(_0x40fad6, _0x1236ff, _0x23e62b => _0x22e416(_0x23e62b, _0x1236ff.d.name.d.value), _0x14ab7e)[0];
        } else {
          return undefined;
        }
        function _0x22e416(_0x2cb18f, _0x348944) {
          return _0x2a5928(_0x2cb18f, true) === _0x348944;
        }
      }
      function _0x57dc1e(_0x58f2ac, _0x1f216c, _0x179e40) {
        return _0x66fcfb(_0x58f2ac, _0x179e40) || _0x1754c6(_0x58f2ac, _0x1f216c, _0x179e40);
      }
      function _0x4e9258(_0xdd6eb8, _0x13cf54, _0x5a2b6c, _0x26406c) {
        if (!_0x57dc1e(_0xdd6eb8, _0x13cf54, _0x5a2b6c)) {
          return undefined;
        }
        const _0x38fe06 = _0x28e77e(_0xdd6eb8, _0x13cf54, _0x5a2b6c, _0x26406c);
        if (!_0x38fe06) {
          return undefined;
        }
        return _0x5f5094(_0xdd6eb8, _0x13cf54, _0x38fe06, true, _0x26406c);
      }
      function _0x66fcfb(_0x141fa2, _0x4249e1) {
        return _0x4249e1.parent?.nodeType === 31 && _0x141fa2.isTestFunction(_0x4249e1.parent);
      }
      function _0x1754c6(_0x5b4f32, _0x40311d, _0x3a3479) {
        return _0x3a3479.parent?.nodeType === 31 && _0x5b4f32.isFixtureFunction(_0x40311d, _0x3a3479.parent);
      }
      function _0x5f5094(_0xad74c2, _0x27a1af, _0x4ea13f, _0x538764, _0x1750d5) {
        let _0x2eafe7;
        if (_0x4ea13f.nodeType === 31) {
          if (_0x4ea13f.d.name.d.value === '__init__' && _0x4ea13f.parent?.parent?.nodeType === 10) {
            const _0x16266c = _0x27a1af.getTypeOfClass(_0x4ea13f.parent.parent);
            _0x2eafe7 = _0x16266c?.classType;
          } else {
            const _0x525af2 = _0x27a1af.getTypeOfFunction(_0x4ea13f);
            if (_0x538764 && _0x525af2) {
              _0x2eafe7 = _0x525af2?.functionType?.shared?.declaredReturnType ?? _0x27a1af.getInferredReturnType(_0x525af2?.functionType);
              if (_0x2eafe7 && _0x229982.isClassInstance(_0x2eafe7) && _0x229982.ClassType.isBuiltIn(_0x2eafe7, 'Generator') && _0x2eafe7.priv.typeArgs && _0x2eafe7.priv.typeArgs.length) {
                _0x2eafe7 = _0x2eafe7.priv.typeArgs[0];
              }
            } else {
              if (_0x525af2?.functionType) {
                const _0x5a2b24 = {
                  ..._0x525af2.functionType,
                  shared: {
                    ..._0x525af2.functionType.shared,
                    parameters: _0x525af2.functionType.shared.parameters.map((_0x410e0b, _0x37b166) => {
                      if (_0x410e0b._type.category === 1) {
                        return {
                          ..._0x410e0b,
                          type: _0x4e9258(_0xad74c2, _0x27a1af, _0x4ea13f.d.params[_0x37b166], _0x1750d5) ?? _0x410e0b._type
                        };
                      }
                      return _0x410e0b;
                    })
                  }
                };
                _0x2eafe7 = _0x5a2b24;
              }
            }
          }
        } else {
          if (_0x4ea13f.nodeType === 38) {
            _0x2eafe7 = _0x4dcee9.combineExpressionTypes([_0x4ea13f.alternativeTypeNode], _0x27a1af);
          } else {
            const _0x3f86a1 = _0x531207(_0x4ea13f);
            if (_0x3f86a1.type === 2 && _0x3f86a1.inferredTypeNodes) {
              _0x2eafe7 = _0x4dcee9.combineExpressionTypes(_0x3f86a1.inferredTypeNodes, _0x27a1af);
            }
          }
        }
        if (_0x2eafe7 !== null && _0x2eafe7 !== undefined) {
          return _0x2eafe7;
        } else {
          return _0x229982.UnknownType.create();
        }
      }
      function _0x531207(_0x4cac0b) {
        const _0x18552c = _0x5b6692.getFileInfo(_0x4cac0b);
        if (_0x4cac0b.nodeType === 31 && _0x4cac0b.d.name.d.value === '__init__' && _0x4cac0b.parent?.parent?.nodeType === 10) {
          return {
            type: 6,
            node: _0x4cac0b.parent.parent,
            uri: _0x18552c.fileUri,
            range: _0x320222.convertTextRangeToRange(_0x4cac0b.parent.parent.d.name, _0x18552c.lines),
            moduleName: _0x18552c.moduleName,
            isInExceptSuite: false
          };
        }
        if (_0x4cac0b.nodeType === 31) {
          return {
            type: 5,
            isMethod: _0x4cac0b.parent?.parent?.nodeType === 10,
            isGenerator: false,
            moduleName: _0x18552c.moduleName,
            isInExceptSuite: false,
            node: _0x4cac0b,
            uri: _0x18552c.fileUri,
            range: _0x320222.convertTextRangeToRange(_0x4cac0b.d.name, _0x18552c.lines)
          };
        }
        if (_0x4cac0b.nodeType === 38) {
          return {
            type: 1,
            isInExceptSuite: false,
            alternativeTypeNode: _0x4cac0b.alternativeTypeNode,
            moduleName: _0x18552c.moduleName,
            node: _0x4cac0b,
            uri: _0x18552c.fileUri,
            range: _0x320222.convertTextRangeToRange(_0x4cac0b, _0x18552c.lines)
          };
        }
        return {
          type: 2,
          node: _0x4cac0b.parameter,
          uri: _0x18552c.fileUri,
          range: _0x320222.convertTextRangeToRange(_0x4cac0b, _0x18552c.lines),
          moduleName: _0x18552c.moduleName,
          isInExceptSuite: false,
          inferredTypeNodes: _0x6b5564(_0x4cac0b),
          inferredName: _0x4cac0b.subvalue
        };
      }
    },
    93115: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.pyTestCodeAction = undefined;
      const _0x44ef2b = require(56911);
      const _0x96ae0e = require(91426);
      const _0x151f76 = require(23574);
      const _0x4e97f1 = require(56814);
      const _0x4c5134 = require(27130);
      const _0x5740b8 = require(19013);
      const _0x3bd695 = require(30048);
      const _0x5d6f80 = require(15986);
      const _0x211da8 = require(34365);
      class _0x3c194f {
        static addCodeActions(_0x2c75ad, _0x2bb2a7, _0x2f0d8a, _0x3bd734, _0x1a5764, _0x5db399) {
          _0x96ae0e.throwIfCancellationRequested(_0x5db399);
          _0x2c75ad.service.run(_0x38852f => {
            const _0x176f3a = _0x38852f.serviceProvider.tryGet(_0x3bd695.PylanceServiceKeys.fixtureFinder);
            if (!_0x176f3a || !_0x176f3a.hasPytest()) {
              return;
            }
            if (!_0x176f3a.isTestFile(_0x2bb2a7)) {
              return;
            }
            const _0x2bbe5b = [];
            const _0x464ee1 = _0x5740b8.getNodesInRange(_0x3bd734, 41, _0x5db399, _0x2f0d8a);
            _0x464ee1.forEach(_0x55353f => {
              var _0x3dfbbd;
              if (_0x55353f.d.annotation || _0x55353f.d.annotationComment || !_0x211da8.possibleFixtureLocation(_0x176f3a, _0x38852f.evaluator, _0x55353f) || !_0x211da8.findFixtureFunction(_0x38852f, _0x55353f, _0x5db399)) {
                return;
              }
              const _0x217c72 = _0x4e97f1.convertTextRangeToRange(_0x55353f, _0x3bd734.tokenizerOutput.lines);
              const _0x4243c9 = _0x5d6f80.Localizer.Pytest.addTypeAnnnotation().format({
                name: ((_0x3dfbbd = _0x55353f.d.name) === null || _0x3dfbbd === undefined ? undefined : _0x3dfbbd.d.value) || ''
              });
              _0x2bbe5b.push(_0x44ef2b.CodeAction.create(_0x4243c9, _0x151f76.createCommand(_0x4243c9, _0x4c5134.Commands.addFixtureTypeAnnotation, _0x2bb2a7.toString(), _0x217c72), _0x44ef2b.CodeActionKind.RefactorInline));
            });
            if (_0x2bbe5b.length > 0) {
              const _0x275f61 = _0x5d6f80.Localizer.Pytest.addTypeAnnnotations();
              _0x2bbe5b.push(_0x44ef2b.CodeAction.create(_0x275f61, _0x151f76.createCommand(_0x275f61, _0x4c5134.Commands.addAllFixtureTypeAnnotations, _0x2bb2a7.toString()), _0x44ef2b.CodeActionKind.RefactorInline));
              _0x1a5764.push(..._0x2bbe5b);
              return;
            }
            const _0x4cf191 = _0x5740b8.getNodesInRange(_0x3bd734, 41, _0x5db399);
            for (const _0x37ae3c of _0x4cf191) {
              _0x96ae0e.throwIfCancellationRequested(_0x5db399);
              if (_0x37ae3c.d.annotation || _0x37ae3c.d.annotationComment || !_0x211da8.possibleFixtureLocation(_0x176f3a, _0x38852f.evaluator, _0x37ae3c) || !_0x211da8.findFixtureFunction(_0x38852f, _0x37ae3c, _0x5db399)) {
                continue;
              }
              const _0x349ae7 = _0x5d6f80.Localizer.Pytest.addTypeAnnnotations();
              _0x1a5764.push(_0x44ef2b.CodeAction.create(_0x349ae7, _0x151f76.createCommand(_0x349ae7, _0x4c5134.Commands.addAllFixtureTypeAnnotations, _0x2bb2a7.toString()), _0x44ef2b.CodeActionKind.RefactorInline));
              return;
            }
          }, _0x5db399);
        }
      }
      exports.pyTestCodeAction = _0x3c194f;
    },
    30579: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PyTestCompletionProvider = undefined;
      const _0x59b926 = require(56911);
      const _0x46e68e = require(41557);
      const _0x4730d5 = require(51868);
      const _0x204ae6 = require(39426);
      const _0x4fad42 = require(30048);
      const _0x38d937 = require(72086);
      const _0x520fc9 = require(34365);
      class _0x55cdd0 {
        constructor(_0x560169, _0x3ec9f0, _0x6ce9ee, _0x29234e, _0x567e4e) {
          this._program = _0x560169;
          this._fileUri = _0x3ec9f0;
          this._position = _0x6ce9ee;
          this._options = _0x29234e;
          this._token = _0x567e4e;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._sourceMapper = this._program.getSourceMapper(this._fileUri, this._token, true);
          this._fixtureFinder = this._program.serviceProvider.tryGet(_0x4fad42.PylanceServiceKeys.fixtureFinder);
        }
        getSlowCompletionInfo() {
          return this._slowCompletionInfo;
        }
        getCompletions() {
          if (!this._fixtureFinder || !this._parseResults) {
            return null;
          }
          const _0x2f5984 = _0x46e68e.findNodeByPosition(this._parseResults.parserOutput.parseTree, this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x2f5984?.nodeType !== 38 || _0x2f5984.parent?.nodeType !== 41) {
            return null;
          }
          if (!_0x520fc9.isInsideTestFunction(this._fixtureFinder, _0x2f5984.parent) && !_0x520fc9.isInsideFixtureFunction(this._fixtureFinder, this._evaluator, _0x2f5984.parent)) {
            return null;
          }
          const _0x24d19e = _0x59b926.CompletionList.create();
          const _0x4bc5c9 = this._fixtureFinder.findMatchingFixtures(this._evaluator, _0x2f5984, _0x105ced => this._fixtureStartsWith(_0x105ced, _0x2f5984.d.value), this._token).map(_0x192034 => {
            return {
              fixture: _0x192034,
              label: _0x520fc9.getFixtureName(_0x192034, true),
              type: _0x520fc9.getFixtureType(this._fixtureFinder, this._evaluator, _0x192034, false, this._token)
            };
          }).flat();
          _0x4bc5c9.forEach(_0x142a9d => {
            const _0x412d4c = _0x59b926.CompletionItem.create(_0x142a9d.label);
            const _0x444b90 = _0x520fc9.getDeclarationForFixture(_0x142a9d.fixture);
            _0x412d4c.sortText = _0x142a9d.label;
            const _0x29ddb9 = {
              funcParensDisabled: true,
              uri: _0x444b90.uri.toString(),
              position: _0x444b90.range.start
            };
            _0x412d4c.data = _0x29ddb9;
            _0x412d4c.kind = _0x59b926.CompletionItemKind.Function;
            const _0x366cf3 = _0x444b90.type === 6 || _0x444b90.type === 5 ? _0x444b90.node.d.name.d.value : _0x142a9d.label;
            const _0x22c25d = _0x204ae6.getDocumentationPartsForTypeAndDecl(this._sourceMapper, _0x142a9d.type, _0x444b90, this._evaluator);
            const _0x51a722 = _0x142a9d.type ? _0x4730d5.getTypeDetail(this._evaluator, _0x142a9d.type, _0x444b90, _0x366cf3, undefined, this._program.configOptions.functionSignatureDisplay) : undefined;
            _0x412d4c.documentation = _0x4730d5.getCompletionItemDocumentation(this._program.serviceProvider, _0x51a722, _0x22c25d, this._options.format, _0x444b90);
            _0x24d19e.items.push(_0x412d4c);
          });
          this._slowCompletionInfo = {
            completionType: 'pytest',
            fileType: _0x38d937.getSlowCompletionInfoFileType(this._fileUri)
          };
          return _0x24d19e;
        }
        resolveCompletionItem(_0x24b14e) {}
        get _evaluator() {
          return this._program.evaluator;
        }
        _fixtureStartsWith(_0x53659f, _0x409e5b) {
          return _0x520fc9.getFixtureName(_0x53659f, true).startsWith(_0x409e5b);
        }
      }
      exports.PyTestCompletionProvider = _0x55cdd0;
    },
    84826: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PyTestDocumentTransformer = undefined;
      const _0x36d81d = require(41557);
      const _0x4cd9ed = require(91426);
      const _0x555035 = require(56814);
      const _0x13405d = require(88754);
      const _0x56ee1f = require(74382);
      const _0x11ff44 = require(30048);
      const _0x12198e = require(72086);
      const _0x1fa6d0 = require(19995);
      const _0x46a75f = require(34365);
      class _0x1c6796 {
        constructor() {}
        canApply(_0x4688d3, _0x52197c, _0x1a2506, _0x411385) {
          _0x4cd9ed.throwIfCancellationRequested(_0x411385);
          const _0x279b42 = this._tryGetFixtureFinder(_0x4688d3);
          if (!_0x279b42 || !_0x279b42.isTestFile(_0x52197c)) {
            return false;
          }
          const _0x440d5c = this._tryGetContainingFunctionNode(_0x4688d3, _0x52197c, _0x1a2506);
          if (!_0x440d5c) {
            return false;
          }
          return _0x279b42.isTestFunction(_0x440d5c) || _0x279b42.isFixtureFunction(_0x4688d3.evaluator, _0x440d5c);
        }
        apply(_0xb5457d, _0xefa068, _0xd26aa7, _0xa6885c, _0x4e0ef6) {
          var _0x5d84f2;
          const _0x93465a = this._tryGetFixtureFinder(_0xb5457d);
          const _0x11bffb = this._tryGetContainingFunctionNode(_0xb5457d, _0xefa068, _0xd26aa7);
          const _0x3cdb1b = [];
          const _0x3e3376 = _0xb5457d.getParseResults(_0xefa068);
          const _0x502788 = _0xb5457d.evaluator;
          const _0x496fb9 = new Map();
          for (const _0x40d557 of _0x11bffb.d.params) {
            _0x4cd9ed.throwIfCancellationRequested(_0x4e0ef6);
            if (!_0x40d557.d.name || !!_0x40d557.d.annotation || !!_0x40d557.d.annotationComment || !!_0x40d557.d.defaultValue) {
              continue;
            }
            const _0x1860f3 = _0x93465a.findMatchingFixtures(_0x502788, _0x40d557, _0x1312a6 => this._fixtureEquals(_0x1312a6, _0x40d557.d.name.d.value), _0x4e0ef6);
            if (_0x1860f3.length === 0) {
              continue;
            }
            const _0x494c7c = _0x1860f3[0];
            const _0x517051 = _0x46a75f.getFixtureType(_0x93465a, _0x502788, _0x494c7c, true, _0x4e0ef6);
            _0x496fb9.set(_0x40d557, _0x517051);
            const _0x3dedac = _0x555035.convertOffsetToPosition(_0x13405d.TextRange.getEnd(_0x40d557), _0x3e3376 === null || _0x3e3376 === undefined ? undefined : _0x3e3376.tokenizerOutput.lines);
            const _0x5199ca = _0x502788.printType(_0x517051, {
              expandTypeAlias: true,
              enforcePythonSyntax: true
            });
            _0x3cdb1b.push({
              range: {
                start: _0x3dedac,
                end: _0x3dedac
              },
              replacementText: ` : ${_0x5199ca}`
            });
          }
          const _0x4ba548 = _0xefa068.addPath(`_chained_${_0x12198e.SkipMarker}.py`);
          const _0xa27dda = _0xb5457d.getSourceFileInfo(_0xefa068);
          const _0x221035 = this._updateChainedFile(_0xb5457d, _0xa27dda, _0x496fb9, _0x4ba548, _0x4e0ef6);
          _0xb5457d.setFileOpened(_0x4ba548, 0, _0x221035, {
            chainedFileUri: (_0x5d84f2 = _0xa27dda.chainedSourceFile) === null || _0x5d84f2 === undefined ? undefined : _0x5d84f2.sourceFile.getUri(),
            ipythonMode: _0xa27dda.sourceFile.getIPythonMode(),
            isTracked: false
          });
          _0xa6885c.applyChanges(_0x3cdb1b);
          _0xb5457d.setFileOpened(_0xefa068, _0xa27dda.sourceFile.getClientVersion() ?? 0, _0xa6885c.currentDocument, {
            chainedFileUri: _0x4ba548,
            ipythonMode: _0xa27dda.sourceFile.getIPythonMode(),
            isTracked: _0xa27dda.isTracked
          });
          _0xb5457d.updateChainedUri(_0xefa068, _0x4ba548);
          return true;
        }
        _updateChainedFile(_0x584fc7, _0xe88a63, _0x4fd651, _0x4bfab8, _0x2dcf51) {
          var _0xd0c460;
          const _0x59ae35 = '';
          _0x584fc7.setFileOpened(_0x4bfab8, 0, _0x59ae35, {
            chainedFileUri: (_0xd0c460 = _0xe88a63.chainedSourceFile) === null || _0xd0c460 === undefined ? undefined : _0xd0c460.sourceFile.getUri(),
            ipythonMode: _0xe88a63.sourceFile.getIPythonMode(),
            isTracked: false
          });
          const _0x1d6367 = new _0x1fa6d0.ImportAdder(_0x584fc7);
          _0x1d6367.appendImportInfoForTypes(_0xe88a63.sourceFile.getUri(), [..._0x4fd651.entries()].map(_0x112f0f => ({
            type: _0x112f0f[1],
            node: _0x112f0f[0].d.name
          })), _0x2dcf51);
          const _0x263c93 = _0x584fc7.getParseResults(_0x4bfab8);
          const _0xd9896c = _0x1d6367.applyImports(_0x4bfab8, _0x263c93, 0, 'absolute', _0x2dcf51);
          return _0x56ee1f.applyTextEditsToString(_0xd9896c, _0x263c93.tokenizerOutput.lines, _0x59ae35);
        }
        _fixtureEquals(_0x5da14d, _0x167d99) {
          return _0x46a75f.getFixtureName(_0x5da14d, true) === _0x167d99;
        }
        _tryGetFixtureFinder(_0x210863) {
          return _0x210863.serviceProvider.tryGet(_0x11ff44.PylanceServiceKeys.fixtureFinder);
        }
        _tryGetContainingFunctionNode(_0x202303, _0x2eaa39, _0x5ee857) {
          const _0x5cd6c0 = _0x202303.getParseResults(_0x2eaa39);
          if (!_0x5cd6c0) {
            return undefined;
          }
          const _0x370fe4 = _0x555035.convertPositionToOffset(_0x5ee857, _0x5cd6c0.tokenizerOutput.lines);
          if (!_0x370fe4) {
            return undefined;
          }
          const _0x1ef1cd = _0x36d81d.findNodeByOffset(_0x5cd6c0.parserOutput.parseTree, _0x370fe4);
          if (!_0x1ef1cd) {
            return undefined;
          }
          return this._tryGetModuleLevelFunctionNode(_0x1ef1cd);
        }
        _tryGetModuleLevelFunctionNode(_0x3eddbc) {
          const _0x5e7cbb = _0x36d81d.getEnclosingFunction(_0x3eddbc);
          if (!_0x5e7cbb) {
            return undefined;
          }
          if (_0x5e7cbb.parent?.nodeType === 36) {
            return _0x5e7cbb;
          }
          return this._tryGetModuleLevelFunctionNode(_0x5e7cbb);
        }
      }
      exports.PyTestDocumentTransformer = _0x1c6796;
    },
    23169: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PyTestHoverProvider = undefined;
      const _0xd77aa1 = require(28445);
      const _0x480279 = require(41557);
      const _0x538208 = require(21024);
      const _0x41ba04 = require(92324);
      const _0x1dadfd = require(91426);
      const _0x3a6026 = require(56814);
      const _0x4cc2c1 = require(88754);
      const _0x1dd34e = require(79943);
      const _0x57cff9 = require(39426);
      const _0x129925 = require(85114);
      const _0x5f44a0 = require(30048);
      const _0x562bc7 = require(34365);
      class _0x3797bf {
        constructor(_0x42321d, _0x508e0, _0xbb5d9c, _0x1f72d9, _0x2e7d05) {
          this._program = _0x42321d;
          this._fileUri = _0x508e0;
          this._position = _0xbb5d9c;
          this._format = _0x1f72d9;
          this._token = _0x2e7d05;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._sourceMapper = this._program.getSourceMapper(this._fileUri, this._token, true);
          this._fixtureFinder = this._program.serviceProvider.tryGet(_0x5f44a0.PylanceServiceKeys.fixtureFinder);
        }
        getHover() {
          return _0x1dd34e.convertHoverResults(this._getHoverResult(), this._format);
        }
        get _functionSignatureDisplay() {
          return this._program.configOptions.functionSignatureDisplay;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _getHoverResult() {
          _0x1dadfd.throwIfCancellationRequested(this._token);
          if (!this._parseResults) {
            return null;
          }
          const _0x10c0fe = _0x3a6026.convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);
          if (_0x10c0fe === undefined) {
            return null;
          }
          const _0x1e6492 = _0x480279.findNodeByOffset(this._parseResults.parserOutput.parseTree, _0x10c0fe);
          if (_0x1e6492 === undefined) {
            return null;
          }
          if (_0x1e6492.nodeType !== 38) {
            return null;
          }
          const _0x2c6ac9 = this._tryGetDeclarations(_0x1e6492);
          if (_0x2c6ac9.length === 0) {
            return null;
          }
          const _0x320b78 = [];
          const _0x3b07a3 = _0x1dd34e.HoverProvider.getPrimaryDeclaration(_0x2c6ac9);
          this._addResultsForDeclaration(_0x320b78, _0x3b07a3, _0x1e6492);
          if (_0x320b78.length === 0) {
            return null;
          }
          return {
            parts: _0x320b78,
            range: {
              start: _0x3a6026.convertOffsetToPosition(_0x1e6492.start, this._parseResults.tokenizerOutput.lines),
              end: _0x3a6026.convertOffsetToPosition(_0x4cc2c1.TextRange.getEnd(_0x1e6492), this._parseResults.tokenizerOutput.lines)
            }
          };
        }
        _addResultsForDeclaration(_0x1d4e7a, _0x427767, _0xfb5288) {
          if (_0xd77aa1.isParamDeclaration(_0x427767)) {
            this._addResultsForParameterDeclaration(_0x1d4e7a, _0x427767, _0xfb5288);
            return;
          }
          if (_0xd77aa1.isVariableDeclaration(_0x427767)) {
            this._addResultsForVariableDeclaration(_0x1d4e7a, _0x427767, _0xfb5288);
            return;
          }
          if (_0xd77aa1.isFunctionDeclaration(_0x427767)) {
            this._addResultsForFunctionDeclaration(_0x1d4e7a, _0x427767, _0xfb5288);
            return;
          }
          if (_0xd77aa1.isClassDeclaration(_0x427767)) {
            this._addResultsForClassDeclaration(_0x1d4e7a, _0x427767, _0xfb5288);
            return;
          }
        }
        _addResultsForClassDeclaration(_0x4b0db5, _0x39c7b6, _0x29f439) {
          const _0x5d88ed = _0x39c7b6.node.d.name;
          this._addResultsPart(_0x4b0db5, `(class) ${_0x5d88ed.d.value}`, true);
          this._addDocumentationPart(_0x4b0db5, _0x29f439, _0x39c7b6);
        }
        _addResultsForParameterDeclaration(_0x4850ee, _0x15b4aa, _0x5c2759) {
          if (_0x15b4aa.inferredName === undefined || _0x15b4aa.inferredTypeNodes === undefined) {
            return;
          }
          this._addResultsPart(_0x4850ee, `(parameter) ${_0x15b4aa.inferredName}${this._getTypesText(_0x15b4aa.inferredTypeNodes)}`, true);
          _0x1dd34e.addParameterResultsPart(this._program.serviceProvider, _0x5c2759, _0x15b4aa, this._format, _0x4850ee);
          this._addDocumentationPart(_0x4850ee, _0x5c2759, _0x15b4aa);
        }
        _addResultsForVariableDeclaration(_0x271e49, _0x5c878c, _0x47bf48) {
          let _0x245018 = _0x47bf48;
          let _0x2c41fa = this._getType(_0x245018);
          if (_0x538208.isUnknown(_0x2c41fa) && _0x5c878c.alternativeTypeNode && _0x129925.isExpressionNode(_0x5c878c.alternativeTypeNode)) {
            const _0x3b31a6 = this._getType(_0x5c878c.alternativeTypeNode);
            if (!_0x538208.isUnknown(_0x3b31a6)) {
              _0x2c41fa = _0x3b31a6;
              _0x245018 = _0x5c878c.alternativeTypeNode;
            }
          }
          const _0x50f052 = _0x1dd34e.getVariableTypeText(this._evaluator, _0x5c878c, _0x47bf48.d.value, _0x2c41fa, _0x245018, this._functionSignatureDisplay);
          this._addResultsPart(_0x271e49, _0x50f052, true);
          this._addDocumentationPart(_0x271e49, _0x47bf48, _0x5c878c);
        }
        _addResultsForFunctionDeclaration(_0x58cebc, _0x27597e, _0x492561) {
          const _0x33982a = this._tryGetFunctionNodeType(_0x27597e.node);
          if (!_0x33982a) {
            return;
          }
          let _0xe12eb4 = 'function';
          let _0x3a5dd5 = false;
          if (_0x27597e.isMethod) {
            const _0x16416d = this._evaluator.getTypeForDeclaration(_0x27597e)?.type;
            _0x3a5dd5 = !!_0x16416d && _0x41ba04.isMaybeDescriptorInstance(_0x16416d, false);
            _0xe12eb4 = _0x3a5dd5 ? 'property' : 'method';
          }
          const _0x34fd84 = _0x57cff9.getToolTipForType(_0x33982a, _0xe12eb4, _0x492561.d.value, this._evaluator, _0x3a5dd5, this._functionSignatureDisplay);
          this._addResultsPart(_0x58cebc, _0x34fd84, true);
          this._addDocumentationPart(_0x58cebc, _0x492561, _0x27597e);
        }
        _addDocumentationPart(_0x50812e, _0x505cad, _0x52e69b) {
          const _0x3bd897 = this._getType(_0x505cad);
          this._addDocumentationPartForType(_0x50812e, _0x3bd897, _0x52e69b, _0x505cad.d.value);
        }
        _addDocumentationPartForType(_0x4fd695, _0x2c07b8, _0x5206be, _0x354288) {
          const _0x5bb22c = _0x57cff9.getDocumentationPartsForTypeAndDecl(this._sourceMapper, _0x2c07b8, _0x5206be, this._evaluator, {
            name: _0x354288
          });
          _0x1dd34e.addDocumentationResultsPart(this._program.serviceProvider, _0x5bb22c, this._format, _0x4fd695, _0x5206be);
          return !!_0x5bb22c;
        }
        _addResultsPart(_0x4fa81e, _0x8e1534, _0x28f71d = false) {
          _0x4fa81e.push({
            python: _0x28f71d,
            text: _0x8e1534
          });
        }
        _getTypesText(_0x159af8, _0x2c01b1) {
          const _0x466556 = _0x57cff9.combineExpressionTypes(_0x159af8, this._evaluator);
          return `: ${this._evaluator.printType(_0x466556, _0x2c01b1)}`;
        }
        _getType(_0x3fbaa9) {
          return _0x57cff9.getTypeForToolTip(this._evaluator, _0x3fbaa9);
        }
        _tryGetFunctionNodeType(_0x10d498) {
          if (this._fixtureFinder && this._fixtureFinder.isFixtureFunction(this._evaluator, _0x10d498)) {
            return _0x562bc7.getFixtureType(this._fixtureFinder, this._evaluator, _0x10d498, false, this._token);
          }
          return undefined;
        }
        _tryGetDeclarations(_0x5abf28) {
          if (!this._fixtureFinder) {
            return [];
          }
          return this._fixtureFinder.tryGetDeclarations(_0x5abf28, _0x5abf28.start, this._token);
        }
      }
      exports.PyTestHoverProvider = _0x3797bf;
    },
    22985: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PytestQueryEngine = undefined;
      const _0x410c7f = require(56911);
      const _0x1449e7 = require(91426);
      const _0x38803c = require(30371);
      const _0x1cfe91 = /Python classes: \[(.*?)\]/;
      const _0x4cdca8 = /Python files: \[(.*?)\]/;
      const _0x5ac75d = /Python functions: \[(.*?)\]/;
      class _0x588f03 {
        constructor() {
          this._cancelSource = new _0x410c7f.CancellationTokenSource();
        }
        async getOptions(_0x5e6e5f, _0x965acf, _0x387ba0, _0x30f97b, _0x32a146) {
          this._cancelSource.cancel();
          const _0x2e8c50 = _0x38803c.getBundledFilesPath(_0x965acf.getModulePath()).combinePaths('get_pytest_options.py');
          let _0x4aac17 = 'default';
          let _0x1de587 = ['Test'];
          let _0x22f23c = ['test_*.py', '*_test.py'];
          let _0x22100d = ['test'];
          const _0x1710e6 = this._getExtraArgs(_0x30f97b);
          this._cancelSource = new _0x410c7f.CancellationTokenSource();
          const _0x2961bc = setTimeout(() => this._cancelSource.cancel(), _0x32a146);
          try {
            const _0x59ecdb = await _0x1449e7.raceCancellation(this._cancelSource.token, _0x5e6e5f.runScript(_0x30f97b.pythonPath, _0x2e8c50, _0x1710e6, _0x387ba0, _0x410c7f.CancellationToken.None));
            if (!_0x59ecdb) {
              throw new _0x1449e7.OperationCanceledException();
            }
            const _0x4d2f98 = _0x59ecdb.stdout.split('\n');
            _0x4d2f98.forEach(_0x1d31c8 => {
              const _0x2aba62 = _0x1d31c8.trim();
              const _0x57af58 = _0x1cfe91.exec(_0x2aba62);
              const _0x550722 = _0x4cdca8.exec(_0x2aba62);
              const _0xd6a5a4 = _0x5ac75d.exec(_0x2aba62);
              if (_0x57af58) {
                _0x1de587 = _0x57af58[1].replace(/'/g, '').split(',').map(_0x135979 => _0x135979.trim());
              } else {
                if (_0x550722) {
                  _0x22f23c = _0x550722[1].replace(/'/g, '').split(',').map(_0x4ded14 => _0x4ded14.trim());
                } else {
                  if (_0xd6a5a4) {
                    _0x22100d = _0xd6a5a4[1].replace(/'/g, '').split(',').map(_0x1680c5 => _0x1680c5.trim());
                  }
                }
              }
            });
            _0x4aac17 = 'script';
          } catch (_0x2c5eae) {
            _0x4aac17 = _0x2c5eae.message;
          } finally {
            clearTimeout(_0x2961bc);
          }
          return {
            message: _0x4aac17,
            classes: _0x1de587,
            files: _0x22f23c,
            functions: _0x22100d
          };
        }
        _getExtraArgs(_0x312e4d) {
          const _0x5ad6cf = [];
          if (Array.isArray(_0x312e4d.testing?.pytestArgs)) {
            _0x5ad6cf.push(..._0x312e4d.testing?.pytestArgs);
          }
          return _0x5ad6cf;
        }
      }
      exports.PytestQueryEngine = _0x588f03;
    },
    8398: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IHostFactory = exports.defaultIndexOptions = exports.Settings = exports.AnyNotebookDocumentSelector = exports.NotebookDocumentSelector = undefined;
      exports.updateInsertTextForAutoParensIfNeeded = _0x4620fc;
      exports.createNotebookData = _0x1796fb;
      exports.verifyCellChainIsLinear = _0x58e177;
      exports.getPrefixCellContents = _0x28cde6;
      exports.openNotebookCellChain = _0x1eaa90;
      exports.updateNotebookStructure = _0x41c2a4;
      exports.getDocumentationUrlForDiagnostic = _0x23d2fc;
      exports.addPylanceProgramServices = _0x4d350c;
      exports.createDocumentRangeWithReferenceKind = _0x5a6205;
      exports.convertDocumentRangeToLocationWithReferenceKind = _0x48e248;
      exports.updatePythonSection = _0x4e327a;
      exports.updatePylanceSection = _0x366736;
      exports.updateJupyterSection = _0x498561;
      exports.updateEditorSection = _0x2599bf;
      exports.getPythonInformation = _0x2422d7;
      exports.convertLspUriStringToUri = _0x2a028f;
      exports.isNotebookKernelChange = _0x50ce55;
      exports.getDocumentOnTypeFormattingOption = _0xd1fc31;
      exports.getIPythonMode = _0x62aa28;
      exports.setPackageDiscovery = _0x57630f;
      exports.enableExtraTelemetry = _0x4a0910;
      exports.sendCompilerFlagsTelemetry = _0x1f9c1c;
      const _0xbcab41 = __importStar(require(16928));
      const _0x3db517 = require(56911);
      const _0x538c9c = __importStar(require(41557));
      const _0x395494 = require(16259);
      const _0x296325 = require(39045);
      const _0x1b0978 = require(53266);
      const _0x2ed530 = require(25463);
      const _0x4e9cda = require(12522);
      const _0x2aac6b = require(25075);
      const _0x1d1f5a = require(34455);
      const _0x5d8084 = __importStar(require(48281));
      const _0x404d66 = require(11479);
      const _0x58c8c9 = require(10775);
      const _0xc0d43 = require(54010);
      const _0x475ebe = require(71745);
      const _0x7befc1 = require(27113);
      const _0x5cf6d5 = require(47091);
      const _0x53e25d = require(26005);
      const _0x362f1f = require(30741);
      const _0x795ac6 = require(27130);
      const _0x3177d2 = require(23898);
      const _0x4acd88 = require(54700);
      const _0x1352d1 = require(24122);
      const _0x518a40 = require(59133);
      const _0x484d7a = require(44889);
      const _0x2bb389 = require(52471);
      const _0x223ead = require(30048);
      const _0x508cc7 = require(69482);
      const _0x7f6ebc = require(47351);
      const _0x5b62f9 = require(66609);
      const _0x2ffc08 = require(37036);
      const _0x1d26a7 = require(59198);
      const _0x4cf7ec = require(90836);
      const _0x63ab4e = require(48316);
      const _0x138f4e = require(76246);
      const _0xdd369 = require(44657);
      exports.NotebookDocumentSelector = {
        notebookSelector: [{
          notebook: {
            scheme: 'file'
          },
          cells: [{
            language: 'python'
          }]
        }, {
          notebook: {
            scheme: 'untitled'
          },
          cells: [{
            language: 'python'
          }]
        }]
      };
      exports.AnyNotebookDocumentSelector = {
        notebookSelector: [{
          notebook: undefined,
          cells: [{
            language: 'python'
          }]
        }]
      };
      var _0x121c97;
      (function (_0x4555ce) {
        _0x4555ce.pythonSectionName = 'python';
        _0x4555ce.pythonAnalysisSectionName = 'python.analysis';
        _0x4555ce.editorSectionName = 'editor';
        _0x4555ce.jupyterSectionName = 'jupyter';
      })(_0x121c97 || (exports.Settings = _0x121c97 = {}));
      exports.defaultIndexOptions = {
        packageDepths: [['', 1, false], ['sklearn', 2, false], ['matplotlib', 2, false], ['scipy', 2, false], ['django', 2, false]],
        regenerateStdLibIndices: false
      };
      var _0x4be89b;
      (function (_0x1415cb) {
        function _0x2b53fc(_0x5a8a83) {
          return _0x5a8a83.createHost !== undefined;
        }
        _0x1415cb.is = _0x2b53fc;
      })(_0x4be89b || (exports.IHostFactory = _0x4be89b = {}));
      function _0x4620fc(_0xdb1d4, _0x4b205e, _0x886d2) {
        const _0x149788 = _0x7f6ebc.CompletionListConverter.fromLSP(_0xdb1d4).data;
        const _0x240e75 = _0x149788?.funcParensDisabled;
        if (_0x240e75) {
          return;
        }
        if (_0xdb1d4.kind === _0x3db517.CompletionItemKind.Function || _0xdb1d4.kind === _0x3db517.CompletionItemKind.Method || _0xdb1d4.kind === _0x3db517.CompletionItemKind.Class) {
          if (_0xdb1d4.textEdit) {
            _0xdb1d4.textEdit.newText = _0xdb1d4.textEdit.newText + '($0)';
          } else {
            _0xdb1d4.insertText = (_0xdb1d4.insertText ?? _0xdb1d4.label) + '($0)';
          }
          _0xdb1d4.insertTextFormat = _0x3db517.InsertTextFormat.Snippet;
          if (_0x886d2) {
            _0xdb1d4.command = _0x3177d2.mergeCommands(_0xdb1d4.command, {
              title: '',
              command: _0x795ac6.ClientCommands.triggerParameterHints,
              arguments: [_0x4b205e]
            });
          }
          if (_0xdb1d4.commitCharacters) {
            _0xdb1d4.commitCharacters = undefined;
          }
        }
      }
      function _0x1796fb(_0x2c7291, _0x2801f6, _0x5b8c25, _0x2fbd2b, _0x3e05ff, _0x155304, _0x3c079d) {
        const _0x505769 = {
          notebookUri: _0x2c7291,
          mappedCellUris: _0x2801f6.map(_0x41ec02 => _0x5b8c25.getMappedCellUri(_0x7befc1.Uri.parse(_0x41ec02.uri, _0x2fbd2b))),
          prefixCellUri: _0x484d7a.NotebookUriMapper.getNotebookPrefixUri(_0x2c7291),
          prefixCellContents: _0x3e05ff || '',
          pythonPath: _0x155304,
          pythonEnvironmentName: _0x3c079d,
          operations: [`Created ${_0x2801f6.length} cells`]
        };
        return _0x505769;
      }
      function _0x58e177(_0x51d649, _0x4b2160) {
        if (!_0x51d649.mappedCellUris) {
          _0x5d8084.fail('All notebooks should have mapped cell Uris');
        }
        const _0x284fb3 = new Set(_0x51d649.mappedCellUris.map(_0x56be40 => _0x56be40.key));
        if (_0x284fb3.size !== _0x51d649.mappedCellUris.length) {
          let _0x18cbc2 = `Duplicate path in cellFilePaths (${_0x284fb3.size}) (${_0x51d649.mappedCellUris.length}):
`;
          for (let _0x2dcd65 = 0; _0x2dcd65 < _0x51d649.mappedCellUris.length; _0x2dcd65++) {
            const _0x490aa0 = _0x51d649.mappedCellUris[_0x2dcd65];
            if (_0x490aa0) {
              if (_0x490aa0.isEmpty()) {
                _0x18cbc2 += _0x2dcd65 + ' == empty\n';
              } else {
                _0x18cbc2 += _0x2dcd65 + ' == ' + _0x490aa0.toUserVisibleString() + '\n';
              }
            } else {
              _0x18cbc2 += _0x2dcd65 + ' == undefined\n';
            }
          }
          _0x18cbc2 += '\n';
          _0x18cbc2 += _0x51d649.operations.join('\n');
          _0x5d8084.fail(_0x18cbc2);
        }
        for (let _0xf06d78 = _0x51d649.mappedCellUris.length - 1; _0xf06d78 >= 0; --_0xf06d78) {
          const _0x210234 = _0x4b2160.service.getChainedUri(_0x51d649.mappedCellUris[_0xf06d78]);
          if (_0xf06d78 > 0) {
            _0x5d8084.assert(_0x210234 === null || _0x210234 === undefined ? undefined : _0x210234.equals(_0x51d649.mappedCellUris[_0xf06d78 - 1]), `Chained file path ${_0x210234} doesn't match cellFilePaths ${_0x51d649.mappedCellUris[_0xf06d78 - 1]} with ${_0x51d649.operations.join('\n')}`);
          } else {
            _0x5d8084.assert(_0x210234 === null || _0x210234 === undefined ? undefined : _0x210234.equals(_0x51d649.prefixCellUri), `Chained file path ${_0x210234} doesn't match prefixCellFilePath with ${_0x51d649.operations.join('\n')}`);
          }
        }
      }
      function _0x28cde6(_0x51b5c1) {
        const _0x3aabd6 = _0x51b5c1?.notebookRunStartupCommands || '';
        if (_0x51b5c1 && _0x51b5c1.implicitImportsInNotebooks === false) {
          return _0x3aabd6;
        }
        return `from IPython.display import *
${_0x3aabd6}

`;
      }
      function _0x1eaa90(_0x55c61c, _0x37968a, _0x267e2b, _0x16808a, _0x3bd96a) {
        if (_0x3bd96a === undefined) {
          _0x3bd96a = _0x37968a.prefixCellUri;
          _0x16808a.service.setFileOpened(_0x3bd96a, 0, _0x37968a.prefixCellContents, _0x1b0978.IPythonMode.CellDocs);
        }
        _0x55c61c.forEach(_0x177524 => {
          const _0x56e5eb = _0x267e2b.getMappedCellUri(_0x7befc1.Uri.parse(_0x177524.uri, _0x16808a.service.serviceProvider));
          _0x16808a.service.setFileOpened(_0x56e5eb, _0x177524.version, _0x177524.text, _0x1b0978.IPythonMode.CellDocs, _0x3bd96a);
          _0x3bd96a = _0x56e5eb;
        });
      }
      function _0x278810(_0x59c942, _0x2d2151, _0xab1418, _0xada143) {
        if (!_0x2d2151.mappedCellUris) {
          return;
        }
        if (_0x59c942.array.deleteCount > 0) {
          _0x2d2151.mappedCellUris.splice(_0x59c942.array.start, _0x59c942.array.deleteCount);
          _0x2d2151.operations.push('Deleted');
        }
        if (_0x59c942.array.cells) {
          if (_0x59c942.array.start < _0x2d2151.mappedCellUris.length) {
            const _0x62c61b = new Array(_0x59c942.array.cells.length);
            _0x2d2151.mappedCellUris.splice(_0x59c942.array.start, 0, ..._0x62c61b);
            _0x2d2151.operations.push('Inserted');
          }
          for (let _0x28e1b2 = 0; _0x28e1b2 < _0x59c942.array.cells.length; ++_0x28e1b2) {
            _0x2d2151.mappedCellUris[_0x59c942.array.start + _0x28e1b2] = _0xab1418.getMappedCellUri(_0x7befc1.Uri.parse(_0x59c942.array.cells[_0x28e1b2].document, _0xada143.service.serviceProvider));
            _0x2d2151.operations.push(`Added at position ${_0x59c942.array.start + _0x28e1b2}:${_0x59c942.array.cells.length}`);
          }
        }
      }
      function _0x57db5d(_0xde1899, _0x4a430d, _0x3c4e69, _0x45f42c) {
        if (!_0x4a430d.mappedCellUris) {
          return;
        }
        if (_0xde1899.didClose && _0xde1899.didClose.length > 0) {
          _0xde1899.didClose.forEach(_0xa61318 => {
            const _0x3cd4de = _0x3c4e69.getMappedCellUri(_0x7befc1.Uri.parse(_0xa61318.uri, _0x45f42c.service.serviceProvider));
            _0x45f42c.service.setFileClosed(_0x3cd4de, false);
          });
        }
        if (_0xde1899.didOpen && _0xde1899.didOpen.length > 0) {
          const _0x42eabb = _0xde1899.array.start > 0 ? _0x4a430d.mappedCellUris[_0xde1899.array.start - 1] : _0x4a430d.prefixCellUri;
          _0x1eaa90(_0xde1899.didOpen, _0x4a430d, _0x3c4e69, _0x45f42c, _0x42eabb);
        }
      }
      function _0x25519e(_0x495a5b, _0x11be4a, _0x579420) {
        if (!_0x11be4a.mappedCellUris) {
          return;
        }
        if (_0x495a5b.array.cells && (!_0x495a5b.didOpen || _0x495a5b.array.cells.length !== _0x495a5b.didOpen.length)) {
          for (let _0x5ae2a0 = _0x495a5b.array.start; _0x5ae2a0 < _0x495a5b.array.start + _0x495a5b.array.cells.length; ++_0x5ae2a0) {
            _0x32bb9d(_0x11be4a, _0x579420, _0x5ae2a0);
          }
        }
        const _0x72f4d0 = _0x495a5b.array.start + (_0x495a5b.array.cells?.length ?? 0);
        if (_0x72f4d0 >= 0 && _0x72f4d0 < _0x11be4a.mappedCellUris.length) {
          _0x32bb9d(_0x11be4a, _0x579420, _0x72f4d0);
        }
        _0x58e177(_0x11be4a, _0x579420);
      }
      function _0x32bb9d(_0x3c7ddc, _0x1b9f30, _0x30e9d8) {
        _0x1b9f30.service.updateChainedUri(_0x3c7ddc.mappedCellUris[_0x30e9d8], _0x30e9d8 > 0 ? _0x3c7ddc.mappedCellUris[_0x30e9d8 - 1] : _0x3c7ddc.prefixCellUri);
      }
      function _0x41c2a4(_0x3ced47, _0x24dd25, _0x18a712, _0xb2170e) {
        _0x278810(_0x3ced47, _0x24dd25, _0x18a712, _0xb2170e);
        _0x57db5d(_0x3ced47, _0x24dd25, _0x18a712, _0xb2170e);
        _0x25519e(_0x3ced47, _0x24dd25, _0xb2170e);
      }
      const _0x18f5d5 = new Map([]);
      function _0x23d2fc(_0xffd9d3) {
        const _0x3b2c1b = _0x5b62f9.getDiagnosticCode(_0xffd9d3);
        if (_0x3b2c1b && _0x18f5d5.has(_0x3b2c1b)) {
          return _0x18f5d5.get(_0x3b2c1b);
        }
        const _0x4289a9 = _0xffd9d3.getRule();
        if (_0x4289a9) {
          return `https://github.com/microsoft/pyright/blob/main/docs/configuration.md#${_0x4289a9}`;
        }
        return undefined;
      }
      function _0x4d350c(_0x1c0bea, _0x4c8c47) {
        _0x1d26a7.tryAddFixtureFinder(_0x1c0bea.service.serviceProvider, _0x4c8c47, _0x1c0bea.service.backgroundAnalysisProgram.program, _0x1c0bea.service);
        const _0x17d9f9 = _0x1c0bea.service.serviceProvider.get(_0x223ead.PylanceServiceKeys.telemetry);
        _0x223ead.registerServices(_0x1c0bea.service.serviceProvider, new _0x2ffc08.StringDefinitionFinder(_0x1c0bea.service.backgroundAnalysisProgram.program, _0x1c0bea.service, _0x17d9f9), _0x223ead.PylanceServiceKeys.stringDefinitionFinder, _0x475ebe.ServiceKeys.stateMutationListeners, _0x475ebe.ServiceKeys.symbolDefinitionProvider);
        _0x223ead.registerServices(_0x1c0bea.service.serviceProvider, new _0x4cf7ec.ConstructorUsageProviderFactory(_0x1c0bea.service.backgroundAnalysisProgram.program), _0x223ead.PylanceServiceKeys.constructorUsageProviderFactory, _0x475ebe.ServiceKeys.symbolUsageProviderFactory);
        _0x223ead.registerServices(_0x1c0bea.service.serviceProvider, new _0x138f4e.OverrideUsageProviderFactory(_0x1c0bea.service.backgroundAnalysisProgram.program), _0x223ead.PylanceServiceKeys.overrideUsageProviderFactory, _0x475ebe.ServiceKeys.symbolUsageProviderFactory);
        _0x223ead.registerServices(_0x1c0bea.service.serviceProvider, new _0x63ab4e.DeclarationFinder(_0x1c0bea.service.backgroundAnalysisProgram.program), _0x223ead.PylanceServiceKeys.declarationFinder, _0x475ebe.ServiceKeys.stateMutationListeners);
        _0x223ead.registerServices(_0x1c0bea.service.serviceProvider, _0x7f6ebc.CompletionListConverter.get(), _0x223ead.PylanceServiceKeys.completionListConverter, _0x475ebe.ServiceKeys.stateMutationListeners);
        if (!_0x1c0bea.service.serviceProvider.tryGet(_0x475ebe.ServiceKeys.debugInfoInspector)) {
          _0x1c0bea.service.serviceProvider.add(_0x475ebe.ServiceKeys.debugInfoInspector, new _0x2bb389.PylanceDebugInfoInspector());
        }
      }
      function _0x5a6205(_0x36f238, _0x869ef4, _0x13a9d3) {
        const _0x2a00a5 = _0x53e25d.FindReferencesTreeWalker.createDocumentRange(_0x36f238, _0x869ef4, _0x13a9d3);
        if (_0x869ef4.node.nodeType === 38) {
          _0x2a00a5.kind = _0x538c9c.isWriteAccess(_0x869ef4.node) ? 'write' : 'read';
        }
        return _0x2a00a5;
      }
      function _0x48e248(_0x2abc4c, _0x48ebae) {
        const _0x1c3093 = _0x5cf6d5.convertDocumentRangeToLocation(_0x2abc4c, _0x48ebae);
        _0x1c3093.kind = _0x48ebae.kind;
        return _0x1c3093;
      }
      function _0x2ec6b8(_0x31acf6) {
        const _0x34ea53 = _0x31acf6;
        if (_0x4e9cda.getDiagLevelDiagnosticRules().includes(_0x34ea53)) {
          return _0x34ea53;
        }
        return undefined;
      }
      function _0x5c57d7(_0x199413) {
        const _0x24217e = _0x199413;
        if (_0x4e9cda.getBooleanDiagnosticRules(true).includes(_0x24217e)) {
          return _0x24217e;
        }
        return undefined;
      }
      function _0x3ad0d3(_0x54e4f8) {
        const _0x2b5b80 = _0x4e9cda.parseDiagLevel(_0x54e4f8);
        if (!_0x2b5b80) {
          return undefined;
        }
        if (_0x2ed530.getDiagnosticSeverityOverrides().includes(_0x2b5b80)) {
          return _0x2b5b80;
        }
        return undefined;
      }
      function _0x3c0d65(_0x35c547) {
        return _0x35c547 !== 'workspace';
      }
      function _0x43b552(_0x89d98d) {
        const _0x26596f = [];
        for (const _0x28cee4 of _0x89d98d) {
          if (Array.isArray(_0x28cee4)) {
            if (_0x28cee4.length >= 2 && _0x28cee4.length <= 3 && _0x1d1f5a.isString(_0x28cee4[0]) && _0x1d1f5a.isNumber(_0x28cee4[1]) && (_0x28cee4.length !== 3 || _0x1d1f5a.isBoolean(_0x28cee4[2]))) {
              _0x26596f.push([_0x28cee4[0], _0x28cee4[1], _0x28cee4[2] ?? false]);
            }
            continue;
          }
          if (_0x28cee4 && _0x28cee4.name !== undefined) {
            _0x26596f.push([_0x28cee4.name, _0x28cee4.depth ?? 1, _0x28cee4.includeAllSymbols ?? false]);
          }
        }
        return _0x26596f;
      }
      function _0x4e327a(_0x7e96b1, _0x248b5d, _0x5d6107, _0x47b7a2) {
        if (_0x5d6107) {
          const _0x4c41b2 = _0x5d6107.pythonPath;
          if (_0x4c41b2 && _0x1d1f5a.isString(_0x4c41b2) && !_0x395494.isPythonBinary(_0x4c41b2)) {
            _0x7e96b1.pythonPath = _0x58c8c9.resolvePathWithEnvVariables(_0x248b5d, _0x4c41b2, _0x47b7a2);
          }
          const _0x6ed85 = _0x5d6107.venvPath;
          if (_0x6ed85 && _0x1d1f5a.isString(_0x6ed85)) {
            _0x7e96b1.venvPath = _0x58c8c9.resolvePathWithEnvVariables(_0x248b5d, _0x6ed85, _0x47b7a2);
          }
          const _0x31a3c3 = _0x5d6107._envPYTHONPATH;
          if (_0x31a3c3 && _0x1d1f5a.isString(_0x31a3c3)) {
            _0x7e96b1.extraPaths = _0x31a3c3.split(_0xbcab41.delimiter).filter(_0x3da37b => _0x3da37b && _0x1d1f5a.isString(_0x3da37b)).map(_0x5aef5b => _0x58c8c9.resolvePathWithEnvVariables(_0x248b5d, _0x5aef5b, _0x47b7a2)).filter(_0x1d1f5a.isDefined);
          }
          const _0x54a056 = _0x5d6107.pythonEnvironmentName;
          if (_0x54a056 && _0x1d1f5a.isString(_0x54a056)) {
            _0x7e96b1.pythonEnvironmentName = _0x54a056;
          }
        }
      }
      function _0x366736(_0x113dd3, _0x27cb77, _0x386b0b, _0xc65688) {
        const _0x24ded6 = new Set(_0x386b0b.setByDefault ?? []);
        const _0x583468 = _0x386b0b.taskListTokens;
        if (_0x583468 && Array.isArray(_0x583468) && _0x583468.length > 0) {
          const _0x1c2106 = _0x583468.filter(_0x4f7643 => {
            return _0x4f7643.text && _0x4f7643.priority && _0x4f7643.priority in _0x404d66.TaskListPriority;
          }).map(_0x3e739c => {
            return {
              text: _0x3e739c.text,
              priority: _0x3e739c.priority
            };
          });
          _0x113dd3.taskListTokens = _0x1c2106;
        }
        const _0x3f799e = _0x386b0b.typeshedPaths;
        if (_0x3f799e && Array.isArray(_0x3f799e) && _0x3f799e.length > 0) {
          const _0x4738eb = _0x3f799e[0];
          if (_0x4738eb && _0x1d1f5a.isString(_0x4738eb)) {
            _0x113dd3.typeshedPath = _0x58c8c9.resolvePathWithEnvVariables(_0x27cb77, _0x4738eb, _0xc65688);
          }
        }
        const _0x4b7256 = _0x386b0b.stubPath;
        if (_0x4b7256 && _0x1d1f5a.isString(_0x4b7256)) {
          const _0x5f3cfb = _0x58c8c9.resolvePathWithEnvVariables(_0x27cb77, _0x4b7256, _0xc65688);
          if (!_0x24ded6.has('stubpath')) {
            _0x113dd3.stubPath = _0x5f3cfb;
          } else {
            if (_0x5f3cfb && _0x27cb77.service.fs.existsSync(_0x5f3cfb)) {
              _0x113dd3.stubPath = _0x5f3cfb;
            }
          }
        }
        const _0x59431b = _0x386b0b.diagnosticSeverityOverrides;
        if (_0x59431b) {
          for (const [_0x57f0fa, _0xb1540] of Object.entries(_0x59431b)) {
            const _0x4eaaf7 = _0x2ec6b8(_0x57f0fa);
            const _0x1b2c72 = _0x3ad0d3(_0xb1540);
            if (_0x4eaaf7 && _0x1b2c72) {
              if (_0x113dd3.diagnosticSeverityOverrides === undefined) {
                _0x113dd3.diagnosticSeverityOverrides = {};
              }
              _0x113dd3.diagnosticSeverityOverrides[_0x4eaaf7] = _0x1b2c72;
            }
          }
        }
        const _0x359379 = _0x386b0b.typeEvaluation;
        if (_0x359379) {
          for (const [_0x355bd0, _0x37a4eb] of Object.entries(_0x359379)) {
            const _0x5b59d1 = _0x5c57d7(_0x355bd0);
            if (_0x5b59d1 && _0x1d1f5a.isBoolean(_0x37a4eb)) {
              if (_0x113dd3.diagnosticBooleanOverrides === undefined) {
                _0x113dd3.diagnosticBooleanOverrides = {};
              }
              _0x113dd3.diagnosticBooleanOverrides[_0x5b59d1] = _0x37a4eb;
            }
          }
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.disableTaggedHints)) {
          _0x113dd3.disableTaggedHints = _0x386b0b.disableTaggedHints;
        }
        _0x113dd3.logLevel = _0x2aac6b.convertLogLevel(_0x386b0b.logLevel);
        _0x113dd3.openFilesOnly = _0x3c0d65(_0x386b0b.diagnosticMode);
        if (_0x1d1f5a.isBoolean(_0x386b0b.useLibraryCodeForTypes)) {
          _0x113dd3.useLibraryCodeForTypes = _0x386b0b.useLibraryCodeForTypes;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.autoSearchPaths)) {
          _0x113dd3.autoSearchPaths = _0x386b0b.autoSearchPaths;
        }
        if (['off', 'basic', 'standard', 'strict'].includes(_0x386b0b.typeCheckingMode)) {
          _0x113dd3.typeCheckingMode = _0x386b0b.typeCheckingMode;
        }
        if (['auto', 'absolute', 'relative'].includes(_0x386b0b.importFormat)) {
          _0x113dd3.importFormat = _0x386b0b.importFormat;
        }
        const _0x3a8499 = _0x386b0b.extraPaths;
        if (_0x3a8499 && Array.isArray(_0x3a8499) && _0x3a8499.length > 0) {
          const _0x2b8537 = _0x3a8499.filter(_0x49090b => _0x49090b && _0x1d1f5a.isString(_0x49090b)).map(_0x39e89b => _0x58c8c9.resolvePathWithEnvVariables(_0x27cb77, _0x39e89b, _0xc65688)).filter(_0x1d1f5a.isDefined);
          if (_0x113dd3.extraPaths) {
            _0x113dd3.extraPaths = _0x2b8537.concat(_0x113dd3.extraPaths);
          } else {
            _0x113dd3.extraPaths = _0x2b8537;
          }
        }
        _0x113dd3.includeFileSpecs = _0x38349e(_0x27cb77.workspaceName, _0x386b0b.include);
        _0x113dd3.excludeFileSpecs = _0x38349e(_0x27cb77.workspaceName, _0x386b0b.exclude);
        _0x113dd3.ignoreFileSpecs = _0x38349e(_0x27cb77.workspaceName, _0x386b0b.ignore);
        _0x113dd3.fixAll = _0x4acd88.tryGetStringValues(_0x386b0b.fixAll);
        if (_0x1d1f5a.isBoolean(_0x386b0b.autoImportCompletions)) {
          _0x113dd3.autoImportCompletions = _0x386b0b.autoImportCompletions;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.showOnlyDirectDependenciesInAutoImport)) {
          _0x113dd3.showOnlyDirectDependenciesInAutoImport = _0x386b0b.showOnlyDirectDependenciesInAutoImport;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.completeFunctionParens)) {
          _0x113dd3.completeFunctionParens = _0x386b0b.completeFunctionParens;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.extraCommitChars)) {
          _0x113dd3.extraCommitChars = _0x386b0b.extraCommitChars;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.indexing)) {
          _0x113dd3.indexing = _0x386b0b.indexing;
          _0x113dd3.indexOptions = _0x113dd3.indexOptions ?? _0x1352d1.getEmptyIndexOptions();
          const _0x50987b = _0x386b0b.packageIndexDepths;
          if (_0x50987b && Array.isArray(_0x50987b) && _0x50987b.length > 0) {
            _0x113dd3.indexOptions.packageDepths = _0x43b552(_0x50987b);
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.regenerateStdLibIndices)) {
            _0x113dd3.indexOptions.regenerateStdLibIndices = _0x386b0b.regenerateStdLibIndices;
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.persistAllIndices)) {
            _0x113dd3.indexOptions.localStorageUri = _0x386b0b.persistAllIndices ? _0x27cb77.rootUri : undefined;
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.includeAliasesFromUserFiles)) {
            _0x113dd3.indexOptions.includeAliasesFromUserFiles = _0x386b0b.includeAliasesFromUserFiles;
          }
          const _0x351602 = _0x386b0b.userFileIndexingLimit;
          if (_0x1d1f5a.isNumber(_0x351602)) {
            _0x113dd3.indexOptions.userFileIndexingLimit = _0x351602;
          }
        }
        if (_0x113dd3.logLevel === _0x2aac6b.LogLevel.Log && _0x1d1f5a.isBoolean(_0x386b0b.logTypeEvaluationTime)) {
          _0x113dd3.logTypeEvaluationTime = _0x386b0b.logTypeEvaluationTime;
        }
        if (_0x1d1f5a.isNumber(_0x386b0b.typeEvaluationTimeThreshold)) {
          _0x113dd3.typeEvaluationTimeThreshold = _0x386b0b.typeEvaluationTimeThreshold;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.enableExtractCodeAction)) {
          _0x113dd3.enableExtractCodeAction = _0x386b0b.enableExtractCodeAction;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.disableWorkspaceSymbol)) {
          _0x113dd3.disableWorkspaceSymbol = _0x386b0b.disableWorkspaceSymbol;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.watchForLibraryChanges)) {
          _0x113dd3.watchForLibraryChanges = _0x386b0b.watchForLibraryChanges;
        }
        if (!_0x27cb77.rootUri || _0x27cb77.kinds.includes(_0x362f1f.WellKnownWorkspaceKinds.Default)) {
          _0x113dd3.indexing = false;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.enablePytestSupport)) {
          _0x113dd3.enablePytestSupport = _0x386b0b.enablePytestSupport;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.gotoDefinitionInStringLiteral)) {
          _0x113dd3.gotoDefinitionInStringLiteral = _0x386b0b.gotoDefinitionInStringLiteral;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.remapDiagnostics)) {
          _0x113dd3.remapDiagnostics = _0x386b0b.remapDiagnostics;
        }
        if (_0x386b0b.inlayHints) {
          if (_0x1d1f5a.isBoolean(_0x386b0b.inlayHints.variableTypes)) {
            _0x113dd3.variableInlayTypeHints = _0x386b0b.inlayHints.variableTypes;
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.inlayHints.functionReturnTypes)) {
            _0x113dd3.functionReturnInlayTypeHints = _0x386b0b.inlayHints.functionReturnTypes;
          }
          const _0x291104 = _0x386b0b.inlayHints.callArgumentNames;
          if (Object.values(_0xdd369.CallArgumentNameModes).includes(_0x291104)) {
            _0x113dd3.callArgumentNameInlayHints = _0x291104;
          } else {
            if (_0x1d1f5a.isBoolean(_0x291104)) {
              _0x113dd3.callArgumentNameInlayHints = _0x291104 ? _0xdd369.CallArgumentNameModes.all : _0xdd369.CallArgumentNameModes.off;
            }
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.inlayHints.pytestParameters)) {
            _0x113dd3.pytestParametersInlayTypeHints = _0x386b0b.inlayHints.pytestParameters;
          }
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.intelliCodeEnabled)) {
          _0x113dd3.intelliCodeEnabled = _0x386b0b.intelliCodeEnabled;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.implicitImportsInNotebooks)) {
          _0x113dd3.implicitImportsInNotebooks = _0x386b0b.implicitImportsInNotebooks;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.autoFormatStrings)) {
          _0x113dd3.autoFormatStrings = _0x386b0b.autoFormatStrings;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.autoIndent)) {
          _0x113dd3.autoIndent = _0x386b0b.autoIndent;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.supportRestructuredText)) {
          _0x113dd3.supportRestructuredText = _0x386b0b.supportRestructuredText;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.cacheLSPData)) {
          _0x113dd3.cacheLSPData = _0x386b0b.cacheLSPData;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.reportExtraTelemetry)) {
          _0x113dd3.reportExtraTelemetry = _0x386b0b.reportExtraTelemetry;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.supportDocstringTemplate)) {
          _0x113dd3.supportDocstringTemplate = _0x386b0b.supportDocstringTemplate;
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.displayEnglishDiagnostics)) {
          _0x113dd3.displayEnglishDiagnostics = _0x386b0b.displayEnglishDiagnostics;
        }
        if (_0x386b0b.aiCodeActions) {
          if (!_0x113dd3.aiCodeActions) {
            _0x113dd3.aiCodeActions = {};
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.aiCodeActions.implementAbstractClasses)) {
            _0x113dd3.aiCodeActions.implementAbstractClasses = _0x386b0b.aiCodeActions.implementAbstractClasses;
          }
          if (_0x1d1f5a.isBoolean(_0x386b0b.aiCodeActions.generateDocstring)) {
            _0x113dd3.aiCodeActions.generateDocstring = _0x386b0b.aiCodeActions.generateDocstring;
          }
        }
        if (_0x1d1f5a.isBoolean(_0x386b0b.generateWithTypeAnnotation)) {
          _0x113dd3.generateWithTypeAnnotation = _0x24ded6.has('generatewithtypeannotation') ? _0x113dd3.typeCheckingMode !== 'off' : _0x386b0b.generateWithTypeAnnotation;
        }
        _0x113dd3.nodeExecutable = _0x386b0b.nodeExecutable;
        if (_0x1d1f5a.isString(_0x386b0b.languageServerMode)) {
          _0x1d5835(_0x386b0b.languageServerMode, _0x24ded6, _0x113dd3);
        }
      }
      function _0x498561(_0x36c272, _0x94c028, _0x1fed30) {
        if (_0x1d1f5a.isString(_0x1fed30.runStartupCommands)) {
          _0x36c272.notebookRunStartupCommands = _0x1fed30.runStartupCommands;
        } else {
          if (_0x1d1f5a.isArray(_0x1fed30.runStartupCommands)) {
            _0x36c272.notebookRunStartupCommands = _0x1fed30.runStartupCommands.join('\n');
          }
        }
      }
      function _0x2599bf(_0x3313f8, _0x271f49, _0x540465) {
        if (_0x1d1f5a.isBoolean(_0x540465.formatOnType)) {
          _0x3313f8.formatOnType = _0x540465.formatOnType;
        }
        const _0x2fa05c = {
          defaultTabSequence: _0x518a40.DefaultEditorIndentConfig.defaultTabSequence,
          tabSize: _0x518a40.DefaultEditorIndentConfig.tabSize
        };
        if (_0x1d1f5a.isBoolean(_0x540465.insertSpaces)) {
          if (_0x540465.insertSpaces) {
            if (_0x1d1f5a.isNumber(_0x540465.indentSize)) {
              _0x2fa05c.defaultTabSequence = ' '.repeat(_0x540465.indentSize);
            } else {
              if (_0x540465.indentSize === 'tabSize' && _0x1d1f5a.isNumber(_0x540465.tabSize)) {
                _0x2fa05c.defaultTabSequence = ' '.repeat(_0x540465.tabSize);
              }
            }
          } else {
            _0x2fa05c.defaultTabSequence = '\t';
          }
        }
        if (_0x1d1f5a.isNumber(_0x540465.tabSize)) {
          _0x2fa05c.tabSize = _0x540465.tabSize;
        }
        _0x3313f8.editorIndentConfig = _0x2fa05c;
      }
      function _0x2422d7(_0x2fa53b, _0xcb32ba, _0x1f9d94, _0x277c91) {
        if (_0xcb32ba) {
          let _0x5c2ffd;
          if (_0x1d1f5a.isString(_0xcb32ba.pythonPath) && !_0x395494.isPythonBinary(_0xcb32ba.pythonPath)) {
            _0x5c2ffd = _0x2fa53b ? _0x2fa53b.resolvePaths(_0x58c8c9.expandPathVariables(_0xcb32ba.pythonPath, _0x2fa53b, _0x277c91)) : _0x7befc1.Uri.file(_0xcb32ba.pythonPath, _0x1f9d94, true);
          }
          const _0x52e24c = _0xcb32ba.pythonEnvironmentName || (_0x5c2ffd === null || _0x5c2ffd === undefined ? undefined : _0x5c2ffd.toUserVisibleString());
          return {
            pythonPath: _0x5c2ffd,
            pythonEnvironmentName: _0x52e24c
          };
        }
        return undefined;
      }
      function _0x2a028f(_0x224ec2, _0x41151a, _0x169d8e) {
        const _0x29d8c3 = _0x7befc1.Uri.parse(_0x224ec2, _0x41151a);
        if (_0x484d7a.NotebookUriMapper.isNotebookCell(_0x29d8c3)) {
          return _0x169d8e.getMappedCellUri(_0x29d8c3);
        }
        return _0x29d8c3;
      }
      function _0x50ce55(_0x238816) {
        return _0x238816.change.metadata?.custom?.metadata?.kernelspec || _0x238816.change.metadata?.metadata?.kernelspec;
      }
      function _0xd1fc31(_0x5ba083, _0x6ac797, _0xf0fb03) {
        const _0x42933f = [];
        if (_0x5ba083) {
          _0x42933f.push('\n');
          _0x42933f.push(':');
        }
        if (_0x6ac797) {
          _0x42933f.push('{');
        }
        if (_0x42933f.length > 0) {
          return {
            firstTriggerCharacter: _0x42933f[0],
            moreTriggerCharacter: _0x42933f.slice(1)
          };
        } else {
          return undefined;
        }
      }
      function _0x62aa28(_0x5ef7ed) {
        if (_0x484d7a.NotebookUriMapper.isNotebookCell(_0x5ef7ed) || _0x5ef7ed.fileName === 'notebook_ipython_mode.py') {
          return _0x1b0978.IPythonMode.CellDocs;
        } else {
          return _0x1b0978.IPythonMode.None;
        }
      }
      function _0x38349e(_0x2f410f, _0x548999) {
        const _0x40c5d2 = '${workspaceFolder:';
        const _0x5636d4 = `${_0x40c5d2}${_0x2f410f}}`;
        const _0xb8c61f = [];
        for (let _0x43845e of _0x4acd88.tryGetStringValues(_0x548999)) {
          if (_0x43845e.startsWith(_0x40c5d2)) {
            if (!_0x43845e.startsWith(_0x5636d4)) {
              continue;
            }
            _0x43845e = _0xc0d43.normalizeSlashes(_0x43845e.substring(_0x5636d4.length), '/');
            if (_0x43845e.startsWith('/')) {
              _0x43845e = _0x43845e.substring(1);
            }
          }
          _0xb8c61f.push(_0x43845e);
        }
        return _0xb8c61f;
      }
      function _0x57630f(_0x464353, _0x319254) {
        const _0x2d78de = _0x319254;
        const _0x35fed5 = _0x464353.service.serviceProvider.tryGet(_0x223ead.PylanceServiceKeys.packageDiscoverer);
        if (_0x2d78de.showOnlyDirectDependenciesInAutoImport) {
          if (_0x35fed5 === null || _0x35fed5 === undefined) {
            undefined;
          } else {
            _0x35fed5.ensureDistributionToPackageMap(_0x464353.service.backgroundAnalysisProgram.program);
          }
        }
        if (_0x2d78de.reportExtraTelemetry) {
          if (_0x35fed5 === null || _0x35fed5 === undefined) {
            undefined;
          } else {
            _0x35fed5.computeInstalledPackages(_0x464353.service.backgroundAnalysisProgram.program);
          }
          if (_0x35fed5 === null || _0x35fed5 === undefined) {
            undefined;
          } else {
            _0x35fed5.report(_0x464353.service.backgroundAnalysisProgram.program);
          }
        } else {
          if (_0x35fed5 === null || _0x35fed5 === undefined) {
            undefined;
          } else {
            _0x35fed5.reset(_0x464353.service.backgroundAnalysisProgram.program, 'serviceRestarted');
          }
        }
      }
      function _0x4a0910(_0xb74ce8, _0x3a3c01) {
        const _0x5a001d = _0xb74ce8;
        if (_0x5a001d.enableExtra) {
          _0x5a001d.enableExtra(!!_0x3a3c01.reportExtraTelemetry);
        }
      }
      function _0x1f9c1c(_0x1931a5, _0x500c87, _0x454f41) {
        const _0x313648 = _0x454f41.typeCheckingMode && _0x454f41.typeCheckingMode !== 'off';
        const _0x46f74a = _0x454f41.diagnosticSeverityOverrides && Object.keys(_0x454f41.diagnosticSeverityOverrides).some(_0x5823fa => _0x5823fa !== 'reportShadowedImports' || _0x454f41.diagnosticSeverityOverrides[_0x5823fa] !== 'warning');
        if (_0x500c87.rootUri && !_0x500c87.rootUri.isEmpty() && (_0x313648 || _0x46f74a)) {
          const _0x35fcce = _0x296325.findConfigFile(_0x500c87.service.fs, _0x500c87.rootUri);
          const _0x548ae0 = _0x296325.findPyprojectTomlFile(_0x500c87.service.fs, _0x500c87.rootUri);
          const _0x513778 = _0x35fcce || _0x548ae0 && _0x500c87.service.fs.readFileSync(_0x548ae0, 'utf8').includes('[tool.pyright]');
          if (_0x513778) {
            _0x1931a5.addPropertyToNextEvent(_0x508cc7.TelemetryEventName.SETTINGS, 'unusableCompilerFlags', 'true');
          } else {
            _0x1931a5.addPropertyToNextEvent(_0x508cc7.TelemetryEventName.SETTINGS, 'unusableCompilerFlags', 'false');
          }
        } else {
          _0x1931a5.addPropertyToNextEvent(_0x508cc7.TelemetryEventName.SETTINGS, 'unusableCompilerFlags', 'false');
        }
      }
      function _0x1d5835(_0x150be5, _0xa8b303, _0x39caea) {
        _0x39caea.languageServerMode = _0x150be5;
        if (_0x150be5 === 'light') {
          if (_0xa8b303.has('exclude')) {
            _0x39caea.excludeFileSpecs = ['**'];
          }
          if (_0xa8b303.has('indexing')) {
            _0x39caea.indexing = false;
          }
          if (_0xa8b303.has('enablepytestsupport')) {
            _0x39caea.enablePytestSupport = false;
          }
          if (_0xa8b303.has('typecheckingmode')) {
            _0x39caea.typeCheckingMode = 'off';
          }
          if (_0xa8b303.has('uselibrarycodefortypes')) {
            _0x39caea.useLibraryCodeForTypes = false;
          }
          return;
        }
        if (_0x150be5 === 'full') {
          if (_0xa8b303.has('autoimportcompletions')) {
            _0x39caea.autoImportCompletions = true;
          }
          if (_0xa8b303.has('showonlydirectdependenciesinautoimport')) {
            _0x39caea.showOnlyDirectDependenciesInAutoImport = true;
          }
          if (_0xa8b303.has('packageindexdepths')) {
            _0x39caea.indexOptions = _0x39caea.indexOptions ?? _0x1352d1.getEmptyIndexOptions();
            _0x39caea.indexOptions.packageDepths = [['', 4, true]];
          }
          if (_0xa8b303.has('regeneratestdlibindices')) {
            _0x39caea.indexOptions = _0x39caea.indexOptions ?? _0x1352d1.getEmptyIndexOptions();
            _0x39caea.indexOptions.regenerateStdLibIndices = true;
          }
          if (_0xa8b303.has('userfileindexinglimit')) {
            _0x39caea.indexOptions = _0x39caea.indexOptions ?? _0x1352d1.getEmptyIndexOptions();
            _0x39caea.indexOptions.userFileIndexingLimit = -1;
          }
          if (_0xa8b303.has('includealiasesfromuserfiles')) {
            _0x39caea.indexOptions = _0x39caea.indexOptions ?? _0x1352d1.getEmptyIndexOptions();
            _0x39caea.indexOptions.includeAliasesFromUserFiles = true;
          }
          if (_0xa8b303.has('inlayhints.functionreturntypes')) {
            _0x39caea.functionReturnInlayTypeHints = true;
          }
          if (_0xa8b303.has('inlayhints.pytestparameters')) {
            _0x39caea.pytestParametersInlayTypeHints = true;
          }
          if (_0xa8b303.has('supportrestructuredtext')) {
            _0x39caea.supportRestructuredText = true;
          }
          if (_0xa8b303.has('supportdocstringtemplate')) {
            _0x39caea.supportDocstringTemplate = true;
          }
          return;
        }
      }
    },
    78843: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AsynchronousFeatures = undefined;
      const _0x17a987 = require(56911);
      const _0x183376 = require(18177);
      const _0x3d4d37 = require(34455);
      const _0x30a7ee = __importStar(require(48281));
      const _0x45ebbf = require(29512);
      const _0x3c3cb6 = require(5737);
      const _0x1c7673 = require(84754);
      const _0x1f8376 = require(23898);
      const _0x57f9e6 = require(24122);
      const _0x2cdaa0 = require(13259);
      const _0x2cb1c1 = require(30048);
      const _0x1c2415 = require(69482);
      const _0x2335b = require(17920);
      const _0x6a823c = require(78459);
      const _0x1bffaf = require(27555);
      const _0x57b8bc = require(74899);
      const _0x518255 = require(44657);
      const _0x568b8b = require(8398);
      const _0x5e2cda = require(60722);
      class _0x35af72 extends _0x5e2cda.FeaturesBase {
        constructor(_0x22549d) {
          super(_0x22549d);
          this._lastTriggerKind = _0x17a987.CompletionTriggerKind.Invoked;
          this._telemetry = this.serviceProvider.get(_0x2cb1c1.PylanceServiceKeys.telemetry);
          this._completionCoverage = new _0x1c2415.CompletionCoverage.CompletionTelemetry(this._telemetry);
        }
        async handleCodeAction(_0x5c5633, _0x1bd997, _0x405a05) {
          _0x5e2cda.recordUserInteractionTime(_0x5c5633);
          const _0x431699 = this.state.convertLspUriStringToUri(_0x1bd997.textDocument.uri);
          const _0x3e5f28 = await _0x45ebbf.CodeActionProvider.getCodeActionsForPosition(_0x5c5633, _0x431699, _0x1bd997.range, _0x1bd997.context.only, _0x405a05);
          const _0x5e9aa9 = await _0x1bffaf.CodeActionProvider.getCodeActionsForPosition(_0x5c5633, _0x431699, _0x1bd997.range, _0x1bd997.context, !!this.state.serverOptions.hasVSCodeExtension, _0x405a05);
          return [..._0x3e5f28, ..._0x5e9aa9];
        }
        async handleCompletion(_0x535a2b, _0x1e7a55, _0x131d0c) {
          if (_0x535a2b.disableLanguageServices) {
            return null;
          }
          if (this.state.client.hasVisualStudioExtensionsCapability) {
            const _0x2c4d08 = _0x1e7a55.context;
            if (_0x2c4d08?._vs_invokeKind === 2) {
              return null;
            }
          }
          const _0x3e4875 = this.getCompletionOptions(_0x535a2b, _0x1e7a55);
          const _0x2bfb9e = this.state.convertLspUriStringToUri(_0x1e7a55.textDocument.uri);
          return await _0x1c2415.trackPerf(_0x535a2b, _0x1c2415.TelemetryEventName.COMPLETION_SLOW, async _0x26999b => {
            const _0x38da28 = this.state.documentTransformer.runWithPosition(_0x535a2b, _0x1e7a55, (_0x1fab4e, _0x1ae196) => {
              const _0x65b91a = new _0x6a823c.AggregatedCompletionProvider(_0x1fab4e, _0x2bfb9e, _0x1ae196, _0x3e4875, {
                nameMap: _0x2cdaa0.wellKnownAbbreviationMap,
                indices: _0x57b8bc.SymbolIndexer.getIndices(_0x535a2b)
              }, _0x535a2b.supportDocstringTemplate ?? false, !!this.state.serverOptions.supportsTelemetry, _0x131d0c);
              const _0x14de77 = _0x65b91a.getCompletions();
              const _0x302140 = _0x65b91a.getMemberAccessInfo();
              if (_0x14de77) {
                for (const _0x22fdc4 of _0x14de77.items) {
                  const _0x5f4149 = _0x22fdc4.kind === _0x17a987.CompletionItemKind.Keyword ? _0x1c7673.normalKeywordCompletionAcceptedCommand : _0x22fdc4.detail === _0x3c3cb6.autoImportDetail ? _0x1c7673.autoImportAcceptedCommand : _0x22fdc4.detail === _0x3c3cb6.indexValueDetail ? _0x1c7673.indexValueAcceptedCommand : _0x302140 ? _0x1c7673.normalMemberAccessCompletionAcceptedCommand : _0x1c7673.normalCompletionAcceptedCommand;
                  _0x22fdc4.command = _0x1f8376.mergeCommands(_0x22fdc4.command, _0x5f4149);
                }
              }
              this._setCompletionIncomplete(_0x1e7a55, _0x14de77);
              if (_0x14de77 && this.state.client.hasVisualStudioExtensionsCapability) {
                const _0x308b26 = ['Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Mn', 'Mc', 'Lo', 'Me', 'Nd', 'Nl', 'No', 'Pc'];
                _0x14de77._vsext_continueCharacters = _0x308b26.map(_0x9b0fb4 => ({
                  type: 'unicodeClass',
                  unicodeClass: _0x9b0fb4
                }));
              }
              if (_0x14de77 && _0x535a2b.completeFunctionParens && !_0x131d0c.isCancellationRequested) {
                for (const _0x4a6b10 of _0x14de77.items) {
                  _0x568b8b.updateInsertTextForAutoParensIfNeeded(_0x4a6b10, _0x1e7a55.textDocument.uri, !!this.state.serverOptions.hasVSCodeExtension);
                }
              }
              _0x26999b.addCustomMeasure('completionItems', (_0x14de77 === null || _0x14de77 === undefined ? undefined : _0x14de77.items.length) ?? -1);
              const _0x50cfc9 = _0x65b91a.getAutoImportInfo();
              if (_0x50cfc9) {
                const _0x3d8fdb = 1;
                _0x26999b.addCustomMeasure('autoImportAdditionTimeInMS', _0x50cfc9.additionTimeInMS);
                _0x26999b.addCustomMeasure('autoImportIndexUsed', _0x50cfc9.indexUsed ? 1 : 0);
                _0x26999b.addCustomMeasure('autoImportTotalTimeInMS', _0x50cfc9.totalTimeInMS);
                _0x26999b.addCustomMeasure('autoImportItemCount', _0x50cfc9.itemCount, _0x3d8fdb);
                _0x26999b.addCustomMeasure('autoImportSymbolCount', _0x50cfc9.symbolCount, _0x3d8fdb);
                _0x26999b.addCustomMeasure('autoImportIndexCount', _0x50cfc9.indexCount, _0x3d8fdb);
                _0x26999b.addCustomMeasure('autoImportImportAliasCount', _0x50cfc9.importAliasCount, _0x3d8fdb);
                _0x26999b.addCustomMeasure('autoImportModuleTimeInMS', _0x50cfc9.moduleTimeInMS);
                _0x26999b.addCustomMeasure('autoImportIndexTimeInMS', _0x50cfc9.indexTimeInMS);
                _0x26999b.addCustomMeasure('autoImportImportAliasTimeInMS', _0x50cfc9.importAliasTimeInMS);
              }
              const _0x24cde8 = _0x65b91a.getSlowCompletionInfo();
              if (_0x24cde8) {
                _0x26999b.addCustomProperty('completionType', _0x24cde8.completionType);
                _0x26999b.addCustomProperty('fileType', _0x24cde8.fileType);
              }
              _0x1c2415.StubTelemetry.sendStubCompletionTelemetryForMissingTypes(this._telemetry, _0x14de77, _0x302140);
              this._completionCoverage.update(_0x14de77, _0x302140);
              return _0x14de77;
            }, _0x131d0c);
            if (!_0x38da28) {
              return _0x38da28;
            }
            const _0x3a4c48 = new _0x2335b.IntelliCodeCompletionAugmenter(_0x535a2b.service.backgroundAnalysisProgram.program, _0x2bfb9e, _0x1e7a55.position, _0x3e4875, _0x131d0c);
            const _0x40ad00 = _0x3a4c48.getExtensionInfo();
            if (_0x40ad00) {
              _0x26999b.setCorrelationId(_0x40ad00.correlationId);
              _0x26999b.addCustomMeasure('selectedItemTelemetryBuildTimeInMs', _0x40ad00.selectedItemTelemetryTimeInMS);
              _0x26999b.addCustomMeasure('completionItemTelemetryBuildTimeInMs', _0x40ad00.itemTelemetryTimeInMS);
              _0x26999b.addCustomMeasure('extensionTotalTimeInMS', _0x40ad00.totalTimeInMS);
            }
            await _0x3a4c48.addCompletionItems(_0x38da28);
            return _0x38da28;
          }, 1000);
        }
        async handleExecuteCommand(_0x2f8ecf, _0x47d152, _0x3d5851, _0x47283a, _0x12c170, _0x3abce6, _0x229cf1) {
          if (this._pendingCommandCancellationSource) {
            this._pendingCommandCancellationSource.cancel();
            this._pendingCommandCancellationSource = undefined;
          }
          const _0x3a3ee2 = async _0x45b573 => {
            const _0x48840b = _0x3d5851(_0x2f8ecf, _0x45b573);
            const _0x5e8471 = _0x3d4d37.isThenable(_0x48840b) ? await _0x48840b : _0x48840b;
            if (_0x17a987.WorkspaceEdit.is(_0x5e8471)) {
              await _0x47283a({
                label: `Command '${_0x2f8ecf.command}'`,
                edit: _0x5e8471,
                metadata: {
                  isRefactoring: _0x12c170
                }
              });
            }
            if (_0x183376.CommandResult.is(_0x5e8471)) {
              await _0x47283a({
                label: _0x5e8471.label,
                edit: _0x5e8471.edits,
                metadata: {
                  isRefactoring: _0x12c170
                }
              });
            }
            return _0x5e8471;
          };
          if (_0x3abce6) {
            const _0x1f3f5b = await _0x47d152();
            const _0x191ab6 = _0x1f3f5b.source;
            this._pendingCommandCancellationSource = _0x191ab6;
            try {
              const _0x2f369e = await _0x3a3ee2(_0x191ab6.token);
              return _0x2f369e;
            } finally {
              _0x1f3f5b.reporter.done();
              _0x191ab6.dispose();
            }
          } else {
            const _0x346a1f = await _0x3a3ee2(_0x229cf1);
            return _0x346a1f;
          }
        }
        async handleSemanticTokens(_0x4ad904, _0x21967e, _0x288e57) {
          if (_0x4ad904.disableLanguageServices) {
            return {
              data: []
            };
          }
          const _0x2a4447 = this.state.convertLspUriStringToUri(_0x21967e.textDocument.uri);
          const _0x555c63 = await _0x57f9e6.getBackgroundAnalysisProgram(_0x4ad904).getSemanticTokens(_0x2a4447, undefined, !this.state.client.hasAugmentsSyntaxTokensCapability, undefined, _0x288e57);
          _0x30a7ee.assert(_0x17a987.SemanticTokens.is(_0x555c63), 'onSemanticTokens should only return SemanticTokens');
          return _0x555c63;
        }
        async handleDelta(_0x398109, _0x258403, _0x27123d) {
          if (_0x398109.disableLanguageServices) {
            return {
              data: []
            };
          }
          const _0x414907 = this.state.convertLspUriStringToUri(_0x258403.textDocument.uri);
          const _0x5c8ddc = await _0x57f9e6.getBackgroundAnalysisProgram(_0x398109).getSemanticTokens(_0x414907, undefined, !this.state.client.hasAugmentsSyntaxTokensCapability, _0x258403.previousResultId, _0x27123d);
          return _0x5c8ddc;
        }
        async handleRange(_0x50091a, _0x5eda06, _0x22b70a) {
          if (_0x50091a.disableLanguageServices) {
            return {
              data: []
            };
          }
          const _0x58cc2a = this.state.convertLspUriStringToUri(_0x5eda06.textDocument.uri);
          const _0x182918 = await _0x57f9e6.getBackgroundAnalysisProgram(_0x50091a).getSemanticTokens(_0x58cc2a, _0x5eda06.range, !this.state.client.hasAugmentsSyntaxTokensCapability, undefined, _0x22b70a);
          _0x30a7ee.assert(_0x17a987.SemanticTokens.is(_0x182918), 'onRange should only return SemanticTokens');
          return _0x182918;
        }
        async handleInlayHints(_0x23c7f0, _0x177411, _0x258cbc) {
          if (_0x23c7f0.disableLanguageServices) {
            return null;
          }
          const _0x27508e = this.state.convertLspUriStringToUri(_0x177411.textDocument.uri);
          if (_0x27508e.hasExtension('.pyi')) {
            return null;
          }
          const _0x58b85e = {
            variableInlayTypeHints: _0x23c7f0?.variableInlayTypeHints ?? false,
            functionReturnInlayTypeHints: _0x23c7f0?.functionReturnInlayTypeHints ?? false,
            callArgumentNameInlayHints: _0x23c7f0?.callArgumentNameInlayHints ?? _0x518255.CallArgumentNameModes.off,
            pytestParametersInlayTypeHints: _0x23c7f0?.pytestParameterInlayTypeHints ?? false,
            supportedResolveSet: this.state.client.supportedInlayResolveCapabilitySet,
            lazyEdit: true
          };
          if (!_0x58b85e.functionReturnInlayTypeHints && !_0x58b85e.variableInlayTypeHints && !_0x58b85e.pytestParametersInlayTypeHints && _0x58b85e.callArgumentNameInlayHints === _0x518255.CallArgumentNameModes.off) {
            return null;
          }
          return await _0x57f9e6.getBackgroundAnalysisProgram(_0x23c7f0).onInlayHints(_0x27508e, _0x177411.range, _0x58b85e, _0x258cbc);
        }
        dispose() {
          var _0x27eab8;
          var _0x28960c;
          if ((_0x27eab8 = this._pendingCommandCancellationSource) === null || _0x27eab8 === undefined) {
            undefined;
          } else {
            _0x27eab8.cancel();
          }
          if ((_0x28960c = this._pendingCommandCancellationSource) === null || _0x28960c === undefined) {
            undefined;
          } else {
            _0x28960c.dispose();
          }
        }
        _setCompletionIncomplete(_0x36ae90, _0x4f68d7) {
          const _0x4acbc2 = this._lastTriggerKind !== _0x17a987.CompletionTriggerKind.TriggerForIncompleteCompletions || _0x36ae90.context?.triggerKind !== _0x17a987.CompletionTriggerKind.TriggerForIncompleteCompletions;
          this._lastTriggerKind = _0x36ae90.context?.triggerKind;
          if (_0x4f68d7) {
            _0x4f68d7.isIncomplete = _0x4acbc2;
          }
        }
      }
      exports.AsynchronousFeatures = _0x35af72;
    },
    60722: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FeaturesBase = undefined;
      exports.canNavigateToFile = _0x17b369;
      exports.recordUserInteractionTime = _0x46b5f2;
      const _0x57c097 = require(34455);
      const _0x3ce373 = require(47091);
      const _0x201e53 = require(44889);
      function _0x17b369(_0x2d37c5, _0x1a56a9) {
        if (!_0x3ce373.canNavigateToFile(_0x1a56a9, _0x2d37c5)) {
          return false;
        }
        return !_0x201e53.NotebookUriMapper.isNotebookPrefixCell(_0x2d37c5);
      }
      function _0x46b5f2(_0x536a61) {
        if (_0x57c097.isArray(_0x536a61)) {
          _0x536a61.forEach(_0x4c804b => _0x4c804b.service.recordUserInteractionTime());
          return;
        }
        _0x536a61.service.recordUserInteractionTime();
      }
      class _0x4b8b70 {
        constructor(_0x55e6b6) {
          this.state = _0x55e6b6;
        }
        get serviceProvider() {
          return this.state.serverOptions.serviceProvider;
        }
        getCompletionOptions(_0x147645, _0x2b3851) {
          const _0x5180de = this.state.client.hasCompletionCommitCharCapability && !!_0x147645.extraCommitChars;
          const _0x2bec9b = _0x147645.importFormat ?? 'absolute';
          const _0x39fdb4 = _0x2b3851 ? !_0x2b3851.isCell : true;
          const _0xc8b688 = {
            format: this.state.client.completionDocFormat,
            snippet: this.state.client.completionSupportsSnippet,
            lazyEdit: this.state.client.completionItemResolveSupportsAdditionalTextEdits,
            triggerCharacter: _0x2b3851?.context?.triggerCharacter,
            extraCommitChars: _0x5180de,
            importFormat: _0x2bec9b,
            autoImport: _0x39fdb4,
            dontAddTypeAnnotation: !_0x147645.generateWithTypeAnnotation,
            includeAliasesFromUserFiles: _0x147645.indexOptions?.includeAliasesFromUserFiles ?? false,
            showOnlyDirectDependenciesInAutoImport: !!_0x147645.showOnlyDirectDependenciesInAutoImport
          };
          return _0xc8b688;
        }
      }
      exports.FeaturesBase = _0x4b8b70;
    },
    33595: function (module, exports, require) {
      'use strict';

      var _0x24466d = this && this.__decorate || function (_0x21379d, _0x242af8, _0x538fc6, _0x5b9ba9) {
        var _0xe3f77c = arguments.length;
        var _0x191f87 = _0xe3f77c < 3 ? _0x242af8 : _0x5b9ba9 === null ? _0x5b9ba9 = Object.getOwnPropertyDescriptor(_0x242af8, _0x538fc6) : _0x5b9ba9;
        var _0x409aee;
        if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function') {
          _0x191f87 = Reflect.decorate(_0x21379d, _0x242af8, _0x538fc6, _0x5b9ba9);
        } else {
          for (var _0x2cc080 = _0x21379d.length - 1; _0x2cc080 >= 0; _0x2cc080--) {
            if (_0x409aee = _0x21379d[_0x2cc080]) {
              _0x191f87 = (_0xe3f77c < 3 ? _0x409aee(_0x191f87) : _0xe3f77c > 3 ? _0x409aee(_0x242af8, _0x538fc6, _0x191f87) : _0x409aee(_0x242af8, _0x538fc6)) || _0x191f87;
            }
          }
        }
        if (_0xe3f77c > 3 && _0x191f87) {
          Object.defineProperty(_0x242af8, _0x538fc6, _0x191f87);
        }
        return _0x191f87;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.LanguageService = undefined;
      const _0x5b625a = require(56911);
      const _0x2a1533 = require(55890);
      const _0x75a9db = require(82695);
      const _0x183489 = require(75130);
      const _0x512fa3 = require(53266);
      const _0x3a3984 = require(25075);
      const _0x1c5992 = require(34455);
      const _0x5658d7 = require(11479);
      const _0x2be61a = require(65880);
      const _0x3be1f7 = require(56412);
      const _0x56024c = require(71745);
      const _0x5da842 = require(27113);
      const _0xa576b5 = require(5884);
      const _0x375a0b = require(92196);
      const _0x223088 = require(86846);
      const _0x13d233 = require(86295);
      const _0x38885d = require(67703);
      const _0x9a3e6c = require(67703);
      const _0x1d9a60 = require(30741);
      const _0x158ab5 = require(23073);
      const _0x118589 = require(24122);
      const _0x21741a = require(30048);
      const _0x32962b = require(69482);
      const _0x296558 = require(95349);
      const _0x3d51fd = require(47351);
      const _0x563b5b = require(68021);
      const _0x30b24d = require(4866);
      const _0x2bd22c = require(96285);
      const _0x14726b = require(15986);
      const _0x43185d = require(35355);
      const _0x37b490 = require(44657);
      const _0x26297c = require(8398);
      const _0x3d4e44 = require(78843);
      const _0x2efe6f = require(60722);
      const _0xa6add0 = require(80165);
      const _0x119fd4 = require(78212);
      class _0x540b48 {
        constructor(_0x322f12) {
          this._diagnosticsRemapper = new _0x563b5b.DiagnosticsRemapper();
          const _0x3f6881 = new _0xa6add0.FeatureState(_0x322f12);
          this._syncLS = new _0x119fd4.SynchronousFeatures(_0x3f6881);
          this._asyncLS = new _0x3d4e44.AsynchronousFeatures(_0x3f6881);
          this._telemetry = this._serverOptions.serviceProvider.get(_0x21741a.PylanceServiceKeys.telemetry);
        }
        get state() {
          return this._syncLS.state;
        }
        initialize(_0x521b75) {
          this._providerOpt = _0x521b75;
        }
        convertLspUriStringToUri(_0x1ef925) {
          return this._syncLS.state.convertLspUriStringToUri(_0x1ef925);
        }
        handleDidChangeWatchedFiles(_0x458e8e) {
          _0x458e8e.changes.forEach(_0x47e629 => {
            const _0x362a39 = this._fs.realCasePath(this.convertLspUriStringToUri(_0x47e629.uri));
            const _0x4a97a7 = _0x47e629.type === 1 ? 'add' : 'change';
            this._serverOptions.fileWatcherHandler.onFileChange(_0x4a97a7, _0x362a39);
          });
        }
        handleDidOpenTextDocument(_0x52a720, _0x3c472e, _0x565315 = _0x512fa3.IPythonMode.None) {
          const _0x4b6bf1 = this.convertLspUriStringToUri(_0x3c472e.textDocument.uri);
          let _0x26c4b6 = this.state.openFileMap.get(_0x4b6bf1.key);
          if (_0x26c4b6) {
            this._console.error(`Received redundant open text document command for ${_0x4b6bf1}`);
            _0x2a1533.TextDocument.update(_0x26c4b6, [{
              text: _0x3c472e.textDocument.text
            }], _0x3c472e.textDocument.version);
          } else {
            _0x26c4b6 = _0x2a1533.TextDocument.create(_0x3c472e.textDocument.uri, 'python', _0x3c472e.textDocument.version, _0x3c472e.textDocument.text);
          }
          this.state.openFileMap.set(_0x4b6bf1.key, _0x26c4b6);
          _0x52a720.forEach(_0x8a07f1 => {
            _0x8a07f1.service.setFileOpened(_0x4b6bf1, _0x3c472e.textDocument.version, _0x3c472e.textDocument.text, _0x565315);
          });
        }
        handleDidChangeTextDocument(_0x3384d6, _0x251c5a, _0x16451a = _0x512fa3.IPythonMode.None) {
          _0x2efe6f.recordUserInteractionTime(_0x3384d6);
          const _0x1828e7 = this.convertLspUriStringToUri(_0x251c5a.textDocument.uri);
          const _0x2a044a = this.state.openFileMap.get(_0x1828e7.key);
          if (!_0x2a044a) {
            this._console.error(`Received change text document command for closed file ${_0x1828e7}`);
            return;
          }
          _0x2a1533.TextDocument.update(_0x2a044a, _0x251c5a.contentChanges, _0x251c5a.textDocument.version);
          const _0x46734e = _0x2a044a.getText();
          _0x3384d6.forEach(_0x26a4b6 => {
            _0x26a4b6.service.updateOpenFileContents(_0x1828e7, _0x251c5a.textDocument.version, _0x46734e, _0x16451a);
          });
        }
        handleDidCloseTextDocument(_0x4d6118, _0x152b20) {
          const _0x5e7901 = this.convertLspUriStringToUri(_0x152b20.textDocument.uri);
          _0x4d6118.forEach(_0x190e3f => {
            _0x190e3f.service.setFileClosed(_0x5e7901);
          });
          this.state.openFileMap.delete(_0x5e7901.key);
        }
        handleShutdown(_0x2ef9ab) {
          this.state.openFileMap.clear();
        }
        addDisposables(..._0x3f3dee) {
          this.state.disposable.push(..._0x3f3dee);
        }
        handleAnalysisCompletedHandler(_0x49d4a5, _0x3a281f, _0x5aba1c, _0x3a87c7) {
          _0x3a281f.diagnostics.forEach(_0x32bd8f => {
            if (!_0x2efe6f.canNavigateToFile(_0x32bd8f.fileUri, _0x49d4a5)) {
              return;
            }
            _0x3a87c7(this.convertDiagnostics(_0x49d4a5, _0x32bd8f));
          });
          if (!_0x5aba1c.isEnabled(_0x3a281f)) {
            _0x5aba1c.end();
            return;
          }
          const _0x41069c = this._getProgressMessage(_0x3a281f);
          if (_0x41069c) {
            _0x5aba1c.begin();
            _0x5aba1c.report(_0x41069c);
          } else {
            _0x5aba1c.end();
          }
        }
        updateOptionsAndRestartService(_0x2b9f39, _0x5a2565, _0x2ec0d5) {
          _0x375a0b.AnalyzerServiceExecutor.runWithOptions(_0x2b9f39, _0x5a2565, {
            typeStubTargetImportName: _0x2ec0d5,
            pythonEnvironmentName: _0x2b9f39.pythonEnvironmentName
          });
          _0x2b9f39.searchPathsToWatch = _0x2b9f39.service.librarySearchUrisToWatch ?? [];
          _0x2b9f39.disableLanguageServices = !!_0x5a2565.disableLanguageServices;
          _0x2b9f39.disableTaggedHints = !!_0x5a2565.disableTaggedHints;
          _0x2b9f39.disableOrganizeImports = !!_0x5a2565.disableOrganizeImports;
          _0x26297c.enableExtraTelemetry(this._telemetry, _0x5a2565);
          _0x26297c.setPackageDiscovery(_0x2b9f39, _0x5a2565);
          _0x26297c.sendCompilerFlagsTelemetry(this._telemetry, _0x2b9f39, _0x5a2565);
        }
        reanalyze() {
          this._provider.getWorkspaces().forEach(_0x2e3e84 => _0x2e3e84.service.invalidateAndForceReanalysis(_0x75a9db.InvalidatedReason.Reanalyzed));
        }
        restart() {
          this._provider.getWorkspaces().forEach(_0x1fb3e3 => _0x1fb3e3.service.restart());
        }
        registerDynamicFeatures() {
          this.state.registerDynamicFeatures();
        }
        updateDynamicFeatures(_0x409fb1) {
          this.state.updateDynamicFeatures(_0x409fb1);
        }
        convertDiagnostics(_0xc727e4, _0x359f14) {
          return [{
            uri: _0xa576b5.convertUriToLspUriString(_0xc727e4, _0x359f14.fileUri),
            version: _0x359f14.version,
            diagnostics: this._convertDiagnostics(_0xc727e4, _0x359f14.diagnostics)
          }];
        }
        handleInitialize(_0x11b774, _0x30d1b8, _0x8bce1f, _0x3d5b7a, _0x50be85) {
          var _0x1c5900;
          const _0x2d34ea = _0x11b774.initializationOptions ?? {};
          if (this._serverOptions.hasVSCodeExtension) {
            _0x158ab5.verifyClient(_0x2d34ea.clientVerification);
          }
          if (_0x11b774.locale) {
            _0x38885d.setLocaleOverride(_0x11b774.locale);
          }
          const _0x106271 = _0x11b774.capabilities;
          this._client.hasConfigurationCapability = !!_0x106271.workspace?.configuration;
          this._client.hasWatchFileCapability = !!_0x106271.workspace?.didChangeWatchedFiles?.dynamicRegistration;
          this._client.hasWatchFileRelativePathCapability = !!_0x106271.workspace?.didChangeWatchedFiles?.relativePatternSupport;
          this._client.hasWorkspaceFoldersCapability = !!_0x106271.workspace?.workspaceFolders;
          this._client.hasVisualStudioExtensionsCapability = !!_0x106271._vs_supportsVisualStudioExtensions;
          this._client.hasActiveParameterCapability = !!_0x106271.textDocument?.signatureHelp?.signatureInformation?.activeParameterSupport;
          this._client.hasSignatureLabelOffsetCapability = !!_0x106271.textDocument?.signatureHelp?.signatureInformation?.parameterInformation?.labelOffsetSupport;
          this._client.hasHierarchicalDocumentSymbolCapability = !!_0x106271.textDocument?.documentSymbol?.hierarchicalDocumentSymbolSupport;
          this._client.hasDocumentChangeCapability = !!_0x106271.workspace?.workspaceEdit?.documentChanges && !!_0x106271.workspace.workspaceEdit?.resourceOperations;
          this._client.hasDocumentAnnotationCapability = !!_0x106271.workspace?.workspaceEdit?.changeAnnotationSupport;
          this._client.hasCompletionCommitCharCapability = !!_0x106271.textDocument?.completion?.completionList?.itemDefaults && !!_0x106271.textDocument.completion.completionItem?.commitCharactersSupport;
          this._client.hoverContentFormat = this._getCompatibleMarkupKind(_0x106271.textDocument?.hover?.contentFormat);
          this._client.completionDocFormat = this._getCompatibleMarkupKind(_0x106271.textDocument?.completion?.completionItem?.documentationFormat);
          this._client.completionSupportsSnippet = !!_0x106271.textDocument?.completion?.completionItem?.snippetSupport;
          this._client.signatureDocFormat = this._getCompatibleMarkupKind(_0x106271.textDocument?.signatureHelp?.signatureInformation?.documentationFormat);
          const _0x384cab = _0x106271.textDocument?.publishDiagnostics?.tagSupport?.valueSet || [];
          this._client.supportsUnnecessaryDiagnosticTag = _0x384cab.some(_0x2891ee => _0x2891ee === _0x5b625a.DiagnosticTag.Unnecessary);
          this._client.supportsDeprecatedDiagnosticTag = _0x384cab.some(_0x5e1afc => _0x5e1afc === _0x5b625a.DiagnosticTag.Deprecated);
          this._client.supportsTaskItemDiagnosticTag = this._client.hasVisualStudioExtensionsCapability;
          this._client.hasWindowProgressCapability = !!_0x106271.window?.workDoneProgress;
          this._client.hasGoToDeclarationCapability = !!_0x106271.textDocument?.declaration;
          this._client.completionItemResolveSupportsAdditionalTextEdits = !!((_0x1c5900 = _0x106271.textDocument?.completion?.completionItem?.resolveSupport) === null || _0x1c5900 === undefined ? undefined : _0x1c5900.properties.some(_0x556673 => _0x556673 === 'additionalTextEdits'));
          _0x8bce1f.handleInitialize(_0x11b774);
          if (this._client.hasWatchFileCapability) {
            this._addDynamicFeature(new _0x13d233.FileWatcherDynamicFeature(_0x30d1b8, this._client.hasWatchFileRelativePathCapability, this._fs, _0x8bce1f));
          }
          const _0x2e0760 = {
            capabilities: {
              textDocumentSync: _0x5b625a.TextDocumentSyncKind.Incremental,
              definitionProvider: {
                workDoneProgress: true
              },
              declarationProvider: {
                workDoneProgress: true
              },
              typeDefinitionProvider: {
                workDoneProgress: true
              },
              referencesProvider: {
                workDoneProgress: true
              },
              documentSymbolProvider: {
                workDoneProgress: true
              },
              workspaceSymbolProvider: {
                workDoneProgress: true
              },
              hoverProvider: {
                workDoneProgress: true
              },
              documentHighlightProvider: {
                workDoneProgress: true
              },
              renameProvider: {
                prepareProvider: true,
                workDoneProgress: true
              },
              completionProvider: {
                triggerCharacters: this._client.hasVisualStudioExtensionsCapability ? ['.', '[', '@', '"', '\''] : ['.', '[', '"', '\''],
                resolveProvider: true,
                workDoneProgress: true,
                completionItem: {
                  labelDetailsSupport: true
                }
              },
              signatureHelpProvider: {
                triggerCharacters: ['(', ',', ')'],
                workDoneProgress: true
              },
              codeActionProvider: {
                codeActionKinds: _0x50be85,
                workDoneProgress: true
              },
              executeCommandProvider: {
                commands: _0x3d5b7a,
                workDoneProgress: true
              },
              callHierarchyProvider: true,
              workspace: {
                workspaceFolders: {
                  supported: true,
                  changeNotifications: true
                }
              }
            }
          };
          this._client.allowAskingUsersPerformanceReporting = _0x2d34ea?.allowAskingUsersPerformanceReporting ?? false;
          const _0x16b158 = _0x106271.textDocument?.semanticTokens;
          if (_0x16b158) {
            const _0x97a90c = _0x2bd22c.SemanticTokenProvider.computeLegend(_0x16b158);
            _0x2e0760.capabilities.semanticTokensProvider = {
              legend: _0x97a90c,
              range: true,
              full: {
                delta: true
              }
            };
            this._client.hasSemanticTokensRefreshCapability = !!_0x106271.workspace?.semanticTokens?.refreshSupport;
            this._client.hasAugmentsSyntaxTokensCapability = _0x16b158.augmentsSyntaxTokens ? true : _0x16b158.augmentsSyntaxTokens === undefined ? true : false;
          }
          this._client.hasExperimentationSupport = _0x2d34ea?.experimentationSupport ?? false;
          this._client.hasTrustedWorkspaceSupport = _0x2d34ea?.trustedWorkspaceSupport ?? false;
          if (this._serverOptions.disableClientFileWatching) {
            this._client.hasWatchFileCapability = false;
          }
          const _0x193658 = _0x106271.textDocument?.inlayHint;
          if (_0x193658) {
            this._client.hasInlayHintRefreshCapability = !!_0x106271.workspace?.inlayHint?.refreshSupport;
            this._client.supportedInlayResolveCapabilitySet = new Set(_0x2d34ea?.resolveInlayHintEdit ? _0x193658.resolveSupport?.properties : []);
          }
          if (_0x11b774.capabilities.workspace?.fileOperations?.willRename) {
            _0x2e0760.capabilities.workspace = {
              fileOperations: {
                willRename: {
                  filters: [{
                    pattern: {
                      glob: `**/*.{${_0x183489.supportedFileExtensions.map(_0x2a21ae => _0x2a21ae.substr(1)).join(',')}}`,
                      matches: 'file'
                    }
                  }, {
                    pattern: {
                      glob: '**',
                      matches: 'folder'
                    }
                  }]
                }
              }
            };
          }
          const _0x38606c = _0x11b774.capabilities.textDocument?.onTypeFormatting?.dynamicRegistration ?? false;
          if (_0x38606c && _0x2d34ea.documentSelector) {
            this._addDynamicFeature(new _0x30b24d.FormatOnTypeDynamicFeature(_0x30d1b8, _0x2d34ea.documentSelector, _0x2d34ea.autoIndent ?? false, _0x2d34ea.autoFormatStrings ?? false));
          } else {
            _0x2e0760.capabilities.documentOnTypeFormattingProvider = _0x26297c.getDocumentOnTypeFormattingOption(_0x2d34ea.autoIndent ?? false, _0x2d34ea.autoFormatStrings ?? false, console);
          }
          _0x2e0760.capabilities.foldingRangeProvider = true;
          _0x2e0760.capabilities.selectionRangeProvider = true;
          _0x2e0760.capabilities.inlayHintProvider = {
            resolveProvider: _0x2d34ea.resolveInlayHintEdit ?? false
          };
          _0x2e0760.capabilities.notebookDocumentSync = _0x2d34ea.regularWorkspace ? _0x26297c.NotebookDocumentSelector : _0x26297c.AnyNotebookDocumentSelector;
          _0x2e0760.capabilities.typeHierarchyProvider = true;
          return _0x2e0760;
        }
        handleSettings(_0x5e1b2f, _0x3e0595, _0x578d5d, _0x109916, _0x4c42a9, _0x6d2b3b) {
          const _0xe12388 = {
            autoSearchPaths: true,
            disableLanguageServices: false,
            openFilesOnly: true,
            useLibraryCodeForTypes: true,
            watchForSourceChanges: true,
            watchForLibraryChanges: true,
            watchForConfigChanges: true,
            typeCheckingMode: 'off',
            diagnosticSeverityOverrides: {},
            diagnosticBooleanOverrides: {},
            logLevel: _0x3a3984.LogLevel.Info,
            autoImportCompletions: true,
            indexing: true,
            completeFunctionParens: false,
            enableExtractCodeAction: true,
            indexOptions: _0x118589.cloneSimpleObject(_0x26297c.defaultIndexOptions),
            variableInlayTypeHints: false,
            callArgumentNameInlayHints: _0x37b490.CallArgumentNameModes.off,
            functionReturnInlayTypeHints: false,
            pytestParametersInlayTypeHints: false,
            importFormat: 'absolute',
            includeFileSpecs: [],
            excludeFileSpecs: [],
            ignoreFileSpecs: [],
            formatOnType: true,
            taskListTokens: [],
            enablePytestSupport: true,
            gotoDefinitionInStringLiteral: false,
            remapDiagnostics: false,
            intelliCodeEnabled: true,
            aiCodeActions: {},
            generateWithTypeAnnotation: false,
            languageServerMode: 'default'
          };
          let _0x38850b = false;
          const _0x38c66a = _0x3e0595.service.serviceProvider.console();
          try {
            if (_0x578d5d) {
              _0x26297c.updatePythonSection(_0xe12388, _0x3e0595, _0x578d5d, _0x5e1b2f);
            }
            if (_0x109916) {
              _0x26297c.updatePylanceSection(_0xe12388, _0x3e0595, _0x109916, _0x5e1b2f);
              this._applyPylanceDiagnosticOverrides(_0xe12388);
              _0x38850b = !!_0x109916._forceProgressBar;
            }
            if (_0x4c42a9) {
              _0x26297c.updateJupyterSection(_0xe12388, _0x3e0595, _0x4c42a9);
            }
            if (_0x6d2b3b) {
              _0x26297c.updateEditorSection(_0xe12388, _0x3e0595, _0x6d2b3b);
            }
          } catch (_0x28333d) {
            _0x38c66a.error(`Error reading settings: ${_0x28333d}`);
          }
          const _0x4951a4 = _0x3e0595.service.serviceProvider.get(_0x21741a.PylanceServiceKeys.settingTransformer).transformSettings(_0xe12388, _0x3e0595);
          this._progressBarEnabled = _0x38850b || _0xe12388.typeCheckingMode !== 'off' || Object.values(_0xe12388.diagnosticSeverityOverrides).some(_0x10fec0 => _0x10fec0 !== 'none');
          _0x38c66a.log(`Server settings returned for workspace: ${_0x3e0595.rootUri}: ${JSON.stringify(_0x4951a4, null, 2)}`);
          return _0x4951a4;
        }
        handleUpdateSettingsForWorkspace(_0x2950c3, _0x1ee719, _0xdd8f18) {
          var _0x12c1ac;
          this._updateExtensionSettings(_0x2950c3, _0x1ee719);
          if ((_0x12c1ac = this._intelliCode) === null || _0x12c1ac === undefined) {
            undefined;
          } else {
            _0x12c1ac.enable(!!_0x1ee719.intelliCodeEnabled);
          }
          _0x2950c3.completeFunctionParens = !!_0x1ee719.completeFunctionParens;
          _0x2950c3.enableExtractCodeAction = !!_0x1ee719.enableExtractCodeAction;
          _0x2950c3.disableWorkspaceSymbol = !!_0x1ee719.disableWorkspaceSymbol;
          _0x2950c3.variableInlayTypeHints = !!_0x1ee719.variableInlayTypeHints;
          _0x2950c3.functionReturnInlayTypeHints = !!_0x1ee719.functionReturnInlayTypeHints;
          _0x2950c3.pytestParameterInlayTypeHints = !!_0x1ee719.pytestParametersInlayTypeHints;
          _0x2950c3.callArgumentNameInlayHints = _0x1ee719.callArgumentNameInlayHints;
          _0x2950c3.extraCommitChars = !!_0x1ee719.extraCommitChars;
          _0x2950c3.fixAll = _0x1ee719.fixAll;
          _0x2950c3.importFormat = _0x1ee719.importFormat;
          _0x2950c3.editorIndentConfig = _0x1ee719.editorIndentConfig;
          _0x2950c3.allowAskingUsersPerformanceReporting = this.state.client.allowAskingUsersPerformanceReporting;
          _0x2950c3.supportDocstringTemplate = !!_0x1ee719.supportDocstringTemplate;
          _0x2950c3.aiCodeActions = _0x1ee719.aiCodeActions;
          _0x2950c3.indexOptions = _0x1ee719.indexOptions;
          _0x2950c3.generateWithTypeAnnotation = _0x1ee719.generateWithTypeAnnotation;
          _0x2950c3.showOnlyDirectDependenciesInAutoImport = _0x1ee719.showOnlyDirectDependenciesInAutoImport;
          _0x118589.getBackgroundAnalysisProgram(_0x2950c3).setExperimentOptions(_0x1ee719);
          const _0x105b40 = _0x2950c3.service.getConfigOptions();
          const _0x3de630 = new _0x32962b.TelemetryEvent(_0x32962b.TelemetryEventName.SETTINGS);
          _0x3de630.Properties.openFilesOnly = `${_0x1ee719.openFilesOnly}`;
          _0x3de630.Properties.typeCheckingMode = `${_0x1ee719.typeCheckingMode}`;
          _0x3de630.Properties.useLibraryCodeForTypes = `${_0x105b40.useLibraryCodeForTypes}`;
          _0x3de630.Properties.autoSearchPaths = `${_0x1ee719.autoSearchPaths}`;
          _0x3de630.Properties.autoImportCompletions = `${_0x1ee719.autoImportCompletions}`;
          _0x3de630.Properties.indexing = `${_0x1ee719.indexing}`;
          _0x3de630.Properties.regenerateStdLibIndices = `${!!_0x1ee719.indexOptions?.regenerateStdLibIndices}`;
          _0x3de630.Properties.persistAllIndices = `${!!_0x1ee719.indexOptions?.localStorageUri}`;
          _0x3de630.Properties.includeAliasesFromUserFiles = `${!!_0x1ee719.indexOptions?.includeAliasesFromUserFiles}`;
          _0x3de630.Properties.completeFunctionParens = `${_0x1ee719.completeFunctionParens}`;
          _0x3de630.Properties.enableExtractCodeAction = `${_0x1ee719.enableExtractCodeAction}`;
          _0x3de630.Properties.hasExtraPaths = `${!!_0x1ee719.extraPaths?.length}`;
          _0x3de630.Properties.hasConfigFile = `${_0x105b40.initializedFromJson}`;
          _0x3de630.Properties.disableWorkspaceSymbol = `${_0x1ee719.disableWorkspaceSymbol}`;
          _0x3de630.Properties.watchForLibraryChanges = `${_0x1ee719.watchForLibraryChanges}`;
          _0x3de630.Properties.variableInlayTypeHints = `${_0x1ee719.variableInlayTypeHints}`;
          _0x3de630.Properties.pytestParameterInlayTypeHints = `${_0x1ee719.pytestParametersInlayTypeHints}`;
          _0x3de630.Properties.importFormat = `${_0x1ee719.importFormat}`;
          _0x3de630.Properties.functionReturnInlayTypeHints = `${_0x1ee719.functionReturnInlayTypeHints}`;
          _0x3de630.Properties.callArgumentNameInlayHints = `${_0x1ee719.callArgumentNameInlayHints}`;
          _0x3de630.Properties.formatOnType = `${_0x1ee719.formatOnType}`;
          _0x3de630.Properties.extraCommitChars = `${_0x1ee719.extraCommitChars}`;
          _0x3de630.Properties.enablePytestSupport = `${_0x1ee719.enablePytestSupport}`;
          _0x3de630.Properties.intelliCodeEnabled = `${_0x1ee719.intelliCodeEnabled}`;
          _0x3de630.Properties.disableTaggedHints = `${_0x1ee719.disableTaggedHints}`;
          _0x3de630.Properties.languageServerMode = `${_0x1ee719.languageServerMode}`;
          _0x3de630.Properties.aiCodeActionsImplementAbstractClasses = `${_0x1ee719.aiCodeActions?.implementAbstractClasses}`;
          _0x3de630.Properties.nodeExecutable = _0x1ee719.nodeExecutable && _0x1ee719.nodeExecutable.length > 1 ? 'true' : 'false';
          _0x3de630.Properties.aiCodeActionsGenerateDocstring = `${_0x1ee719.aiCodeActions?.generateDocstring}`;
          _0x3de630.Measurements.workspaceCount = _0xdd8f18.getNonDefaultWorkspaces(_0x1d9a60.WellKnownWorkspaceKinds.Regular).length;
          this._telemetry.sendTelemetry(_0x3de630);
        }
        registerHandlers(_0x2cb12f) {
          const _0x4b9a33 = _0x2cb12f.languages.callHierarchy;
          const _0x7981f7 = _0x2cb12f.languages.typeHierarchy;
          this.addDisposables(_0x2cb12f.onCodeAction((_0x5bebdb, _0x214db2) => this._onCodeAction(_0x5bebdb, _0x214db2)), _0x2cb12f.onDefinition(async (_0x2b5cf1, _0x33bf95) => this._onDefinition(_0x2b5cf1, _0x33bf95)), _0x2cb12f.onDeclaration(async (_0x3769ef, _0x55b726) => this._onDeclaration(_0x3769ef, _0x55b726)), _0x2cb12f.onTypeDefinition(async (_0x559f88, _0x4a4934) => this._onTypeDefinition(_0x559f88, _0x4a4934)), _0x2cb12f.onReferences(async (_0x51b152, _0x5234fe, _0x329f88, _0x23266c) => this._onReferences(_0x51b152, _0x5234fe, _0x329f88, _0x23266c)), _0x2cb12f.onDocumentSymbol(async (_0x3f1187, _0x5e58ce) => this._onDocumentSymbol(_0x3f1187, _0x5e58ce)), _0x2cb12f.onWorkspaceSymbol(async (_0x1b5bf3, _0xfbb073, _0x569c95, _0x24dc65) => this._onWorkspaceSymbol(_0x1b5bf3, _0xfbb073, _0x24dc65)), _0x2cb12f.onHover(async (_0x184546, _0x263237) => this._onHover(_0x184546, _0x263237)), _0x2cb12f.onDocumentHighlight(async (_0x13b231, _0x1533a4) => this._onDocumentHighlight(_0x13b231, _0x1533a4)), _0x2cb12f.onSignatureHelp(async (_0x480d18, _0x422d66) => this._onSignatureHelp(_0x480d18, _0x422d66)), _0x2cb12f.onCompletion((_0x490af5, _0x3fa5e6) => this._onCompletion(_0x490af5, _0x3fa5e6)), _0x2cb12f.onCompletionResolve(async (_0x3ec2fe, _0x43dc1b) => this._onCompletionResolve(_0x3ec2fe, _0x43dc1b)), _0x2cb12f.onPrepareRename(async (_0x3fc885, _0x1bb8c4) => this._onPrepareRenameRequest(_0x3fc885, _0x1bb8c4)), _0x2cb12f.onRenameRequest(async (_0x6748f7, _0x202e2f) => this._onRenameRequest(_0x6748f7, _0x202e2f)), _0x4b9a33.onPrepare(async (_0x48d9ae, _0x13f358) => this._onCallHierarchyPrepare(_0x48d9ae, _0x13f358)), _0x4b9a33.onIncomingCalls(async (_0x5423fe, _0x4b79b5) => this._onCallHierarchyIncomingCalls(_0x5423fe, _0x4b79b5)), _0x4b9a33.onOutgoingCalls(async (_0x2bf031, _0x3625c0) => this._onCallHierarchyOutgoingCalls(_0x2bf031, _0x3625c0)), _0x2cb12f.onExecuteCommand(async (_0x2fe6f6, _0x48f417, _0x127bc5) => this._onExecuteCommand(_0x2fe6f6, _0x48f417, _0x127bc5)), _0x2cb12f.onDidChangeWatchedFiles(_0x49a539 => this.handleDidChangeWatchedFiles(_0x49a539)), _0x2cb12f.onDocumentOnTypeFormatting((_0x39be91, _0x444acc) => this._onDocumentOnTypeFormatting(_0x39be91, _0x444acc, _0x2cb12f)), _0x2cb12f.onFoldingRanges((_0x3b2f9d, _0xcd75e6) => this._onFoldingRanges(_0x3b2f9d, _0xcd75e6)), _0x2cb12f.onSelectionRanges((_0x1140d5, _0x41c311) => this._onSelectionRanges(_0x1140d5, _0x41c311)), _0x2cb12f.languages.semanticTokens.on((_0xe91ad7, _0xea9ee9) => this._onSemanticTokens(_0xe91ad7, _0xea9ee9)), _0x2cb12f.languages.semanticTokens.onDelta((_0x2e5bc7, _0x39df98) => this._onDelta(_0x2e5bc7, _0x39df98)), _0x2cb12f.languages.semanticTokens.onRange((_0x2143ab, _0x5e3e83) => this._onRange(_0x2143ab, _0x5e3e83)), _0x2cb12f.languages.inlayHint.on((_0x3c4e66, _0x50d6b9) => this._onInlayHints(_0x3c4e66, _0x50d6b9)), _0x2cb12f.languages.inlayHint.resolve((_0x26281a, _0x33b075) => this._onResolveInlayHint(_0x26281a, _0x33b075)), _0x7981f7.onPrepare((_0x1bae65, _0x10725) => this._onTypeHierarchyPrepare(_0x1bae65, _0x10725)), _0x7981f7.onSupertypes((_0x123517, _0x15e6d8) => this._onTypeHierarchySupertypes(_0x123517, _0x15e6d8)), _0x7981f7.onSubtypes((_0xa75915, _0x3ac3eb) => this._onTypeHierarchySubtypes(_0xa75915, _0x3ac3eb)), _0x296558.CustomLSP.onNotification(_0x2cb12f, _0x296558.CustomLSP.Notifications.WorkspaceTrusted, _0x2b71d2 => {
            this.state.hostKind = _0x2b71d2.isTrusted ? 0 : 1;
            this.restart();
          }), _0x296558.CustomLSP.onRequest(_0x2cb12f, _0x296558.CustomLSP.Requests.JupyterDocumentSymbols, (_0x263cc7, _0x19ebee) => this._onJupyterDocumentSymbols(_0x263cc7, _0x19ebee)), _0x296558.CustomLSP.onRequest(_0x2cb12f, _0x296558.CustomLSP.Requests.JupyterReferences, (_0x25518e, _0x4b75c6) => {
            return this._onReferences(_0x25518e, _0x4b75c6, _0x2cb12f.languages.attachWorkDoneProgress(_0x25518e), _0x2cb12f.languages.attachPartialResultProgress(_0x5b625a.ReferencesRequest.type, _0x25518e));
          }), _0x296558.CustomLSP.onRequest(_0x2cb12f, _0x296558.CustomLSP.Requests.GetConfigInfo, (_0x35203a, _0x4ee68a) => this._onGetConfigInfo(_0x35203a)));
        }
        createProgressReporter(_0x2161c5) {
          return {
            isEnabled: _0x5017c8 => !!this._progressBarEnabled,
            begin: () => {
              _0x296558.CustomLSP.sendNotification(_0x2161c5, _0x296558.CustomLSP.Notifications.BeginProgress, undefined);
            },
            report: _0x547599 => {
              _0x296558.CustomLSP.sendNotification(_0x2161c5, _0x296558.CustomLSP.Notifications.ReportProgress, _0x547599);
            },
            end: () => {
              _0x296558.CustomLSP.sendNotification(_0x2161c5, _0x296558.CustomLSP.Notifications.EndProgress, undefined);
            }
          };
        }
        createHost() {
          return this._serverOptions.serviceProvider.get(_0x21741a.PylanceServiceKeys.hostFactory).createHost(this.state.hostKind);
        }
        createBackgroundAnalysisProgram(_0x5c15df, _0x467367, _0x188f2f, _0x564b3e, _0x5a8425, _0x1826d5) {
          _0x467367.add(_0x56024c.ServiceKeys.sourceFileFactory, this._diagnosticsRemapper);
          return new _0x43185d.PylanceBackgroundAnalysisProgram(_0x5c15df, _0x467367, _0x188f2f, _0x564b3e, _0x5a8425, _0x1826d5, this._serverOptions.disableChecker);
        }
        dispose() {
          this.state.dispose();
          this._syncLS.dispose();
          this._asyncLS.dispose();
        }
        get _fs() {
          return this._serverOptions.serviceProvider.fs();
        }
        get _provider() {
          return this._providerOpt;
        }
        get _client() {
          return this.state.client;
        }
        get _console() {
          return this._serverOptions.serviceProvider.console();
        }
        get _intelliCode() {
          return this._serverOptions.serviceProvider.tryGet(_0x21741a.PylanceServiceKeys.intelliCode);
        }
        get _serverOptions() {
          return this.state.serverOptions;
        }
        _getDocumentationUrlForDiagnostic(_0x1118be) {
          return _0x26297c.getDocumentationUrlForDiagnostic(_0x1118be);
        }
        _getDiagCode(_0x2a53b2, _0x189b87) {
          return _0x189b87;
        }
        _onCodeAction(_0x429ce4, _0x24ad4e) {
          const _0x15d34c = this.convertLspUriStringToUri(_0x429ce4.textDocument.uri);
          const _0x195183 = this._provider.getWorkspaceForFile(_0x15d34c);
          return this._run(_0x195183, _0x29a222 => this._asyncLS.handleCodeAction(_0x29a222, _0x429ce4, _0x24ad4e));
        }
        _onDefinition(_0x8055d3, _0xf5b93e) {
          const _0x4ea8f3 = this.convertLspUriStringToUri(_0x8055d3.textDocument.uri);
          const _0x4e5658 = this._provider.getWorkspaceForFile(_0x4ea8f3);
          return this._run(_0x4e5658, _0x410bbc => this._syncLS.handleDefinition(_0x410bbc, _0x8055d3, _0xf5b93e));
        }
        _onDeclaration(_0x55abdb, _0x2ce6a4) {
          const _0x346b68 = this.convertLspUriStringToUri(_0x55abdb.textDocument.uri);
          const _0x20a302 = this._provider.getWorkspaceForFile(_0x346b68);
          return this._run(_0x20a302, _0x22e8bd => this._syncLS.handleDeclaration(_0x22e8bd, _0x55abdb, _0x2ce6a4));
        }
        _onTypeDefinition(_0x1f2f22, _0x3cb228) {
          const _0x2e381d = this.convertLspUriStringToUri(_0x1f2f22.textDocument.uri);
          const _0x4f75df = this._provider.getWorkspaceForFile(_0x2e381d);
          return this._run(_0x4f75df, _0x71a79e => this._syncLS.handleTypeDefinition(_0x71a79e, _0x1f2f22, _0x3cb228));
        }
        _onReferences(_0x1d402a, _0x58f9d7, _0x2f5449, _0x19d11b) {
          const _0x114a10 = this.convertLspUriStringToUri(_0x1d402a.textDocument.uri);
          const _0x2f5e81 = this._provider.getWorkspaceForFile(_0x114a10);
          return this._run(_0x2f5e81, _0x31a0bd => {
            const _0x25dd3e = this._provider.getProgressReporter(_0x2f5449, _0x9a3e6c.Localizer.CodeAction.findingReferences(), _0x58f9d7);
            return this._run(_0x25dd3e, _0x58d856 => this._syncLS.handleReferences(_0x31a0bd, _0x1d402a, _0x58d856.reporter, _0x58d856.source, _0x19d11b, _0x26297c.createDocumentRangeWithReferenceKind, _0x26297c.convertDocumentRangeToLocationWithReferenceKind));
          });
        }
        _onDocumentSymbol(_0x8392d, _0x52e854) {
          const _0x34bec6 = this.convertLspUriStringToUri(_0x8392d.textDocument.uri);
          const _0x5d4758 = this._provider.getWorkspaceForFile(_0x34bec6);
          return this._run(_0x5d4758, _0x144771 => this._syncLS.handleDocumentSymbol(_0x144771, _0x8392d, _0x52e854));
        }
        _onWorkspaceSymbol(_0x322a5e, _0x4754fc, _0x4046cf) {
          return this._syncLS.handleWorkspaceSymbol(this._provider.getWorkspaces(), _0x322a5e, _0x4754fc, _0x4046cf);
        }
        _onHover(_0x4b0f77, _0x497c97) {
          const _0x150ab5 = this.convertLspUriStringToUri(_0x4b0f77.textDocument.uri);
          const _0x3c2b6f = this._provider.getWorkspaceForFile(_0x150ab5);
          return this._run(_0x3c2b6f, _0x5315a5 => this._syncLS.handleHover(_0x5315a5, _0x4b0f77, _0x497c97));
        }
        _onDocumentHighlight(_0x142276, _0x194d25) {
          const _0x1124ee = this.convertLspUriStringToUri(_0x142276.textDocument.uri);
          const _0x21b72b = this._provider.getWorkspaceForFile(_0x1124ee);
          return this._run(_0x21b72b, _0x267ca1 => this._syncLS.handleDocumentHighlight(_0x267ca1, _0x142276, _0x194d25));
        }
        _onSignatureHelp(_0x33d36e, _0x4bb688) {
          const _0x1724c8 = this.convertLspUriStringToUri(_0x33d36e.textDocument.uri);
          const _0x133078 = this._provider.getWorkspaceForFile(_0x1724c8);
          return this._run(_0x133078, _0x34c13e => this._syncLS.handleSignatureHelp(_0x34c13e, _0x33d36e, _0x4bb688));
        }
        _onCompletion(_0x4811d9, _0x118acd) {
          const _0x30f570 = this.convertLspUriStringToUri(_0x4811d9.textDocument.uri);
          const _0x3fcf99 = this._provider.getWorkspaceForFile(_0x30f570);
          return this._run(_0x3fcf99, _0x5c7516 => this._asyncLS.handleCompletion(_0x5c7516, _0x4811d9, _0x118acd));
        }
        _onCompletionResolve(_0x47b1ec, _0x472908) {
          const _0x2f5a8f = _0x3d51fd.CompletionListConverter.fromLSP(_0x47b1ec).data;
          if (!_0x2f5a8f || !_0x2f5a8f.uri) {
            return _0x47b1ec;
          }
          const _0x4a079f = this.convertLspUriStringToUri(_0x2f5a8f.uri);
          const _0x4c9d3c = this._provider.getWorkspaceForFile(_0x4a079f);
          return this._run(_0x4c9d3c, _0x2faafb => this._syncLS.handleCompletionResolve(_0x2faafb, _0x47b1ec, _0x472908));
        }
        _onPrepareRenameRequest(_0x27160b, _0x27d6b2) {
          const _0x5116f1 = this.convertLspUriStringToUri(_0x27160b.textDocument.uri);
          const _0x356ab0 = this._provider.getWorkspaceForFile(_0x5116f1);
          return this._run(_0x356ab0, _0x51c5de => this._syncLS.handlePrepareRenameRequest(_0x51c5de, _0x27160b, _0x27d6b2));
        }
        _onRenameRequest(_0x4b30f1, _0x44751f) {
          const _0x1f6be0 = this.convertLspUriStringToUri(_0x4b30f1.textDocument.uri);
          const _0x4da41e = this._provider.getWorkspaceForFile(_0x1f6be0);
          return this._run(_0x4da41e, _0x262523 => this._syncLS.handleRenameRequest(_0x262523, _0x4b30f1, _0x44751f));
        }
        _onCallHierarchyPrepare(_0x31dc06, _0x168df3) {
          const _0x46142a = this.convertLspUriStringToUri(_0x31dc06.textDocument.uri);
          const _0x1f46f3 = this._provider.getWorkspaceForFile(_0x46142a);
          return this._run(_0x1f46f3, _0x2191ad => this._syncLS.handleCallHierarchyPrepare(_0x2191ad, _0x31dc06, _0x168df3));
        }
        _onCallHierarchyIncomingCalls(_0x25cff3, _0x563a37) {
          const _0x38090d = this.convertLspUriStringToUri(_0x25cff3.item.uri);
          const _0x5ebc6b = this._provider.getWorkspaceForFile(_0x38090d);
          return this._run(_0x5ebc6b, _0x558b2d => this._syncLS.handleCallHierarchyIncomingCalls(_0x558b2d, _0x25cff3, _0x563a37));
        }
        _onCallHierarchyOutgoingCalls(_0x4a66e6, _0x3525a7) {
          const _0x437ffb = this.convertLspUriStringToUri(_0x4a66e6.item.uri);
          const _0x4a3ad0 = this._provider.getWorkspaceForFile(_0x437ffb);
          return this._run(_0x4a3ad0, _0x5901a1 => this._syncLS.handleCallHierarchyOutgoingCalls(_0x5901a1, _0x4a66e6, _0x3525a7));
        }
        _onExecuteCommand(_0x308cc1, _0x3d5e3a, _0x5694a1) {
          return this._asyncLS.handleExecuteCommand(_0x308cc1, () => this._provider.getProgressReporter(_0x5694a1, _0x9a3e6c.Localizer.CodeAction.executingCommand(), _0x3d5e3a), this._provider.executeCommand, this._provider.applyWorkspaceEdit, this._provider.isRefactoringCommand(_0x308cc1.command), this._provider.isLongRunningCommand(_0x308cc1.command), _0x3d5e3a);
        }
        _onTypeHierarchyPrepare(_0x3c48b1, _0x384301) {
          const _0x1c9810 = this.convertLspUriStringToUri(_0x3c48b1.textDocument.uri);
          const _0x2ddc87 = this._provider.getWorkspaceForFile(_0x1c9810);
          return this._run(_0x2ddc87, _0x4d638e => this._syncLS.handleTypeHierarchyPrepare(_0x4d638e, _0x3c48b1, _0x384301));
        }
        _onTypeHierarchySupertypes(_0x254238, _0x528974) {
          const _0x201bef = this.convertLspUriStringToUri(_0x254238.item.uri);
          const _0x2404bc = this._provider.getWorkspaceForFile(_0x201bef);
          return this._run(_0x2404bc, _0x44f7a9 => this._syncLS.handleTypeHierarchySupertypes(_0x44f7a9, _0x254238, _0x528974));
        }
        _onTypeHierarchySubtypes(_0x466c3e, _0x46506f) {
          const _0x14a289 = this.convertLspUriStringToUri(_0x466c3e.item.uri);
          const _0x3094a9 = this._provider.getWorkspaceForFile(_0x14a289);
          return this._run(_0x3094a9, _0x6020cd => this._syncLS.handleTypeHierarchySubtypes(_0x6020cd, _0x466c3e, _0x46506f));
        }
        _onRange(_0x188cad, _0x54c2c6) {
          const _0x396375 = this.convertLspUriStringToUri(_0x188cad.textDocument.uri);
          const _0x245536 = this._provider.getWorkspaceForFile(_0x396375);
          return this._run(_0x245536, _0x421c20 => this._asyncLS.handleRange(_0x421c20, _0x188cad, _0x54c2c6));
        }
        _onDelta(_0x599d09, _0xe13c28) {
          const _0xaa3916 = this.convertLspUriStringToUri(_0x599d09.textDocument.uri);
          const _0x5c6b0e = this._provider.getWorkspaceForFile(_0xaa3916);
          return this._run(_0x5c6b0e, _0x108963 => this._asyncLS.handleDelta(_0x108963, _0x599d09, _0xe13c28));
        }
        _onSemanticTokens(_0x5621ec, _0x81c3ac) {
          const _0x2bb304 = this.convertLspUriStringToUri(_0x5621ec.textDocument.uri);
          const _0x220fc6 = this._provider.getWorkspaceForFile(_0x2bb304);
          return this._run(_0x220fc6, _0x4a0756 => this._asyncLS.handleSemanticTokens(_0x4a0756, _0x5621ec, _0x81c3ac));
        }
        _onFoldingRanges(_0x593766, _0xb12da1) {
          const _0x5784c7 = this.convertLspUriStringToUri(_0x593766.textDocument.uri);
          const _0x3156e1 = this._provider.getWorkspaceForFile(_0x5784c7);
          return this._run(_0x3156e1, _0x588fb4 => this._syncLS.handleFoldingRanges(_0x588fb4, _0x593766, _0xb12da1));
        }
        _onSelectionRanges(_0x419cae, _0x3dbd8a) {
          const _0x1d7948 = this.convertLspUriStringToUri(_0x419cae.textDocument.uri);
          const _0x18bd63 = this._provider.getWorkspaceForFile(_0x1d7948);
          return this._run(_0x18bd63, _0x1949de => this._syncLS.handleSelectionRanges(_0x1949de, _0x419cae, _0x3dbd8a));
        }
        _onInlayHints(_0x28a0a1, _0x58aa5f) {
          const _0x3a966a = this.convertLspUriStringToUri(_0x28a0a1.textDocument.uri);
          const _0x86b6a4 = this._provider.getWorkspaceForFile(_0x3a966a);
          return this._run(_0x86b6a4, _0x2cba31 => this._asyncLS.handleInlayHints(_0x2cba31, _0x28a0a1, _0x58aa5f));
        }
        _onResolveInlayHint(_0x2cc7c6, _0x1da50c) {
          const _0x1905de = _0x3be1f7.fromLSPAny(_0x2cc7c6.data);
          if (!_0x1905de || !_0x1905de.fileUri) {
            return _0x2cc7c6;
          }
          const _0x2d96a8 = _0x5da842.Uri.parse(_0x1905de.fileUri, this._serverOptions.serviceProvider);
          const _0x2648bf = this._provider.getWorkspaceForFile(_0x2d96a8);
          return this._run(_0x2648bf, _0xdf4b6 => this._syncLS.handleResolveInlayHint(_0xdf4b6, _0x2cc7c6, _0x1da50c));
        }
        _onDocumentOnTypeFormatting(_0x2f7ec4, _0x5491a1, _0xb703db) {
          const _0x2da996 = this.convertLspUriStringToUri(_0x2f7ec4.textDocument.uri);
          const _0x36cf6d = this._provider.getWorkspaceForFile(_0x2da996);
          return this._run(_0x36cf6d, _0x37c7a3 => this._syncLS.handleDocumentOnTypeFormatting(_0x37c7a3, _0x2f7ec4, _0x5491a1, _0xb703db));
        }
        _run(_0x1759a8, _0x1e4e0b) {
          if (_0x1c5992.isThenable(_0x1759a8)) {
            return _0x1759a8.then(_0x3d9688 => _0x1e4e0b(_0x3d9688));
          }
          return _0x1e4e0b(_0x1759a8);
        }
        _addDynamicFeature(_0x3b3a4a) {
          this.state.addDynamicFeature(_0x3b3a4a);
        }
        _getProgressMessage(_0x86d252) {
          const _0x409323 = _0x86d252.requiringAnalysisCount.files;
          const _0x2cd478 = _0x86d252.requiringAnalysisCount.cells;
          if (_0x409323 + _0x2cd478 === 0) {
            return undefined;
          }
          const _0x4f70e2 = _0x409323 === 1 && _0x2cd478 === 1 ? _0x14726b.Localizer.Messages.singularFileAndSingularCellToAnalyze() : _0x409323 === 1 && _0x2cd478 !== 1 ? _0x14726b.Localizer.Messages.singularFileAndPluralCellsToAnalyze().format({
            cellCount: _0x2cd478
          }) : _0x409323 !== 1 && _0x2cd478 === 1 ? _0x14726b.Localizer.Messages.pluralFilesAndSingularCellToAnalyze().format({
            fileCount: _0x409323
          }) : _0x14726b.Localizer.Messages.pluralFilesAndPluralCellsToAnalyze().format({
            fileCount: _0x409323,
            cellCount: _0x2cd478
          });
          return _0x4f70e2;
        }
        _getCompatibleMarkupKind(_0x5f0a58) {
          const _0x55da8d = [_0x5b625a.MarkupKind.PlainText, _0x5b625a.MarkupKind.Markdown];
          for (const _0x2de422 of _0x5f0a58 ?? []) {
            if (_0x55da8d.includes(_0x2de422)) {
              return _0x2de422;
            }
          }
          return _0x5b625a.MarkupKind.PlainText;
        }
        _onJupyterDocumentSymbols(_0x58e278, _0x5851c4) {
          const _0x160373 = this.convertLspUriStringToUri(_0x58e278.textDocument.uri);
          const _0x5e4b84 = this._provider.getWorkspaceForFile(_0x160373);
          return this._run(_0x5e4b84, _0x5c2a31 => {
            return _0x5c2a31.service.run(_0xb30ee8 => {
              return new _0x223088.DocumentSymbolProvider(_0xb30ee8, _0x160373, this._client.hasHierarchicalDocumentSymbolCapability, {
                includeAliases: true
              }, _0x5851c4).getSymbols();
            }, _0x5851c4);
          });
        }
        _applyPylanceDiagnosticOverrides(_0x3ae1a7) {
          _0x3ae1a7.diagnosticSeverityOverrides = this._applyPylanceDiagnosticOverride(_0x3ae1a7.diagnosticSeverityOverrides, _0x2be61a.DiagnosticRule.reportShadowedImports, 'warning');
        }
        _applyPylanceDiagnosticOverride(_0x7a4666, _0x459c15, _0xc23059) {
          const _0x5bd8f5 = _0x7a4666 || {};
          const _0x52264d = _0x459c15;
          if (!_0x5bd8f5[_0x52264d]) {
            _0x5bd8f5[_0x52264d] = _0xc23059;
          }
          return _0x5bd8f5;
        }
        _updateExtensionSettings(_0x552752, _0x4258d0) {
          var _0x424166;
          if ((_0x424166 = _0x552752.service.serviceProvider.tryGet(_0x56024c.ServiceKeys.stateMutationListeners)) === null || _0x424166 === undefined) {
            undefined;
          } else {
            _0x424166.forEach(_0x362451 => {
              var _0x58ab9d;
              if ((_0x58ab9d = _0x362451.onUpdateSettings) === null || _0x58ab9d === undefined) {
                return undefined;
              } else {
                return _0x58ab9d.call(_0x362451, _0x4258d0);
              }
            });
          }
        }
        _convertDiagnostics(_0x33ca5a, _0x1b5076) {
          const _0x31c81a = [];
          _0x1b5076.forEach(_0x3f5853 => {
            const _0x265e0e = _0x15f391(_0x3f5853.category);
            const _0x17ccd3 = _0x3f5853.getRule();
            const _0x59830b = this._getDiagCode(_0x3f5853, _0x17ccd3);
            const _0x4e6c3f = _0x5b625a.Diagnostic.create(_0x3f5853.range, _0x3f5853.message, _0x265e0e, _0x59830b, this._serverOptions.productName);
            if (_0x3f5853.category === 3 || _0x3f5853.category === 4) {
              _0x4e6c3f.tags = [_0x5b625a.DiagnosticTag.Unnecessary];
              _0x4e6c3f.severity = _0x5b625a.DiagnosticSeverity.Hint;
              if (!this.state.client.supportsUnnecessaryDiagnosticTag) {
                return;
              }
            } else {
              if (_0x3f5853.category === 5) {
                _0x4e6c3f.tags = [_0x5b625a.DiagnosticTag.Deprecated];
                _0x4e6c3f.severity = _0x5b625a.DiagnosticSeverity.Hint;
                if (!this.state.client.supportsDeprecatedDiagnosticTag) {
                  return;
                }
              } else {
                if (_0x3f5853.category === 6) {
                  _0x4e6c3f.tags = [_0x2feb39.TaskItem];
                  switch (_0x3f5853.priority) {
                    case _0x5658d7.TaskListPriority.High:
                      _0x4e6c3f._vs_diagnosticRank = _0x4468bc.High;
                      break;
                    case _0x5658d7.TaskListPriority.Normal:
                      _0x4e6c3f._vs_diagnosticRank = _0x4468bc.Default;
                      break;
                    case _0x5658d7.TaskListPriority.Low:
                      _0x4e6c3f._vs_diagnosticRank = _0x4468bc.Low;
                      break;
                  }
                  if (!this.state.client.supportsTaskItemDiagnosticTag) {
                    return;
                  }
                }
              }
            }
            if (_0x17ccd3) {
              const _0x4f1bd9 = this._getDocumentationUrlForDiagnostic(_0x3f5853);
              if (_0x4f1bd9) {
                _0x4e6c3f.codeDescription = {
                  href: _0x4f1bd9
                };
              }
            }
            const _0x2b13f9 = _0x3f5853.getRelatedInfo();
            if (_0x2b13f9.length > 0) {
              _0x4e6c3f.relatedInformation = _0x2b13f9.filter(_0x32ce2e => _0x2efe6f.canNavigateToFile(_0x32ce2e.uri, _0x33ca5a)).map(_0x3b4e99 => _0x5b625a.DiagnosticRelatedInformation.create(_0x5b625a.Location.create(_0xa576b5.convertUriToLspUriString(_0x33ca5a, _0x3b4e99.uri), _0x3b4e99.range), _0x3b4e99.message));
            }
            _0x31c81a.push(_0x4e6c3f);
          });
          function _0x15f391(_0x106ff9) {
            switch (_0x106ff9) {
              case 0:
                return _0x5b625a.DiagnosticSeverity.Error;
              case 1:
                return _0x5b625a.DiagnosticSeverity.Warning;
              case 2:
              case 6:
                return _0x5b625a.DiagnosticSeverity.Information;
              case 3:
              case 4:
              case 5:
                return _0x5b625a.DiagnosticSeverity.Hint;
            }
          }
          return _0x31c81a;
        }
        _onGetConfigInfo(_0x9d2d2a) {
          const _0xc74c1c = this.convertLspUriStringToUri(_0x9d2d2a.workspaceUri);
          const _0x525816 = this._provider.getWorkspaceForFile(_0xc74c1c);
          return this._run(_0x525816, _0x5ac362 => {
            var _0x3e59bf;
            var _0x13bed8;
            const _0x245cc5 = _0x5ac362.service.getConfigOptions();
            return {
              projectRoot: ((_0x3e59bf = _0x5ac362.rootUri) === null || _0x3e59bf === undefined ? undefined : _0x3e59bf.toString()) || '',
              configFileSource: (_0x13bed8 = _0x245cc5.configFileSource) === null || _0x13bed8 === undefined ? undefined : _0x13bed8.toString(),
              typeCheckingMode: _0x245cc5.effectiveTypeCheckingMode
            };
          });
        }
      }
      exports.LanguageService = _0x540b48;
      _0x24466d([_0x32962b.lspCodeActionRequestTelemetry()], _0x540b48.prototype, '_onCodeAction', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/definition')], _0x540b48.prototype, '_onDefinition', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/declaration')], _0x540b48.prototype, '_onDeclaration', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/typeDefinition')], _0x540b48.prototype, '_onTypeDefinition', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/references')], _0x540b48.prototype, '_onReferences', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/documentSymbol')], _0x540b48.prototype, '_onDocumentSymbol', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('workspace/symbol')], _0x540b48.prototype, '_onWorkspaceSymbol', null);
      _0x24466d([_0x32962b.lspHoverRequestTelemetry()], _0x540b48.prototype, '_onHover', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/documentHighlight')], _0x540b48.prototype, '_onDocumentHighlight', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/signatureHelp')], _0x540b48.prototype, '_onSignatureHelp', null);
      _0x24466d([_0x32962b.lspCompletionRequestTelemetry()], _0x540b48.prototype, '_onCompletion', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('completionItem/resolve')], _0x540b48.prototype, '_onCompletionResolve', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/prepareRename')], _0x540b48.prototype, '_onPrepareRenameRequest', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/rename')], _0x540b48.prototype, '_onRenameRequest', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/prepareCallHierarchy')], _0x540b48.prototype, '_onCallHierarchyPrepare', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('callHierarchy/incomingCalls')], _0x540b48.prototype, '_onCallHierarchyIncomingCalls', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('callHierarchy/outgoingCalls')], _0x540b48.prototype, '_onCallHierarchyOutgoingCalls', null);
      _0x24466d([_0x32962b.lspExecuteCommandRequestTelemetry()], _0x540b48.prototype, '_onExecuteCommand', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/prepareTypeHierarchy')], _0x540b48.prototype, '_onTypeHierarchyPrepare', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('typeHierarchy/supertypes')], _0x540b48.prototype, '_onTypeHierarchySupertypes', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('typeHierarchy/subtypes')], _0x540b48.prototype, '_onTypeHierarchySubtypes', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/semanticTokens/range')], _0x540b48.prototype, '_onRange', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/semanticTokens/full/delta')], _0x540b48.prototype, '_onDelta', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/semanticTokens/full')], _0x540b48.prototype, '_onSemanticTokens', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/foldingRange')], _0x540b48.prototype, '_onFoldingRanges', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/selectionRange')], _0x540b48.prototype, '_onSelectionRanges', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/inlayHint')], _0x540b48.prototype, '_onInlayHints', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('inlayHint/resolve')], _0x540b48.prototype, '_onResolveInlayHint', null);
      _0x24466d([_0x32962b.lspRequestTelemetry('textDocument/onTypeFormatting')], _0x540b48.prototype, '_onDocumentOnTypeFormatting', null);
      var _0x2feb39;
      (function (_0x6641d7) {
        _0x6641d7.BuildError = -1;
        _0x6641d7.IntellisenseError = -2;
        _0x6641d7.PotentialDuplicate = -3;
        _0x6641d7.HiddenInErrorList = -4;
        _0x6641d7.VisibleInErrorList = -5;
        _0x6641d7.HiddenInEditor = -6;
        _0x6641d7.SuppressEditorToolTip = -7;
        _0x6641d7.EditAndContinueError = -8;
        _0x6641d7.TaskItem = -9;
      })(_0x2feb39 ||= {});
      var _0x4468bc;
      (function (_0x4de047) {
        _0x4de047.Highest = 100;
        _0x4de047.High = 200;
        _0x4de047.Default = 300;
        _0x4de047.Low = 400;
        _0x4de047.Lowest = 500;
      })(_0x4468bc ||= {});
    },
    80165: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.FeatureState = undefined;
      const _0x17cb3a = require(56911);
      const _0xd1620b = __importStar(require(48281));
      const _0x52a89b = __importStar(require(4883));
      const _0x39300e = require(71745);
      const _0x983ecc = require(55275);
      const _0x4900f1 = require(6665);
      const _0x1b9ef6 = require(84826);
      const _0x55d1a7 = require(8398);
      class _0xcd5d4d {
        constructor(_0x394156) {
          this.serverOptions = _0x394156;
          this._dynamicFeatures = new _0x983ecc.DynamicFeatures();
          this._hostKind = 1;
          this.openFileMap = new Map();
          this.disposable = [];
          this.client = {
            hasConfigurationCapability: false,
            hasVisualStudioExtensionsCapability: false,
            hasWorkspaceFoldersCapability: false,
            hasWatchFileCapability: false,
            hasWatchFileRelativePathCapability: false,
            hasActiveParameterCapability: false,
            hasSignatureLabelOffsetCapability: false,
            hasHierarchicalDocumentSymbolCapability: false,
            hasWindowProgressCapability: false,
            hasGoToDeclarationCapability: false,
            hasDocumentChangeCapability: false,
            hasDocumentAnnotationCapability: false,
            hasCompletionCommitCharCapability: false,
            hoverContentFormat: _0x17cb3a.MarkupKind.PlainText,
            completionDocFormat: _0x17cb3a.MarkupKind.PlainText,
            completionSupportsSnippet: false,
            signatureDocFormat: _0x17cb3a.MarkupKind.PlainText,
            supportsDeprecatedDiagnosticTag: false,
            supportsUnnecessaryDiagnosticTag: false,
            supportsTaskItemDiagnosticTag: false,
            completionItemResolveSupportsAdditionalTextEdits: false
          };
          this.inExperimentCache = new Map();
          global.__rootDirectory = _0x394156.rootDirectory.getFilePath();
          this._console.info(`Server root directory: ${_0x394156.rootDirectory}`);
          const _0x2959be = _0x394156.serviceProvider.fs();
          const _0x316afc = _0x2959be.getModulePath();
          if (_0x316afc && _0x2959be.existsSync(_0x316afc)) {
            _0x2959be.chdir(_0x316afc);
          }
          _0xd1620b.assert(_0x2959be.existsSync(_0x394156.rootDirectory.combinePaths(_0x52a89b.typeshedFallback)), `Unable to locate typeshed fallback folder at '${_0x394156.rootDirectory}'`);
          this.documentTransformer = new _0x4900f1.DocumentTransformer([new _0x1b9ef6.PyTestDocumentTransformer()]);
        }
        get hostKind() {
          return this._hostKind;
        }
        set hostKind(_0x2cd67d) {
          this._hostKind = _0x2cd67d;
        }
        convertLspUriStringToUri(_0xc551ed) {
          return _0x55d1a7.convertLspUriStringToUri(_0xc551ed, this._caseSensitiveDetector, this._uriMapper);
        }
        registerDynamicFeatures() {
          this._dynamicFeatures.register();
        }
        updateDynamicFeatures(_0x367af9) {
          this._dynamicFeatures.update(_0x367af9);
        }
        addDynamicFeature(_0x72ecdb) {
          this._dynamicFeatures.add(_0x72ecdb);
        }
        dispose() {
          this.openFileMap.clear();
          this._dynamicFeatures.unregister();
          this.disposable.forEach(_0x28f35f => _0x28f35f.dispose());
          this.disposable.length = 0;
          this.inExperimentCache.clear();
        }
        get _console() {
          return this.serverOptions.serviceProvider.console();
        }
        get _uriMapper() {
          return this.serverOptions.serviceProvider.uriMapper();
        }
        get _caseSensitiveDetector() {
          return this.serverOptions.serviceProvider.get(_0x39300e.ServiceKeys.caseSensitivityDetector);
        }
      }
      exports.FeatureState = _0xcd5d4d;
    },
    78212: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SynchronousFeatures = undefined;
      const _0x510199 = require(56911);
      const _0x4a93ab = require(56412);
      const _0x153675 = require(88754);
      const _0x40b924 = require(5884);
      const _0x2e81f4 = require(10518);
      const _0x486cb6 = require(65574);
      const _0x2e9371 = require(42634);
      const _0x5ca18f = require(26005);
      const _0x1fade0 = require(7380);
      const _0x4215f6 = require(30741);
      const _0x317909 = require(24122);
      const _0xf189a4 = require(13259);
      const _0x4ab0c4 = require(30048);
      const _0x4c4d7a = require(69482);
      const _0x20fd9e = require(78459);
      const _0x1d4a15 = require(95456);
      const _0x462e50 = require(84584);
      const _0x1bfa27 = require(90463);
      const _0x298533 = require(30041);
      const _0xef79e1 = require(29215);
      const _0xfdbff0 = require(44078);
      const _0x1876c6 = require(47351);
      const _0x371257 = require(84014);
      const _0x308367 = require(48205);
      const _0x347b37 = require(8239);
      const _0x51f5c8 = require(1044);
      const _0x33a55b = require(74899);
      const _0x3306f3 = require(60722);
      class _0x15cfd4 extends _0x3306f3.FeaturesBase {
        constructor(_0x2561e9) {
          super(_0x2561e9);
        }
        handleDefinition(_0x3ef0e8, _0xfd5f45, _0x5b7ca1) {
          return this._getDefinitions(_0x3ef0e8, _0xfd5f45, _0x16bc31 => this.state.documentTransformer.runWithPosition(_0x3ef0e8, _0xfd5f45, (_0x796b6, _0x217c54) => {
            return new _0x1d4a15.AggregatedDefinitionProvider(_0x796b6, _0x16bc31, _0x217c54, this.state.client.hasGoToDeclarationCapability ? _0x486cb6.DefinitionFilter.PreferSource : _0x486cb6.DefinitionFilter.All, _0x5b7ca1).getDefinitions();
          }, _0x5b7ca1));
        }
        handleDeclaration(_0x4ceeb9, _0x4639de, _0xe9598e) {
          return this._getDefinitions(_0x4ceeb9, _0x4639de, _0x2b37a4 => this.state.documentTransformer.runWithPosition(_0x4ceeb9, _0x4639de, (_0x3d0d7d, _0x3d92b7) => {
            return new _0x1d4a15.AggregatedDefinitionProvider(_0x3d0d7d, _0x2b37a4, _0x3d92b7, this.state.client.hasGoToDeclarationCapability ? _0x486cb6.DefinitionFilter.PreferStubs : _0x486cb6.DefinitionFilter.All, _0xe9598e).getDefinitions();
          }, _0xe9598e));
        }
        handleTypeDefinition(_0x18a514, _0x21e5a5, _0x5c0e7a) {
          return this._getDefinitions(_0x18a514, _0x21e5a5, _0x53ff5b => this.state.documentTransformer.runWithPosition(_0x18a514, _0x21e5a5, (_0x39ad05, _0x4cd9b3) => {
            return new _0x486cb6.TypeDefinitionProvider(_0x39ad05, _0x53ff5b, _0x4cd9b3, _0x5c0e7a).getDefinitions();
          }, _0x5c0e7a));
        }
        handleDocumentSymbol(_0x24cd30, _0x409007, _0x92da6) {
          _0x3306f3.recordUserInteractionTime(_0x24cd30);
          if (_0x24cd30.disableLanguageServices) {
            return null;
          }
          const _0x3edde9 = this.state.convertLspUriStringToUri(_0x409007.textDocument.uri);
          return _0x24cd30.service.run(_0x37d219 => {
            return new _0x462e50.AggregatedDocumentSymbolProvider(this._globalIndices ?? _0x51f5c8.IndicesManager.empty, _0x37d219, _0x3edde9, this.state.client.hasHierarchicalDocumentSymbolCapability, _0x92da6).getSymbols();
          }, _0x92da6);
        }
        handleWorkspaceSymbol(_0x29490e, _0x41e1d8, _0x5372d5, _0x4e752f) {
          const _0x2fd15e = new _0xfdbff0.AggregatedWorkspaceSymbolProvider(this._globalIndices ?? _0x51f5c8.IndicesManager.empty, _0x29490e, _0x4e752f, _0x41e1d8.query, _0x5372d5).reportSymbols();
          return _0x2fd15e;
        }
        handleHover(_0x34d57f, _0x1a5ff6, _0x1f72d3) {
          return _0x4c4d7a.trackPerf(_0x34d57f, _0x4c4d7a.TelemetryEventName.HOVER_SLOW, _0x1a4ad7 => {
            const _0x2aa233 = this.state.convertLspUriStringToUri(_0x1a5ff6.textDocument.uri);
            return this.state.documentTransformer.runWithPosition(_0x34d57f, _0x1a5ff6, (_0x1dcef5, _0x4c24ef) => {
              return new _0x298533.AggregatedHoverProvider(_0x1dcef5, _0x2aa233, _0x4c24ef, this.state.client.hoverContentFormat, !!this.state.serverOptions.supportsTelemetry, _0x1f72d3).getHover();
            }, _0x1f72d3);
          }, 2000);
        }
        handleReferences(_0x5e7de3, _0x34f213, _0x1436a9, _0x1455d1, _0x52c1b0, _0x43aeed, _0x117c44) {
          if (this._pendingFindAllRefsCancellationSource) {
            this._pendingFindAllRefsCancellationSource.cancel();
            this._pendingFindAllRefsCancellationSource = undefined;
          }
          this._pendingFindAllRefsCancellationSource = _0x1455d1;
          try {
            if (_0x5e7de3.disableLanguageServices) {
              return null;
            }
            const _0x223182 = this.state.convertLspUriStringToUri(_0x34f213.textDocument.uri);
            return _0x5e7de3.service.run(_0x1d8eca => {
              return new _0x5ca18f.ReferencesProvider(_0x1d8eca, _0x1455d1.token, _0x43aeed, _0x117c44).reportReferences(_0x223182, _0x34f213.position, _0x34f213.context.includeDeclaration, _0x52c1b0);
            }, _0x1455d1.token);
          } finally {
            _0x1436a9.done();
            _0x1455d1.dispose();
          }
        }
        handleDocumentHighlight(_0x30d3c3, _0x3aafe9, _0x4abd28) {
          const _0x4fae3f = this.state.convertLspUriStringToUri(_0x3aafe9.textDocument.uri);
          return _0x30d3c3.service.run(_0x166617 => {
            return new _0x2e9371.DocumentHighlightProvider(_0x166617, _0x4fae3f, _0x3aafe9.position, _0x4abd28).getDocumentHighlight();
          }, _0x4abd28);
        }
        handleSignatureHelp(_0x3d462e, _0x5de1ca, _0x4c31f6) {
          if (_0x3d462e.disableLanguageServices) {
            return;
          }
          const _0x4b2d25 = this.state.convertLspUriStringToUri(_0x5de1ca.textDocument.uri);
          return this.state.documentTransformer.runWithPosition(_0x3d462e, _0x5de1ca, (_0x526751, _0xadc03e) => {
            return new _0x1fade0.SignatureHelpProvider(_0x526751, _0x4b2d25, _0xadc03e, this.state.client.signatureDocFormat, this.state.client.hasSignatureLabelOffsetCapability, this.state.client.hasActiveParameterCapability, _0x5de1ca.context, _0x526751.serviceProvider.docStringService(), _0x4c31f6).getSignatureHelp();
          }, _0x4c31f6);
        }
        handleCompletionResolve(_0x29fe49, _0x267ddf, _0xd4d81) {
          const _0x507439 = _0x1876c6.CompletionListConverter.fromLSP(_0x267ddf).data;
          if (!_0x507439 || !_0x507439.uri) {
            return _0x267ddf;
          }
          const _0x364b46 = this.state.convertLspUriStringToUri(_0x507439.uri);
          return this.state.documentTransformer.run(_0x29fe49, _0x267ddf, (_0x2f61f0, _0x203288) => {
            const _0x2a9cf5 = _0x1876c6.CompletionListConverter.fromLSP(_0x203288).data;
            new _0x20fd9e.AggregatedCompletionProvider(_0x2f61f0, _0x364b46, _0x2a9cf5.position, this.getCompletionOptions(_0x29fe49), {
              nameMap: _0xf189a4.wellKnownAbbreviationMap,
              indices: _0x33a55b.SymbolIndexer.getIndices(_0x29fe49)
            }, _0x29fe49.supportDocstringTemplate ?? false, !!this.state.serverOptions.supportsTelemetry, _0xd4d81).resolveCompletionItem(_0x203288);
            return _0x203288;
          }, _0xd4d81);
        }
        handlePrepareRenameRequest(_0x2cf8b4, _0x5b1f45, _0x497615) {
          if (_0x2cf8b4.disableLanguageServices) {
            return null;
          }
          const _0x162d2f = this.state.convertLspUriStringToUri(_0x5b1f45.textDocument.uri);
          const _0x35381d = _0x162d2f.isUntitled();
          return _0x2cf8b4.service.run(_0x305540 => {
            return new _0xef79e1.AggregatedRenameProvider(_0x305540, _0x162d2f, _0x5b1f45.position, _0x497615).canRenameSymbol(_0x2cf8b4.kinds.includes(_0x4215f6.WellKnownWorkspaceKinds.Default), _0x35381d);
          }, _0x497615);
        }
        handleRenameRequest(_0x1d079b, _0x7a3cb0, _0xbff8b1) {
          if (_0x1d079b.disableLanguageServices) {
            return;
          }
          const _0x11de6d = this.state.convertLspUriStringToUri(_0x7a3cb0.textDocument.uri);
          const _0x5e7082 = _0x11de6d.isUntitled();
          return _0x1d079b.service.run(_0x17b473 => {
            return new _0xef79e1.AggregatedRenameProvider(_0x17b473, _0x11de6d, _0x7a3cb0.position, _0xbff8b1).renameSymbol(_0x7a3cb0.newName, _0x1d079b.kinds.includes(_0x4215f6.WellKnownWorkspaceKinds.Default), _0x5e7082);
          }, _0xbff8b1);
        }
        handleCallHierarchyPrepare(_0xd4afc3, _0x3e9869, _0x46024b) {
          if (_0xd4afc3.disableLanguageServices) {
            return null;
          }
          const _0x4be1be = this.state.convertLspUriStringToUri(_0x3e9869.textDocument.uri);
          return _0xd4afc3.service.run(_0x17caba => {
            return new _0x2e81f4.CallHierarchyProvider(_0x17caba, _0x4be1be, _0x3e9869.position, _0x46024b).onPrepare();
          }, _0x46024b);
        }
        handleCallHierarchyIncomingCalls(_0x234ce1, _0x411249, _0x201d1d) {
          if (_0x234ce1.disableLanguageServices) {
            return null;
          }
          const _0x4db1a8 = this.state.convertLspUriStringToUri(_0x411249.item.uri);
          return _0x234ce1.service.run(_0x517b56 => {
            return new _0x2e81f4.CallHierarchyProvider(_0x517b56, _0x4db1a8, _0x411249.item.range.start, _0x201d1d).getIncomingCalls();
          }, _0x201d1d);
        }
        handleCallHierarchyOutgoingCalls(_0x49a2c3, _0x3d975a, _0x178b4d) {
          if (_0x49a2c3.disableLanguageServices) {
            return null;
          }
          const _0x5ea870 = this.state.convertLspUriStringToUri(_0x3d975a.item.uri);
          return _0x49a2c3.service.run(_0x1ca3fb => {
            return new _0x2e81f4.CallHierarchyProvider(_0x1ca3fb, _0x5ea870, _0x3d975a.item.range.start, _0x178b4d).getOutgoingCalls();
          }, _0x178b4d);
        }
        handleDocumentOnTypeFormatting(_0x1f42cd, _0x3414a3, _0x5232cb, _0x40cbe4) {
          if (_0x1f42cd.disableLanguageServices) {
            return [];
          }
          const _0x3a3275 = this.state.convertLspUriStringToUri(_0x3414a3.textDocument.uri);
          const _0x587071 = _0x1f42cd.service.getSourceFile(_0x3a3275);
          if (!_0x587071) {
            return [];
          }
          return _0x4c4d7a.trackPerf(_0x1f42cd, _0x4c4d7a.TelemetryEventName.FORMATONTYPE_SLOW, () => {
            var _0x276e52;
            if ((_0x276e52 = new _0x1bfa27.AggregatedFormatOnTypeProvider(this._fs, _0x587071, _0x3414a3.position, _0x3414a3.ch, _0x1f42cd.editorIndentConfig, _0x40cbe4, _0x5232cb).formatOnType()) !== null && _0x276e52 !== undefined) {
              return _0x276e52;
            } else {
              return [];
            }
          }, 2000);
        }
        handleFoldingRanges(_0x5be79e, _0x1857b1, _0x3090bc) {
          if (_0x5be79e.disableLanguageServices) {
            return [];
          }
          const _0x100731 = this.state.convertLspUriStringToUri(_0x1857b1.textDocument.uri);
          const _0x36ae06 = _0x5be79e.service.getParseResults(_0x100731);
          if (!_0x36ae06) {
            return [];
          }
          return _0x371257.FoldingRangeProvider.getFoldingRanges(_0x36ae06, _0x3090bc);
        }
        handleSelectionRanges(_0x1b959a, _0x7596f1, _0x3499bb) {
          if (_0x1b959a.disableLanguageServices) {
            return [];
          }
          const _0x87ed84 = this.state.convertLspUriStringToUri(_0x7596f1.textDocument.uri);
          const _0x2c4a2c = _0x1b959a.service.getParseResults(_0x87ed84);
          if (!_0x2c4a2c) {
            return [];
          }
          const _0x470267 = _0x7596f1.positions.map(_0x1b3635 => {
            return {
              line: _0x1b3635.line,
              character: _0x1b3635.character
            };
          });
          return _0x470267.map(_0x160fc7 => {
            var _0x41a7e8;
            if ((_0x41a7e8 = _0x308367.SmartSelectionProvider.getSmartSelectionRange(_0x2c4a2c, _0x160fc7, _0x3499bb)) !== null && _0x41a7e8 !== undefined) {
              return _0x41a7e8;
            } else {
              return _0x510199.SelectionRange.create(_0x153675.getEmptyRange(), undefined);
            }
          });
        }
        handleResolveInlayHint(_0x3ef890, _0x271f9b, _0x2bffb2) {
          if (_0x3ef890.disableLanguageServices) {
            return _0x271f9b;
          }
          const _0x331338 = _0x4a93ab.fromLSPAny(_0x271f9b.data);
          if (!_0x331338 || !_0x331338.fileUri) {
            return _0x271f9b;
          }
          if (!this.state.client.supportedInlayResolveCapabilitySet) {
            return _0x271f9b;
          }
          const _0x4b9782 = _0x317909.getBackgroundAnalysisProgram(_0x3ef890).onResolveInlayHint(_0x271f9b, this.state.client.supportedInlayResolveCapabilitySet, _0x2bffb2);
          return _0x4b9782;
        }
        handleTypeHierarchyPrepare(_0x23634d, _0x3f3a03, _0x4a7e39) {
          if (_0x23634d.disableLanguageServices) {
            return null;
          }
          const _0x24789e = this.state.convertLspUriStringToUri(_0x3f3a03.textDocument.uri);
          return _0x23634d.service.run(_0xcf71b3 => {
            return new _0x347b37.TypeHierarchyProvider(_0xcf71b3, _0x24789e, _0x3f3a03.position, _0x4a7e39).onPrepare();
          }, _0x4a7e39);
        }
        handleTypeHierarchySupertypes(_0x21a257, _0x45b565, _0x518e66) {
          if (_0x21a257.disableLanguageServices) {
            return null;
          }
          const _0x5cb3f8 = this.state.convertLspUriStringToUri(_0x45b565.item.uri);
          return _0x21a257.service.run(_0x4c8cba => {
            return new _0x347b37.TypeHierarchyProvider(_0x4c8cba, _0x5cb3f8, _0x45b565.item.range.start, _0x518e66).onSupertypes(_0x45b565.item);
          }, _0x518e66);
        }
        handleTypeHierarchySubtypes(_0x2c3d34, _0x25b722, _0xe9f883) {
          if (_0x2c3d34.disableLanguageServices) {
            return null;
          }
          const _0x54a7dd = this.state.convertLspUriStringToUri(_0x25b722.item.uri);
          return _0x2c3d34.service.run(_0x120b50 => {
            return new _0x347b37.TypeHierarchyProvider(_0x120b50, _0x54a7dd, _0x25b722.item.range.start, _0xe9f883).onSubtypes(_0x25b722.item);
          }, _0xe9f883);
        }
        dispose() {
          var _0x2031bc;
          var _0x5f5477;
          if ((_0x2031bc = this._pendingFindAllRefsCancellationSource) === null || _0x2031bc === undefined) {
            undefined;
          } else {
            _0x2031bc.cancel();
          }
          if ((_0x5f5477 = this._pendingFindAllRefsCancellationSource) === null || _0x5f5477 === undefined) {
            undefined;
          } else {
            _0x5f5477.dispose();
          }
        }
        get _fs() {
          return this.state.serverOptions.serviceProvider.fs();
        }
        get _globalIndices() {
          return this.serviceProvider.tryGet(_0x4ab0c4.PylanceServiceKeys.globalIndices);
        }
        _getDefinitions(_0x5b31f0, _0x9dd29f, _0x58c96a) {
          _0x3306f3.recordUserInteractionTime(_0x5b31f0);
          if (_0x5b31f0.disableLanguageServices) {
            return undefined;
          }
          const _0x56efc5 = this.state.convertLspUriStringToUri(_0x9dd29f.textDocument.uri);
          const _0x1e1178 = _0x58c96a(_0x56efc5, _0x9dd29f.position);
          if (!_0x1e1178) {
            return undefined;
          }
          return _0x1e1178.filter(_0x46e59a => _0x3306f3.canNavigateToFile(_0x46e59a.uri, _0x5b31f0.service.fs)).map(_0x481c7c => _0x510199.Location.create(_0x40b924.convertUriToLspUriString(_0x5b31f0.service.fs, _0x481c7c.uri), _0x481c7c.range));
        }
      }
      exports.SynchronousFeatures = _0x15cfd4;
    },
    93307: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceSyncServer = undefined;
      const _0x4dad9f = require(56911);
      const _0x205fa6 = require(55890);
      const _0xfdf95d = require(33970);
      const _0x41fa08 = require(53266);
      const _0x4cee41 = require(58147);
      const _0x1f1ebd = require(25075);
      const _0x605680 = __importStar(require(48281));
      const _0xc95488 = require(56412);
      const _0x443064 = require(30442);
      const _0x22c66b = require(71745);
      const _0x46e55d = require(71582);
      const _0x460dc4 = require(27113);
      const _0x319e15 = require(30741);
      const _0x4c3aaa = require(67299);
      const _0x48cd2d = require(24122);
      const _0x24a27f = require(22669);
      const _0x55173f = require(44889);
      const _0x37be1e = require(30048);
      const _0x26b3ac = require(69482);
      const _0x46433c = require(95349);
      const _0xe3447d = require(83244);
      const _0x5daf38 = require(89750);
      const _0x3c2c33 = require(21368);
      const _0x14748f = require(46154);
      const _0x2c9cbd = require(39545);
      const _0x23a60b = require(83329);
      const _0x5a0e69 = require(8398);
      const _0x176f9d = require(60722);
      const _0x19f2bb = require(33595);
      function _0x39a06e(..._0x4bceba) {
        return new class {
          get isCancellationRequested() {
            return _0x4bceba.some(_0x247beb => _0x247beb.isCancellationRequested);
          }
          get onCancellationRequested() {
            throw new Error('onCanccellationRequested is not supported');
          }
        }();
      }
      class _0x23d2d4 {
        constructor(_0x1fe1c3, _0x31d2c9) {
          this._connection = _0x31d2c9;
          this._initialized = false;
          this._disposed = false;
          this._notebookMap = new Map();
          this._documentsWithDiagnostics = new Set();
          this._languageService = new _0x19f2bb.LanguageService(_0x1fe1c3);
          this.console.info(this._serverOptions.productName + ' (sync) language server ' + (this._serverOptions.version && this._serverOptions.version + ' ') + 'starting');
          this._workspaceFactory = new _0x23a60b.PylanceWorkspaceFactory(this.console, false, this._createAnalyzerServiceForWorkspace.bind(this), this._isPythonPathImmutable.bind(this), this._onWorkspaceCreated.bind(this), this._onWorkspaceRemoved.bind(this), this.serviceProvider);
          this._setupConnection(_0x1fe1c3.supportedCommands ?? [], _0x1fe1c3.supportedCodeActions ?? []);
          this._progressReporter = new _0x443064.ProgressReportTracker(this._languageService.createProgressReporter(this._connection));
          this._languageService.initialize({
            getWorkspaceForFile: this.getWorkspaceForFileSync.bind(this),
            getWorkspaces: () => this._workspaceFactory.items(),
            getProgressReporter: this._getProgressReporter.bind(this),
            executeCommand: this._executeCommand.bind(this),
            isLongRunningCommand: this._isLongRunningCommand.bind(this),
            isRefactoringCommand: this._isRefactoringCommand.bind(this),
            applyWorkspaceEdit: this._connection.workspace.applyEditSync.bind(this._connection.workspace)
          });
          this._analysisTracker = new _0x14748f.AnalysisTracker();
          this._controller = new _0x4c3aaa.SyncCommandController(this, this._intelliCode, this._telemetry, !!_0x1fe1c3.hasVSCodeExtension);
          this._connection.listen();
        }
        get console() {
          return this.serviceProvider.console();
        }
        get window() {
          return this._connection.window;
        }
        get client() {
          return this._state.client;
        }
        get supportAdvancedEdits() {
          return this.client.hasDocumentChangeCapability && this.client.hasDocumentAnnotationCapability;
        }
        get serviceProvider() {
          return this._serverOptions.serviceProvider;
        }
        createBackgroundAnalysis(_0x51ed66) {
          var _0x5c19f7;
          if ((_0x5c19f7 = this.serviceProvider.tryGet(_0x37be1e.PylanceServiceKeys.backgroundAnalysisFactory)) === null || _0x5c19f7 === undefined) {
            return undefined;
          } else {
            return _0x5c19f7.createBackgroundAnalysis(_0x51ed66);
          }
        }
        reanalyze() {
          this._languageService.reanalyze();
        }
        restart() {
          this._languageService.restart();
        }
        async getWorkspaces() {
          return this.getWorkspacesSync();
        }
        getWorkspacesSync() {
          return [...this._workspaceFactory.items()];
        }
        async getWorkspaceForFile(_0x4c76ca, _0x28b7ea) {
          return this.getWorkspaceForFileSync(_0x4c76ca, _0x28b7ea);
        }
        getWorkspaceForFileSync(_0x4fafdd, _0x14be12) {
          if (_0x55173f.NotebookUriMapper.isNotebookFile(_0x4fafdd)) {
            _0x605680.fail(`Notebook file should not be passed to getWorkspaceForFile: ${_0x4fafdd}`);
          }
          if (_0x14be12 === undefined && _0x55173f.NotebookUriMapper.isNotebookCell(_0x4fafdd)) {
            const _0x5c16d0 = this._uriMapper.getNotebookUriFromCell(_0x4fafdd);
            const _0x1d738f = this.getNotebookDataSync(_0x5c16d0);
            _0x14be12 = _0x1d738f?.pythonPath;
          }
          return this._workspaceFactory.getWorkspaceForFileSync(_0x4fafdd, _0x14be12);
        }
        async getSettings(_0x4eb7d7) {
          return this.getSettingsSync(_0x4eb7d7);
        }
        getSettingsSync(_0x326914) {
          const _0x34ced0 = new _0x46e55d.Duration();
          const _0x2bab24 = this._getConfiguration(_0x326914.rootUri, _0x5a0e69.Settings.pythonSectionName);
          const _0x225546 = this._getConfiguration(_0x326914.rootUri, _0x5a0e69.Settings.pythonAnalysisSectionName);
          const _0x4abfbc = this._getConfiguration(_0x326914.rootUri, _0x5a0e69.Settings.jupyterSectionName);
          const _0x142f8a = this._getConfiguration(_0x326914.rootUri, _0x5a0e69.Settings.editorSectionName);
          const _0x10c685 = this._languageService.handleSettings(this._workspaceFactory.getNonDefaultWorkspaces(_0x319e15.WellKnownWorkspaceKinds.Regular), _0x326914, _0x2bab24, _0x225546, _0x4abfbc, _0x142f8a);
          this._state.hostKind = this._getHostKind();
          this.console.log(`Duration of getSettings: ${_0x34ced0.getDurationInMilliseconds}`);
          return _0x10c685;
        }
        test_getNotebookData(_0x41a5be) {
          return Promise.resolve(this._notebookMap.get(_0x41a5be.key));
        }
        test_onDidChangeWatchedFiles(_0x5724bc) {
          this._languageService.handleDidChangeWatchedFiles(_0x5724bc);
        }
        test_convertDiagnostics(_0x344c62) {
          return this._languageService.convertDiagnostics(this.serviceProvider.fs(), _0x344c62);
        }
        dispose() {
          var _0x34eba0;
          this._disposed = true;
          this._workspaceFactory.clear();
          if ((_0x34eba0 = this._workspaceFoldersChangedDisposable) === null || _0x34eba0 === undefined) {
            undefined;
          } else {
            _0x34eba0.dispose();
          }
          this._languageService.dispose();
        }
        getNotebookDataSync(_0x3c93ee) {
          return this._notebookMap.get(_0x3c93ee.key);
        }
        get _state() {
          return this._languageService.state;
        }
        get _serverOptions() {
          return this._state.serverOptions;
        }
        get _caseSensitiveDetector() {
          return this.serviceProvider.get(_0x22c66b.ServiceKeys.caseSensitivityDetector);
        }
        get _uriMapper() {
          return this.serviceProvider.uriMapper();
        }
        get _telemetry() {
          return this.serviceProvider.get(_0x37be1e.PylanceServiceKeys.telemetry);
        }
        get _intelliCode() {
          return this.serviceProvider.tryGet(_0x37be1e.PylanceServiceKeys.intelliCode);
        }
        _getContainingWorkspacesForFileSync(_0x38e8ea) {
          return this._workspaceFactory.getContainingWorkspacesForFileSync(_0x38e8ea);
        }
        _updateSettingsForAllWorkspaces() {
          this._workspaceFactory.items().forEach(_0x2860cb => {
            this._updateSettingsForWorkspace(_0x2860cb, _0x2860cb.isInitialized);
          });
          this._languageService.registerDynamicFeatures();
          if (this._state.client.hasInlayHintRefreshCapability) {
            this._connection.sendRequest(_0x4dad9f.InlayHintRefreshRequest.method).ignoreErrors();
          }
        }
        _createAnalyzerService(_0x451344, _0x7371b2, _0x6ffed3) {
          this.console.info(`Starting service instance "${_0x451344}"`);
          const _0x3afc8b = _0xfdf95d.getNextServiceId(_0x451344);
          const _0x57b42f = _0x7371b2 ? _0x7371b2.backgroundAnalysis : this.createBackgroundAnalysis(_0x3afc8b);
          const _0x6fadd6 = new _0x2c9cbd.PylanceAnalyzerService(_0x451344, this.serviceProvider, {
            console: this.console,
            hostFactory: this._createHost.bind(this),
            importResolverFactory: this._createImportResolver.bind(this),
            backgroundAnalysis: _0x57b42f,
            maxAnalysisTime: this._serverOptions.maxAnalysisTimeInForeground,
            backgroundAnalysisProgramFactory: this._createBackgroundAnalysisProgram.bind(this),
            cancellationProvider: this._serverOptions.cancellationProvider,
            libraryReanalysisTimeProvider: _0x6ffed3,
            serviceId: _0x3afc8b,
            fileSystem: _0x7371b2?.fs ?? this.serviceProvider.fs()
          }, this._connection);
          return _0x6fadd6;
        }
        _createAnalyzerServiceForWorkspace(_0x410bf4, _0x49b2ce, _0x4cc739, _0x460ffb) {
          const _0x3d5254 = _0x24a27f.createReanalysisTimeProviderFromWorkspace(this._workspaceFactory, _0x4cc739);
          return this._createAnalyzerService(_0x410bf4, _0x460ffb, _0x3d5254);
        }
        _updateSettingsForWorkspace(_0x5646cc, _0x27817e, _0x2e2f27) {
          var _0x2e0489;
          try {
            if (_0x27817e === null || _0x27817e === undefined) {
              undefined;
            } else {
              _0x27817e.markCalled();
            }
            _0x2e2f27 = _0x2e2f27 ?? this.getSettingsSync(_0x5646cc);
            _0x5a0e69.addPylanceProgramServices(_0x5646cc, _0x2e2f27);
            _0x5646cc.pythonEnvironmentName = _0x2e2f27.pythonEnvironmentName;
            this.console.level = _0x2e2f27.logLevel ?? _0x1f1ebd.LogLevel.Info;
            _0x2e2f27.pythonPath = this._workspaceFactory.applyPythonPath(_0x5646cc, _0x2e2f27.pythonPath ? _0x2e2f27.pythonPath : undefined);
            this._languageService.updateDynamicFeatures(_0x2e2f27);
            this._languageService.updateOptionsAndRestartService(_0x5646cc, _0x2e2f27);
          } finally {
            if (_0x27817e === null || _0x27817e === undefined) {
              undefined;
            } else {
              _0x27817e.resolve();
            }
          }
          _0x5646cc.pythonEnvironmentName = this._computeWorkspaceEnvironmentName(_0x5646cc, _0x2e2f27.pythonEnvironmentName);
          this._languageService.handleUpdateSettingsForWorkspace(_0x5646cc, _0x2e2f27, this._workspaceFactory);
          if (_0x5646cc.disableLanguageServices) {
            return;
          }
          _0x48cd2d.getBackgroundAnalysisProgram(_0x5646cc).startIndexing(_0x5646cc.indexOptions ?? _0x48cd2d.getEmptyIndexOptions());
          if (this._serverOptions.testing) {
            _0x46433c.CustomLSP.sendNotification(this._connection, _0x46433c.CustomLSP.Notifications.TestSignal, {
              uri: ((_0x2e0489 = _0x5646cc.rootUri) === null || _0x2e0489 === undefined ? undefined : _0x2e0489.toString()) ?? '',
              kind: _0x46433c.CustomLSP.TestSignalKinds.Initialization
            });
          }
        }
        _isPythonPathImmutable(_0x39e688) {
          return _0x55173f.NotebookUriMapper.isNotebookCell(_0x39e688);
        }
        _getConfiguration(_0x5e82df, _0x59e91f) {
          if (this.client.hasConfigurationCapability) {
            const _0x5777da = {};
            if (_0x5e82df !== undefined) {
              _0x5777da.scopeUri = _0x5e82df.toString();
            }
            if (_0x59e91f !== undefined) {
              _0x5777da.section = _0x59e91f;
            }
            return this._connection.workspace.getConfigurationSync(_0x5777da);
          }
          if (this._defaultClientConfig) {
            return _0x4cee41.getNestedProperty(this._defaultClientConfig, _0x59e91f);
          }
          return undefined;
        }
        _setupConnection(_0x259912, _0x50412c) {
          this._languageService.addDisposables(this._connection.onInitialize(_0x17e4c1 => this._initialize(_0x17e4c1, _0x259912, _0x50412c)), this._connection.onInitialized(() => this._onInitialized()), this._connection.onDidChangeConfiguration(_0x3430d2 => this._onDidChangeConfiguration(_0x3430d2)), this._connection.onDidOpenTextDocument(_0x257a6a => this._onDidOpenTextDocument(_0x257a6a)), this._connection.onDidChangeTextDocument(_0xa3404c => this._onDidChangeTextDocument(_0xa3404c)), this._connection.onDidCloseTextDocument(_0x35e2fd => this._onDidCloseTextDocument(_0x35e2fd)), this._connection.onShutdown(_0x5c021c => this._onShutdown(_0x5c021c)), this._connection.workspace.onWillRenameFiles((_0x2160e7, _0x3d80f1) => _0xe3447d.SyncRenameFileProvider.renameFiles(this, this._telemetry, _0x2160e7, _0x3d80f1)), this._connection.notebooks.synchronization.onDidOpenNotebookDocument(_0x5d92ee => this._onDidOpenNotebookDocument(_0x5d92ee)), this._connection.notebooks.synchronization.onDidChangeNotebookDocument(_0x871f72 => this._onDidChangeNotebookDocument(_0x871f72)), this._connection.notebooks.synchronization.onDidCloseNotebookDocument(_0x5904c5 => this._onDidCloseNotebookDocument(_0x5904c5)));
          this._languageService.registerHandlers(this._connection);
        }
        _initialize(_0x434feb, _0xf72655, _0x1f33af) {
          return this._languageService.handleInitialize(_0x434feb, this._connection, this._workspaceFactory, _0xf72655, _0x1f33af);
        }
        _onInitialized() {
          this._initialized = true;
          if (!this.client.hasWorkspaceFoldersCapability) {
            this._updateSettingsForAllWorkspaces();
            return;
          }
          this._workspaceFoldersChangedDisposable = this._connection.workspace.onDidChangeWorkspaceFolders(_0x4edff2 => {
            this._workspaceFactory.handleWorkspaceFoldersChanged(_0x4edff2, this._connection.workspace.getWorkspaceFoldersSync());
            this._workspaceFactory.items().forEach(_0x1405d2 => {
              this._updateSettingsForWorkspace(_0x1405d2, _0x1405d2.isInitialized);
            });
            this._languageService.registerDynamicFeatures();
          });
          this._languageService.registerDynamicFeatures();
        }
        _onDidChangeConfiguration(_0x2075a4) {
          this.console.log('Received updated settings');
          if (_0x2075a4?.settings) {
            this._defaultClientConfig = _0x2075a4?.settings;
          }
          this._updateSettingsForAllWorkspaces();
        }
        _onDidOpenTextDocument(_0x3b87a5, _0x3354f1) {
          var _0x48059c;
          const _0x24d1eb = this._languageService.convertLspUriStringToUri(_0x3b87a5.textDocument.uri);
          const _0x1603e4 = this._getContainingWorkspacesForFileSync(_0x24d1eb);
          this._languageService.handleDidOpenTextDocument(_0x1603e4, _0x3b87a5, _0x3354f1);
          if (this._serverOptions.testing && !this._disposed) {
            const _0x32f814 = this.getWorkspaceForFileSync(_0x24d1eb);
            _0x46433c.CustomLSP.sendNotification(this._connection, _0x46433c.CustomLSP.Notifications.TestSignal, {
              uri: ((_0x48059c = _0x32f814.rootUri) === null || _0x48059c === undefined ? undefined : _0x48059c.toString()) ?? '',
              kind: _0x46433c.CustomLSP.TestSignalKinds.DidOpenDocument
            });
          }
        }
        _onDidChangeTextDocument(_0x4d0ec4, _0x45bf94) {
          var _0x21951f;
          const _0x1829f5 = this._languageService.convertLspUriStringToUri(_0x4d0ec4.textDocument.uri);
          const _0x5c8afc = this._getContainingWorkspacesForFileSync(_0x1829f5);
          this._languageService.handleDidChangeTextDocument(_0x5c8afc, _0x4d0ec4, _0x45bf94);
          if (this._serverOptions.testing && !this._disposed) {
            const _0xdaac02 = this.getWorkspaceForFileSync(_0x1829f5);
            _0x46433c.CustomLSP.sendNotification(this._connection, _0x46433c.CustomLSP.Notifications.TestSignal, {
              uri: ((_0x21951f = _0xdaac02.rootUri) === null || _0x21951f === undefined ? undefined : _0x21951f.toString()) ?? '',
              kind: _0x46433c.CustomLSP.TestSignalKinds.DidChangeDocument
            });
          }
        }
        _onDidCloseTextDocument(_0x3f3f89) {
          const _0x587327 = this._languageService.convertLspUriStringToUri(_0x3f3f89.textDocument.uri);
          const _0x38e919 = this._getContainingWorkspacesForFileSync(_0x587327);
          this._languageService.handleDidCloseTextDocument(_0x38e919, _0x3f3f89);
        }
        _onShutdown(_0x8dbd34) {
          this._workspaceFactory.clear();
          this._languageService.handleShutdown(_0x8dbd34);
          return Promise.resolve();
        }
        _createHost() {
          return this._languageService.createHost();
        }
        _createBackgroundAnalysisProgram(_0x458e10, _0x401ede, _0x12130f, _0x30843f, _0x4d499a, _0x31e781) {
          return this._languageService.createBackgroundAnalysisProgram(_0x458e10, _0x401ede, _0x12130f, _0x30843f, _0x4d499a, _0x31e781);
        }
        _isLongRunningCommand(_0x1a3fe3) {
          return this._controller.isLongRunningCommand(_0x1a3fe3);
        }
        _isRefactoringCommand(_0x286f20) {
          return this._controller.isRefactoringCommand(_0x286f20);
        }
        _executeCommand(_0x1b3b97, _0xdedfb8) {
          return this._controller.execute(_0x1b3b97, _0xdedfb8);
        }
        _createImportResolver(_0x3ac8db, _0x11ddcf, _0x3ee885) {
          return _0x5daf38.createPylanceImportResolver(_0x3ac8db, _0x11ddcf, _0x3ee885);
        }
        _onWorkspaceAnalysisCompletedHandler(_0xfef9a9, _0x16c7e9) {
          if (this._disposed) {
            return;
          }
          this._filterResultsToCurrentWorkspace(_0xfef9a9, _0x16c7e9);
          this._languageService.handleAnalysisCompletedHandler(_0xfef9a9.service.fs, _0x16c7e9, this._progressReporter, this._sendDiagnostics.bind(this));
          if (_0x16c7e9.error) {
            _0x26b3ac.sendExceptionTelemetry(this._telemetry, _0x26b3ac.TelemetryEventName.ANALYSIS_EXCEPTION, _0x16c7e9.error);
          }
          if (_0x16c7e9.diagnostics.length === 0 && _0x16c7e9.requiringAnalysisCount.files + _0x16c7e9.requiringAnalysisCount.cells > 0 && _0x16c7e9.elapsedTime === 0) {
            return;
          }
          if (_0x16c7e9.requiringAnalysisCount.files + _0x16c7e9.requiringAnalysisCount.cells === 0 && _0x16c7e9.elapsedTime > 0) {
            if (this._state.client.hasSemanticTokensRefreshCapability) {
              this._connection.sendRequest(_0x4dad9f.SemanticTokensRefreshRequest.method).ignoreErrors();
            }
          }
          this._sendTelemetry(_0x16c7e9);
        }
        _sendDiagnostics(_0x1ff614) {
          for (const _0x54699f of _0x1ff614) {
            if (_0x54699f.diagnostics.length === 0) {
              this._documentsWithDiagnostics.delete(_0x54699f.uri);
            } else {
              this._documentsWithDiagnostics.add(_0x54699f.uri);
            }
            this._connection.sendDiagnostics(_0x54699f);
            this._uriMapper.markUsing(_0x460dc4.Uri.parse(_0x54699f.uri, this.serviceProvider), _0x54699f.diagnostics.length > 0);
          }
        }
        _onWorkspaceCreated(_0x4690f6) {
          if (this._initialized) {
            this._updateSettingsForWorkspace(_0x4690f6, _0x4690f6.isInitialized);
          }
          _0x4690f6.completeFunctionParens = false;
          _0x4690f6.enableExtractCodeAction = false;
          _0x4690f6.service.setCompletionCallback(_0x27bb02 => this._onWorkspaceAnalysisCompletedHandler(_0x4690f6, _0x27bb02));
        }
        _onWorkspaceRemoved(_0x53d701) {
          const _0x406f37 = [...this._documentsWithDiagnostics];
          const _0x407af3 = this._workspaceFactory.items().filter(_0x33525b => _0x33525b !== _0x53d701);
          for (const _0x13b63e of _0x406f37) {
            const _0x4382cc = this._languageService.convertLspUriStringToUri(_0x13b63e);
            if (_0x53d701.service.isTracked(_0x4382cc)) {
              if (_0x407af3.some(_0x1da545 => _0x1da545.service.isTracked(_0x4382cc))) {
                continue;
              }
              this._sendDiagnostics([{
                uri: _0x13b63e,
                diagnostics: []
              }]);
            }
          }
        }
        _filterResultsToCurrentWorkspace(_0x15c9f2, _0x382c67) {
          const _0x2a135a = this.getWorkspacesSync();
          if (_0x2a135a.length <= 1) {
            return;
          }
          const _0xce90ba = _0x382c67.diagnostics.map(_0x166bbe => {
            const _0x13648c = this.getWorkspaceForFileSync(_0x166bbe.fileUri);
            if (_0x13648c === _0x15c9f2) {
              return _0x166bbe;
            }
            return undefined;
          });
          _0x382c67.diagnostics = _0xce90ba.filter(_0x2e741a => _0x2e741a !== undefined);
        }
        _computeWorkspaceEnvironmentName(_0x132caa, _0x535ca9) {
          if (_0x132caa.pythonPathKind === _0x3c2c33.WorkspacePythonPathKind.Immutable) {
            const _0x1724a1 = [...this._notebookMap.values()].find(_0x541164 => _0x541164.pythonPath === _0x132caa.pythonPath);
            if (_0x1724a1) {
              return _0x1724a1.pythonEnvironmentName;
            }
          }
          return _0x535ca9;
        }
        _sendTelemetry(_0x4dee5e) {
          const _0x21e700 = this._analysisTracker.updateTelemetry(_0x4dee5e);
          if (!_0x21e700) {
            return;
          }
          this._telemetry.sendTelemetry(_0x21e700);
        }
        _getHostKind() {
          if (!this._state.client.hasTrustedWorkspaceSupport) {
            return 0;
          }
          const _0x1eb301 = _0x46433c.CustomLSP.sendRequestSync(this._connection.syncConnection, _0x46433c.CustomLSP.SyncRequests.IsTrustedWorkspace, undefined);
          if (_0x1eb301) {
            return 0;
          } else {
            return 1;
          }
        }
        _getProgressReporter(_0x31adbe, _0x4c5e69, _0x377e69) {
          const _0x2638a7 = new _0x4dad9f.CancellationTokenSource();
          if (!_0xc95488.isNullProgressReporter(_0x31adbe)) {
            return {
              reporter: _0x31adbe,
              source: {
                token: _0x39a06e(_0x377e69, _0x2638a7.token),
                cancel: _0x2638a7.cancel.bind(_0x2638a7),
                dispose: _0x2638a7.dispose.bind(_0x2638a7)
              }
            };
          }
          const _0x2de2d1 = this._connection.window.createWorkDoneProgressSync();
          _0x2de2d1.begin(_0x4c5e69, undefined, undefined, true);
          return {
            reporter: _0x2de2d1,
            source: {
              token: _0x39a06e(_0x377e69, _0x2de2d1.token, _0x2638a7.token),
              cancel: _0x2638a7.cancel.bind(_0x2638a7),
              dispose: _0x2638a7.dispose.bind(_0x2638a7)
            }
          };
        }
        _getPythonInformation(_0x39d707, _0x297ce5) {
          const _0x130fc9 = this._getConfiguration(_0x39d707, _0x5a0e69.Settings.pythonSectionName);
          const _0x1eece1 = this._workspaceFactory.getNonDefaultWorkspaces(_0x319e15.WellKnownWorkspaceKinds.Regular);
          return _0x5a0e69.getPythonInformation(_0x297ce5, _0x130fc9, this._caseSensitiveDetector, _0x1eece1);
        }
        _getNotebookPrefixCellContents(_0x2c7c0a) {
          const _0x561310 = _0x2c7c0a ? this.getSettingsSync(_0x2c7c0a) : undefined;
          return _0x5a0e69.getPrefixCellContents(_0x561310);
        }
        _onDidOpenNotebookDocument(_0x500152) {
          const _0x193478 = this._uriMapper.parseNotebookOpen(_0x500152);
          const _0x31ecb6 = this._workspaceFactory.getContainingWorkspace(_0x193478);
          const _0x5739f1 = this._getPythonInformation(_0x193478, _0x31ecb6?.rootUri);
          const _0x27fac6 = this._getNotebookPrefixCellContents(_0x31ecb6);
          const _0x545905 = _0x5a0e69.createNotebookData(_0x193478, _0x500152.cellTextDocuments, this._uriMapper, this._caseSensitiveDetector, _0x27fac6, _0x5739f1?.pythonPath || _0x460dc4.Uri.empty(), _0x5739f1?.pythonEnvironmentName || '');
          this._notebookMap.set(_0x193478.key, _0x545905);
          const _0x5ab604 = this.getWorkspaceForFileSync(_0x545905.prefixCellUri, _0x545905.pythonPath);
          _0x5a0e69.openNotebookCellChain(_0x500152.cellTextDocuments, _0x545905, this._uriMapper, _0x5ab604);
          _0x5a0e69.verifyCellChainIsLinear(_0x545905, _0x5ab604);
          if (this._serverOptions.testing) {
            _0x46433c.CustomLSP.sendNotification(this._connection, _0x46433c.CustomLSP.Notifications.TestSignal, {
              uri: _0x500152.notebookDocument.uri,
              kind: _0x46433c.CustomLSP.TestSignalKinds.DidOpenNotebookDocument
            });
          }
        }
        _onDidChangeNotebookDocument(_0x1cda39) {
          var _0x36e5d6;
          var _0x22b162;
          var _0x2ce533;
          _0x176f9d.recordUserInteractionTime(this._workspaceFactory.items());
          const _0x228075 = this._uriMapper.parseNotebookChange(_0x1cda39);
          const _0x1c6a4d = this._notebookMap.get(_0x228075.key);
          if (_0x1c6a4d === undefined) {
            _0x605680.fail(`Notebook was never opened but we got a change event for it (${_0x228075})`);
          }
          let _0x47d020 = this.getWorkspaceForFileSync(_0x1c6a4d.prefixCellUri, _0x1c6a4d.pythonPath);
          if (_0x5a0e69.isNotebookKernelChange(_0x1cda39)) {
            const _0x3128fa = this._getPythonInformation(_0x228075, _0x47d020.rootUri);
            _0x1c6a4d.pythonPath = _0x3128fa?.pythonPath || _0x1c6a4d.pythonPath;
            _0x1c6a4d.pythonEnvironmentName = _0x3128fa?.pythonEnvironmentName || _0x1c6a4d.pythonEnvironmentName;
            const _0x5da37f = this.getWorkspaceForFileSync(_0x1c6a4d.prefixCellUri, _0x1c6a4d.pythonPath);
            if (!((_0x36e5d6 = _0x5da37f.pythonPath) === null || _0x36e5d6 === undefined ? undefined : _0x36e5d6.equals(_0x47d020.pythonPath)) || !((_0x22b162 = _0x5da37f.rootUri) === null || _0x22b162 === undefined ? undefined : _0x22b162.equals(_0x47d020.rootUri))) {
              if (_0x1c6a4d) {
                const _0x4f2841 = [_0x1c6a4d.prefixCellUri, ..._0x1c6a4d.mappedCellUris];
                this._workspaceFactory.moveFiles(_0x4f2841, _0x47d020, _0x5da37f);
              }
              _0x47d020 = _0x5da37f;
            }
            _0x47d020.pythonEnvironmentName = _0x3128fa?.pythonEnvironmentName;
          }
          if (_0x1cda39.change.cells?.structure) {
            const _0x33a100 = _0x1cda39.change.cells.structure;
            _0x5a0e69.updateNotebookStructure(_0x33a100, _0x1c6a4d, this._uriMapper, _0x47d020);
          }
          if ((_0x2ce533 = _0x1cda39.change.cells?.textContent) === null || _0x2ce533 === undefined) {
            undefined;
          } else {
            _0x2ce533.forEach(_0x4e833a => {
              var _0x783941;
              const _0x37881d = this._uriMapper.getMappedCellUri(_0x460dc4.Uri.parse(_0x4e833a.document.uri, this.serviceProvider));
              const _0x3d0160 = ((_0x783941 = _0x47d020.service.getSourceFile(_0x37881d)) === null || _0x783941 === undefined ? undefined : _0x783941.getFileContent()) || '';
              const _0x5825cb = _0x205fa6.TextDocument.create(_0x4e833a.document.uri, 'python', _0x4e833a.document.version - 1, _0x3d0160);
              _0x205fa6.TextDocument.update(_0x5825cb, _0x4e833a.changes, _0x4e833a.document.version);
              _0x47d020.service.updateOpenFileContents(_0x37881d, _0x4e833a.document.version, _0x5825cb.getText(), _0x41fa08.IPythonMode.CellDocs);
            });
          }
          if (this._serverOptions.testing) {
            _0x46433c.CustomLSP.sendNotification(this._connection, _0x46433c.CustomLSP.Notifications.TestSignal, {
              uri: _0x1cda39.notebookDocument.uri,
              kind: _0x46433c.CustomLSP.TestSignalKinds.DidChangeNotebookDocument
            });
          }
        }
        _onDidCloseNotebookDocument(_0x2f5f79) {
          const _0x24a37f = this._uriMapper.parseNotebookClose(_0x2f5f79);
          const _0x4ac2ec = this._notebookMap.get(_0x24a37f.key);
          if (_0x4ac2ec === undefined) {
            _0x605680.fail(`Notebook was never opened but we got a change event for it (${_0x24a37f})`);
          }
          const _0x474b7e = this.getWorkspaceForFileSync(_0x4ac2ec.prefixCellUri, _0x4ac2ec.pythonPath);
          const _0x1f57a7 = [_0x4ac2ec.prefixCellUri, ..._0x4ac2ec.mappedCellUris];
          _0x1f57a7.forEach(_0x1e6952 => {
            _0x474b7e.service.setFileClosed(_0x1e6952, false);
          });
          this._workspaceFactory.removeUnused(_0x474b7e);
          this._notebookMap.delete(_0x24a37f.key);
        }
      }
      exports.PylanceSyncServer = _0x23d2d4;
    },
    46154: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AnalysisTracker = undefined;
      const _0x1b3e30 = require(71582);
      const _0x14c29e = require(69482);
      class _0x5ec3f1 {
        constructor() {
          this._elapsedSum = 0;
          this._peakRss = 0;
        }
        updateTelemetry(_0x5a17ba) {
          const _0x562030 = _0x5a17ba.requiringAnalysisCount.files + _0x5a17ba.requiringAnalysisCount.cells === 0 && _0x5a17ba.elapsedTime !== 0 || _0x5a17ba.fatalErrorOccurred;
          const _0x237162 = !this._telemetryLimiter;
          this._elapsedSum += _0x5a17ba.elapsedTime;
          if (_0x237162 && _0x562030) {
            this._telemetryLimiter = new _0x1b3e30.Duration();
          } else {
            if (this._telemetryLimiter && this._telemetryLimiter.getDurationInSeconds() < _0x14c29e.TelemetryWaitTimeSeconds) {
              if (_0x562030) {
                this._elapsedSum = 0;
                this._peakRss = 0;
                return undefined;
              }
              this._getMemoryUsage();
              return undefined;
            }
          }
          const _0x4fa9d6 = this._getMemoryUsage();
          if (!_0x562030) {
            return undefined;
          }
          const _0x3e94d3 = this._elapsedSum * 1000;
          this._elapsedSum = 0;
          this._telemetryLimiter = new _0x1b3e30.Duration();
          const _0x27cfca = new _0x14c29e.TelemetryEvent(_0x14c29e.TelemetryEventName.ANALYSIS_COMPLETE);
          if (_0x4fa9d6) {
            const _0x4352e3 = this._peakRss;
            this._peakRss = 0;
            _0x27cfca.Measurements.peakRssMB = _0x4352e3 / 1024 / 1024;
            _0x27cfca.Measurements.rssMB = _0x4fa9d6.rss / 1024 / 1024;
            _0x27cfca.Measurements.heapTotalMB = _0x4fa9d6.heapTotal / 1024 / 1024;
            _0x27cfca.Measurements.heapUsedMB = _0x4fa9d6.heapUsed / 1024 / 1024;
            _0x27cfca.Measurements.externalMB = _0x4fa9d6.external / 1024 / 1024;
          }
          _0x27cfca.Measurements.elapsedMs = _0x3e94d3;
          _0x27cfca.Measurements.numFilesAnalyzed = -1;
          _0x27cfca.Measurements.numFilesInProgram = _0x5a17ba.filesInProgram;
          _0x27cfca.Measurements.fatalErrorOccurred = _0x5a17ba.fatalErrorOccurred ? 1 : 0;
          _0x27cfca.Measurements.isFirstRun = _0x237162 ? 1 : 0;
          _0x27cfca.Properties.DiagnosticsSeen = _0x5a17ba.diagnosticsSeen || '';
          return _0x27cfca;
        }
        _getMemoryUsage() {
          const _0x49ea63 = process.memoryUsage();
          if (_0x49ea63.rss === 0) {
            return undefined;
          }
          this._peakRss = Math.max(_0x49ea63.rss, this._peakRss);
          return _0x49ea63;
        }
      }
      exports.AnalysisTracker = _0x5ec3f1;
    },
    86615: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AutoImporter = undefined;
      exports.buildModuleSymbolsMap = _0x369d12;
      exports.getAutoImports = _0x5ac7f5;
      exports.createAutoImporter = _0x2c9f68;
      exports.getMatchingAutoImports = _0x4358f3;
      const _0x525590 = require(56911);
      const _0x5d662e = require(26687);
      const _0x40e8ed = require(47610);
      const _0x44e935 = require(41557);
      const _0xbed11c = require(95952);
      const _0x224592 = require(3433);
      const _0x5e5df0 = __importStar(require(12097));
      const _0x2586d1 = require(91426);
      const _0x32d3c8 = require(58147);
      const _0x441808 = require(54010);
      const _0x404eef = require(56814);
      const _0xa36903 = require(89740);
      const _0x465804 = require(71582);
      const _0x426183 = require(16835);
      const _0xfe2d7 = require(5737);
      const _0x9c083b = require(76135);
      const _0x1fbcfa = require(54700);
      const _0x1d6753 = require(47351);
      const _0x2df83e = require(74899);
      function _0x369d12(_0x25de9d, _0x11b6b6, _0x280af3, _0x183106, _0x10c713, _0x1b8e05, _0x1780c5) {
        const _0xd25004 = _0x25de9d.getSourceFileInfo(_0x183106);
        const _0x3dfa69 = _0x280af3 === null || _0x280af3 === undefined ? undefined : _0x280af3.getLibraryIndices(_0x11b6b6.root);
        const _0x14189c = _0x159d88 => {
          if (!_0x3dfa69) {
            return true;
          }
          if (!_0x25de9d.configOptions.indexing) {
            return _0x3dfa69.get(_0x159d88.sourceFile.getUri()) === undefined;
          }
          return _0x224592.isUserCode(_0x159d88);
        };
        const _0x1efddd = _0x25de9d.getSourceFileInfoList().filter(_0x3e10b3 => _0x3e10b3 !== _0xd25004 && _0x14189c(_0x3e10b3));
        const _0x47d1c7 = new Map();
        _0x1efddd.forEach(_0x55adef => {
          if (_0x55adef.shadows.length > 0) {
            return;
          }
          if (_0x370a48(_0x280af3, _0x55adef, _0x1b8e05, _0x47d1c7, _0x1780c5)) {
            return;
          }
          const _0x5c580c = _0x55adef.sourceFile.getModuleSymbolTable();
          if (!_0x5c580c) {
            return;
          }
          _0x4be1de(_0x25de9d, _0x55adef, _0x10c713, _0x1b8e05, _0x47d1c7, _0x1780c5);
        });
        return _0x47d1c7;
      }
      function _0x4be1de(_0x463408, _0x1c2c41, _0x5ddf95, _0x394be9, _0x341a7c, _0x5c325f) {
        _0x2586d1.throwIfCancellationRequested(_0x5c325f);
        const _0x983955 = _0x1c2c41.sourceFile.getUri();
        const _0x26d6d0 = _0x441808.stripFileExtension(_0x983955.fileName);
        const _0xf91b24 = _0x5e5df0.isPrivateOrProtectedName(_0x26d6d0);
        const _0x4ee4b3 = _0x224592.isUserCode(_0x1c2c41);
        if (_0xf91b24 && !_0x4ee4b3) {
          return;
        }
        const _0x254f36 = _0x463408.getParseResults(_0x1c2c41.sourceFile.getUri());
        if (!_0x254f36) {
          return;
        }
        const _0x3845bd = _0x2df83e.SymbolIndexer.indexSymbols(_0x254f36, {
          indexingForAutoImportMode: true,
          includeAliasesFromUserFiles: _0x5ddf95,
          includeAllSymbols: true
        }, _0x5c325f);
        _0x341a7c.set(_0x983955.key, _0xdb97ce({
          uri: _0x983955,
          privateOrProtected: _0xf91b24,
          symbols: _0x3845bd
        }, !_0x4ee4b3, _0x394be9));
      }
      function _0x370a48(_0x5be41b, _0x37ebb5, _0x1e7974, _0x4d4310, _0x448e71) {
        _0x2586d1.throwIfCancellationRequested(_0x448e71);
        if (!_0x5be41b) {
          return false;
        }
        const _0x391ac2 = _0x37ebb5.sourceFile.getUri();
        const _0x578d62 = _0x5be41b.getSourceIndex(_0x391ac2);
        if (!_0x578d62) {
          return false;
        }
        const _0x2e6806 = _0x224592.isUserCode(_0x37ebb5);
        if (_0x578d62.privateOrProtected && !_0x2e6806) {
          return true;
        }
        _0x4d4310.set(_0x391ac2.key, _0xdb97ce(_0x578d62, !_0x2e6806, _0x1e7974));
        return true;
      }
      function _0x5ac7f5(_0x4d649b, _0x1cec76, _0x101422, _0x2892cb, _0x18da4a, _0x3c0c08, _0x13914c) {
        const _0x1b1746 = _0x4d649b.getParseResults(_0x1cec76);
        if (!_0x1b1746) {
          return [];
        }
        const _0x41e1ef = _0x404eef.convertRangeToTextRange(_0x101422, _0x1b1746.tokenizerOutput.lines);
        if (!_0x41e1ef) {
          return [];
        }
        const _0x4073b3 = _0x44e935.findNodeByOffset(_0x1b1746.parserOutput.parseTree, _0x41e1ef.start);
        if (!_0x4073b3) {
          return [];
        }
        const _0x1f1843 = {
          ..._0x3c0c08,
          patternMatcher: _0x3c0c08.patternMatcher ?? ((_0x2805cc, _0x3b82a7) => _0xa36903.computeCompletionSimilarity(_0x2805cc, _0x3b82a7) > _0x2892cb)
        };
        const _0x5a7ce7 = _0x2c9f68(_0x4d649b, _0x1cec76, _0x101422.start, _0x1f1843, _0x13914c);
        if (!_0x5a7ce7) {
          return [];
        }
        const _0x1c9e32 = _0x1f1843.nameToSearch ?? _0x1b1746.text.substr(_0x41e1ef.start, _0x41e1ef.length);
        return _0x4358f3(_0x5a7ce7, _0x4073b3, _0x1c9e32, _0x2892cb, _0x18da4a, _0x13914c);
      }
      function _0x2c9f68(_0x17f550, _0x106148, _0x4451e6, _0x40c413, _0x50d7bc) {
        const _0x5746fe = _0x17f550.getParseResults(_0x106148);
        if (!_0x5746fe) {
          return undefined;
        }
        const _0x24d8f8 = _0x17f550.configOptions.findExecEnvironment(_0x106148);
        const _0x4a4c5d = _0x369d12(_0x17f550, _0x24d8f8, _0x40c413.indices, _0x106148, _0x40c413.includeAliasesFromUserFiles ?? false, _0x40c413.allowDuplicatedAliasesFromUserFiles ?? false, _0x50d7bc);
        return new _0x465706(_0x17f550, _0x24d8f8, _0x5746fe, _0x4451e6, new _0xfe2d7.CompletionMap(), _0x4a4c5d, _0x40c413);
      }
      function _0x4358f3(_0x58dfde, _0x3e0020, _0x54f9b1, _0x43c538, _0x284055, _0x5a9b62) {
        const _0x23acfe = [];
        const _0x1bf5cf = _0xbed11c.getScopeForNode(_0x3e0020);
        if (_0x1bf5cf) {
          const _0x27d027 = _0x284055 === null || _0x284055 === undefined ? undefined : _0x284055.get(_0x54f9b1);
          if (_0x27d027) {
            _0x32d3c8.appendArray(_0x23acfe, _0x58dfde.getAutoImportCandidatesForAbbr(_0x54f9b1, _0x27d027, _0x5a9b62));
          }
          _0x23acfe.push(..._0x58dfde.getAutoImportCandidates(_0x54f9b1, _0x43c538, undefined, _0x5a9b62).filter(_0x4ddd07 => !_0x1bf5cf.lookUpSymbolRecursive(_0x4ddd07.name)));
        }
        return _0x23acfe;
      }
      class _0x465706 extends _0x426183.AutoImporter {
        constructor(_0xfbc69f, _0x2ba901, _0x5507bc, _0x335db1, _0x19897c, _0x1cc4cb, _0x25052) {
          var _0x5f4b02;
          super(_0xfbc69f, _0x2ba901, _0x5507bc, _0x335db1, _0x19897c, _0x1cc4cb, _0x25052);
          this._stopWatch = new _0x465804.Duration();
          this._perfInfo = {
            indexUsed: false,
            totalInMs: 0,
            moduleTimeInMS: 0,
            indexTimeInMS: 0,
            importAliasTimeInMS: 0,
            symbolCount: 0,
            indexCount: 0,
            importAliasCount: 0
          };
          this._libraryMap = (_0x5f4b02 = this._pylanceOptions.indices) === null || _0x5f4b02 === undefined ? undefined : _0x5f4b02.getLibraryIndices(_0x2ba901.root);
          this._fileUri = _0x5d662e.getFileInfo(this.parseResults.parserOutput.parseTree).fileUri;
          this._perfInfo.indexUsed = !!this._pylanceOptions.indices;
        }
        getAutoImportCandidatesForAbbr(_0x2f3135, _0x51df74, _0x16c692) {
          const _0x272702 = this.getCandidates(_0x51df74.importName, 1, _0x2f3135, _0x16c692);
          const _0x50a4d7 = _0x272702.get(_0x51df74.importName);
          if (!_0x50a4d7) {
            return [];
          }
          return _0x50a4d7.filter(_0x22faf3 => _0x22faf3.source === _0x51df74.importFrom);
        }
        getPerfInfo() {
          this._perfInfo.totalInMs = this._stopWatch.getDurationInMilliseconds();
          return this._perfInfo;
        }
        getCompletionItemData(_0x49d922) {
          return _0x1d6753.CompletionListConverter.fromLSP(_0x49d922).data;
        }
        getCandidates(_0x1ca3da, _0x53da89, _0x3fc1f9, _0x449ee7) {
          const _0x36eb8b = new Map();
          const _0x20d4fb = new Map();
          this.addImportsFromModuleMap(_0x1ca3da, _0x53da89, _0x3fc1f9, _0x20d4fb, _0x36eb8b, _0x449ee7);
          this._addImportsFromLibraryMap(_0x1ca3da, _0x53da89, _0x3fc1f9, _0x20d4fb, _0x36eb8b, _0x449ee7);
          this.addImportsFromImportAliasMap(_0x20d4fb, _0x3fc1f9, _0x36eb8b, _0x449ee7);
          this._applyDirectDependencyFilterIfApplicable(_0x36eb8b);
          return _0x36eb8b;
        }
        addImportsFromModuleMap(_0x5f2bc8, _0x5955bb, _0x3e34d3, _0x17c9a5, _0x411b68, _0x6522c5) {
          const _0x2bcfce = this._stopWatch.getDurationInMilliseconds();
          super.addImportsFromModuleMap(_0x5f2bc8, _0x5955bb, _0x3e34d3, _0x17c9a5, _0x411b68, _0x6522c5);
          this._perfInfo.moduleTimeInMS = this._stopWatch.getDurationInMilliseconds() - _0x2bcfce;
        }
        addImportsFromImportAliasMap(_0x519a99, _0x83adcb, _0x19ab90, _0x495231) {
          const _0xcfd1e1 = this._stopWatch.getDurationInMilliseconds();
          super.addImportsFromImportAliasMap(_0x519a99, _0x83adcb, _0x19ab90, _0x495231);
          this._perfInfo.importAliasTimeInMS = this._stopWatch.getDurationInMilliseconds() - _0xcfd1e1;
        }
        getNameForImportFrom(_0x3c6179, _0x326efd) {
          if (this._pylanceOptions.importFormat === 'relative' && !_0x3c6179) {
            return _0x40e8ed.getRelativeModuleName(this.importResolver.fileSystem, this._fileUri, _0x326efd, this.importResolver.getConfigOptions());
          } else {
            return undefined;
          }
        }
        compareImportAliasData(_0x12463c, _0x3a6348) {
          if (_0x12463c.importGroup >= 2 && _0x3a6348.importGroup >= 2 && this._pylanceOptions.includeAliasesFromUserFiles) {
            const _0x554612 = this._calculateRank(_0x12463c);
            const _0xe3a0 = this._calculateRank(_0x3a6348);
            const _0x474afe = _0x554612 - _0xe3a0;
            if (_0x474afe !== 0) {
              return _0x474afe;
            }
          }
          return super.compareImportAliasData(_0x12463c, _0x3a6348);
        }
        shouldIncludeVariable(_0x16a277, _0x4875c2, _0x345a32) {
          const _0x4868d6 = super.shouldIncludeVariable(_0x16a277, _0x4875c2, _0x345a32);
          if (_0x4868d6) {
            return true;
          }
          return !_0x16a277.symbol || _0x16a277.symbol.isInDunderAll();
        }
        get _pylanceOptions() {
          return this.options;
        }
        _applyDirectDependencyFilterIfApplicable(_0x4c64a5) {
          if (!this._pylanceOptions.allowOnlyDirectDependencies) {
            return;
          }
          const _0x597002 = this.program.importResolver.getPythonSearchPaths([]);
          const _0x2ba870 = [];
          _0x1fbcfa.AddIfNotNull(_0x2ba870, this.program.importResolver.getTypeshedThirdPartyPath(this.execEnvironment));
          _0x1fbcfa.AddIfNotNull(_0x2ba870, this.program.importResolver.getTypeshedPathEx(this.execEnvironment, []));
          const _0x313748 = this._pylanceOptions.allowOnlyDirectDependencies;
          for (const [_0x41eaa2, _0x27f207] of _0x4c64a5) {
            _0x4c64a5.set(_0x41eaa2, _0x27f207.filter(_0x41cb9c => {
              if (!_0x597002.some(_0x7fcde2 => _0x41cb9c.originalDeclUri.startsWith(_0x7fcde2)) && !_0x2ba870.some(_0xb75348 => _0x41cb9c.originalDeclUri.startsWith(_0xb75348))) {
                return true;
              }
              if (_0x41cb9c.source) {
                const _0x6d155c = _0x282fbc(_0x41cb9c.source);
                return _0x313748.has(_0x6d155c);
              }
              if (_0x41cb9c.name && _0x41cb9c.kind === _0x525590.CompletionItemKind.Module) {
                const _0x5996c2 = _0x282fbc(_0x41cb9c.name);
                return _0x313748.has(_0x5996c2);
              }
              return true;
            }));
          }
          function _0x282fbc(_0x208fe9) {
            const _0x86614d = _0x208fe9.split('.');
            return _0x86614d[0];
          }
        }
        _calculateRank(_0x174e50) {
          let _0x262694 = 3;
          _0x262694 += _0x174e50.importParts.fileUri.fileNameWithoutExtensions === '__init__' ? -1 : 0;
          _0x262694 += _0x174e50.inDunderAll ? -1 : 0;
          _0x262694 += _0x174e50.hasRedundantAlias ? -1 : 0;
          return _0x262694;
        }
        _addImportsFromLibraryMap(_0x5d4bde, _0xae956f, _0x284738, _0x696b89, _0x47ed7d, _0x55f4a) {
          var _0x4b5520;
          const _0xcc8657 = this._stopWatch.getDurationInMilliseconds();
          if ((_0x4b5520 = this._libraryMap) === null || _0x4b5520 === undefined) {
            undefined;
          } else {
            _0x4b5520.forEach((_0x29dea9, _0x2b4908) => {
              if (_0x29dea9.privateOrProtected) {
                return;
              }
              if (this.moduleSymbolMap.has(_0x2b4908.key)) {
                return;
              }
              const _0x40b98c = {
                isStub: _0x29dea9.uri.hasExtension('.pyi'),
                hasInit: this._hasInit(_0x29dea9.uri),
                isUserCode: false
              };
              this.processModuleSymbolTable(_0xdb97ce(_0x29dea9, true, false), _0x29dea9.uri, _0x5d4bde, _0xae956f, _0x40b98c, _0x284738, _0x696b89, _0x47ed7d, _0x55f4a);
            });
          }
          this._perfInfo.indexTimeInMS = this._stopWatch.getDurationInMilliseconds() - _0xcc8657;
        }
        _hasInit(_0x331d26) {
          var _0x3baaaf;
          var _0x26af93;
          const _0x1c9de8 = _0x331d26.getDirectory();
          const _0x163df5 = _0x1c9de8.initPyUri;
          const _0x55a0dc = _0x1c9de8.initPyiUri;
          return ((_0x3baaaf = this._libraryMap) === null || _0x3baaaf === undefined ? undefined : _0x3baaaf.has(_0x163df5)) || ((_0x26af93 = this._libraryMap) === null || _0x26af93 === undefined ? undefined : _0x26af93.has(_0x55a0dc)) || false;
        }
      }
      exports.AutoImporter = _0x465706;
      function _0xdb97ce(_0x4d6997, _0x864392, _0x29e4e2) {
        return {
          uri: _0x4d6997.uri,
          *getSymbols() {
            for (const _0x18e9b1 of _0x4d6997.symbols) {
              if (!_0x9c083b.isIndexSymbolVisibleFlagSet(_0x18e9b1, 1)) {
                continue;
              }
              const _0xb2fbe3 = _0x9c083b.isIndexSymbolVisibleFlagSet(_0x18e9b1, 2);
              if (_0x18e9b1.kind === _0x525590.SymbolKind.Variable && !_0x864392 && !_0xb2fbe3) {
                continue;
              }
              const _0x1861ca = _0x9c083b.isIndexSymbolVisibleFlagSet(_0x18e9b1, 4);
              const _0x5d6db6 = _0x29e4e2 && !_0x864392 ? undefined : _0x18e9b1.alias;
              yield {
                symbol: {
                  importAlias: _0x5d6db6,
                  kind: _0x18e9b1.kind,
                  itemKind: _0x18e9b1.itemKind,
                  inDunderAll: _0xb2fbe3,
                  hasRedundantAlias: _0x1861ca
                },
                name: _0x18e9b1.name,
                library: _0x864392
              };
            }
          }
        };
      }
    },
    55648: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AddImports = undefined;
      const _0x4be150 = require(56911);
      const _0x143754 = require(91426);
      const _0x6b398d = require(23574);
      const _0x152e39 = require(65880);
      const _0x144e53 = require(89740);
      const _0x248baf = require(39426);
      const _0x486793 = require(27130);
      const _0x19c55a = require(78031);
      const _0x2c5c7b = require(13259);
      const _0x2433dd = require(15986);
      const _0x18ffc4 = require(86615);
      const _0x362af9 = require(74899);
      class _0x1d31b2 {
        constructor(_0x32dd64, _0x38c4c5) {
          this._workspace = _0x32dd64;
          this._hasVSCodeExtension = _0x38c4c5;
          this._newImpl = new _0x4f81e5(_0x32dd64);
          this._legacyImpl = new _0x35b268(_0x32dd64);
        }
        appendCodeActions(_0x118e9f, _0x1ec0fa, _0x310943, _0x27c6aa) {
          const _0x51954d = _0x1ec0fa.filter(_0x2f3434 => _0x2f3434.getRule() === _0x152e39.DiagnosticRule.reportUnboundVariable || _0x2f3434.getRule() === _0x152e39.DiagnosticRule.reportUndefinedVariable);
          if (this._hasVSCodeExtension) {
            this._newImpl.appendCodeActions(_0x118e9f, _0x51954d, _0x310943, _0x27c6aa);
          } else {
            this._legacyImpl.appendCodeActions(_0x118e9f, _0x51954d, _0x310943, _0x27c6aa);
          }
        }
      }
      exports.AddImports = _0x1d31b2;
      const _0x37b8d8 = 3;
      const _0x294c20 = 20;
      const _0x527ca9 = 100;
      class _0x4f81e5 {
        constructor(_0x1dfb77) {
          this._workspace = _0x1dfb77;
          this._importRankers = [new _0x19c55a.MRURanker(_0x1dfb77, _0x37b8d8), new _0x19c55a.UsedImportRanker(_0x1dfb77, _0x294c20, _0x527ca9, _0x37b8d8), new _0x19c55a.UriRanker(_0x1dfb77)];
        }
        appendCodeActions(_0x4a2a2d, _0x43e7ab, _0x2742ce, _0x55da5c) {
          if (_0x43e7ab.length === 0) {
            return;
          }
          const _0x423164 = _0x43e7ab[0].range;
          const _0x28e3bc = this._workspace.service.run(_0x1e1144 => {
            const _0x3a7ef4 = 1;
            const _0x1f2283 = (_0x31051d, _0x2f7bb8) => _0x31051d === _0x2f7bb8;
            return _0x18ffc4.getAutoImports(_0x1e1144, _0x4a2a2d, _0x423164, _0x3a7ef4, _0x2c5c7b.wellKnownAbbreviationMap, {
              lazyEdit: true,
              importFormat: this._workspace.importFormat,
              patternMatcher: _0x1f2283,
              indices: _0x362af9.SymbolIndexer.getIndices(this._workspace),
              includeAliasesFromUserFiles: this._workspace.indexOptions?.includeAliasesFromUserFiles,
              allowDuplicatedAliasesFromUserFiles: true
            }, _0x55da5c);
          }, _0x55da5c);
          if (_0x28e3bc.length === 0) {
            return;
          }
          const _0x46e4c8 = this._workspace.service.getTextOnRange(_0x4a2a2d, _0x423164, _0x55da5c);
          if (!_0x46e4c8) {
            return;
          }
          const _0x49b91e = _0x2c5c7b.wellKnownAbbreviationMap.get(_0x46e4c8)?.importName ?? _0x46e4c8;
          _0x19c55a.applyRankerToItemsInPlace(this._importRankers, _0x49b91e, _0x37b8d8, _0x28e3bc, _0x55da5c);
          let _0x3a0790 = 0;
          const _0x37c019 = _0x4a2a2d.toString();
          for (const _0x3e8b88 of _0x28e3bc) {
            _0x2742ce.push(_0x4447cb(_0x37c019, _0x423164, _0x3e8b88.name, _0x3e8b88.source, _0x3e8b88.alias));
            if (++_0x3a0790 >= _0x37b8d8) {
              break;
            }
          }
        }
      }
      class _0x35b268 {
        constructor(_0x4f246f) {
          this._workspace = _0x4f246f;
        }
        appendCodeActions(_0x54ec98, _0xa3de0, _0x528e5a, _0x30eac4) {
          if (_0xa3de0.length === 0) {
            return;
          }
          const _0x2a56a3 = _0xa3de0[0].range;
          const _0x3e9d12 = this._workspace.service.run(_0x52dc8c => {
            const _0x3683a8 = (_0x6debd5, _0x1a4a32) => _0x6debd5 === _0x1a4a32;
            return _0x18ffc4.getAutoImports(_0x52dc8c, _0x54ec98, _0x2a56a3, _0x2c5c7b.addImportSimilarityLimit, _0x2c5c7b.wellKnownAbbreviationMap, {
              lazyEdit: true,
              importFormat: this._workspace.importFormat,
              patternMatcher: _0x3683a8,
              indices: _0x362af9.SymbolIndexer.getIndices(this._workspace),
              includeAliasesFromUserFiles: this._workspace.indexOptions?.includeAliasesFromUserFiles,
              allowDuplicatedAliasesFromUserFiles: true
            }, _0x30eac4);
          }, _0x30eac4);
          const _0x3b9215 = _0x54ec98.toString();
          const _0x557698 = [];
          for (const _0x42cbc7 of _0x3e9d12) {
            _0x143754.throwIfCancellationRequested(_0x30eac4);
            if (_0x42cbc7.name.startsWith('__')) {
              continue;
            }
            _0x557698.push(_0x4447cb(_0x3b9215, _0x2a56a3, _0x42cbc7.name, _0x42cbc7.source, _0x42cbc7.alias));
          }
          const _0x59a951 = this._workspace.service.getTextOnRange(_0x54ec98, _0x2a56a3, _0x30eac4);
          _0x528e5a.push(..._0x557698.sort((_0x3b85ec, _0x3fed6a) => {
            const _0x1753f1 = _0x3b85ec.command.arguments[2];
            const _0x649ac3 = _0x3fed6a.command.arguments[2];
            if (_0x1753f1 === _0x649ac3) {
              return this._addImportCompare(_0x3b85ec, _0x3fed6a);
            }
            if (_0x1753f1 === _0x59a951) {
              return -1;
            }
            if (_0x649ac3 === _0x59a951) {
              return 1;
            }
            return this._addImportCompare(_0x3b85ec, _0x3fed6a);
          }));
        }
        _addImportCompare(_0x1220d9, _0xc29fb2) {
          const _0x533adc = _0x1220d9.command.arguments[2];
          const _0x59994 = _0xc29fb2.command.arguments[2];
          const _0x3dd721 = _0x1220d9.command.arguments[3];
          const _0xad91fd = _0xc29fb2.command.arguments[3];
          if (!_0x3dd721 && !_0xad91fd) {
            return _0x533adc.localeCompare(_0x59994);
          }
          if (!_0x3dd721 && _0xad91fd) {
            return -1;
          }
          if (_0x3dd721 && !_0xad91fd) {
            return 1;
          }
          const _0x5422e6 = _0x144e53.getCharacterCount(_0x3dd721, '.');
          const _0x1f0868 = _0x144e53.getCharacterCount(_0xad91fd, '.');
          const _0x545c31 = _0x5422e6 - _0x1f0868;
          if (_0x545c31 === 0) {
            return _0x1220d9.title.localeCompare(_0xc29fb2.title);
          }
          return _0x545c31;
        }
      }
      function _0x4447cb(_0x54636b, _0x2e2d39, _0x5bd41c, _0x325e22, _0x5b204f) {
        const _0x1cb5c4 = _0x2433dd.Localizer.CodeAction.AutoImport.addAutoImport().format({
          importText: _0x248baf.getAutoImportText(_0x5bd41c, _0x325e22, _0x5b204f)
        });
        return _0x4be150.CodeAction.create(_0x1cb5c4, _0x6b398d.createCommand(_0x1cb5c4, _0x486793.Commands.addImport, _0x54636b, _0x2e2d39, _0x5bd41c, _0x325e22, _0x5b204f), _0x4be150.CodeActionKind.QuickFix);
      }
    },
    67142: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.AddTypeIgnore = undefined;
      const _0x397b0a = require(56911);
      const _0x25cdaf = require(26687);
      const _0x435ba1 = require(41557);
      const _0x2e84a3 = require(91426);
      const _0xb3a3e6 = require(58147);
      const _0x45ff6e = require(56814);
      const _0x36cca8 = require(5884);
      const _0x2e7b05 = require(67703);
      const _0x338e72 = '# {name}: ignore{postfix}';
      const _0x3fdebe = 'Add \'# {name}: ignore{postfix}\' to suppress warning';
      class _0x2ee4a3 {
        static addAddTypeIgnoreCodeActions(_0x3a7b87, _0x4576da, _0x559d4d, _0x193aca, _0x5c2d10) {
          const _0x8695fd = _0x3a7b87.service.getParseResults(_0x4576da);
          if (!_0x8695fd) {
            return;
          }
          const _0x473521 = _0x8695fd.tokenizerOutput.tokens;
          const _0x2dc59d = _0x8695fd.tokenizerOutput.lines;
          const _0x16664c = _0x8695fd.parserOutput;
          const _0x5d865f = _0x559d4d.filter(_0x3d2bd4 => !!_0x3d2bd4.getRule());
          const _0x502149 = [];
          for (const _0x485442 of _0x5d865f) {
            _0x2e84a3.throwIfCancellationRequested(_0x5c2d10);
            const _0x12885b = _0x45ff6e.getLineEndOffset(_0x8695fd.tokenizerOutput, _0x8695fd.text, _0x485442.range.end.line);
            const _0x3f69dd = _0x435ba1.getIndexOfTokenOverlapping(_0x473521, _0x12885b);
            const _0x5f4696 = _0x435ba1.getCommentsAtTokenIndex(_0x473521, _0x3f69dd);
            let _0x6260f9;
            let _0x3f3d5b;
            if (_0x5f4696 && _0x5f4696.length > 0) {
              const _0x5f3efe = _0x45ff6e.convertOffsetToPosition(_0x5f4696[0].start - 1, _0x2dc59d);
              const _0x2846c9 = /^\s*pyright:\s*ignore\s*\[/;
              const _0x19da5e = _0x2846c9.exec(_0x5f4696[0].value);
              if (_0x19da5e) {
                _0x6260f9 = {
                  line: _0x5f3efe.line,
                  character: _0x5f3efe.character + _0x19da5e[0].length + 1
                };
                _0x3f3d5b = _0x485442.getRule() + ', ';
              } else {
                _0x6260f9 = _0x5f3efe;
                _0x3f3d5b = this._getTypeIgnoreStatement(_0x8695fd.parserOutput, _0x485442) + ' ';
              }
            } else {
              _0x6260f9 = _0x45ff6e.convertOffsetToPosition(_0x12885b, _0x8695fd.tokenizerOutput.lines);
              _0x3f3d5b = ` ${this._getTypeIgnoreStatement(_0x8695fd.parserOutput, _0x485442)}`;
            }
            const _0x54c996 = {
              title: this._getTypeIgnoreTitle(_0x16664c, _0x485442),
              codeActionPosition: _0x6260f9,
              codeActionText: _0x3f3d5b
            };
            _0xb3a3e6.addIfUnique(_0x502149, _0x54c996, (_0xaa840b, _0x525eaf) => this._areSame(_0xaa840b, _0x525eaf));
          }
          for (const _0x551120 of _0x502149) {
            _0x193aca.push(this._createFix(_0x3a7b87, _0x4576da, _0x551120.title, _0x551120.codeActionPosition, _0x551120.codeActionText));
          }
        }
        static _areSame(_0x3e65c6, _0x668112) {
          return _0x3e65c6.title === _0x668112.title && _0x3e65c6.codeActionPosition.character === _0x668112.codeActionPosition.character && _0x3e65c6.codeActionPosition.line === _0x668112.codeActionPosition.line && _0x3e65c6.codeActionText === _0x668112.codeActionText;
        }
        static _createFix(_0x5d2750, _0x3ca75e, _0x346b10, _0x489d7a, _0x5e9b11) {
          const _0x3c6ab4 = _0x397b0a.CodeAction.create(_0x346b10, _0x397b0a.CodeActionKind.QuickFix);
          _0x3c6ab4.edit = {
            changes: {
              [_0x36cca8.convertUriToLspUriString(_0x5d2750.service.fs, _0x3ca75e)]: [_0x397b0a.TextEdit.insert(_0x489d7a, _0x5e9b11)]
            }
          };
          return _0x3c6ab4;
        }
        static _getTypeIgnoreStatement(_0x15c606, _0x3177ae) {
          return this._getTemplatedString(_0x15c606, _0x3177ae, new _0x2e7b05.ParameterizedString(_0x338e72));
        }
        static _getTypeIgnoreTitle(_0x397ec4, _0x3296b9) {
          return this._getTemplatedString(_0x397ec4, _0x3296b9, new _0x2e7b05.ParameterizedString(_0x3fdebe));
        }
        static _getTemplatedString(_0x243a18, _0x5aad4e, _0x2ec1e3) {
          const _0x482233 = _0x25cdaf.getFileInfo(_0x243a18.parseTree);
          if (!_0x482233) {
            return _0x2ec1e3.format({
              name: 'type',
              postfix: ''
            });
          }
          if (_0x482233.diagnosticRuleSet.enableTypeIgnoreComments) {
            return _0x2ec1e3.format({
              name: 'type',
              postfix: ''
            });
          } else {
            return _0x2ec1e3.format({
              name: 'pyright',
              postfix: `[${_0x5aad4e.getRule()}]`
            });
          }
        }
      }
      exports.AddTypeIgnore = _0x2ee4a3;
    },
    64057: function (module, exports, require) {
      'use strict';

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ChangeSpelling = undefined;
      const _0x36bc46 = __importDefault(require(90930));
      const _0x7ad90f = require(56911);
      const _0x51f720 = require(41557);
      const _0x1714f2 = require(95952);
      const _0x53f8ce = require(4064);
      const _0x31f9f0 = require(21024);
      const _0x21abb2 = require(91426);
      const _0x4716c0 = require(58147);
      const _0x4aab8f = require(23574);
      const _0x2e869b = require(65880);
      const _0xec6eaa = require(56814);
      const _0x5818c5 = require(27130);
      const _0x32cda2 = require(13259);
      const _0x2282a8 = require(15986);
      const _0xdba863 = require(86615);
      const _0x5bf2f7 = require(74899);
      const _0x43f2b4 = 3;
      const _0x11fafd = 3;
      class _0x1fe925 {
        constructor(_0x3493b0, _0x165b32) {
          this._workspace = _0x3493b0;
          this._hasVSCodeExtension = _0x165b32;
        }
        appendCodeActions(_0x13effb, _0x42ed98, _0x5eb2dc, _0x194234) {
          if (!this._hasVSCodeExtension) {
            return;
          }
          const _0x33f1b6 = _0x42ed98.filter(_0x179df9 => _0x179df9.getRule() === _0x2e869b.DiagnosticRule.reportUnboundVariable || _0x179df9.getRule() === _0x2e869b.DiagnosticRule.reportUndefinedVariable);
          if (_0x33f1b6.length === 0) {
            return;
          }
          const _0x224bb7 = _0x33f1b6[0].range;
          this._workspace.service.run(_0x3aea57 => {
            const _0xdba4cf = _0x3aea57.getParseResults(_0x13effb);
            if (!_0xdba4cf) {
              return;
            }
            const _0x19e1bc = _0xec6eaa.convertRangeToTextRange(_0x224bb7, _0xdba4cf.tokenizerOutput.lines);
            if (!_0x19e1bc) {
              return;
            }
            const _0x59aa3c = _0x51f720.findNodeByOffset(_0xdba4cf.parserOutput.parseTree, _0x19e1bc.start);
            if (!_0x59aa3c) {
              return;
            }
            const _0x3ee402 = new Map();
            const _0x3b579f = _0xdba4cf.text.substr(_0x19e1bc.start, _0x19e1bc.length);
            if (_0x3b579f.length < _0x43f2b4) {
              return;
            }
            this._collectCandidatesFromSymbols(_0x3aea57, _0x59aa3c, _0x3b579f, _0x3ee402, _0x194234);
            this._collectCandidatesFromAddImports(_0x3aea57, _0x13effb, _0x224bb7, _0x5eb2dc, _0x3b579f, _0x3ee402, _0x194234);
            const _0x2d2e49 = this._getBestMatch(_0x3ee402);
            if (!_0x2d2e49) {
              return;
            }
            _0x5eb2dc.push(this._createCodeAction(_0x13effb, _0x224bb7, _0x2d2e49));
          }, _0x194234);
        }
        _createCodeAction(_0x1d924b, _0x10ab10, _0x29bade) {
          const _0x516d55 = _0x2282a8.Localizer.CodeAction.ChangeSpelling.changeSpellingTo().format({
            word: _0x29bade.name
          });
          if (!_0x29bade.results || _0x29bade.results.length > 1) {
            return _0x7ad90f.CodeAction.create(_0x516d55, _0x4aab8f.createCommand(_0x516d55, _0x5818c5.Commands.changeSpelling, _0x1d924b, _0x10ab10, _0x29bade.name), _0x7ad90f.CodeActionKind.QuickFix);
          }
          const _0x5b324a = _0x29bade.results[0];
          return _0x7ad90f.CodeAction.create(_0x516d55, _0x4aab8f.createCommand(_0x516d55, _0x5818c5.Commands.addImport, _0x1d924b, _0x10ab10, _0x5b324a.name, _0x5b324a.source, _0x5b324a.alias), _0x7ad90f.CodeActionKind.QuickFix);
        }
        _getBestMatch(_0x545c33) {
          if (_0x545c33.size === 0) {
            return undefined;
          }
          const _0x4448fa = [..._0x545c33.entries()].sort((_0x37abdf, _0x23bc1a) => {
            if (_0x37abdf[1] === _0x23bc1a[1]) {
              return _0x37abdf[0].localeCompare(_0x23bc1a[0]);
            }
            return _0x37abdf[1].editDistance - _0x23bc1a[1].editDistance;
          });
          return {
            name: _0x4448fa[0][0],
            results: _0x4448fa[0][1].results
          };
        }
        _collectCandidatesFromAddImports(_0x191d56, _0x18f592, _0x445684, _0x5bd803, _0x4b44ef, _0x625ae2, _0xf2b112) {
          if (_0x5bd803.some(_0x1a787f => {
            return _0x1a787f.command?.command === _0x5818c5.Commands.addImport;
          })) {
            return;
          }
          const _0x548fae = 0;
          const _0x5b2ad1 = _0xdba863.getAutoImports(_0x191d56, _0x18f592, _0x445684, _0x548fae, _0x32cda2.wellKnownAbbreviationMap, {
            lazyEdit: true,
            importFormat: this._workspace.importFormat,
            patternMatcher: (_0xdbee0, _0x3b1f9e) => this._patternMatcher(_0xdbee0, _0x3b1f9e),
            indices: _0x5bf2f7.SymbolIndexer.getIndices(this._workspace),
            includeAliasesFromUserFiles: this._workspace.indexOptions?.includeAliasesFromUserFiles
          }, _0xf2b112);
          const _0x5ecd2f = _0x4716c0.createMapFromItems(_0x5b2ad1, _0x49bf39 => _0x49bf39.name);
          _0x5ecd2f.forEach((_0x4f3490, _0x3a7065) => {
            _0x21abb2.throwIfCancellationRequested(_0xf2b112);
            this._tryAdd(_0x4b44ef, _0x3a7065, _0x625ae2, _0x4f3490);
          });
        }
        _collectCandidatesFromSymbols(_0x2db314, _0x1cf3b2, _0x476498, _0x4c5fe6, _0x5a914c) {
          let _0x5bdb6 = _0x1cf3b2;
          while (_0x5bdb6) {
            let _0x2cf0c2 = _0x1714f2.getScopeForNode(_0x5bdb6);
            if (!_0x2cf0c2) {
              _0x5bdb6 = _0x5bdb6.parent;
              continue;
            }
            while (_0x2cf0c2) {
              _0x21abb2.throwIfCancellationRequested(_0x5a914c);
              _0x2cf0c2.symbolTable.forEach((_0x28fc1a, _0x359e3b) => {
                this._tryAdd(_0x476498, _0x359e3b, _0x4c5fe6);
              });
              _0x2cf0c2 = _0x2cf0c2.parent;
            }
            if (_0x5bdb6.nodeType !== 10 || !_0x2db314.evaluator) {
              return;
            }
            const _0x5a1d76 = _0x2db314.evaluator.getTypeOfClass(_0x5bdb6);
            if (!_0x5a1d76 || !_0x31f9f0.isInstantiableClass(_0x5a1d76.classType)) {
              return;
            }
            _0x5a1d76.classType.shared.mro.forEach((_0x29df4e, _0x41c7f2) => {
              _0x21abb2.throwIfCancellationRequested(_0x5a914c);
              if (!_0x31f9f0.isInstantiableClass(_0x29df4e)) {
                return;
              }
              _0x29df4e.shared.fields.forEach((_0x1d2dbf, _0xcd7b23) => {
                if (!_0x53f8ce.isVisibleExternally(_0x1d2dbf) || !_0x1d2dbf.isClassMember()) {
                  return;
                }
                this._tryAdd(_0x476498, _0xcd7b23, _0x4c5fe6);
              });
            });
            return;
          }
        }
        _tryAdd(_0x2cb2a7, _0xb115d7, _0x285d72, _0x598b53) {
          if (_0xb115d7.length < _0x43f2b4 || _0x285d72.has(_0xb115d7) || _0x2cb2a7 === _0xb115d7) {
            return;
          }
          const _0xd8b73a = this._getEditDistance(_0x2cb2a7, _0xb115d7);
          if (_0xd8b73a > _0x11fafd) {
            return;
          }
          _0x285d72.set(_0xb115d7, {
            editDistance: _0xd8b73a,
            results: _0x598b53
          });
        }
        _getEditDistance(_0x266294, _0x2114ce) {
          const _0x34d297 = _0x36bc46.default(_0x266294, _0x2114ce);
          const _0x40b2f4 = Math.min(_0x11fafd, Math.floor(_0x266294.length / 3));
          if (_0x34d297 > _0x40b2f4) {
            return _0x11fafd + 1;
          }
          return _0x34d297;
        }
        _patternMatcher(_0xc45d95, _0x45ef81) {
          return this._getEditDistance(_0xc45d95, _0x45ef81) <= _0x11fafd;
        }
      }
      exports.ChangeSpelling = _0x1fe925;
    },
    87997: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SearchImports = undefined;
      const _0x10068f = require(56911);
      const _0x37fb99 = require(23574);
      const _0x4999c9 = require(65880);
      const _0x292b93 = require(30741);
      const _0x55d636 = require(27130);
      const _0x5700de = require(15986);
      class _0x89c3c2 {
        constructor(_0x45e212, _0x204a8e) {
          this._workspace = _0x45e212;
          this._hasVSCodeExtension = _0x204a8e;
        }
        appendCodeActions(_0x22b42b, _0x300ee5, _0x452a5e, _0x13deab) {
          if (!this._hasVSCodeExtension || this._workspace.kinds.some(_0x5d6e64 => _0x5d6e64 === _0x292b93.WellKnownWorkspaceKinds.Limited)) {
            return;
          }
          const _0x5d67da = _0x300ee5.filter(_0xb9b418 => _0xb9b418.getRule() === _0x4999c9.DiagnosticRule.reportUnboundVariable || _0xb9b418.getRule() === _0x4999c9.DiagnosticRule.reportUndefinedVariable);
          if (_0x5d67da.length === 0) {
            return;
          }
          const _0x211365 = _0x5d67da[0].range;
          const _0x3ffb3c = this._workspace.service.getTextOnRange(_0x22b42b, _0x211365, _0x13deab);
          if (!_0x3ffb3c || _0x3ffb3c.trim().length === 0) {
            return;
          }
          const _0x153530 = _0x5700de.Localizer.CodeAction.AutoImport.searchImport();
          _0x452a5e.push(_0x10068f.CodeAction.create(_0x153530, _0x37fb99.createCommand(_0x153530, _0x55d636.ClientCommands.searchImports, _0x22b42b, _0x211365, _0x3ffb3c), _0x10068f.CodeActionKind.QuickFix));
        }
      }
      exports.SearchImports = _0x89c3c2;
    },
    90836: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ConstructorUsageProviderFactory = undefined;
      const _0x8fd59 = require(28445);
      const _0x44a82a = require(83760);
      const _0x29c210 = require(91426);
      const _0x35e893 = require(56507);
      const _0x108033 = require(67032);
      class _0x2783cb {
        constructor(_0x27da70) {
          this._view = _0x27da70;
        }
        tryCreateProvider(_0xa030c6, _0x2903df, _0xc6a90e) {
          var _0x3a1010;
          if (_0xa030c6 !== _0x35e893.ReferenceUseCase.References) {
            return undefined;
          }
          const _0x406634 = _0x2903df.find(this._isInitMethod);
          if (!_0x406634) {
            return undefined;
          }
          const _0x552a8f = _0x406634.node.parent.parent;
          const _0x3c0a6c = (_0x3a1010 = this._view.evaluator.getDeclInfoForNameNode(_0x552a8f.d.name)?.decls) === null || _0x3a1010 === undefined ? undefined : _0x3a1010.find(_0x8fd59.isClassDeclaration);
          if (!_0x3c0a6c) {
            return undefined;
          }
          return new _0x331872(this._view, _0x3c0a6c, _0x406634, _0xc6a90e);
        }
        _isInitMethod(_0x1b3b9e) {
          return _0x8fd59.isFunctionDeclaration(_0x1b3b9e) && _0x1b3b9e.isMethod && _0x1b3b9e.node.d.name.d.value === '__init__' && _0x1b3b9e.node.parent?.parent?.nodeType === 10 && _0x1b3b9e.node.parent.parent.d.name.d.value.length > 0;
        }
      }
      exports.ConstructorUsageProviderFactory = _0x2783cb;
      class _0x331872 {
        constructor(_0x1e5d3f, _0x1f177d, _0x4162a0, _0x32c2c6) {
          this._view = _0x1e5d3f;
          this._classDeclaration = _0x1f177d;
          this._initDeclaration = _0x4162a0;
          this._token = _0x32c2c6;
          this._aliasResolver = new _0x108033.AliasResolver(this._view.evaluator);
        }
        appendSymbolNamesTo(_0x4d7b97) {
          const _0x53883e = this._classDeclaration.node;
          _0x4d7b97.add(_0x53883e.d.name.d.value);
        }
        appendDeclarationsTo(_0x6d1e76) {}
        appendDeclarationsAt(_0x4f3963, _0x730a6c, _0x5d3d4b) {
          _0x29c210.throwIfCancellationRequested(this._token);
          if (_0x4f3963.nodeType !== 38 || _0x4f3963.parent?.nodeType !== 9) {
            return;
          }
          for (const _0x16e080 of _0x730a6c) {
            if (_0x44a82a.areDeclarationsSame(_0x16e080, this._classDeclaration)) {
              _0x5d3d4b.push(this._initDeclaration);
              return;
            }
            const _0x1d9cd6 = this._aliasResolver.resolve(_0x16e080, true);
            if (_0x1d9cd6 && _0x44a82a.areDeclarationsSame(_0x1d9cd6, this._classDeclaration)) {
              _0x5d3d4b.push(this._initDeclaration);
              return;
            }
          }
        }
      }
    },
    48316: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DeclarationFinder = undefined;
      const _0x337797 = require(28445);
      const _0x386a5e = require(21024);
      const _0x7ab293 = require(91426);
      const _0x57e24a = require(34455);
      const _0x13ca77 = require(27594);
      class _0x1c306e {
        constructor(_0x26befa) {
          this._program = _0x26befa;
          this._cache = new WeakMap();
        }
        onFileDirty(_0x321987) {
          var _0x2ce3d3;
          if (!((_0x2ce3d3 = this._typingFileCache?.info) === null || _0x2ce3d3 === undefined ? undefined : _0x2ce3d3.sourceFile.getUri().equals(_0x321987))) {
            return;
          }
          this._typingFileCache = undefined;
        }
        onClearCache() {
          this._cache = new WeakMap();
          this._typingFileCache = undefined;
        }
        onUpdateSettings(_0x718687) {
          this._typingFileCache = undefined;
        }
        getDefinitionFromTypingByName(_0x192942) {
          var _0xccbb9d;
          const _0x13c6f1 = this._getTypingSymbols(_0x192942);
          if ((_0xccbb9d = _0x13c6f1 === null || _0x13c6f1 === undefined ? undefined : _0x13c6f1.getDeclarations()) !== null && _0xccbb9d !== undefined) {
            return _0xccbb9d;
          } else {
            return [];
          }
        }
        getDeclarations(_0x51079e, _0x1ee78b, _0x211bd7) {
          const _0xced036 = this._cache.get(_0x51079e);
          if (_0xced036) {
            return _0xced036.declarations;
          }
          const _0x63e78a = _0x13ca77.EmptyUri.instance;
          const _0x4cc9b1 = _0x211bd7?.sourceMapper ?? this._program.getSourceMapper(_0x63e78a, _0x1ee78b, false, true);
          const _0x56c9df = this._getDeclarations(_0x51079e, _0x4cc9b1, _0x211bd7 ?? {}, _0x1ee78b);
          this._cache.set(_0x51079e, _0x56c9df);
          return _0x56c9df.declarations;
        }
        _getClassTypeDeclarations(_0x458d04, _0x1c3551, _0x27f844) {
          if (_0x458d04.shared.declaration && (!_0x27f844 || !_0x458d04.props?.typeAliasInfo)) {
            return [_0x458d04.shared.declaration];
          }
          const _0x3161ff = _0x13ca77.EmptyUri.instance;
          const _0x28b8c1 = _0x1c3551.findDeclarationsByType(_0x3161ff, _0x458d04, _0x27f844);
          if (_0x27f844 && _0x458d04.props?.typeAliasInfo) {
            return _0x28b8c1.filter(_0x3af20c => {
              var _0x757ef3;
              var _0x360164;
              if (_0x337797.isVariableDeclaration(_0x3af20c) && _0x3af20c.typeAliasName && _0x3af20c.typeAliasName.d.value === ((_0x757ef3 = _0x458d04.props?.typeAliasInfo) === null || _0x757ef3 === undefined ? undefined : _0x757ef3.shared.name)) {
                return true;
              }
              if (_0x337797.isTypeAliasDeclaration(_0x3af20c) && _0x3af20c.node.d.name.d.value === ((_0x360164 = _0x458d04.props?.typeAliasInfo) === null || _0x360164 === undefined ? undefined : _0x360164.shared.name)) {
                return true;
              }
              return false;
            });
          }
          return _0x28b8c1.filter(_0x17ef36 => _0x337797.isClassDeclaration(_0x17ef36) || _0x337797.isSpecialBuiltInClassDeclaration(_0x17ef36));
        }
        _getTypingFile() {
          if (this._typingFileCache) {
            return this._typingFileCache.info;
          }
          for (const _0x1c539b of this._program.getSourceFileInfoList().filter(_0x241f47 => _0x241f47.sourceFile.isTypingStubFile())) {
            this._program.getParseResults(_0x1c539b.sourceFile.getUri());
            const _0x17f2d7 = this._getSymbol(_0x1c539b, 'Any');
            if (_0x17f2d7) {
              this._typingFileCache = {
                info: _0x1c539b
              };
              return _0x1c539b;
            }
          }
          this._typingFileCache = {
            info: undefined
          };
          return undefined;
        }
        _getSymbol(_0x3204d7, _0x55f676) {
          const _0xcdf935 = _0x3204d7.sourceFile.getModuleSymbolTable();
          if (!_0xcdf935) {
            return undefined;
          }
          return _0xcdf935.get(_0x55f676);
        }
        _getTypingSymbols(_0x336dae) {
          const _0x166543 = this._getTypingFile();
          if (!_0x166543) {
            return;
          }
          return this._getSymbol(_0x166543, _0x336dae);
        }
        _getDeclarations(_0x2321da, _0x3281f6, _0x3495bd, _0x5a3c62) {
          _0x7ab293.throwIfCancellationRequested(_0x5a3c62);
          switch (_0x2321da.category) {
            case 2:
              {
                const _0x1c60da = this._getTypingSymbols('Any');
                return {
                  declarations: (_0x1c60da === null || _0x1c60da === undefined ? undefined : _0x1c60da.getDeclarations()) ?? []
                };
              }
            case 8:
              {
                const _0x4fb9f2 = this._getTypingSymbols('Union');
                return {
                  declarations: (_0x4fb9f2 === null || _0x4fb9f2 === undefined ? undefined : _0x4fb9f2.getDeclarations()) ?? []
                };
              }
            case 3:
              {
                const _0x253d77 = this._getTypingSymbols(_0x2321da.priv.isNoReturn ? 'NoReturn' : 'Never');
                return {
                  declarations: (_0x253d77 === null || _0x253d77 === undefined ? undefined : _0x253d77.getDeclarations()) ?? []
                };
              }
            case 6:
              {
                const _0x290493 = this._getClassTypeDeclarations(_0x2321da, _0x3281f6, _0x3495bd.useTypeAlias ?? false);
                return {
                  declarations: _0x290493
                };
              }
            case 4:
              {
                return {
                  declarations: _0x2321da.shared.declaration ? [_0x2321da.shared.declaration] : []
                };
              }
            case 5:
              {
                const _0x3d0001 = _0x386a5e.OverloadedType.getOverloads(_0x2321da).map(_0x342b15 => _0x342b15.shared.declaration).filter(_0x57e24a.isDefined);
                const _0xaf8997 = _0x386a5e.OverloadedType.getImplementation(_0x2321da);
                if (_0xaf8997 && _0x386a5e.isFunction(_0xaf8997) && _0xaf8997.shared.declaration && _0x57e24a.isDefined(_0xaf8997.shared.declaration)) {
                  _0x3d0001.push(_0xaf8997.shared.declaration);
                }
                return {
                  declarations: _0x3d0001
                };
              }
            default:
              return {
                declarations: []
              };
          }
        }
      }
      exports.DeclarationFinder = _0x1c306e;
    },
    1044: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IndicesManager = undefined;
      const _0x3c5a4b = require(58147);
      const _0x2cf93f = require(27113);
      const _0x4230b3 = require(77001);
      class _0xbe427b {
        constructor() {
          this._persistedLibrary = new Map();
          this._indicesPerService = new Map();
        }
        getIndices(_0x2f0bfd) {
          const _0x4a2e98 = this._getOrAddMapData(_0x2f0bfd.id);
          return {
            setWorkspaceIndex(_0x34dc57, _0x13c326) {
              const _0x416ea1 = _0x2f0bfd.getSourceFileInfo(_0x34dc57);
              if (_0x416ea1) {
                if (_0x4a2e98 === null || _0x4a2e98 === undefined) {
                  undefined;
                } else {
                  _0x4a2e98.workspace.set(_0x416ea1, _0x13c326);
                }
              }
            },
            getSourceIndex(_0x3c46f2) {
              const _0x1990b1 = _0x2f0bfd.getSourceFileInfo(_0x3c46f2);
              if (_0x1990b1) {
                if (_0x4a2e98 === null || _0x4a2e98 === undefined) {
                  return undefined;
                } else {
                  return _0x4a2e98.workspace.get(_0x1990b1);
                }
              } else {
                return undefined;
              }
            },
            getLibraryIndices(_0x451913) {
              if (_0x4a2e98 === null || _0x4a2e98 === undefined) {
                return undefined;
              } else {
                return _0x4a2e98.libraryPerExecEnv.get(_0x451913 ?? _0x2cf93f.Uri.empty());
              }
            }
          };
        }
        cloneIndex(_0x2b6410, _0x18d1ff, _0xb3022d, _0x206b12) {
          if (this._lastLibraryMap && this._usable(this._lastLibraryMap, _0x18d1ff)) {
            const _0x3d352d = this._lastLibraryMap.get(_0xb3022d);
            if (this._clonable(_0x3d352d, _0x206b12)) {
              this.setIndex(_0x2b6410, _0x18d1ff, _0xb3022d, _0x3d352d, _0x206b12);
              return true;
            } else {
              this._lastLibraryMap = undefined;
            }
          }
          for (const _0x4e73a3 of this._indicesPerService.values()) {
            for (const _0x40bb17 of _0x4e73a3.libraryPerExecEnv.values()) {
              if (!this._usable(_0x40bb17, _0x18d1ff)) {
                continue;
              }
              const _0xcd23af = _0x40bb17.get(_0xb3022d);
              if (this._clonable(_0xcd23af, _0x206b12)) {
                this._lastLibraryMap = _0x40bb17;
                this.setIndex(_0x2b6410, _0x18d1ff, _0xb3022d, _0xcd23af, _0x206b12);
                return true;
              }
            }
          }
          return false;
        }
        cloneOrSetIndex(_0x2bd4b9, _0x185327, _0x3ca82c, _0x749405, _0x1c8c49) {
          if (!_0x1c8c49 || !this.cloneIndex(_0x2bd4b9, _0x185327, _0x3ca82c, _0x1c8c49)) {
            this.setIndex(_0x2bd4b9, _0x185327, _0x3ca82c, _0x749405, _0x1c8c49);
          }
        }
        setIndex(_0xe34cb, _0x23555c, _0x5a3139, _0x30cbe0, _0x560911) {
          const _0x38d567 = this._getOrAddMapData(_0xe34cb);
          const _0x3b3f2f = _0x3c5a4b.getOrAdd(_0x38d567.libraryPerExecEnv, _0x23555c.root ?? _0x2cf93f.Uri.empty(), () => new _0xd1c76b(_0x23555c.pythonVersion, _0x23555c.pythonPlatform));
          if (_0x30cbe0.timestamp === _0x560911) {
            _0x3b3f2f.set(_0x5a3139, _0x30cbe0);
          } else {
            _0x3b3f2f.set(_0x5a3139, {
              ..._0x30cbe0,
              timestamp: _0x560911
            });
          }
        }
        reset(_0xd19fba, _0x5039b1 = false, _0xe119cc = false) {
          if (_0xe119cc) {
            this._fileCache = undefined;
            this._hostCache = undefined;
            this._persistedLibrary.clear();
          }
          if (_0x5039b1) {
            const _0x5c9133 = this._indicesPerService.get(_0xd19fba);
            if (_0x5c9133 === null || _0x5c9133 === undefined) {
              undefined;
            } else {
              _0x5c9133.libraryPerExecEnv.clear();
            }
            return;
          }
          this._indicesPerService.delete(_0xd19fba);
        }
        setFileCache(_0x3ac891) {
          this._fileCache = _0x3ac891;
        }
        getFileCache() {
          return this._fileCache;
        }
        setHostCache(_0x3b0696) {
          this._hostCache = _0x3b0696;
        }
        getHostCache() {
          return this._hostCache;
        }
        setPersistLibrary(_0x59c7d0, _0x13cde8) {
          this._persistedLibrary.set(_0x59c7d0, _0x13cde8);
        }
        getPersistLibrary(_0x4c9fb7) {
          return this._persistedLibrary.get(_0x4c9fb7);
        }
        requestComplete(_0x2fe34e) {}
        _getOrAddMapData(_0x1bdf55) {
          return _0x3c5a4b.getOrAdd(this._indicesPerService, _0x1bdf55, () => ({
            libraryPerExecEnv: new _0x4230b3.UriMap(),
            workspace: new WeakMap()
          }));
        }
        _usable(_0x455b85, _0x466b7f) {
          return _0x455b85.pythonPlatform === _0x466b7f.pythonPlatform && _0x455b85.pythonVersion === _0x466b7f.pythonVersion;
        }
        _clonable(_0x1c2a0d, _0x2ba28c) {
          if (!_0x1c2a0d) {
            return false;
          }
          if (!_0x1c2a0d.timestamp) {
            return true;
          }
          return _0x1c2a0d.timestamp === _0x2ba28c;
        }
      }
      exports.IndicesManager = _0xbe427b;
      _0xbe427b.empty = {
        getIndices(_0x585b08) {
          return {
            getSourceIndex: _0x58176b => undefined,
            getLibraryIndices: _0x5d0cd4 => undefined
          };
        }
      };
      (function (_0x552576) {
        function _0x125de2(_0x50ebed) {
          return _0x50ebed instanceof _0x552576;
        }
        _0x552576.is = _0x125de2;
      })(_0xbe427b || (exports.IndicesManager = _0xbe427b = {}));
      class _0xd1c76b extends _0x4230b3.UriMap {
        constructor(_0x5d01b8, _0x1be661) {
          super();
          this.pythonVersion = _0x5d01b8;
          this.pythonPlatform = _0x1be661;
        }
      }
    },
    19995: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ImportAdder = undefined;
      const _0x4567b0 = require(26687);
      const _0x791798 = require(28445);
      const _0x23933c = require(83760);
      const _0x3704a8 = require(47610);
      const _0x1d8cae = require(41557);
      const _0x1f137c = require(88744);
      const _0x433e2a = require(95952);
      const _0x1da501 = require(3433);
      const _0x346626 = require(21024);
      const _0x1ca6e9 = require(92324);
      const _0x4c7b86 = require(91426);
      const _0x24ff8d = require(58147);
      const _0x3c5900 = require(12522);
      const _0x1271c3 = require(34455);
      const _0x22fc13 = require(48281);
      const _0x58d1ed = require(56814);
      const _0x29c338 = require(88754);
      const _0x44a20d = require(5884);
      const _0x59ec59 = require(67032);
      const _0x4c4363 = require(13259);
      const _0x2ab102 = require(19013);
      const _0x2d1a7b = require(30048);
      const _0x3a6e8e = require(61904);
      const _0x4e685b = require(86615);
      class _0x27b06e {
        constructor(_0x2a171e, _0x1aa6cb) {
          this._program = _0x2a171e;
          this._cachedResolvedModuleNames = new Map();
          this._autoImportProcessedSet = new Set();
          this._deletedDecls = [];
          this.options = {
            usageKind: _0x1aa6cb?.usageKind ?? 'typeGeneration',
            useTypeAlias: _0x1aa6cb?.useTypeAlias ?? false,
            includeAliasesFromUserFiles: _0x1aa6cb?.includeAliasesFromUserFiles ?? false
          };
          this._importData = {
            containsUnreferenceableSymbols: false,
            declarations: new Map()
          };
        }
        collectImportsForSymbolsUsed(_0x4bd777, _0x5a71bd, _0x1b09b3) {
          _0x4bd777 = _0x3f20b2(_0x4bd777) ? _0x4bd777.parseTree : _0x4bd777;
          _0x5a71bd = _0x1271c3.isArray(_0x5a71bd) ? _0x5a71bd : [_0x5a71bd];
          const _0x524460 = new _0x426b15(this._evaluator, _0x4bd777, _0x5a71bd, {
            ...this.options,
            pep604: this._program.configOptions.diagnosticRuleSet.pep604Printing
          }, _0x1b09b3);
          _0x524460.collect(_0x4bd777);
          this._updateImportData({
            containsUnreferenceableSymbols: _0x524460.containsUnreferenceableSymbols,
            declarations: _0x524460.declsForSymbols
          });
          return this._importData;
        }
        addImportInfo(_0x58ebb1) {
          this._updateImportInfos([_0x58ebb1]);
          return this._importData;
        }
        removeImportInfo(_0x42474b) {
          for (const _0x20530e of [...this._importData.declarations.keys()]) {
            const _0x486341 = this._getImportInfo(_0x20530e);
            if (!_0x486341) {
              continue;
            }
            if (this._areImportInfoSame(_0x486341, _0x42474b)) {
              this._importData.declarations.delete(_0x20530e);
              _0x59ec59.addDeclarationIfUnique(this._deletedDecls, _0x20530e);
              break;
            }
          }
          if (!this._importData.importInfos) {
            return;
          }
          for (let _0xeec2fe = this._importData.importInfos.length - 1; _0xeec2fe >= 0; _0xeec2fe--) {
            const _0x3a9e24 = this._importData.importInfos[_0xeec2fe];
            if (this._areImportInfoSame(_0x3a9e24, _0x42474b)) {
              this._importData.importInfos.splice(_0xeec2fe, 1);
            }
          }
        }
        addDeclaration(_0x4ac222, _0x5ef4ca) {
          if (_0x4ac222.moduleName === 'builtins' || _0x4ac222.moduleName === '__builtins__' || _0x4ac222.moduleName === '') {
            return undefined;
          }
          const _0x49bf7e = _0x5ef4ca.nodeType === 38 ? _0x5ef4ca : _0x5ef4ca.nodeType === 35 ? _0x5ef4ca.d.member : undefined;
          if (!_0x49bf7e) {
            return undefined;
          }
          _0x24ff8d.getOrAdd(this._importData.declarations, _0x4ac222, () => []).push(_0x49bf7e);
          return this._importData;
        }
        removeDeclaration(_0x19e05b) {
          const _0x293d6e = this._getImportInfo(_0x19e05b);
          if (!_0x293d6e) {
            return;
          }
          this.removeImportInfo(_0x293d6e);
        }
        appendImportInfoForTypes(_0x570396, _0x35ce65, _0x1c700c) {
          _0x4c7b86.throwIfCancellationRequested(_0x1c700c);
          const _0x5bbad3 = this._program.serviceProvider.tryGet(_0x2d1a7b.PylanceServiceKeys.declarationFinder);
          if (!_0x5bbad3) {
            return;
          }
          const _0x564ba4 = {
            sourceMapper: this._program.getSourceMapper(_0x570396, _0x1c700c, false, true),
            useTypeAlias: this.options.useTypeAlias
          };
          let _0x3f2fa8 = undefined;
          const _0x3c9c48 = new Set();
          const _0x4104b1 = (_0x12134b, _0x277501) => {
            var _0x102818;
            if (_0x3c9c48.has(_0x12134b)) {
              return;
            }
            _0x3c9c48.add(_0x12134b);
            const _0x38fc1d = _0x5bbad3.getDeclarations(_0x12134b, _0x1c700c, _0x564ba4);
            if (_0x38fc1d.length === 0) {
              return;
            }
            const _0x552cb5 = _0x38fc1d[0];
            if (!_0x346626.isClass(_0x12134b)) {
              if (_0x3a6e8e.isUnion(_0x12134b)) {
                if (this._program.configOptions.diagnosticRuleSet.pep604Printing) {
                  return;
                }
                if (_0x3a6e8e.isOptional(_0x12134b)) {
                  this.addImportInfo({
                    fileUri: _0x552cb5.uri,
                    nameInfo: {
                      name: 'Optional'
                    }
                  });
                  return;
                }
              }
              this.addDeclaration(_0x552cb5, _0x277501);
              return;
            }
            if (_0x346626.ClassType.isBuiltIn(_0x12134b)) {
              const _0x2ce985 = _0x12134b.priv.aliasName ?? _0x12134b.shared.name;
              _0x3f2fa8 = this._handleBuiltInType(_0x5bbad3, _0x12134b, _0x552cb5, _0x2ce985, _0x3f2fa8);
            } else {
              this.addDeclaration(_0x552cb5, _0x277501);
            }
            if (_0x12134b.priv.isTypeArgExplicit) {
              if ((_0x102818 = _0x12134b.priv.typeArgs) === null || _0x102818 === undefined) {
                undefined;
              } else {
                _0x102818.forEach(_0x5b23aa => {
                  _0x4104b1(_0x5b23aa, _0x277501);
                  _0x1ca6e9.doForEachSubtype(_0x5b23aa, _0x2a96c9 => {
                    _0x4104b1(_0x2a96c9, _0x277501);
                  });
                });
              }
            }
          };
          _0x35ce65.forEach(_0x36471d => {
            _0x4104b1(_0x36471d.type, _0x36471d.node);
            _0x1ca6e9.doForEachSubtype(_0x36471d.type, _0x40cc47 => {
              _0x4104b1(_0x40cc47, _0x36471d.node);
            });
          });
        }
        updateImportInfoForTypeWithAutoImport(_0x2f649d, _0x561852, _0x38952a, _0x432afe, _0x4eea13) {
          const _0x237529 = this._program.serviceProvider.tryGet(_0x2d1a7b.PylanceServiceKeys.globalIndices);
          if (!_0x237529) {
            return;
          }
          const _0x29402b = _0x58d1ed.convertOffsetToPosition(_0x38952a, _0x561852.tokenizerOutput.lines);
          const _0x428e70 = _0x4e685b.createAutoImporter(this._program, _0x2f649d, _0x29402b, {
            indices: _0x237529.getIndices(this._program),
            lazyEdit: false,
            includeAliasesFromUserFiles: this.options.includeAliasesFromUserFiles
          }, _0x4eea13);
          if (!_0x428e70) {
            return;
          }
          const _0x556043 = this._program.getSourceMapper(_0x2f649d, _0x4eea13, false, true);
          const _0x768618 = _0x1d8cae.findNodeByOffset(_0x561852.parserOutput.parseTree, _0x38952a) ?? _0x561852.parserOutput.parseTree;
          _0x432afe.forEach(_0x44daf0 => {
            this._applyAutoImport(_0x428e70, _0x768618, _0x556043, _0x2f649d, _0x44daf0, _0x4eea13);
            _0x1ca6e9.doForEachSubtype(_0x44daf0, _0x98ac60 => {
              this._applyAutoImport(_0x428e70, _0x768618, _0x556043, _0x2f649d, _0x98ac60, _0x4eea13);
            });
          });
        }
        applyImports(_0x2ec130, _0x32aa2f, _0x4bf49a, _0x16a560, _0xbc0503) {
          _0x4c7b86.throwIfCancellationRequested(_0xbc0503);
          const _0x475397 = [];
          const _0x415a79 = _0x3704a8.getTopLevelImports(_0x32aa2f.parserOutput.parseTree);
          const _0x1bfd0c = this._tryGetApplyImportResult(_0x415a79, _0x2ec130, _0x32aa2f, _0x16a560, _0xbc0503);
          if (!_0x1bfd0c) {
            return _0x475397;
          }
          this._applyImportResultTo(_0x415a79, _0x1bfd0c, _0x4bf49a, _0x475397, _0xbc0503);
          return _0x475397;
        }
        applyImportsTo(_0x478bb1, _0x5e7874, _0x25d792, _0x262d6c) {
          _0x4c7b86.throwIfCancellationRequested(_0x262d6c);
          const _0x181d1b = _0x3704a8.getTopLevelImports(_0x478bb1.parserOutput.parseTree);
          const _0xacea69 = _0x4567b0.getFileInfo(_0x478bb1.parserOutput.parseTree).fileUri;
          const _0xfd76c8 = this._tryGetApplyImportResult(_0x181d1b, _0xacea69, _0x478bb1, _0x5e7874, _0x262d6c);
          if (!_0xfd76c8) {
            return;
          }
          this._applyImportResultTo(_0x181d1b, _0xfd76c8, 0, _0x25d792, _0x262d6c);
        }
        tryGetImportResult(_0x28d7eb, _0x28aa8a, _0x47871a) {
          const _0x4e7fc7 = _0x4567b0.getFileInfo(_0x28aa8a.parserOutput.parseTree).fileUri;
          return this._tryGetApplyImportResult(_0x28d7eb, _0x4e7fc7, _0x28aa8a, 'absolute', _0x47871a);
        }
        get _configOptions() {
          return this._program.configOptions;
        }
        get _importResolver() {
          return this._program.importResolver;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        _handleBuiltInType(_0x2d5080, _0x3075aa, _0x9e3c79, _0x20ad13, _0x226ecc) {
          if (!_0x20ad13) {
            return _0x226ecc;
          }
          if (_0x3075aa.shared.moduleName === 'typing') {
            _0x226ecc = _0x226ecc ?? _0x9e3c79.uri;
            if (this._program.configOptions.diagnosticRuleSet.pep604Printing && _0x3a6e8e.isOptional(_0x3075aa)) {
              return _0x226ecc;
            }
            this.addImportInfo({
              fileUri: _0x226ecc,
              nameInfo: {
                name: _0x20ad13
              }
            });
            return _0x226ecc;
          }
          if (_0x3075aa.shared.moduleName === 'builtins') {
            if (!_0x226ecc) {
              const _0x2452e8 = _0x2d5080.getDefinitionFromTypingByName('Any');
              if (_0x2452e8.length > 0) {
                _0x226ecc = _0x2452e8[0].uri;
              }
            }
            if (!_0x226ecc) {
              return _0x226ecc;
            }
            if (_0x3075aa.priv.aliasName) {
              this.addImportInfo({
                fileUri: _0x226ecc,
                nameInfo: {
                  name: _0x20ad13
                }
              });
            }
            if (_0x3075aa.priv.literalValue !== undefined) {
              this.addImportInfo({
                fileUri: _0x226ecc,
                nameInfo: {
                  name: 'Literal'
                }
              });
            }
          }
          return _0x226ecc;
        }
        _tryGetApplyImportResult(_0x5f099a, _0x5ea494, _0x30da1d, _0x1595ec, _0x4f9620) {
          const _0x21c93e = this._getImportNameWithModuleInfo(_0x5f099a, _0x5ea494, _0x1595ec);
          const _0x101ae5 = [];
          const _0x25d630 = [];
          for (const _0x27c252 of _0x24ff8d.createMapFromItems(_0x21c93e, _0x327230 => _0x327230.module.moduleName)) {
            _0x4c7b86.throwIfCancellationRequested(_0x4f9620);
            if (!this._tryProcessExistingImports(_0x27c252, _0x5f099a, _0x5ea494, _0x101ae5)) {
              _0x24ff8d.appendArray(_0x25d630, _0x27c252[1]);
              continue;
            }
          }
          _0x101ae5.push({
            kind: 'insert',
            info: _0x25d630
          });
          return {
            parseResults: _0x30da1d,
            applyData: _0x101ae5
          };
        }
        _applyImportResultTo(_0x219584, _0x1d07b4, _0x25b5c3, _0x24fe13, _0x194415) {
          const _0x440303 = _0x1d07b4.parseResults;
          for (const _0x31e676 of _0x1d07b4.applyData) {
            _0x4c7b86.throwIfCancellationRequested(_0x194415);
            if (_0x31e676.kind === 'update') {
              if (_0x1271c3.isArray(_0x24fe13)) {
                _0x24ff8d.appendArray(_0x24fe13, _0x3704a8.getTextEditsForAutoImportSymbolAddition(_0x31e676.info, _0x31e676.importStatement, _0x440303));
              } else {
                this._addOrUpdateImport(_0x31e676.moduleAndInfo, _0x219584, _0x440303, _0x31e676.info, _0x24fe13);
              }
            } else {
              if (_0x31e676.kind === 'insert') {
                if (_0x1271c3.isArray(_0x24fe13)) {
                  _0x24fe13.push(..._0x3704a8.getTextEditsForAutoImportInsertions(_0x31e676.info, _0x219584, _0x440303, _0x58d1ed.convertOffsetToPosition(_0x25b5c3, _0x440303.tokenizerOutput.lines)));
                } else {
                  for (const _0x388ac5 of _0x24ff8d.createMapFromItems(_0x31e676.info, _0x20c28e => _0x20c28e.module.moduleName)) {
                    this._addOrUpdateImport(_0x388ac5, _0x219584, _0x440303, _0x388ac5[1], _0x24fe13);
                  }
                }
              } else {
                _0x22fc13.assertNever(_0x31e676);
              }
            }
          }
        }
        _applyAutoImport(_0x205da9, _0x358033, _0x187c69, _0x44f1d0, _0x1baa16, _0x2136a0) {
          if (!_0x346626.isClass(_0x1baa16) || this._autoImportProcessedSet.has(_0x1baa16)) {
            return;
          }
          this._autoImportProcessedSet.add(_0x1baa16);
          const _0x22038d = _0x187c69.findDeclarationsByType(_0x44f1d0, _0x1baa16, this.options.useTypeAlias);
          const _0x18b111 = this._tryGetAutoImportsFor(_0x205da9, _0x358033, _0x22038d, _0x2136a0);
          if (!_0x18b111) {
            return;
          }
          this.removeImportInfo(_0x18b111.originalDeclInfo);
          const _0x430af2 = {
            fileUri: _0x18b111.declUri,
            nameInfo: {
              name: _0x18b111.name,
              alias: _0x18b111.alias
            }
          };
          this.removeImportInfo(_0x430af2);
          if (!_0x18b111.edits || _0x18b111.edits.length === 0) {
            return;
          }
          this.addImportInfo(_0x430af2);
        }
        _tryGetAutoImportsFor(_0xffd274, _0x4bc7ba, _0x528a61, _0x469745) {
          for (const _0xa0ebee of _0x528a61) {
            const _0x5c7a48 = _0x2ab102.getOutermostClassNameFromDecl(_0xa0ebee);
            if (!_0x5c7a48) {
              continue;
            }
            const _0x5db3f1 = _0x4e685b.getMatchingAutoImports(_0xffd274, _0x4bc7ba, _0x5c7a48, 1, undefined, _0x469745);
            const _0x5c5b87 = this._deletedDecls.concat(...this._importData.declarations.keys());
            for (const _0x1b2242 of _0x5db3f1) {
              for (const _0x30850a of _0x5c5b87) {
                const _0x255162 = this._evaluator.resolveAliasDeclaration(_0x30850a, true);
                const _0x3d4b28 = _0x255162 ? this._getImportInfo(_0x255162) : undefined;
                const _0x46aa82 = this._getImportInfo(_0x30850a);
                if (!_0x46aa82 || !_0x3d4b28) {
                  continue;
                }
                if (this._areImportInfoSame(_0x3d4b28, {
                  fileUri: _0x1b2242.originalDeclUri,
                  nameInfo: {
                    name: _0x1b2242.name,
                    alias: _0x1b2242.alias
                  }
                })) {
                  return {
                    ..._0x1b2242,
                    originalDeclInfo: _0x46aa82
                  };
                }
              }
            }
          }
          return undefined;
        }
        _updateImportData(_0x1052f7) {
          _0x1052f7.declarations.forEach((_0x35ba2d, _0x4a1fa5) => this._importData.declarations.set(_0x4a1fa5, _0x35ba2d));
          this._importData.containsUnreferenceableSymbols = this._importData.containsUnreferenceableSymbols || _0x1052f7.containsUnreferenceableSymbols;
          this._updateImportInfos(_0x1052f7.importInfos);
        }
        _updateImportInfos(_0xe0b6be) {
          if (!_0xe0b6be) {
            return;
          }
          if (this._importData.importInfos) {
            this._importData.importInfos.push(..._0xe0b6be);
          } else {
            this._importData.importInfos = _0xe0b6be;
          }
        }
        _getImportNameWithModuleInfo(_0x49379e, _0x2317eb, _0x59c206) {
          const _0x339894 = [];
          const _0x7f5fcd = this._configOptions.findExecEnvironment(_0x2317eb);
          for (const _0x41c5b0 of this._importData.declarations.keys() ?? []) {
            const _0x203401 = this._getImportInfo(_0x41c5b0, _0x2317eb);
            if (!_0x203401 || _0x791798.isUnresolvedAliasDeclaration(_0x41c5b0)) {
              continue;
            }
            this._appendImportNameInfo(_0x2317eb, _0x7f5fcd, _0x59c206, _0x203401, _0x339894);
          }
          if (this._importData.importInfos) {
            for (const _0x74a16b of this._importData.importInfos) {
              this._appendImportNameInfo(_0x2317eb, _0x7f5fcd, _0x59c206, _0x74a16b, _0x339894);
            }
          }
          if (this.options.usageKind === 'move') {
            return _0x339894;
          }
          return _0x339894.filter(_0x4a828c => {
            const _0x8c5751 = this._tryGetSymbolForImportName(_0x4a828c);
            if (!_0x8c5751) {
              return true;
            }
            for (const _0x1e281f of _0x8c5751.getDeclarations()) {
              const _0x2e8ef2 = this._program.evaluator.getInferredTypeOfDeclaration(_0x8c5751, _0x1e281f);
              if (!_0x2e8ef2) {
                continue;
              }
              return !_0x4c4363.tryGetExistingImportInfo(this._program, _0x49379e, _0x2e8ef2, _0x1e281f);
            }
            return true;
          });
        }
        _appendImportNameInfo(_0x23ea9f, _0x5345de, _0x3f84d5, _0x546594, _0x2353f7) {
          const _0x3e6776 = this._importResolver.getModuleNameForImport(_0x546594.fileUri, _0x5345de);
          if (!_0x3e6776.moduleName) {
            if (!_0x546594.nameInfo.name) {
              return;
            }
            _0x3f84d5 = 'relative';
          }
          const _0x5c1927 = this._program.getSourceFileInfo(_0x546594.fileUri);
          const _0x1f935f = _0x5c1927 ? _0x1da501.isUserCode(_0x5c1927) : _0x3c5900.matchFileSpecs(this._configOptions, _0x546594.fileUri, _0x44a20d.isFile(this._importResolver.fileSystem, _0x546594.fileUri));
          const _0x1fe4a7 = _0x3f84d5 === 'absolute' || _0x3e6776.importType === 0 || _0x3e6776.importType === 1 || !_0x1f935f ? undefined : _0x3704a8.getRelativeModuleName(this._importResolver.fileSystem, _0x23ea9f, _0x546594.fileUri, this._configOptions);
          _0x24ff8d.addIfUnique(_0x2353f7, {
            moduleFileUri: _0x546594.fileUri,
            name: _0x546594.nameInfo.name,
            alias: _0x546594.nameInfo.alias,
            module: _0x3e6776,
            nameForImportFrom: _0x1fe4a7
          }, (_0x4e3c67, _0x13a160) => this._areSame(_0x4e3c67, _0x13a160));
        }
        _tryProcessExistingImports(_0x1f311a, _0x2da55a, _0x5bbe90, _0x2c8783) {
          const _0x47f35e = this._getMatchingImportStatements(_0x1f311a, _0x2da55a, _0x5bbe90);
          for (const _0x3d108b of _0x24ff8d.createMapFromItems(_0x47f35e, _0x188171 => _0x188171.node.nodeType === 23 ? 'import' : 'importFrom')) {
            if (_0x3d108b[0] === 'importFrom') {
              const _0x228626 = _0x3d108b[1].filter(_0x64b2de => _0x64b2de.node.nodeType === 25 && !_0x64b2de.node.d.isWildcardImport);
              if (_0x228626.length === 0) {
                continue;
              }
              const _0x5522af = _0x1f311a[1].filter(_0x17a46a => !_0x228626.some(_0x544efe => _0x544efe.node.nodeType === 25 && _0x544efe.node.d.imports.some(_0x5e042c => {
                var _0x11eb7a;
                return _0x5e042c.d.name.d.value === _0x17a46a.name && ((_0x11eb7a = _0x5e042c.d.alias) === null || _0x11eb7a === undefined ? undefined : _0x11eb7a.d.value) === _0x17a46a.alias;
              })));
              _0x2c8783.push({
                kind: 'update',
                moduleAndInfo: _0x1f311a,
                info: _0x5522af,
                importStatement: _0x228626[0]
              });
              return true;
            }
            if (_0x3d108b[0] === 'import') {
              _0x24ff8d.removeArrayElements(_0x1f311a[1], _0x2f12c1 => !_0x2f12c1.name && _0x3d108b[1].some(_0x2e4f83 => {
                var _0x4bbdfc;
                var _0x17286a;
                return _0x2f12c1.alias === ((_0x17286a = (_0x4bbdfc = _0x2e4f83.subnode) === null || _0x4bbdfc === undefined ? undefined : _0x4bbdfc.d.alias) === null || _0x17286a === undefined ? undefined : _0x17286a.d.value);
              }));
              continue;
            }
          }
          return false;
        }
        _tryGetResolveAliasDeclaration(_0x5e09a5) {
          const _0x47b9ce = this._evaluator.getDeclInfoForNameNode(_0x5e09a5)?.decls;
          const _0x13b854 = _0x47b9ce === null || _0x47b9ce === undefined ? undefined : _0x47b9ce.find(_0x26645f => _0x791798.isAliasDeclaration(_0x26645f));
          if (!_0x13b854) {
            return undefined;
          }
          return this._evaluator.resolveAliasDeclaration(_0x13b854, true);
        }
        _tryGetResolvedModuleNames(_0x351963, _0x199505) {
          var _0x24c68e;
          if (_0x351963.node.nodeType !== 25) {
            return undefined;
          }
          if (_0x351963.node.d.isWildcardImport) {
            return undefined;
          }
          let _0x1cf98a = this._cachedResolvedModuleNames.get(_0x351963);
          if (_0x1cf98a) {
            return _0x1cf98a;
          }
          _0x1cf98a = new Map();
          for (const _0xcd719a of _0x351963.node.d.imports) {
            const _0x42ef65 = this._tryGetResolveAliasDeclaration(_0xcd719a.d.alias ?? _0xcd719a.d.name);
            if (!_0x42ef65 || _0x42ef65.uri.isEmpty() || _0x791798.isAliasDeclaration(_0x42ef65)) {
              continue;
            }
            const _0x4d4e49 = this._importResolver.getModuleNameForImport(_0x42ef65.uri, _0x199505);
            if (!_0x4d4e49.moduleName) {
              continue;
            }
            _0x1cf98a.set(_0x4d4e49.moduleName, ((_0x24c68e = _0xcd719a.d.alias) === null || _0x24c68e === undefined ? undefined : _0x24c68e.d.value) ?? _0xcd719a.d.name.d.value);
          }
          this._cachedResolvedModuleNames.set(_0x351963, _0x1cf98a);
          return _0x1cf98a;
        }
        _tryGetSymbolForImportName(_0xa99d66) {
          const _0x2ca147 = this._program.getSourceFileInfo(_0xa99d66.moduleFileUri);
          if (!_0x2ca147) {
            return undefined;
          }
          this._program.getParseResults(_0xa99d66.moduleFileUri);
          const _0x532cab = _0x2ca147.sourceFile.getModuleSymbolTable();
          if (!_0x532cab) {
            return undefined;
          }
          const _0x260df4 = _0xa99d66.alias ?? _0xa99d66.name;
          if (!_0x260df4) {
            return undefined;
          }
          return _0x532cab.get(_0x260df4);
        }
        _getMatchingImportStatements(_0x5dba90, _0x2b31fa, _0x587a44) {
          const _0x419c1d = this._configOptions.findExecEnvironment(_0x587a44);
          return _0x2b31fa.orderedImports.filter(_0xda8576 => {
            if (_0xda8576.moduleName === _0x5dba90[0]) {
              return true;
            }
            const _0x2cf0fd = this._tryGetResolvedModuleNames(_0xda8576, _0x419c1d);
            if (!_0x2cf0fd || _0x2cf0fd.size === 0) {
              return false;
            }
            const _0x226041 = _0x2cf0fd.get(_0x5dba90[0]);
            return _0x5dba90[1].some(_0x15acd1 => {
              const _0x458d8f = _0x15acd1.alias ?? _0x15acd1.name;
              return _0x458d8f === _0x226041;
            });
          });
        }
        _addOrUpdateImport(_0x5b73f1, _0x15aa7e, _0x1511b1, _0x51f36d, _0x39f247) {
          if (_0x51f36d.length === 0) {
            return;
          }
          const _0x44a3ff = _0x5b73f1[0];
          const _0x3951cf = _0x5b73f1[1].length === 0 ? undefined : _0x5b73f1[1][0].nameForImportFrom;
          const _0x3b8a98 = _0x5b73f1[1].length === 0 ? 2 : _0x3704a8.getImportGroupFromModuleNameAndType(_0x5b73f1[1][0].module);
          _0x39f247.addOrUpdateImport(_0x1511b1, _0x15aa7e, {
            name: _0x44a3ff,
            nameForImportFrom: _0x3951cf
          }, _0x3b8a98, _0x51f36d);
        }
        _getImportInfo(_0x4c4683, _0x496bf2) {
          var _0x473ef3;
          var _0x556051;
          if (_0x791798.isAliasDeclaration(_0x4c4683)) {
            if (!_0x4c4683.node) {
              return {
                fileUri: _0x4c4683.uri,
                nameInfo: {}
              };
            }
            if (_0x4c4683.node.nodeType === 24) {
              const _0x2f15b6 = this._evaluator.getDeclInfoForNameNode(_0x4c4683.node.d.module.d.nameParts[_0x4c4683.node.d.module.d.nameParts.length - 1])?.decls;
              if (!_0x2f15b6 || _0x2f15b6.length === 0) {
                return undefined;
              }
              return {
                fileUri: _0x2f15b6[0].uri,
                nameInfo: {
                  alias: _0x4c4683.usesLocalName ? (_0x473ef3 = _0x4c4683.node.d.alias) === null || _0x473ef3 === undefined ? undefined : _0x473ef3.d.value : undefined
                }
              };
            }
            if (_0x4c4683.node.nodeType === 26) {
              let _0x1ab536 = _0x4c4683.uri;
              if (!_0x1ab536 || _0x1ab536.isEmpty()) {
                if (_0x4c4683.submoduleFallback) {
                  _0x1ab536 = _0x4c4683.submoduleFallback.uri.getDirectory();
                }
              }
              if (!_0x1ab536 || _0x1ab536.isEmpty()) {
                return undefined;
              }
              if (_0x496bf2 && _0x1ab536.equals(_0x496bf2) && !_0x4c4683.usesLocalName && !_0x4c4683.submoduleFallback) {
                return undefined;
              }
              return {
                fileUri: _0x1ab536,
                nameInfo: {
                  name: _0x4c4683.symbolName,
                  alias: _0x4c4683.usesLocalName ? (_0x556051 = _0x4c4683.node.d.alias) === null || _0x556051 === undefined ? undefined : _0x556051.d.value : undefined
                }
              };
            }
            if (_0x4c4683.node.nodeType === 25) {
              return {
                fileUri: _0x4c4683.uri,
                nameInfo: {
                  name: _0x4c4683.symbolName
                }
              };
            }
          }
          if (_0x791798.isVariableDeclaration(_0x4c4683) || _0x791798.isFunctionDeclaration(_0x4c4683) || _0x791798.isClassDeclaration(_0x4c4683) || _0x791798.isSpecialBuiltInClassDeclaration(_0x4c4683)) {
            const _0x732fd7 = _0x23933c.getNameFromDeclaration(_0x4c4683);
            if (!_0x732fd7) {
              return undefined;
            }
            if (_0x496bf2 && _0x4c4683.uri.equals(_0x496bf2)) {
              return undefined;
            }
            return {
              fileUri: _0x4c4683.uri,
              nameInfo: {
                name: _0x732fd7
              }
            };
          }
          return undefined;
        }
        _areSame(_0x456224, _0x5961ac) {
          return _0x456224.alias === _0x5961ac.alias && _0x456224.name === _0x5961ac.name && _0x456224.module.importType === _0x5961ac.module.importType && _0x456224.module.isLocalTypingsFile === _0x5961ac.module.isLocalTypingsFile && _0x456224.module.moduleName === _0x5961ac.module.moduleName;
        }
        _areImportInfoSame(_0x1435df, _0x1449eb) {
          return _0x1435df === _0x1449eb || _0x1435df.fileUri.equals(_0x1449eb.fileUri) && _0x1435df.nameInfo.name === _0x1449eb.nameInfo.name && _0x1435df.nameInfo.alias === _0x1449eb.nameInfo.alias;
        }
      }
      exports.ImportAdder = _0x27b06e;
      class _0x426b15 extends _0x1f137c.ParseTreeWalker {
        constructor(_0x3d60ce, _0x941f9e, _0x35ed3b, _0x90dd73, _0x2977c9) {
          super();
          this._evaluator = _0x3d60ce;
          this._root = _0x941f9e;
          this._ranges = _0x35ed3b;
          this._options = _0x90dd73;
          this._token = _0x2977c9;
          this.declsForSymbols = new Map();
          this.containsUnreferenceableSymbols = false;
          this._fileUri = _0x4567b0.getFileInfo(this._root).fileUri;
        }
        collect(_0x1c4010) {
          if (this._ranges.length === 0) {
            return;
          }
          const _0x2f3369 = this._ranges.length === 1 ? this._ranges[0].start : Math.min(...this._ranges.map(_0x59bb84 => _0x59bb84.start));
          const _0x23be6b = this._ranges.length === 1 ? _0x29c338.TextRange.getEnd(this._ranges[0]) : Math.max(...this._ranges.map(_0x20cdb4 => _0x29c338.TextRange.getEnd(_0x20cdb4)));
          const _0x2b9788 = _0x29c338.TextRange.fromBounds(_0x2f3369, _0x23be6b);
          let _0x474740 = _0x1d8cae.findNodeByOffset(_0x1c4010, _0x2b9788.start);
          if (!_0x474740) {
            this.walk(_0x1c4010);
            return;
          }
          while (!_0x29c338.TextRange.containsRange(_0x474740, _0x2b9788)) {
            _0x474740 = _0x474740.parent;
            if (!_0x474740) {
              this.walk(_0x1c4010);
              return;
            }
          }
          this.walk(_0x474740);
        }
        walk(_0x20e867) {
          if (!this._ranges.some(_0x597523 => _0x29c338.TextRange.overlapsRange(_0x597523, _0x20e867))) {
            return;
          }
          super.walk(_0x20e867);
        }
        visitModuleName(_0x13ead9) {
          return false;
        }
        visitName(_0x5d98d2) {
          if (!this._ranges.some(_0x19af16 => _0x29c338.TextRange.containsRange(_0x19af16, _0x5d98d2))) {
            return false;
          }
          _0x4c7b86.throwIfCancellationRequested(this._token);
          if (!_0x1d8cae.isLastNameOfDottedName(_0x5d98d2)) {
            return false;
          }
          const _0x5276f2 = this._evaluator.getType(_0x5d98d2);
          if (_0x5276f2?.category === 9) {
            return false;
          }
          if (this._options.pep604 && _0x5276f2 && (_0x3a6e8e.isUnion(_0x5276f2) || _0x3a6e8e.isOptional(_0x5276f2))) {
            return false;
          }
          const _0x13f7b3 = _0x1d8cae.getDottedName(_0x1d8cae.getDottedNameWithGivenNodeAsLastName(_0x5d98d2));
          if (!_0x13f7b3 || _0x13f7b3.length === 0) {
            return false;
          }
          const _0xacc4eb = this._getNameToCreateImportFor(_0x13f7b3);
          if (!_0xacc4eb) {
            return false;
          }
          const _0x38804d = this._getDeclarationsInModuleFirst(_0xacc4eb);
          if (!_0x38804d || _0x38804d.length === 0) {
            return false;
          }
          if (_0x13f7b3.length === 1) {
            this._handleName(_0xacc4eb, _0x38804d);
            return false;
          }
          this._addDeclsForSymbols(_0x38804d, _0xacc4eb, _0x13f7b3);
          return false;
        }
        _getNameToCreateImportFor(_0x230bb4) {
          var _0x4eaa01;
          if (_0x230bb4.length === 1) {
            return _0x230bb4[0];
          }
          if (this._options.usageKind === 'move') {
            return _0x230bb4[0];
          }
          if (this._options.usageKind === 'typeGeneration') {
            let _0x386143 = undefined;
            for (let _0x1926f6 = 0; _0x1926f6 < _0x230bb4.length; _0x1926f6++) {
              const _0x2b5d34 = _0x230bb4[_0x1926f6];
              const _0x290359 = (_0x4eaa01 = this._evaluator.getDeclInfoForNameNode(_0x2b5d34)?.decls) === null || _0x4eaa01 === undefined ? undefined : _0x4eaa01.map(_0x4d560a => this._evaluator.resolveAliasDeclaration(_0x4d560a, true, {
                allowExternallyHiddenAccess: true,
                skipFileNeededCheck: true
              })).filter(_0x1271c3.isDefined);
              if (!_0x290359) {
                return _0x386143;
              }
              if (_0x290359.some(_0x4b8801 => !this._isTopLevelDeclaration(_0x4b8801))) {
                return _0x386143;
              }
              _0x386143 = _0x2b5d34;
            }
            return _0x386143;
          }
          _0x22fc13.assertNever(this._options.usageKind, 'must handle new kind');
        }
        _addDeclsForSymbols(_0x20a742, _0x353c71, _0x36d0e3) {
          const _0x1d27de = _0x36d0e3.findIndex(_0x153191 => _0x153191 === _0x353c71) + 1;
          for (const _0x145e31 of _0x20a742) {
            if (!_0x791798.isAliasDeclaration(_0x145e31) || _0x145e31.node.nodeType !== 24) {
              this._handleName(_0x353c71, [_0x145e31]);
              continue;
            }
            if (_0x145e31.usesLocalName) {
              this._handleName(_0x353c71, [_0x145e31]);
              continue;
            }
            if (_0x1d27de > 0) {
              this._handleImplicitImports(_0x145e31, _0x36d0e3, _0x1d27de);
            }
          }
        }
        _getDeclarationsInModuleFirst(_0x30cf01) {
          const _0x71fedf = this._getDeclarationsInModule(_0x30cf01);
          if (_0x71fedf && _0x71fedf.length > 0) {
            return _0x71fedf;
          }
          const _0x133284 = this._evaluator.getDeclInfoForNameNode(_0x30cf01)?.decls;
          if (_0x133284 && _0x133284.length > 0) {
            return _0x133284;
          }
          return undefined;
        }
        _getDeclarationsInModule(_0x1ff525) {
          var _0x31fcb5;
          if ((_0x31fcb5 = this._evaluator.getDeclInfoForNameNode(_0x1ff525)?.decls) === null || _0x31fcb5 === undefined) {
            return undefined;
          } else {
            return _0x31fcb5.filter(_0x2461ac => _0x23933c.isDefinedInFile(_0x2461ac, this._fileUri));
          }
        }
        _handleImplicitImports(_0x2549c6, _0xb74985, _0x214cd0) {
          if (_0xb74985.length === _0x214cd0) {
            return;
          }
          if (!_0x2549c6.implicitImports) {
            this._handleName(_0xb74985[_0x214cd0 - 1], [_0x23933c.synthesizeAliasDeclaration(_0x2549c6.uri)]);
            return;
          }
          const _0xfebd48 = _0x2549c6.implicitImports.get(_0xb74985[_0x214cd0].d.value);
          if (!_0xfebd48) {
            this._handleName(_0xb74985[_0x214cd0 - 1], [_0x23933c.synthesizeAliasDeclaration(_0x2549c6.uri)]);
            return;
          }
          this._handleImplicitImports(_0xfebd48, _0xb74985, _0x214cd0 + 1);
        }
        _handleName(_0x1a9982, _0x30810f) {
          for (const _0x19e788 of _0x30810f) {
            if (_0x19e788.node && this._ranges.some(_0x41ee0e => _0x29c338.TextRange.containsRange(_0x41ee0e, _0x19e788.node))) {
              continue;
            }
            const _0x788aa3 = this._isTopLevelDeclaration(_0x19e788);
            if (!_0x788aa3) {
              this.containsUnreferenceableSymbols = true;
              continue;
            }
            this._addName(_0x19e788, _0x1a9982);
          }
        }
        _isTopLevelDeclaration(_0x1a2af6) {
          if (_0x791798.isParamDeclaration(_0x1a2af6)) {
            return false;
          }
          if (_0x791798.isVariableDeclaration(_0x1a2af6) || _0x791798.isFunctionDeclaration(_0x1a2af6) || _0x791798.isClassDeclaration(_0x1a2af6)) {
            const _0x4c5387 = _0x23933c.getNameNodeForDeclaration(_0x1a2af6);
            if (!_0x4c5387) {
              return false;
            }
            const _0x28fd2f = _0x433e2a.getScopeForNode(_0x4c5387);
            if (!_0x28fd2f) {
              return false;
            }
            const _0xba08a1 = _0x28fd2f.lookUpSymbolRecursive(_0x4c5387.d.value);
            if (!_0xba08a1 || _0xba08a1.scope.type !== 4) {
              return false;
            }
          }
          return true;
        }
        _addName(_0x5ae017, _0xabb496) {
          _0x24ff8d.getOrAdd(this.declsForSymbols, _0x5ae017, () => []).push(_0xabb496);
        }
      }
      function _0x3f20b2(_0x32a844) {
        return _0x32a844 && _0x32a844.parseTree && _0x32a844.importedModules && _0x32a844.futureImports && _0x32a844.containsWildcardImport !== undefined && _0x32a844.typingSymbolAliases;
      }
    },
    95604: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.IndexSerializer = undefined;
      exports.getLocalIndicesCachePath = _0x1fff01;
      exports.getGlobalIndicesCachePath = _0x245c29;
      exports.readPersistedIndices = _0x575cda;
      exports.writePersistedIndices = _0x5bda38;
      const _0x906d12 = require(58147);
      const _0x4cf76e = __importStar(require(48281));
      const _0x207a52 = require(27113);
      const _0x36337a = require(16835);
      const _0x25e5eb = require(49137);
      const _0x24a918 = require(69482);
      const _0x1928dd = require(77001);
      function _0x1fff01(_0x1862e2, _0x19e2c4, _0x1f2686) {
        return _0x16f8e8(_0x25e5eb.getSpecialFolder(_0x1862e2, _0x25e5eb.SpecialFoldersKind.LocalIndices).combinePaths(_0x24a918.hashString(_0x19e2c4.toString())), _0x1f2686);
      }
      function _0x245c29(_0x3358dd, _0x42e1eb) {
        return _0x16f8e8(_0x25e5eb.getSpecialFolder(_0x3358dd, _0x25e5eb.SpecialFoldersKind.GlobalIndices), _0x42e1eb);
      }
      function _0x16f8e8(_0x10f5b5, _0x29ff0b) {
        return _0x10f5b5.combinePaths(_0x29ff0b + '.json');
      }
      function _0x575cda(_0x327189, _0x3e7003, _0x46cd54, _0x306927) {
        if (!_0x327189.existsSync(_0x46cd54)) {
          if (_0x306927 === null || _0x306927 === undefined) {
            undefined;
          } else {
            _0x306927.info(`No persisted indices found at ${_0x46cd54}`);
          }
          return undefined;
        }
        let _0x2feefe;
        try {
          _0x2feefe = _0x327189.readFileSync(_0x46cd54, 'utf8');
          const _0x4cea81 = JSON.parse(_0x2feefe);
          const _0x54f99c = new _0x1928dd.UriMap();
          _0x4cea81.forEach(_0x32d7cb => {
            const _0x2c08b5 = _0x32d7cb[0];
            const _0x323f67 = _0x1cb4c3(_0x2c08b5, _0x3e7003);
            _0x54f99c.set(_0x323f67, {
              uri: _0x323f67,
              privateOrProtected: _0x32d7cb[1][0],
              symbols: _0x32d7cb[1][1].map(_0x5d1ed7 => _0xc3551(_0x5d1ed7, _0x3e7003))
            });
          });
          return _0x54f99c;
        } catch (_0xd3e46a) {
          if (_0x306927 === null || _0x306927 === undefined) {
            undefined;
          } else {
            _0x306927.error(`Failed to read ${_0x46cd54}. ${_0x4cf76e.getErrorString(_0xd3e46a)}`);
          }
          return undefined;
        }
        function _0xc3551(_0x1005e9, _0x21cfec) {
          const _0x3e3639 = _0x1005e9[3];
          const _0x3eb81f = _0x3e3639 ? _0x1cb4c3(_0x3e3639[1], _0x21cfec) : undefined;
          return {
            name: _0x1005e9[0],
            visibilityFlags: _0x1005e9[1],
            kind: _0x1005e9[2],
            itemKind: _0x36337a.convertSymbolKindToCompletionItemKind(_0x1005e9[2]),
            alias: _0x3e3639 ? {
              originalName: _0x3e3639[0],
              moduleUri: _0x3eb81f,
              kind: _0x3e3639[2],
              itemKind: _0x36337a.convertSymbolKindToCompletionItemKind(_0x3e3639[2])
            } : undefined,
            range: undefined,
            selectionRange: undefined,
            children: undefined
          };
        }
      }
      function _0x22a0bd(_0x211ad0, _0x504847) {
        if (_0x504847) {
          return _0x504847.getRelativePathComponents(_0x211ad0).join('/');
        } else {
          return _0x211ad0.toJsonObj();
        }
      }
      function _0x1cb4c3(_0x13d358, _0x4201e3) {
        if (_0x4201e3) {
          return _0x4201e3.combinePaths(_0x13d358);
        }
        return _0x207a52.Uri.fromJsonObj(_0x13d358);
      }
      function _0x5bda38(_0x4a86cb, _0x564ab1, _0x4e7b27, _0x4d2104, _0x5d92af) {
        const _0x12137a = [];
        for (const _0x11872f of [..._0x4d2104.keys()].sort()) {
          const _0x43edbb = _0x4d2104.get(_0x11872f);
          const _0x5dc5fa = _0x43edbb.symbols;
          if (_0x564ab1) {
            _0x4cf76e.assert(!_0x5dc5fa.some(_0x2fbc2d => _0x2fbc2d.alias && !_0x2fbc2d.alias.moduleUri.startsWith(_0x564ab1)));
          }
          _0x12137a.push([_0x22a0bd(_0x11872f, _0x564ab1), [_0x43edbb.privateOrProtected, _0x5dc5fa.map(_0x2a726f => _0x1a71a7(_0x2a726f, _0x564ab1))]]);
        }
        const _0x5bc505 = JSON.stringify(_0x12137a);
        try {
          _0x4a86cb.writeFileSync(_0x4e7b27, _0x5bc505, 'utf8');
          return true;
        } catch (_0x2bc3b7) {
          if (_0x5d92af === null || _0x5d92af === undefined) {
            undefined;
          } else {
            _0x5d92af.error(`Failed to create ${_0x4e7b27}. ${_0x4cf76e.getErrorString(_0x2bc3b7)}`);
          }
          return false;
        }
        function _0x1a71a7(_0xa3d93b, _0x4856d3) {
          const _0x396016 = _0xa3d93b.alias;
          _0x4cf76e.assert(!_0x396016 || !_0x4856d3 || _0x396016.moduleUri.startsWith(_0x4856d3));
          return [_0xa3d93b.name, _0xa3d93b.visibilityFlags, _0xa3d93b.kind, _0x396016 ? [_0x396016.originalName, _0x22a0bd(_0x396016.moduleUri, _0x4856d3), _0x396016.kind] : undefined];
        }
      }
      class _0x241437 {
        constructor(_0x133c9a, _0x24cd6e, _0x2eec3e) {
          this._importResolver = _0x133c9a;
          this._regenerateStdLibIndices = _0x24cd6e;
          this._localStorageUri = _0x2eec3e;
        }
        tryLoadCachedStubs(_0x480b07, _0x573f62) {
          const _0x31eadd = new Map();
          for (const _0x1c6ed8 of _0x480b07.values()) {
            const _0x2567b4 = _0x906d12.createMapFromItems(_0x1c6ed8.filter(_0x366c86 => this._isUsable(_0x366c86) && !!_0x366c86.packageName && !_0x573f62.has(_0x366c86.uri)), _0x2aa768 => _0x2aa768.packageName);
            for (const [_0xf6b5b3, _0x1e9696] of _0x2567b4) {
              const _0x106ee0 = this._tryGetCachePath(_0x1e9696);
              if (!_0x106ee0) {
                continue;
              }
              const _0x7bcabe = _0x575cda(this._fs, undefined, _0x106ee0);
              if (_0x7bcabe) {
                _0x31eadd.set(_0xf6b5b3, _0x7bcabe);
                _0x1e9696.forEach(_0x292b62 => {
                  const _0x216cb9 = _0x7bcabe.get(_0x292b62.uri);
                  if (_0x216cb9) {
                    _0x573f62.set(_0x292b62.uri, _0x216cb9);
                  }
                });
              }
            }
          }
          return _0x31eadd;
        }
        trySaveCachedStubs(_0x336d57, _0x445f06, _0x2153c2) {
          for (const _0x2a8857 of _0x336d57.values()) {
            const _0x5a021c = _0x906d12.createMapFromItems(_0x2a8857.filter(_0x5df0f0 => {
              var _0x4f42f6;
              return this._isUsable(_0x5df0f0) && !!_0x5df0f0.packageName && _0x2153c2.has(_0x5df0f0.uri) && !((_0x4f42f6 = _0x445f06.get(_0x5df0f0.packageName)) === null || _0x4f42f6 === undefined ? undefined : _0x4f42f6.get(_0x5df0f0.uri));
            }), _0x23224e => _0x23224e.packageName);
            for (const [_0x1f6d3c, _0x57e845] of _0x5a021c) {
              const _0x1dd6b6 = _0x445f06.get(_0x1f6d3c) ?? new _0x1928dd.UriMap();
              _0x57e845.forEach(_0x2f9ee4 => _0x1dd6b6.set(_0x2f9ee4.uri, _0x2153c2.get(_0x2f9ee4.uri)));
              const _0x281613 = this._tryGetCachePath(_0x57e845);
              if (!_0x281613) {
                continue;
              }
              const _0x1ed962 = _0x281613.getDirectory();
              try {
                this._fs.mkdirSync(_0x1ed962, {
                  recursive: true
                });
              } catch {
                return;
              }
              if (!_0x5bda38(this._fs, undefined, _0x281613, _0x1dd6b6)) {
                return;
              }
            }
          }
        }
        get _fs() {
          return this._importResolver.fileSystem;
        }
        _isUsable(_0x457afe) {
          const _0x709f7a = this._regenerateStdLibIndices || !_0x457afe.isStdLib;
          if (this._localStorageUri) {
            return _0x709f7a;
          } else {
            return _0x457afe.isTypeshedStub || _0x457afe.isBundledStub;
          }
        }
        _tryGetCachePath(_0xf31451) {
          if (_0xf31451.length === 0) {
            return undefined;
          }
          const _0xddb07f = _0xf31451[0];
          if (_0xddb07f.isTypeshedStub || _0xddb07f.isBundledStub) {
            return _0x245c29(this._fs, _0xddb07f.packageName);
          }
          return _0x1fff01(this._fs, this._localStorageUri, _0xddb07f.packageName);
        }
      }
      exports.IndexSerializer = _0x241437;
    },
    7587: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ModuleFilesExecEnvMap = exports.IndexingResultMap = exports.BackgroundIndexRunner = exports.Indexer = undefined;
      exports.verifyPersistedIndices = _0x1ed77e;
      exports.createImportResolverWithPartialStubs = _0x5743da;
      exports.processIndexingRequest = _0x1249cf;
      const _0x388a42 = require(56911);
      const _0x59a2e2 = require(28167);
      const _0x56c7c6 = require(79253);
      const _0xc06a73 = __importStar(require(16259));
      const _0x183630 = require(12097);
      const _0x12ef84 = require(94953);
      const _0x5337d3 = require(91426);
      const _0xff88ff = require(58147);
      const _0x57ef96 = require(12522);
      const _0x1a4f26 = require(25075);
      const _0x286324 = __importStar(require(48281));
      const _0x3f24d1 = require(51507);
      const _0xe2bce6 = require(34487);
      const _0x44c1e6 = require(51862);
      const _0x175f9d = require(71745);
      const _0x5b4c3d = __importStar(require(89740));
      const _0xa3215 = require(27113);
      const _0x11d259 = require(5884);
      const _0x251529 = require(85417);
      const _0x39b48b = require(54700);
      const _0x54dae9 = require(16589);
      const _0x324a1a = require(94818);
      const _0x369c87 = require(30048);
      const _0x552cf5 = require(69482);
      const _0x193a94 = require(77001);
      const _0x38e59b = require(54802);
      const _0x8b13db = require(22205);
      const _0x2413f7 = require(31753);
      const _0x345634 = require(89750);
      const _0x54c920 = require(72412);
      const _0x3532d9 = require(95604);
      const _0x59ca9d = require(77907);
      const _0x3a9e60 = require(74899);
      function _0x31e433(_0x5a02a0, _0x3ee07f) {
        let _0x5395bf = 0;
        if (_0x5a02a0 === _0x3ee07f) {
          return -1;
        }
        while (_0x5a02a0[_0x5395bf] === _0x3ee07f[_0x5395bf]) {
          _0x5395bf++;
        }
        return _0x5395bf;
      }
      function _0x1ed77e(_0x45a671, _0x2cc657, _0x3c734c, _0x1771fb) {
        const _0xa0984a = _0x3532d9.readPersistedIndices(_0x45a671, _0x2cc657, _0x3c734c);
        _0x286324.assert(_0x1771fb.size === _0xa0984a.size);
        for (const _0x4e5c7f of _0x1771fb.keys()) {
          const _0x2ffd3d = _0x1771fb.get(_0x4e5c7f);
          const _0x5d3e06 = _0xa0984a.get(_0x4e5c7f);
          const _0xe05adb = _0x251529.serialize(_0x2ffd3d);
          const _0x58c717 = _0x251529.serialize(_0x5d3e06);
          if (_0xe05adb !== _0x58c717) {
            _0x286324.assert(`Indice for ${_0x4e5c7f} is different at position ${_0x31e433(_0xe05adb, _0x58c717)}.`);
          }
        }
      }
      function _0x5743da(_0x4ddac8, _0x48dba4, _0x1c8096) {
        const _0x4b6ea3 = _0x345634.createPylanceImportResolver(_0x4ddac8, _0x48dba4, _0x1c8096);
        _0x4b6ea3.ensurePartialStubPackages(_0x48dba4.findExecEnvironment(_0x48dba4.projectRoot));
        return _0x4b6ea3;
      }
      class _0xb84ba2 {
        constructor(_0x589553, _0x1602d3, _0x59da74, _0x30c811, _0x15172d) {
          this._importResolver = _0x589553;
          this._indexOptions = _0x59da74;
          this._serviceProvider = _0x30c811;
          this._logTracker = _0x15172d;
          this._configOptions = _0x251529.clone(_0x1602d3);
          this._configOptions.indexGenerationMode = true;
          this._configOptions.useLibraryCodeForTypes = true;
        }
        static requestIndexingFromBackgroundThread(_0x500358, _0x1c4477, _0x253788, _0x463ece, _0xadf183, _0x167945, _0xf250d8, _0x266b51) {
          var _0x575875;
          const _0x559bda = _0x253788.get(_0x369c87.PylanceServiceKeys.globalIndices);
          if (!_0xadf183.indexing || _0xf250d8 !== 0) {
            const _0xa83843 = new _0x44c1e6.LogTracker(_0x253788.console(), 'IDX(FG)');
            const _0x402921 = new _0xb84ba2(_0x167945, _0xadf183, _0x463ece, _0x253788, _0xa83843);
            _0xa83843.log(`index libraries ${_0xadf183.projectRoot} (${_0x500358})`, _0x4e4850 => {
              const _0xb10172 = _0xa83843.log('read stdlib indices', _0x3f1f70 => {
                return _0x402921.getStdLibIndices();
              });
              _0x4e4850.add(_0xb10172 ? 'succeed' : 'failed');
              if (_0xb10172) {
                _0x559bda.reset(_0x1c4477);
                _0x50ed0b(_0x1c4477, _0xadf183, _0xb10172, _0x559bda);
              }
            });
            return;
          }
          if ((_0x575875 = _0xb84ba2._workerKillSwitchSource) === null || _0x575875 === undefined) {
            undefined;
          } else {
            _0x575875.cancel();
          }
          _0xb84ba2._workerKillSwitchSource = new _0x388a42.CancellationTokenSource();
          _0xb84ba2.cancelIndexingRequest(_0x1c4477);
          const _0x51554f = new _0xe2bce6.FileBasedCancellationProvider('indexer');
          const _0xa34bc0 = _0x51554f.createCancellationTokenSource();
          _0xb84ba2._cancellationSourcePerWorkspace.set(_0x1c4477, _0xa34bc0);
          const _0x535a1a = _0xb84ba2._getWorker(_0x500358, _0x253788);
          const _0x1eaba3 = _0xb84ba2._workerKillSwitchSource.token;
          _0xb84ba2._lastRequest = _0xb84ba2._lastRequest.then(() => _0xb84ba2._processIndexingRequest(_0x535a1a, _0x500358, _0x1c4477, _0x167945.fileSystem, _0x253788.console(), _0x463ece, _0xadf183, _0x559bda, _0x266b51, _0xa34bc0, _0x1eaba3));
        }
        static cancelIndexingRequest(_0x35edc7) {
          const _0xe4ba33 = _0xb84ba2._cancellationSourcePerWorkspace.get(_0x35edc7);
          if (!_0xe4ba33) {
            return false;
          }
          _0xe4ba33.cancel();
          return true;
        }
        scanPackages(_0x1c15db, _0x1676d1) {
          _0x5337d3.throwIfCancellationRequested(_0x1676d1);
          return this._logTracker.log(`scan packages ${this._configOptions.projectRoot}`, _0x31ff71 => {
            const _0x225474 = this._logTracker.log('read stdlib indices', _0x142031 => {
              return this.getStdLibIndices();
            });
            const _0xc2e007 = this._indexOptions.packageDepths.find(_0x182f1e => !_0x182f1e[0]);
            const _0x1d7477 = _0xc2e007 ? {
              maxDepth: _0xc2e007[1],
              includeAllSymbols: _0xc2e007[2]
            } : 1;
            const _0x29ba37 = new _0x2413f7.PackageScanner(this._configOptions, this._importResolver, _0x225474, true, _0x1d7477, new Map(this._indexOptions.packageDepths.filter(_0x36a610 => !!_0x36a610[0]).map(_0x26e505 => [_0x26e505[0], {
              maxDepth: _0x26e505[1],
              includeAllSymbols: _0x26e505[2]
            }])), _0x1c15db);
            _0x29ba37.scan(_0x1676d1);
            const _0x36779a = _0x29ba37.getModuleFilesPerExecEnv();
            return {
              stdLibIndices: _0x225474,
              moduleFilesPerExecEnv: _0x36779a,
              fileCache: _0x29ba37.getFileCache()
            };
          });
        }
        indexPackages(_0x2800fc, _0x1099f0, _0x62affd, _0x4811f7) {
          _0x5337d3.throwIfCancellationRequested(_0x4811f7);
          const _0xaa79c = new _0x3532d9.IndexSerializer(this._importResolver, this._indexOptions.regenerateStdLibIndices, this._indexOptions.localStorageUri);
          return this._logTracker.log(`index packages ${this._configOptions.projectRoot}`, _0x39f78b => {
            const _0x153156 = new _0x193a94.UriMap();
            const _0x444f52 = _0xaa79c.tryLoadCachedStubs(_0x1099f0, _0x153156);
            const _0x363d95 = new _0x56ed16();
            const _0x271088 = new _0x56c7c6.Program(this._importResolver, this._configOptions, this._serviceProvider, this._logTracker);
            for (const [_0x382c30, _0x3c7621] of _0x1099f0) {
              this._logTracker.log(`index execution environment ${_0x382c30}`, _0x494722 => {
                const _0x207546 = this._configOptions.getExecutionEnvironments().find(_0x1f93d9 => {
                  var _0x26adf0;
                  if ((_0x26adf0 = _0x1f93d9.root) === null || _0x26adf0 === undefined) {
                    return undefined;
                  } else {
                    return _0x26adf0.equals(_0x382c30);
                  }
                });
                const _0x26e0b2 = _0x62affd.length <= 0 ? _0x3c7621 : _0x3c7621.filter(_0x4c6f5d => !_0x62affd.some(_0x553740 => _0x4c6f5d.uri.startsWith(_0x553740)));
                const _0x10e167 = new _0x193a94.UriMap();
                for (const _0x5c0542 of _0x26e0b2) {
                  const _0x30db02 = _0x153156.get(_0x5c0542.uri);
                  if (_0x30db02) {
                    _0x10e167.set(_0x5c0542.uri, _0x30db02);
                  }
                }
                const _0x1b0d60 = _0x26e0b2.filter(_0x5c6e77 => !_0x10e167.get(_0x5c6e77.uri));
                for (const _0x2347d5 of _0x1b0d60) {
                  _0x271088.addTrackedFile(_0x2347d5.uri, true, _0x2347d5.pyTypedPackage);
                }
                this._indexProgram(_0x271088, _0x1b0d60.map(_0x5b36c2 => ({
                  uri: _0x5b36c2.uri,
                  includeAllSymbols: _0x5b36c2.includeAllSymbols
                })), _0x10e167, false, _0x4811f7);
                _0x4752c7(this._importResolver, _0x207546, _0x10e167);
                for (const _0x5ec166 of _0x1b0d60) {
                  const _0x15d521 = _0x10e167.get(_0x5ec166.uri);
                  if (_0x15d521) {
                    _0x153156.set(_0x5ec166.uri, _0x15d521);
                  }
                }
                const _0x21b5f3 = _0x2800fc === null || _0x2800fc === undefined ? undefined : _0x2800fc.get(_0x382c30);
                if (_0x21b5f3) {
                  for (const [_0x1f16bf, _0x98519a] of _0x21b5f3) {
                    _0x10e167.set(_0x1f16bf, _0x98519a);
                  }
                }
                _0x494722.add(`found ${_0x212960(_0x10e167)} in ${_0x10e167.size} files`);
                _0x363d95.set(_0x382c30, _0x10e167);
              });
            }
            _0xaa79c.trySaveCachedStubs(_0x1099f0, _0x444f52, _0x153156);
            _0x39f78b.add(`found ${_0x394370(_0x363d95)} in ${_0x1099f0.size} exec envs`);
            return _0x363d95;
          });
          function _0x394370(_0x7a2a15) {
            let _0xb9f4be = 0;
            for (const _0x4ed640 of _0x7a2a15.values()) {
              _0xb9f4be += _0x212960(_0x4ed640);
            }
            return _0xb9f4be;
          }
          function _0x212960(_0x27f94d) {
            let _0x3be499 = 0;
            for (const _0x27fd94 of _0x27f94d.values()) {
              _0x3be499 += _0x27fd94.symbols.length;
            }
            return _0x3be499;
          }
        }
        getStdLibIndices() {
          if (this._indexOptions.regenerateStdLibIndices) {
            return undefined;
          }
          const _0x17cfef = _0xc06a73.getTypeShedFallbackPath(this._importResolver.fileSystem);
          if (!_0x17cfef) {
            return undefined;
          }
          const _0x165c9c = this._indexOptions.packageDepths.filter(_0xca887b => !!_0xca887b[0] && _0xca887b[1] === 0).map(_0xed016 => _0xed016[0]);
          const _0x33713a = _0xc06a73.getTypeshedSubdirectory(_0x17cfef, true);
          const _0x5434d3 = 'stdlib.json';
          const _0x587844 = new _0x56ed16();
          const _0x428f71 = this._serviceProvider.tryGet(_0x369c87.PylanceServiceKeys.globalIndices);
          let _0x5441d3 = _0x428f71 === null || _0x428f71 === undefined ? undefined : _0x428f71.getPersistLibrary(_0x5434d3);
          for (const _0x4c2ddc of this._configOptions.getExecutionEnvironments()) {
            const _0x48b1c4 = this._importResolver.getTypeshedStdLibPath(_0x4c2ddc);
            if (_0x48b1c4 !== _0x33713a) {
              continue;
            }
            if (!_0x5441d3) {
              const _0x3beff0 = this._importResolver.fileSystem.getModulePath().combinePaths('bundled', 'indices', 'stdlib.json');
              _0x5441d3 = _0x3532d9.readPersistedIndices(this._importResolver.fileSystem, _0x33713a, _0x3beff0, this._serviceProvider.console());
              if (!_0x5441d3) {
                return undefined;
              }
              if (_0x165c9c.length > 0) {
                for (const _0x34fe10 of _0x5441d3.keys()) {
                  const _0x45d4f3 = _0x5441d3.get(_0x34fe10);
                  const _0x28e477 = this._importResolver.getModuleNameForImport(_0x45d4f3.uri, _0x4c2ddc);
                  if (_0x165c9c.some(_0x125ad7 => _0x28e477.moduleName.startsWith(_0x125ad7))) {
                    _0x5441d3.delete(_0x34fe10);
                  }
                }
              }
              if (_0x428f71 === null || _0x428f71 === undefined) {
                undefined;
              } else {
                _0x428f71.setPersistLibrary(_0x5434d3, _0x5441d3);
              }
            }
            _0x587844.set(_0x4c2ddc.root ?? _0xa3215.Uri.empty(), _0x5441d3);
          }
          return _0x587844;
        }
        generateStdLibIndices(_0x33c6e6) {
          const _0x7de7da = new _0x57ef96.ConfigOptions(_0xa3215.Uri.empty());
          _0x7de7da.defaultPythonVersion = undefined;
          _0x7de7da.defaultPythonPlatform = undefined;
          const _0x10bc8a = this._logTracker.log(`index stdlib ${_0x7de7da.projectRoot}`, _0x2ff375 => {
            const _0x1fc272 = this._logTracker.log('scan stdlib packages', _0x30cf67 => {
              const _0x2bf4a6 = new _0x2413f7.PackageScanner(_0x7de7da, this._importResolver, undefined, false, 1);
              _0x2bf4a6.scan(_0x388a42.CancellationToken.None);
              const _0x57932a = _0x2bf4a6.getModuleFilesPerExecEnv().get(_0x7de7da.projectRoot);
              _0x30cf67.add(`found ${_0x57932a.length}`);
              return _0x57932a.map(_0x1c23b8 => ({
                uri: _0x1c23b8.uri,
                includeAllSymbols: _0x1c23b8.includeAllSymbols
              }));
            });
            const _0x458ddb = new _0x56c7c6.Program(this._importResolver, _0x7de7da, this._serviceProvider, this._logTracker);
            _0x458ddb.setTrackedFiles(_0x1fc272.map(_0x30e61f => _0x30e61f.uri));
            const _0x15a5d7 = new _0x193a94.UriMap();
            this._indexProgram(_0x458ddb, _0x1fc272, _0x15a5d7, true, _0x388a42.CancellationToken.None);
            _0x4752c7(this._importResolver, _0x7de7da.getExecutionEnvironments()[0], _0x15a5d7);
            _0x2ff375.add(`found ${[..._0x15a5d7.values()].reduce((_0x3431c9, _0xe59f3e) => _0x3431c9 + _0xe59f3e.symbols.length, 0)}`);
            const _0x26c575 = this._importResolver.getTypeshedStdLibPath(_0x7de7da.getExecutionEnvironments()[0]);
            if (!_0x26c575) {
              this._serviceProvider.console().error(`No stdlib path for ${_0x7de7da.projectRoot}`);
              return false;
            }
            if (_0x3532d9.writePersistedIndices(this._importResolver.fileSystem, _0x26c575, _0x33c6e6, _0x15a5d7, this._serviceProvider.console())) {
              return _0x15a5d7;
            } else {
              return undefined;
            }
          });
          if (!_0x10bc8a) {
            return false;
          }
          this._logTracker.log('verify stdlib indices', _0x428d04 => {
            const _0x347d45 = this._importResolver.getTypeshedStdLibPath(_0x7de7da.getExecutionEnvironments()[0]);
            _0x1ed77e(this._importResolver.fileSystem, _0x347d45, _0x33c6e6, _0x10bc8a);
          });
          return true;
        }
        static _getWorker(_0x51c62e, _0x16cdf7) {
          var _0x19ee9b;
          let _0x27eca1 = _0xb84ba2._currentWorker;
          if (_0x27eca1 !== undefined) {
            return _0x27eca1;
          }
          const _0x4847e7 = _0x16cdf7.console();
          const _0x3116a0 = {
            rootUri: ((_0x19ee9b = _0x11d259.getRootUri(_0x16cdf7)) === null || _0x19ee9b === undefined ? undefined : _0x19ee9b.toString()) ?? '',
            cancellationFolderName: _0x5337d3.getCancellationFolderName(),
            serviceId: _0x51c62e,
            runner: 'indexer',
            workerIndex: 1,
            profilingInfo: _0x251529.deepCopy(_0x16cdf7.tryGet(_0x369c87.PylanceServiceKeys.profilingService)?.currentProfilingInfo)
          };
          _0x27eca1 = new _0x8b13db.FilteringWorker(new _0x59a2e2.Worker(_0x54dae9.mainFilename, {
            workerData: _0x3116a0
          }), _0x3dff71 => !!_0x3dff71.requestType);
          const _0x2aa735 = new _0x54c920.ForegroundFileRequestHandler(_0x27eca1, _0x16cdf7.fs());
          _0x27eca1.on('message', _0x3e923f => {
            switch (_0x3e923f.requestType) {
              case _0x402d58.Log:
                {
                  const _0x2a7486 = _0x251529.deserialize(_0x3e923f.data);
                  _0x1a4f26.log(_0x4847e7, _0x2a7486.level, _0x2a7486.message);
                  break;
                }
              case _0x402d58.Telemetry:
                {
                  const _0x538b90 = _0x16cdf7.get(_0x369c87.PylanceServiceKeys.telemetry);
                  _0x538b90.sendTelemetry(_0x251529.deepRestore(_0x3e923f.data));
                  break;
                }
              default:
                _0x286324.assertNever(_0x3e923f, 'can\'t reach here');
            }
          });
          _0x27eca1.on('error', _0xe7802 => {
            _0x4847e7.error(`Error occurred on indexer thread: ${JSON.stringify(_0xe7802)}`);
          });
          _0x27eca1.on('exit', _0xb0f172 => {
            if (_0xb0f172 !== 0) {
              _0x286324.fail(`worker stopped with exit code ${_0xb0f172}`);
            }
            _0x2aa735.dispose();
            _0xb84ba2._currentWorker = undefined;
          });
          _0xb84ba2._currentWorker = _0x27eca1;
          return _0x27eca1;
        }
        static async _processIndexingRequest(_0x2e2b46, _0x4ad337, _0x3974c9, _0x1ef9a2, _0x4166ed, _0x1ba652, _0x210469, _0x336fed, _0x71ce9d, _0x1cd60d, _0xe47b43) {
          try {
            await _0x1249cf(_0x2e2b46, _0x4ad337, _0x3974c9, _0x1ef9a2, _0x1ba652, _0x210469, _0x336fed, _0x5907ff, _0x71ce9d, _0x1cd60d.token);
          } catch (_0x431cf4) {
            if (_0x5337d3.OperationCanceledException.is(_0x431cf4)) {
              _0x4166ed.log(`Indexer cancelled (${_0x3974c9})`);
              return;
            }
            _0x4166ed.error(`Indexing Failed: ${_0x286324.getErrorString(_0x431cf4)}`);
          } finally {
            if (!_0xe47b43.isCancellationRequested) {
              _0xb84ba2._currentWorker = undefined;
              await _0x5907ff(_0x2e2b46, _0x4572e2.Shutdown, undefined, _0xe47b43);
            }
            _0x1cd60d.dispose();
            if (_0xb84ba2._cancellationSourcePerWorkspace.get(_0x3974c9) === _0x1cd60d) {
              _0xb84ba2._cancellationSourcePerWorkspace.delete(_0x3974c9);
            }
          }
        }
        _indexProgram(_0x2ded2c, _0x2f59b7, _0x5494f1, _0x4399d0, _0x295268) {
          for (const _0x34468f of _0x2f59b7) {
            const _0x5d021e = this._getFileIndex(_0x2ded2c, _0x34468f.uri, _0x34468f.includeAllSymbols, _0x295268);
            if (!_0x5d021e) {
              continue;
            }
            if (_0x4399d0 && !_0x34468f.includeAllSymbols && _0x5d021e.symbols.length === 0) {
              continue;
            }
            _0x5494f1.set(_0x34468f.uri, _0x5d021e);
            _0x2ded2c.handleMemoryHighUsage();
          }
        }
        _getFileIndex(_0x316b68, _0x469f13, _0x12d273, _0x59de35) {
          return this._logTracker.log(`indexing: ${_0x44c1e6.getPathForLogging(this._importResolver.fileSystem, _0x469f13)}`, _0x5d7119 => {
            const _0x107a90 = _0x469f13.fileNameWithoutExtensions;
            const _0x509795 = _0x183630.isPrivateOrProtectedName(_0x107a90);
            if (_0x509795) {
              _0x5d7119.add('skipped: private or protected file');
              return {
                uri: _0x469f13,
                privateOrProtected: _0x509795,
                symbols: []
              };
            }
            const _0x23e31f = _0x316b68.getSourceFileInfo(_0x469f13);
            if (!_0x23e31f) {
              _0x5d7119.add('skipped: file not found');
              return undefined;
            }
            const _0x259054 = _0x23e31f.sourceFile.getFileContent() ?? '';
            if (!_0x12d273 && !_0x23e31f.sourceFile.isStubFile() && !_0x23e31f.sourceFile.isThirdPartyPyTypedPresent()) {
              if (_0x259054.indexOf('__all__') < 0) {
                _0x5d7119.add('skipped: no \'__all__\' defined');
                return {
                  uri: _0x469f13,
                  privateOrProtected: false,
                  symbols: []
                };
              }
            }
            const _0x20096e = _0x316b68.getParseResults(_0x469f13);
            if (!_0x20096e) {
              _0x5d7119.add('skipped: no parse result');
              return undefined;
            }
            const _0x5e51ca = _0x3a9e60.SymbolIndexer.indexSymbols(_0x20096e, {
              indexingForAutoImportMode: true,
              includeAllSymbols: _0x12d273
            }, _0x59de35);
            _0x5d7119.add(`found ${_0x5e51ca.length}`);
            return {
              uri: _0x469f13,
              privateOrProtected: _0x509795,
              symbols: _0x5e51ca
            };
          });
        }
      }
      exports.Indexer = _0xb84ba2;
      _0xb84ba2._lastRequest = Promise.resolve();
      _0xb84ba2._cancellationSourcePerWorkspace = new Map();
      const _0x673d7b = 20000;
      class _0x588328 extends _0x12ef84.BackgroundThreadBase {
        constructor(_0x37edf1) {
          _0x37edf1.add(_0x369c87.PylanceServiceKeys.profilingService, new _0x59ca9d.ProfilingService(_0x37edf1, _0x4ccb60()));
          _0x37edf1.add(_0x175f9d.ServiceKeys.sourceFileFactory, _0x38e59b.DefaultPylanceSourceFileFactory);
          super(_0x59a2e2.workerData, _0x37edf1);
          const _0x2cb32e = _0x59a2e2.workerData;
          const _0x4b7697 = _0x2cb32e.serviceId;
          this.log(_0x1a4f26.LogLevel.Info, `Indexer background runner(${_0x59a2e2.threadId}) root directory: ${_0x2cb32e.rootUri} (${_0x4b7697})`);
          this._telemetry = {
            sendTelemetry(_0x4d61c3) {
              _0x3028b8(_0x59a2e2.parentPort, _0x402d58.Telemetry, _0x4d61c3);
            },
            addPropertyToNextEvent(_0xb2058f, _0xbf3bb3, _0x2c3325) {}
          };
          this._profilingInfo = _0x251529.deepRestore(_0x2cb32e.profilingInfo);
        }
        start() {
          this.log(_0x1a4f26.LogLevel.Info, `Indexing(${_0x59a2e2.threadId}) started`);
          const _0x18961f = this.getConsole();
          const _0x57bf22 = this.getServiceProvider();
          const _0x51f7ad = this._getProfilingWaiter(_0x57bf22);
          if (_0x59a2e2.parentPort === null || _0x59a2e2.parentPort === undefined) {
            undefined;
          } else {
            _0x59a2e2.parentPort.on('message', _0x5a9740 => {
              switch (_0x5a9740.requestType) {
                case _0x4572e2.Scan:
                  {
                    _0x12ef84.run(() => {
                      const _0x477b47 = _0x251529.deepRestore(_0x5a9740.data);
                      const _0x52c82c = _0xe2bce6.getCancellationTokenFromId(_0x477b47.cancellationId);
                      _0x5337d3.throwIfCancellationRequested(_0x52c82c);
                      const _0x4d3fac = _0x477b47.configOptions;
                      const _0xf4b0ec = new _0x324a1a.PylanceFullAccessHost(this.getServiceProvider(), _0x477b47.hostCache);
                      const _0x120b84 = _0x5743da(_0x57bf22, _0x4d3fac, _0xf4b0ec);
                      const _0xef0de = new _0x44c1e6.LogTracker(_0x18961f, _0x4ccb60());
                      const _0x508c1e = new _0xb84ba2(_0x120b84, _0x4d3fac, _0x477b47.options, _0x57bf22, _0xef0de);
                      const _0x95f2fe = _0x508c1e.scanPackages(_0x477b47.fileCache, _0x52c82c);
                      let _0x1e07bd = 0;
                      const _0x5bcd5e = _0x95f2fe.moduleFilesPerExecEnv;
                      _0x5bcd5e.forEach(_0x396288 => _0x1e07bd += _0x396288.length);
                      this.log(_0x1a4f26.LogLevel.Info, `scanned(${_0x59a2e2.threadId}) ${_0x1e07bd} files over ${_0x5bcd5e.size} exec env`);
                      return {
                        ..._0x95f2fe,
                        hostCache: _0xf4b0ec.getHostCache()
                      };
                    }, _0x5a9740.port, _0x251529.deepCopy);
                    break;
                  }
                case _0x4572e2.Index:
                  {
                    _0x12ef84.run(() => {
                      const _0x337b76 = _0x251529.deepRestore(_0x5a9740.data);
                      const _0x30dc95 = _0xe2bce6.getCancellationTokenFromId(_0x337b76.cancellationId);
                      _0x5337d3.throwIfCancellationRequested(_0x30dc95);
                      const _0xfe56c0 = _0x337b76.configOptions;
                      const _0x3c63d5 = new _0x324a1a.PylanceFullAccessHost(this.getServiceProvider(), _0x337b76.hostCache);
                      const _0x9adbd9 = _0x5743da(_0x57bf22, _0xfe56c0, _0x3c63d5);
                      const _0x2150cb = new _0x44c1e6.LogTracker(_0x18961f, _0x4ccb60());
                      const _0x147e06 = new _0xb84ba2(_0x9adbd9, _0xfe56c0, _0x337b76.options, _0x57bf22, _0x2150cb);
                      const _0xf8dd87 = _0x552cf5.trackPerf(this._telemetry, _0x552cf5.TelemetryEventName.INDEX_SLOW, _0x15b73f => {
                        const _0x1ff398 = _0x147e06.indexPackages(undefined, _0x337b76.moduleFilesPerExecEnv, [], _0x30dc95);
                        let _0x51a2ee = 0;
                        _0x1ff398.forEach(_0x4c181d => _0x51a2ee += _0x4c181d.size);
                        this.log(_0x1a4f26.LogLevel.Info, `indexed(${_0x59a2e2.threadId}) ${_0x51a2ee} files over ${_0x1ff398.size} exec env`);
                        _0x15b73f.addCustomMeasure('count', _0x51a2ee);
                        return _0x1ff398;
                      }, _0x673d7b);
                      return {
                        indexingResult: _0xf8dd87
                      };
                    }, _0x5a9740.port, _0x251529.deepCopy);
                    break;
                  }
                case _0x4572e2.Shutdown:
                  {
                    _0x12ef84.run(async () => {
                      this.log(_0x1a4f26.LogLevel.Info, `Indexing finished(${_0x59a2e2.threadId}).`);
                      await _0x51f7ad.promise;
                      await this.getServiceProvider().get(_0x369c87.PylanceServiceKeys.profilingService).stopProfiling();
                    }, _0x5a9740.port, _0x251529.deepCopy).then(() => _0x59a2e2.parentPort === null || _0x59a2e2.parentPort === undefined ? undefined : _0x59a2e2.parentPort.close());
                    break;
                  }
                default:
                  {
                    _0x286324.assertNever(_0x5a9740, 'can\'t reach here');
                  }
              }
            });
          }
        }
        _getProfilingWaiter(_0x45c2fe) {
          const _0x484d37 = _0x3f24d1.createDeferred();
          if (!this._profilingInfo) {
            _0x484d37.resolve(undefined);
            return _0x484d37;
          }
          _0x45c2fe.get(_0x369c87.PylanceServiceKeys.profilingService).startProfiling(this._profilingInfo).then(() => _0x484d37.resolve(undefined));
          return _0x484d37;
        }
      }
      exports.BackgroundIndexRunner = _0x588328;
      var _0x4572e2;
      (function (_0xd15cc6) {
        _0xd15cc6.Scan = 'scan';
        _0xd15cc6.Index = 'index';
        _0xd15cc6.Shutdown = 'shutdown';
      })(_0x4572e2 ||= {});
      var _0x402d58;
      (function (_0x6c5249) {
        _0x6c5249.Log = 'log';
        _0x6c5249.Telemetry = 'telemetry';
      })(_0x402d58 ||= {});
      class _0x56ed16 extends _0x193a94.UriMap {}
      exports.IndexingResultMap = _0x56ed16;
      class _0x573025 extends _0x193a94.UriMap {}
      exports.ModuleFilesExecEnvMap = _0x573025;
      function _0x3028b8(_0x8b99ea, _0x2cbbd3, _0x322946, _0xad7aa3) {
        if (_0x8b99ea === null || _0x8b99ea === undefined) {
          undefined;
        } else {
          _0x8b99ea.postMessage({
            requestType: _0x2cbbd3,
            data: _0x251529.deepCopy(_0x322946)
          }, _0xad7aa3);
        }
      }
      function _0xb7bf80(_0x52c872, _0x52f958, _0x481401, _0x1477f6, _0x10846b) {
        if (_0x52c872 === null || _0x52c872 === undefined) {
          undefined;
        } else {
          _0x52c872.postMessage({
            requestType: _0x52f958,
            data: _0x251529.deepCopy(_0x481401),
            port: _0x1477f6
          }, _0x10846b);
        }
      }
      const _0x5907ff = async (_0x1063d3, _0x3aaf5d, _0x32c2c2, _0x12a1b0) => {
        _0x5337d3.throwIfCancellationRequested(_0x12a1b0);
        const {
          port1: _0x78c1ec,
          port2: _0x14832a
        } = new _0x59a2e2.MessageChannel();
        const _0x3c68b2 = _0x12ef84.getBackgroundWaiter(_0x78c1ec, _0x251529.deepRestore);
        _0xb7bf80(_0x1063d3, _0x3aaf5d, _0x32c2c2, _0x14832a, [_0x14832a]);
        const _0x33c1e6 = await _0x3c68b2;
        _0x14832a.close();
        _0x78c1ec.close();
        return _0x33c1e6;
      };
      function _0x4752c7(_0x585dd9, _0x3df43, _0x599518) {
        const _0x514388 = new _0x193a94.UriMap();
        const _0x49e889 = new _0x193a94.UriMap();
        for (const [_0x76a954, _0x1fd45f] of _0x599518) {
          const _0x3e3e74 = _0x1fd45f.uri;
          for (const _0x29db77 of _0x1fd45f.symbols) {
            if (!_0x29db77.alias) {
              continue;
            }
            const _0x5a5b64 = _0x29db77.alias.moduleUri;
            const _0x29359b = _0x29db77.alias.originalName;
            const _0x1b5c48 = _0xff88ff.getOrAdd(_0x514388, _0x5a5b64, () => new Map());
            const _0x4aad96 = _0x585dd9.getModuleNameForImport(_0x3e3e74, _0x3df43);
            const _0xde07d1 = _0x1b5c48.get(_0x29359b);
            if (!_0xde07d1) {
              const _0x4836cc = _0x599518.get(_0x5a5b64);
              if (!_0x4836cc) {
                _0x1b5c48.set(_0x29359b, [_0x4aad96, _0x3e3e74, false, _0x29db77]);
                continue;
              }
              const _0x395647 = _0x4836cc.symbols;
              const _0x30faf8 = _0x395647.find(_0x114aae => _0x114aae.name === _0x29359b);
              if (!_0x30faf8) {
                _0x1b5c48.set(_0x29359b, [_0x4aad96, _0x3e3e74, false, _0x29db77]);
                continue;
              }
              const _0x70b85f = _0x585dd9.getModuleNameForImport(_0x5a5b64, _0x3df43);
              if (_0x2c47d5(_0x4aad96, _0x3e3e74, false, _0x70b85f, _0x5a5b64, true) < 0) {
                _0x1b5c48.set(_0x29359b, [_0x4aad96, _0x3e3e74, false, _0x29db77]);
                _0xff88ff.getOrAdd(_0x49e889, _0x5a5b64, () => []).push(_0x30faf8);
              } else {
                _0x1b5c48.set(_0x29359b, [_0x70b85f, _0x5a5b64, true, _0x30faf8]);
                _0xff88ff.getOrAdd(_0x49e889, _0x76a954, () => []).push(_0x29db77);
              }
            } else {
              if (_0x2c47d5(_0x4aad96, _0x3e3e74, false, _0xde07d1[0], _0xde07d1[1], _0xde07d1[2]) < 0) {
                _0x1b5c48.set(_0x29359b, [_0x4aad96, _0x3e3e74, false, _0x29db77]);
                _0xff88ff.getOrAdd(_0x49e889, _0xde07d1[1], () => []).push(_0xde07d1[3]);
              } else {
                _0xff88ff.getOrAdd(_0x49e889, _0x76a954, () => []).push(_0x29db77);
              }
            }
          }
        }
        const _0x2ea852 = 'typeshed-fallback/stdlib/collections/abc.pyi';
        for (const [_0x683303, _0x326aea] of _0x49e889) {
          if (_0x683303.pathEndsWith(_0x2ea852)) {
            continue;
          }
          for (const _0x3bb7ee of _0x326aea) {
            _0x39b48b.deleteElement(_0x599518.get(_0x683303).symbols, _0x3bb7ee);
          }
        }
        function _0x2c47d5(_0x3feabd, _0xb64ca2, _0x309513, _0x366afb, _0x1bb24f, _0x451153) {
          const _0x3903b0 = _0x5b4c3d.getCharacterCount(_0x3feabd.moduleName, '.');
          const _0x3d5b8c = _0x5b4c3d.getCharacterCount(_0x366afb.moduleName, '.');
          if (_0x3903b0 === _0x3d5b8c) {
            if (_0x309513 === _0x451153) {
              return _0x5b4c3d.compareStringsCaseInsensitive(_0xb64ca2.key, _0x1bb24f.key);
            }
            if (_0x309513) {
              return -1;
            } else {
              return 1;
            }
          }
          return _0x3903b0 - _0x3d5b8c;
        }
      }
      function _0xf378fe(_0x5e6692, _0x2dbd14) {
        return _0x5e6692.getExecutionEnvironments().find(_0x3fab10 => {
          var _0xa84d97;
          if ((_0xa84d97 = _0x3fab10.root) === null || _0xa84d97 === undefined) {
            return undefined;
          } else {
            return _0xa84d97.equals(_0x2dbd14);
          }
        });
      }
      function _0x50ed0b(_0x3170c1, _0x4a2a0c, _0x42de57, _0x30a637) {
        for (const [_0x1aaa69, _0x1eb73d] of _0x42de57) {
          const _0x2385a8 = _0xf378fe(_0x4a2a0c, _0x1aaa69);
          if (!_0x2385a8) {
            continue;
          }
          for (const [, _0x13bee0] of _0x1eb73d) {
            _0x30a637.cloneOrSetIndex(_0x3170c1, _0x2385a8, _0x13bee0.uri, _0x13bee0);
          }
        }
      }
      function _0x4ccb60() {
        return `IDX(${_0x59a2e2.threadId})`;
      }
      async function _0x1249cf(_0x2dff8e, _0x1226e3, _0x465ea4, _0x4d507b, _0x5339bb, _0x15f9b5, _0x370c67, _0x4dd4f4, _0x13b0ff, _0x304273) {
        const _0x5b453b = _0x5337d3.getCancellationTokenId(_0x304273);
        const _0x855a0d = _0x1226e3 === 'refresh' && !_0x13b0ff?.changesOnly;
        _0x370c67.reset(_0x465ea4, true, _0x855a0d);
        const _0x187169 = await _0x4dd4f4(_0x2dff8e, _0x4572e2.Scan, {
          configOptions: _0x15f9b5,
          cancellationId: _0x5b453b,
          options: _0x5339bb,
          fileCache: _0x370c67.getFileCache(),
          hostCache: _0x370c67.getHostCache()
        }, _0x304273);
        _0x370c67.setFileCache(_0x187169.fileCache);
        _0x370c67.setHostCache(_0x187169.hostCache);
        if (_0x187169.stdLibIndices) {
          _0x50ed0b(_0x465ea4, _0x15f9b5, _0x187169.stdLibIndices, _0x370c67);
        }
        const _0x2af9f0 = new _0x573025();
        for (const [_0x27b6e2, _0xe95743] of _0x187169.moduleFilesPerExecEnv) {
          const _0x1434b0 = _0xf378fe(_0x15f9b5, _0x27b6e2);
          if (!_0x1434b0) {
            continue;
          }
          const _0x4a139a = [];
          for (const _0x272d9d of _0xe95743) {
            const _0x5ab58f = _0x11d259.tryStat(_0x4d507b, _0x272d9d.uri);
            if (!_0x5ab58f || !_0x370c67.cloneIndex(_0x465ea4, _0x1434b0, _0x272d9d.uri, _0x5ab58f.mtimeMs)) {
              _0x4a139a.push(_0x272d9d);
            }
          }
          if (_0x4a139a.length > 0) {
            _0x2af9f0.set(_0x27b6e2, _0x4a139a);
          }
        }
        if (_0x2af9f0.size === 0) {
          return;
        }
        const _0x20ca30 = await _0x4dd4f4(_0x2dff8e, _0x4572e2.Index, {
          configOptions: _0x15f9b5,
          cancellationId: _0x5b453b,
          options: _0x5339bb,
          hostCache: _0x187169.hostCache,
          moduleFilesPerExecEnv: _0x2af9f0
        }, _0x304273);
        for (const [_0x3ed3bc, _0x54acac] of _0x20ca30.indexingResult) {
          const _0x15dba7 = _0xf378fe(_0x15f9b5, _0x3ed3bc);
          if (!_0x15dba7) {
            continue;
          }
          for (const [, _0x276e87] of _0x54acac) {
            const _0x150e9d = _0x11d259.tryStat(_0x4d507b, _0x276e87.uri);
            _0x370c67.cloneOrSetIndex(_0x465ea4, _0x15dba7, _0x276e87.uri, _0x276e87, _0x150e9d?.mtimeMs ?? Date.now());
          }
        }
        _0x370c67.requestComplete(_0x465ea4);
      }
    },
    83868: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.createIndexerFileSystem = _0xd3360a;
      const _0x59eaed = require(12060);
      const _0xa83dbc = require(27643);
      function _0xd3360a(_0x49f8ff, _0x125486) {
        return new _0x1499f0(_0x49f8ff, _0x125486);
      }
      class _0x1499f0 extends _0xa83dbc.RealFileSystem {
        constructor(_0x32f634, _0x1fcc6c) {
          super(_0x32f634, _0x1fcc6c, _0x59eaed.nullFileWatcherProvider);
          this._cache = new Map();
        }
        existsSync(_0x2824d4) {
          return this._tryGet(_0x2824d4, _0xd77244 => _0xd77244.exists, _0x62b6fb => _0x62b6fb.exists = super.existsSync(_0x2824d4));
        }
        statSync(_0x5d96cf) {
          return this._tryGet(_0x5d96cf, _0x1887db => _0x1887db.stats, _0xe14fb7 => _0xe14fb7.stats = super.statSync(_0x5d96cf));
        }
        realCasePath(_0x5d076d) {
          return this._tryGet(_0x5d076d, _0x5dddd4 => _0x5dddd4.realCasePath, _0x52a1b4 => _0x52a1b4.realCasePath = super.realCasePath(_0x5d076d));
        }
        _tryGet(_0x2a9f4d, _0xd0dfb1, _0x536ad0) {
          let _0x3980f5 = this._cache.get(_0x2a9f4d.key);
          if (!_0x3980f5) {
            _0x3980f5 = {};
            this._cache.set(_0x2a9f4d.key, _0x3980f5);
          }
          let _0x43f077 = _0xd0dfb1(_0x3980f5);
          if (_0x43f077 === undefined) {
            _0x43f077 = _0x536ad0(_0x3980f5);
          }
          return _0x43f077;
        }
      }
    },
    97125: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.buildLabel = _0x533b4b;
      exports.buildTextEdits = _0x5f217c;
      const _0x390e75 = require(56911);
      const _0x14dbfb = require(21024);
      const _0x489545 = require(8307);
      const _0x53138a = require(34455);
      const _0x439e05 = require(89740);
      const _0x29d0eb = require(74382);
      const _0x13df96 = require(65574);
      const _0x3db461 = require(30048);
      const _0x53740b = require(21575);
      const _0x22c376 = require(19995);
      const _0x3f8f50 = require(13234);
      const _0x22d156 = {
        expandTypeAlias: false,
        enforcePythonSyntax: true
      };
      function _0x533b4b(_0x4ef850, _0x433fc6, _0x5a8715, _0x426602, _0x4429a4, _0x1945f2, _0x56af66) {
        const _0x389ec4 = new _0x17284b(_0x4ef850, _0x5a8715, _0x1945f2, _0x426602, _0x4429a4, _0x56af66);
        _0x389ec4.walk(_0x433fc6);
        _0x389ec4.label.unshift({
          value: _0x4429a4
        });
        return _0x389ec4.label;
      }
      class _0x17284b extends _0x489545.TypeWalker {
        constructor(_0x156704, _0x4cf940, _0x577880, _0x5f04d1, _0xc9f236, _0x5ca9c5) {
          super();
          this.label = [];
          this._currentLength = 0;
          this._evaluator = _0x156704.evaluator;
          this._declarationFinder = _0x156704.serviceProvider.tryGet(_0x3db461.PylanceServiceKeys.declarationFinder);
          this._isResolveRequest = _0x577880;
          this._labelLimit = _0x5f04d1;
          this._separator = _0xc9f236;
          this._cancellationToken = _0x5ca9c5;
          this._sourceMapper = _0x156704.getSourceMapper(_0x4cf940, this._cancellationToken);
        }
        visitUnbound(_0x3d57ff) {
          this._printTypeAndAddToLabel(_0x3d57ff, this._tryGetTypeLocationByNameOrType('Any'));
        }
        visitAny(_0x1b4721) {
          this._printTypeAndAddToLabel(_0x1b4721, _0x1b4721.priv.isEllipsis ? undefined : this._tryGetTypeLocationByNameOrType('Any'));
        }
        visitUnknown(_0x4409f6) {
          this._printTypeAndAddToLabel(_0x4409f6, this._tryGetTypeLocationByNameOrType('Any'));
        }
        visitNever(_0x49a6f8) {
          this._printTypeAndAddToLabel(_0x49a6f8, this._tryGetTypeLocationByNameOrType(_0x49a6f8.priv.isNoReturn ? 'NoReturn' : 'Never'));
        }
        visitFunction(_0x588a1a) {
          this._printTypeAndAddToLabel(_0x588a1a);
        }
        visitOverloaded(_0x3726d8) {
          this._printTypeAndAddToLabel(_0x3726d8);
        }
        visitClass(_0x5e1233) {
          const _0x70b46 = this._tryGetTypeLocationByNameOrType(_0x5e1233.priv.literalValue !== undefined ? 'Literal' : _0x5e1233);
          this._printTypeAndAddToLabel(_0x5e1233, _0x70b46);
        }
        visitModule(_0x284b56) {
          this._printTypeAndAddToLabel(_0x284b56, this._tryGetTypeLocationByNameOrType('Any'));
        }
        visitUnion(_0x5b6fb3) {
          for (let _0x346841 = 0; _0x346841 < _0x5b6fb3.priv.subtypes.length; _0x346841++) {
            const _0x599e8b = _0x5b6fb3.priv.subtypes[_0x346841];
            this.walk(_0x599e8b);
            if (this._currentLength >= this._labelLimit) {
              break;
            }
            if (_0x346841 < _0x5b6fb3.priv.subtypes.length - 1) {
              this._addTypeToLabel(' | ');
            }
          }
        }
        visitTypeAlias(_0x1e017d) {
          return;
        }
        visitTypeVar(_0xbfbb3f) {
          const _0x7d085c = this._printType(_0xbfbb3f) === 'Any' ? this._tryGetTypeLocationByNameOrType('Any') : undefined;
          this._printTypeAndAddToLabel(_0xbfbb3f, _0x7d085c);
        }
        _printTypeAndAddToLabel(_0x203a6c, _0x31f3f4) {
          const _0x37d81a = this._printType(_0x203a6c);
          if (_0x14dbfb.isClass(_0x203a6c)) {
            this._addClassTypeToLabel(_0x37d81a, _0x203a6c, _0x31f3f4);
          } else {
            this._addTypeToLabel(_0x37d81a, _0x31f3f4);
          }
        }
        _addClassTypeToLabel(_0x397d50, _0x487c8b, _0x9acb05) {
          if (_0x9acb05 === undefined || _0x487c8b.priv.literalValue !== undefined || _0x14dbfb.ClassType.isBuiltIn(_0x487c8b, 'NoneType') || _0x14dbfb.ClassType.isPseudoGenericClass(_0x487c8b) || _0x487c8b.props?.typeAliasInfo) {
            this._addTypeToLabel(_0x397d50, _0x9acb05);
            return;
          }
          const _0xc5dd5c = _0x487c8b.priv.aliasName ?? _0x487c8b.shared.name;
          const _0x2866d7 = _0x397d50.indexOf(_0xc5dd5c);
          if (_0x2866d7 !== -1) {
            if (_0x2866d7 > 0) {
              const _0x1ae4e1 = _0x397d50.slice(0, _0x2866d7);
              this._addTypeToLabel(_0x1ae4e1);
            }
            this._addTypeToLabel(_0xc5dd5c, _0x9acb05);
            const _0x23bb77 = _0x397d50.slice(_0x2866d7 + _0xc5dd5c.length);
            if (_0x23bb77.length > 0) {
              this._addTypeToLabel(_0x23bb77);
            }
          } else {
            this._addTypeToLabel(_0x397d50);
          }
        }
        _addTypeToLabel(_0x27ba58, _0x3be670) {
          const _0x20612 = {
            value: _0x27ba58
          };
          if (_0x3be670) {
            _0x20612.location = {
              uri: _0x3be670.uri,
              range: _0x3be670.range
            };
          }
          this.label.push(_0x20612);
          this._currentLength += _0x27ba58.length;
          this._cancelWalkIfExceedsLimit();
        }
        _printType(_0x9ed13c) {
          return this._evaluator.printType(_0x9ed13c, {
            ..._0x22d156
          });
        }
        _tryGetTypeLocationByNameOrType(_0x5e1060) {
          if (!this._isResolveRequest) {
            return undefined;
          }
          if (!this._declarationFinder) {
            return undefined;
          }
          const _0x43db19 = _0x53138a.isString(_0x5e1060) ? this._declarationFinder.getDefinitionFromTypingByName(_0x5e1060) : this._declarationFinder.getDeclarations(_0x5e1060, this._cancellationToken, {
            useTypeAlias: !!_0x5e1060.props?.typeAliasInfo
          });
          return this._convertDeclsToLocations(_0x43db19);
        }
        _convertDeclsToLocations(_0x1cc783) {
          if (!_0x1cc783 || _0x1cc783.length === 0) {
            return undefined;
          }
          const _0x523c3b = [];
          _0x13df96.addDeclarationsToDefinitions(this._evaluator, this._sourceMapper, _0x1cc783, _0x523c3b);
          const _0xcb3319 = _0x523c3b.length;
          if (_0xcb3319 === 0) {
            return undefined;
          }
          return {
            uri: _0x523c3b[_0xcb3319 - 1].uri.toString(),
            range: _0x523c3b[_0xcb3319 - 1].range
          };
        }
        _cancelWalkIfExceedsLimit() {
          if (this._currentLength >= this._labelLimit) {
            const _0xc023bf = this.label[this.label.length - 1];
            const _0x332dc6 = this._currentLength - this._labelLimit + this._separator.length;
            if (_0xc023bf.value.length > _0x332dc6) {
              this.label[this.label.length - 1].value = _0x439e05.truncate(_0xc023bf.value, _0xc023bf.value.length - _0x332dc6);
            }
            this.cancelWalk();
          }
        }
      }
      function _0x5f217c(_0x52a96e, _0x352cbc, _0x41dbe5, _0x220cd7, _0x1532d8, _0x99dac6, _0x50eb99, _0x1d9a88, _0x1d70a8, _0x1b1c7f) {
        if (!_0x53740b.canInsertHintEdit(_0x220cd7, _0x99dac6)) {
          return [];
        }
        if (_0x1d70a8) {
          return undefined;
        }
        return _0x4cf69c(_0x52a96e, _0x352cbc, _0x41dbe5, _0x1532d8, _0x99dac6, _0x50eb99, _0x1d9a88, _0x1b1c7f);
      }
      function _0x4cf69c(_0x2e179c, _0x11c995, _0x20ba85, _0x320d2d, _0x5e503c, _0x88ea04, _0x7f09cf, _0xba11cb) {
        const _0x497fcf = new _0x22c376.ImportAdder(_0x2e179c);
        _0x497fcf.appendImportInfoForTypes(_0x20ba85, [{
          type: _0x5e503c,
          node: _0x320d2d
        }], _0xba11cb);
        _0x497fcf.updateImportInfoForTypeWithAutoImport(_0x20ba85, _0x11c995, _0x320d2d.start, [_0x5e503c], _0xba11cb);
        const _0x35d532 = new _0x3f8f50.TypeStringGenerator(_0x2e179c, _0x20ba85, _0xba11cb, _0x497fcf);
        const _0x4a7237 = _0x35d532.getTypeString(_0x5e503c);
        const _0x3c543f = _0x29d0eb.convertToTextEdits(_0x497fcf.applyImports(_0x20ba85, _0x11c995, _0x320d2d.start, 'absolute', _0xba11cb));
        _0x3c543f.push(_0x390e75.TextEdit.insert(_0x88ea04, `${_0x7f09cf}${_0x4a7237}`));
        return _0x3c543f;
      }
    },
    19892: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MethodSignaturesGenerator = undefined;
      const _0x12e671 = require(28445);
      const _0x28cd46 = __importStar(require(41557));
      const _0x21aed9 = require(3113);
      const _0x52c015 = require(21024);
      const _0x2f72de = require(58147);
      const _0x1cf65b = require(88754);
      const _0x2b1d1c = require(30048);
      const _0x555873 = require(61904);
      const _0x291a71 = require(13234);
      class _0x39bd71 {
        constructor(_0xd4f770, _0x41d8c0, _0x514047, _0x27cc3c, _0x785954, _0x448f46) {
          this._program = _0xd4f770;
          this._fileUri = _0x41d8c0;
          this._classType = _0x514047;
          this._funcType = _0x27cc3c;
          this._options = _0x785954;
          this._cancellationToken = _0x448f46;
          this._evaluator = this._program.evaluator;
          this._parseResults = this._program.getParseResults(this._fileUri);
          this._getTypeToPrint = (_0x13732b, _0x48e257) => {
            if (_0x13732b && (!_0x52c015.isUnknown(_0x13732b) || _0x48e257?.category === 9)) {
              return _0x13732b;
            } else {
              return _0x48e257;
            }
          };
        }
        getMethodSignatureWithDecorators() {
          let _0xbfdd61 = {
            methodSignature: '',
            isAsync: false,
            useAwait: false
          };
          const _0x2c3c95 = [];
          const _0x354bb6 = this._program.serviceProvider.tryGet(_0x2b1d1c.PylanceServiceKeys.declarationFinder);
          if (!_0x354bb6) {
            return {
              ..._0xbfdd61,
              decoratorTexts: _0x2c3c95
            };
          }
          const _0x2da05a = _0x354bb6.getDeclarations(this._funcType, this._cancellationToken);
          if (_0x2da05a.length === 0) {
            return {
              ..._0xbfdd61,
              decoratorTexts: _0x2c3c95
            };
          }
          const _0x48d9e1 = _0x2da05a.find(_0x12e671.isFunctionDeclaration);
          if (!_0x48d9e1) {
            return {
              ..._0xbfdd61,
              decoratorTexts: _0x2c3c95
            };
          }
          _0xbfdd61 = this.getMethodSignature();
          const _0x43ac12 = _0x48d9e1.node.d.decorators;
          for (const _0x4b999b of _0x43ac12) {
            if (this._options.decoratorFilter) {
              const _0x40aa82 = this._evaluator.getType(_0x4b999b.d.expr);
              if (_0x40aa82 && _0x52c015.isFunction(_0x40aa82) && this._options.decoratorFilter.some(_0x463809 => _0x463809 === _0x40aa82.shared.name)) {
                continue;
              }
              if (!this._options.enableTrackingAddImports) {
                continue;
              }
              const _0x47227a = _0x28cd46.getModuleNode(_0x4b999b);
              this._options.importAdder.collectImportsForSymbolsUsed(_0x47227a, _0x4b999b.d.expr, this._cancellationToken);
            }
            _0x2c3c95.push(_0x28cd46.printExpression(_0x4b999b.d.expr));
          }
          return {
            ..._0xbfdd61,
            decoratorTexts: _0x2c3c95,
            isAsync: this._options.hasAsyncKeyword ?? false
          };
        }
        getMethodSignature() {
          const _0x31d5c0 = this._funcType.shared.declaration;
          let _0xcf23fd;
          if (_0x21aed9.isStubFile(this._fileUri)) {
            _0xcf23fd = true;
          } else {
            if (this._classType.shared.moduleName === _0x31d5c0.moduleName) {
              _0xcf23fd = false;
            }
          }
          const _0x3b9954 = _0x21aed9.isStubFile(this._fileUri) ? 3 : 2;
          this._updateImportData(_0x31d5c0);
          if (!this._options.enableTrackingAddImports && !this._options.dontAddTypeAnnotation) {
            this._options.importAdder.updateImportInfoForTypeWithAutoImport(this._fileUri, this._parseResults, _0x31d5c0.node.start, this._funcType.shared.parameters.map(_0x39b158 => _0x39b158._type), this._cancellationToken);
          }
          const _0x189d3b = new _0x291a71.TypeStringGenerator(this._program, this._fileUri, this._cancellationToken, this._options.importAdder);
          const _0x1c647f = this._funcType.shared.parameters.map((_0x4e1264, _0x2d446c) => {
            let _0x4ec69e = '';
            if (_0x4e1264.category === 1) {
              _0x4ec69e += '*';
            } else {
              if (_0x4e1264.category === 2) {
                _0x4ec69e += '**';
              }
            }
            if (_0x4e1264.name) {
              _0x4ec69e += _0x4e1264.name;
            }
            const _0x10d721 = _0x555873.getFunctionParameterNode(_0x31d5c0.node, _0x4e1264.name);
            const _0x350b70 = _0x10d721 ? _0x555873.getParameterAnnotationNode(_0x10d721) : undefined;
            if (!this._options.dontAddTypeAnnotation && _0x52c015.FunctionParam.isTypeDeclared(_0x4e1264)) {
              const _0x37ab60 = this._funcType.shared.parameters[_0x2d446c]._type;
              const _0x4945d0 = this._getTypeToPrint(_0x52c015.FunctionType.getParamType(this._funcType, _0x2d446c), _0x37ab60);
              const _0x57b8be = this._isTypeUsableForPrint(_0x4945d0, _0x37ab60) ? _0x189d3b.getTypeString(_0x4945d0) : _0x350b70 ? _0x28cd46.printExpression(_0x350b70, _0x3b9954) : 'Any';
              _0x4ec69e += `: ${_0x57b8be}`;
            }
            if (_0x10d721 === null || _0x10d721 === undefined ? undefined : _0x10d721.d.defaultValue) {
              _0x4ec69e += _0x350b70 ? ' = ' : '=';
              const _0x3fdbc3 = _0xcf23fd ?? !_0x28cd46.isSimpleDefault(_0x10d721.d.defaultValue);
              _0x4ec69e += _0x3fdbc3 ? '...' : _0x28cd46.printExpression(_0x10d721.d.defaultValue, _0x3b9954);
            }
            if (!_0x4ec69e && !_0x4e1264.name && _0x4e1264.category === 0 && _0x2d446c < this._funcType.shared.parameters.length - 1) {
              return '/';
            }
            return _0x4ec69e;
          });
          for (let _0x42027f = _0x1c647f.length - 1; _0x42027f >= 0; _0x42027f--) {
            if (_0x1c647f[_0x42027f] !== '') {
              break;
            }
            _0x1c647f.pop();
          }
          let _0x136257 = this._funcType.shared.name + '(' + _0x1c647f.join(', ') + ')';
          const _0xb25232 = this._shouldUseAwait();
          const _0x48e7f1 = this._getReturnTypeStr(_0xb25232, _0x3b9954, _0x189d3b);
          if (_0x48e7f1) {
            _0x136257 += ` -> ${_0x48e7f1}`;
          }
          return {
            methodSignature: _0x136257,
            isAsync: this._options.hasAsyncKeyword ?? false,
            useAwait: _0xb25232
          };
        }
        _updateImportData(_0x4ee3ba) {
          var _0x296516;
          var _0x2f24ef;
          if (this._options.dontAddTypeAnnotation) {
            return;
          }
          const _0x2e8014 = _0x4ee3ba.node;
          const _0x497342 = [];
          _0x2f72de.addIfNotNull(_0x497342, _0x1cf65b.TextRange.combine(_0x2e8014.d.params));
          _0x2f72de.addIfNotNull(_0x497342, _0x2e8014.d.returnAnnotation);
          _0x2f72de.addIfNotNull(_0x497342, _0x2e8014.d.funcAnnotationComment);
          if (_0x497342.length === 0) {
            return;
          }
          const _0xa27fd3 = _0x28cd46.getModuleNode(_0x2e8014);
          this._options.importAdder.collectImportsForSymbolsUsed(_0xa27fd3, _0x497342, this._cancellationToken);
          const _0x186466 = [];
          this._funcType.shared.parameters.forEach((_0x5c4f58, _0x50da2f) => {
            const _0x5e829c = _0x555873.getFunctionParameterNode(_0x4ee3ba.node, _0x5c4f58.name);
            if (!_0x5e829c) {
              return;
            }
            const _0x560585 = _0x555873.getParameterAnnotationNode(_0x5e829c);
            if (!_0x560585) {
              return;
            }
            const _0x3320c1 = this._funcType.shared.parameters[_0x50da2f]._type;
            if (!_0x52c015.isTypeVar(_0x3320c1)) {
              return;
            }
            const _0x40c6c8 = _0x52c015.FunctionType.getParamType(this._funcType, _0x50da2f);
            _0x186466.push({
              type: _0x40c6c8,
              node: _0x560585
            });
          });
          const _0x4d70a1 = this._funcType.shared.declaredReturnType;
          if (_0x4d70a1 && _0x52c015.isTypeVar(_0x4d70a1) && (_0x2e8014.d.returnAnnotation || ((_0x296516 = _0x2e8014.d.funcAnnotationComment) === null || _0x296516 === undefined ? undefined : _0x296516.d.returnAnnotation))) {
            _0x186466.push({
              type: _0x52c015.FunctionType.getEffectiveReturnType(this._funcType),
              node: _0x2e8014.d.returnAnnotation ?? _0x2e8014.d.funcAnnotationComment.d.returnAnnotation
            });
          }
          if (!this._options.hasAsyncKeyword && _0x2e8014.d.isAsync && (_0x2e8014.d.returnAnnotation || ((_0x2f24ef = _0x2e8014.d.funcAnnotationComment) === null || _0x2f24ef === undefined ? undefined : _0x2f24ef.d.returnAnnotation))) {
            _0x186466.push({
              type: _0x52c015.FunctionType.getEffectiveReturnType(this._funcType),
              node: _0x2e8014.d.returnAnnotation ?? _0x2e8014.d.funcAnnotationComment.d.returnAnnotation
            });
          }
          this._options.importAdder.appendImportInfoForTypes(this._fileUri, _0x186466, this._cancellationToken);
        }
        _isTypeUsableForPrint(_0x230431, _0xd0b307) {
          if (!_0x230431) {
            return false;
          }
          return !_0x52c015.isUnknown(_0x230431) || _0xd0b307?.category === 9;
        }
        _shouldUseAwait() {
          const _0x467952 = _0x52c015.FunctionType.getEffectiveReturnType(this._funcType) ?? this._evaluator.getInferredReturnType(this._funcType);
          return !!_0x467952 && _0x467952.category === 6 && _0x467952.shared.name === 'Coroutine' && _0x467952.shared.moduleName === 'typing' && !!_0x467952.priv.typeArgs && _0x467952.priv.typeArgs.length === 3;
        }
        _getReturnTypeStr(_0x25e75c, _0x51e831, _0x14eec6) {
          var _0x312a2f;
          if (this._options.dontAddTypeAnnotation) {
            return undefined;
          }
          const _0x25e26e = this._funcType.shared.declaration.node;
          if (!_0x25e26e.d.returnAnnotation && !((_0x312a2f = _0x25e26e.d.funcAnnotationComment) === null || _0x312a2f === undefined ? undefined : _0x312a2f.d.returnAnnotation)) {
            return undefined;
          }
          let _0x370e79 = _0x52c015.FunctionType.getEffectiveReturnType(this._funcType);
          if (this._options.hasAsyncKeyword && _0x25e75c) {
            _0x370e79 = _0x370e79.priv.typeArgs[2];
          }
          const _0x2fd53b = this._funcType.shared.declaredReturnType;
          const _0x521020 = this._getTypeToPrint(_0x370e79, _0x2fd53b);
          if (_0x521020 && this._isTypeUsableForPrint(_0x521020, _0x2fd53b)) {
            return _0x14eec6.getTypeString(_0x521020);
          }
          if (_0x25e26e.d.returnAnnotation) {
            return _0x28cd46.printExpression(_0x25e26e.d.returnAnnotation, _0x51e831);
          }
          if (_0x25e26e.d.funcAnnotationComment) {
            return _0x28cd46.printExpression(_0x25e26e.d.funcAnnotationComment.d.returnAnnotation, _0x51e831);
          }
          return undefined;
        }
      }
      exports.MethodSignaturesGenerator = _0x39bd71;
    },
    42580: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ModuleRenamer = undefined;
      const _0x285e74 = require(3113);
      const _0x474bf0 = require(5884);
      const _0x8dffd0 = require(82458);
      class _0x5a4732 {
        constructor(_0x4f7b6a, _0xc39289, _0x5d4645, _0x589a36) {
          this._program = _0x4f7b6a;
          this._oldModuleUri = _0xc39289;
          this._newModuleUri = _0x5d4645;
          this._token = _0x589a36;
        }
        static getRenameModulePathInfo(_0x1f3459, _0x29dda9) {
          const _0x4fcaf8 = _0x34456c(_0x1f3459);
          const _0x54b979 = _0x4d80fd(_0x4fcaf8, _0x29dda9);
          return {
            fileUri: _0x4fcaf8,
            newFileUri: _0x54b979
          };
          function _0x34456c(_0x24c15f) {
            const _0x323fa3 = _0x24c15f.fileNameWithoutExtensions;
            if (_0x323fa3 === '__init__') {
              return _0x24c15f.getDirectory();
            }
            return _0x24c15f;
          }
          function _0x4d80fd(_0xdad378, _0x5620ec) {
            const _0x53aa23 = _0xdad378.lastExtension;
            const _0x47007e = _0xdad378.getDirectory();
            return _0x47007e.combinePaths(`${_0x5620ec}${_0x53aa23}`);
          }
        }
        static getRenameModulePath(_0x402088) {
          const _0x407e54 = _0x402088.find(_0x24de12 => !_0x24de12.node);
          if (_0x407e54) {
            return _0x407e54.uri;
          }
          const _0x4c54a1 = [..._0x402088.reduce((_0x2455d8, _0xefc740) => _0x2455d8.set(_0xefc740.uri.key, _0xefc740.uri), new Map())];
          const _0x5f0bc6 = _0x4c54a1.findIndex(_0x3bae87 => _0x285e74.isStubFile(_0x3bae87[1]));
          if (_0x5f0bc6 >= 0) {
            return _0x4c54a1[_0x5f0bc6][1];
          }
          return _0x4c54a1[0][1];
        }
        renameModule() {
          if (_0x474bf0.isFile(this._program.fileSystem, this._oldModuleUri)) {
            const _0x4c2d57 = this._program.getSourceFileInfo(this._oldModuleUri);
            if (!_0x4c2d57) {
              return null;
            }
          }
          const _0x4de6c9 = _0x8dffd0.SymbolReferenceUpdator.createForModule(this._program, this._oldModuleUri, this._newModuleUri, this._token);
          if (!_0x4de6c9) {
            return null;
          }
          _0x4de6c9.processModuleReferences(_0x4de6c9.lastModuleName, this._oldModuleUri);
          return {
            edits: _0x4de6c9.getEdits(),
            fileOperations: []
          };
        }
      }
      exports.ModuleRenamer = _0x5a4732;
    },
    53062: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.MRUQueues = exports.MRUQueueKey = undefined;
      const _0x42e8d6 = require(13348);
      class _0x448a70 {
        constructor(_0x592d08, _0x4675d4, _0x55709a = (_0x1af833, _0x179529) => _0x1af833 === _0x179529, _0x28a7b6 = 100) {
          this.name = _0x592d08;
          this.keyGetter = _0x4675d4;
          this.equalityChecker = _0x55709a;
          this.maxSize = _0x28a7b6;
        }
      }
      exports.MRUQueueKey = _0x448a70;
      class _0x106e14 {
        constructor() {
          this._globalMRUQueueMap = new Map();
          this._programMRUQueueMap = new WeakMap();
        }
        getGlobalMRUQueue(_0xe25bae) {
          return this._getQueue(this._globalMRUQueueMap, _0xe25bae);
        }
        getProgramMRUQueue(_0xbbf0b8, _0x3b3211) {
          let _0x56c9d0 = this._programMRUQueueMap.get(_0xbbf0b8);
          if (!_0x56c9d0) {
            _0x56c9d0 = new Map();
            this._programMRUQueueMap.set(_0xbbf0b8, _0x56c9d0);
          }
          return this._getQueue(_0x56c9d0, _0x3b3211);
        }
        _getQueue(_0x38160e, _0x4f0c6a) {
          let _0x377451 = _0x38160e.get(_0x4f0c6a.name);
          if (!_0x377451) {
            _0x377451 = new _0x42e8d6.MRUQueue(_0x4f0c6a.maxSize, _0x4f0c6a.keyGetter, _0x4f0c6a.equalityChecker);
            _0x38160e.set(_0x4f0c6a.name, _0x377451);
          }
          return _0x377451;
        }
      }
      exports.MRUQueues = _0x106e14;
      (function (_0x2ab18d) {
        function _0x5b92b4(_0x438abd) {
          return _0x438abd.getGlobalMRUQueue !== undefined && _0x438abd.getProgramMRUQueue !== undefined;
        }
        _0x2ab18d.is = _0x5b92b4;
      })(_0x106e14 || (exports.MRUQueues = _0x106e14 = {}));
    },
    76246: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.OverrideUsageProviderFactory = undefined;
      const _0x4951ed = require(28445);
      const _0x338564 = require(41557);
      const _0xcc8bf7 = require(21024);
      const _0x4227e5 = require(92324);
      const _0xd8ec6c = require(91426);
      const _0x43ff98 = require(67032);
      class _0x1411e8 {
        constructor(_0x5c81ff) {
          this._view = _0x5c81ff;
        }
        tryCreateProvider(_0x3bb468, _0x5d41af, _0x5ae3dc) {
          if (!_0x5d41af.some(_0x7b87ce)) {
            return undefined;
          }
          return new _0x1a4e97(this._view, _0x5d41af, _0x5ae3dc);
        }
      }
      exports.OverrideUsageProviderFactory = _0x1411e8;
      class _0x1a4e97 {
        constructor(_0x18ab33, _0x17fbc2, _0x4258dc) {
          this._view = _0x18ab33;
          this._declarations = _0x17fbc2;
          this._token = _0x4258dc;
        }
        appendSymbolNamesTo(_0x44ddf9) {}
        appendDeclarationsTo(_0xbdfc2e) {
          this._appendDeclarationsTo(this._declarations, _0xbdfc2e);
        }
        appendDeclarationsAt(_0x152e82, _0x567bcf, _0x28b75d) {
          this._appendDeclarationsTo(_0x567bcf, _0x28b75d);
        }
        get _evaluator() {
          return this._view.evaluator;
        }
        _appendDeclarationsTo(_0x4de021, _0x4c7da8) {
          const _0xa956cc = [];
          for (const _0x34c973 of _0x4de021.filter(_0x7b87ce)) {
            const _0x4e715a = _0x34c973;
            const _0x70a21b = _0x338564.getEnclosingClass(_0x4e715a.node);
            const _0x2d51d8 = _0x70a21b ? this._evaluator.getTypeOfClass(_0x70a21b) : undefined;
            if (!_0x2d51d8) {
              continue;
            }
            for (const _0x9bd4dd of _0x2d51d8.classType.shared.mro) {
              _0xd8ec6c.throwIfCancellationRequested(this._token);
              if (!_0xcc8bf7.isInstantiableClass(_0x9bd4dd)) {
                continue;
              }
              const _0x56a7f9 = _0x4227e5.lookUpClassMember(_0x9bd4dd, _0x4e715a.node.d.name.d.value);
              const _0x2fe732 = _0x4227e5.lookUpClassMember(_0x9bd4dd, _0x4e715a.node.d.name.d.value, 1);
              if (_0x56a7f9 && !_0x2fe732) {
                _0x56a7f9.symbol.getDeclarations().filter(_0x200003 => _0x4951ed.isFunctionDeclaration(_0x200003) && _0x200003.isMethod).forEach(_0x3143bd => _0x43ff98.addDeclarationIfUnique(_0xa956cc, _0x3143bd));
              }
            }
          }
          _0x4c7da8.push(..._0xa956cc);
        }
      }
      function _0x7b87ce(_0x2dfbe5) {
        return _0x4951ed.isFunctionDeclaration(_0x2dfbe5) && _0x2dfbe5.isMethod && _0x2dfbe5.node.d.name.d.value.length > 0 && _0x2dfbe5.node.d.name.d.value !== '__init__' && _0x2dfbe5.node.d.name.d.value !== '__new__';
      }
    },
    31756: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PackageDiscoverer = undefined;
      const _0x1546c6 = require(75130);
      const _0x34bf00 = require(58147);
      const _0x39f0ce = require(4883);
      const _0x112cc6 = require(5884);
      const _0x469586 = require(99504);
      const _0x106c57 = require(8527);
      const _0x35c34f = require(30048);
      const _0x6f76c3 = require(69482);
      const _0x2f072a = require(28020);
      const _0x137932 = 'site-packages';
      const _0x446d19 = 'dist-packages';
      class _0x10bbf1 {
        constructor() {
          this._installedPackageMap = new WeakMap();
          this._distributionToPackageMap = new WeakMap();
          this._packageCache = new Map();
          this._moduleVersionCache = new Map();
        }
        getKnownModuleVersion(_0x14e267, _0x3bb6e2) {
          var _0x52fc16;
          return ((_0x52fc16 = this._installedPackageMap.get(_0x14e267)) === null || _0x52fc16 === undefined ? undefined : _0x52fc16.moduleVersions.get(_0x3bb6e2)) || undefined;
        }
        computeInstalledPackages(_0x385d27) {
          const _0x1428bc = _0x34bf00.getOrAdd(this._installedPackageMap, _0x385d27, () => ({
            moduleVersions: new Map(),
            installedPackages: new Set(),
            installedPackagesReported: false
          }));
          this._computeInstalledPackages(_0x385d27, _0x1428bc.installedPackages, _0x1428bc.moduleVersions);
        }
        ensureDistributionToPackageMap(_0x38d96b) {
          var _0x3efd4f;
          var _0x24ec98;
          if (this._distributionToPackageMap.has(_0x38d96b)) {
            return;
          }
          const _0x3cbb22 = _0x34bf00.getOrAdd(this._distributionToPackageMap, _0x38d96b, () => new Set());
          if ((_0x3efd4f = _0x106c57.tryGetDirectDependencies(_0x38d96b.importResolver, _0x38d96b.rootPath.combinePaths(_0x39f0ce.requirementsFileName))) === null || _0x3efd4f === undefined) {
            undefined;
          } else {
            _0x3efd4f.forEach(_0x2de6b1 => _0x3cbb22.add(_0x2de6b1));
          }
          if ((_0x24ec98 = _0x106c57.tryGetDirectDependencies(_0x38d96b.importResolver, _0x38d96b.rootPath.combinePaths(_0x39f0ce.pyprojectTomlName))) === null || _0x24ec98 === undefined) {
            undefined;
          } else {
            _0x24ec98.forEach(_0x5145ef => _0x3cbb22.add(_0x5145ef));
          }
        }
        getDirectDependencies(_0x1de19e) {
          return this._distributionToPackageMap.get(_0x1de19e);
        }
        reset(_0xb42b9e, _0x321c57) {
          if (_0x321c57 === 'libraryUpdated' || _0x321c57 === 'dependencyUpdated') {
            this._distributionToPackageMap.delete(_0xb42b9e);
          }
          if (_0x321c57 === 'libraryUpdated' || _0x321c57 === 'serviceRestarted') {
            this._packageCache.clear();
            this._moduleVersionCache.clear();
            const _0x2212f0 = this._installedPackageMap.get(_0xb42b9e);
            if (_0x2212f0) {
              _0x2212f0.installedPackagesReported = false;
              _0x2212f0.installedPackages.clear();
              _0x2212f0.moduleVersions.clear();
            }
          }
        }
        report(_0x1f5e06) {
          const _0x5673f1 = this._installedPackageMap.get(_0x1f5e06);
          if (!_0x5673f1) {
            return;
          }
          this._sendInstalledPackagesTelemetry(_0x1f5e06, _0x5673f1);
        }
        logInstalledModuleInfo(_0x420244) {
          const _0x5276b9 = this._installedPackageMap.get(_0x420244);
          if (!_0x5276b9) {
            return;
          }
          for (const [_0x11f744, _0x1fd49d] of _0x5276b9.moduleVersions) {
            if (_0x1fd49d.length > 0) {
              _0x420244.console.log(`Found module ${_0x11f744} : ${_0x1fd49d}`);
            }
          }
        }
        _computeInstalledPackages(_0x38e50a, _0x110ab7, _0x4eccc1) {
          _0x110ab7.clear();
          _0x4eccc1.clear();
          const _0x515b74 = [];
          const _0x2dfde1 = new Map();
          for (const _0x5e29b7 of _0x38e50a.importResolver.getPythonSearchPaths(_0x515b74)) {
            const _0x14f023 = _0x34bf00.getOrAdd(this._packageCache, _0x5e29b7.key, () => this._computeInstalledPackage(_0x38e50a.fileSystem, _0x5e29b7));
            _0x14f023.installedPackages.forEach(_0x3a9ef1 => _0x110ab7.add(_0x3a9ef1));
            _0x14f023.thirdPartyPackages.forEach((_0x37e1dc, _0x2cad20) => _0x2dfde1.set(_0x2cad20, _0x37e1dc));
          }
          for (const [_0x1119e9, _0x1be6e0] of _0x2dfde1) {
            _0x34bf00.getOrAdd(_0x4eccc1, _0x1119e9, () => {
              const _0x292fc7 = _0x1119e9.toLowerCase();
              return _0x34bf00.getOrAdd(this._moduleVersionCache, _0x1be6e0.key + '_' + _0x292fc7, () => this._computeModuleVersion(_0x38e50a.fileSystem, _0x292fc7, _0x1be6e0));
            });
          }
        }
        _computeInstalledPackage(_0x396060, _0x33bde3) {
          const _0x159b64 = new Set();
          const _0x15b99f = new Map();
          const _0x22d4f1 = _0x33bde3.getPath().includes(_0x137932) || _0x33bde3.getPath().includes(_0x446d19);
          try {
            const _0x22b463 = _0x112cc6.getFileSystemEntriesFromDirEntries(_0x396060.readdirEntriesSync(_0x33bde3), _0x396060, _0x33bde3);
            for (const _0x473900 of _0x22b463.files) {
              const _0x61f974 = _0x473900.lastExtension.toLowerCase();
              if (_0x1546c6.supportedFileExtensions.some(_0x2eaf8c => _0x2eaf8c === _0x61f974)) {
                const _0xdd776f = _0x1546c6.getModuleNameFromPath(_0x33bde3, _0x473900);
                if (_0xdd776f && !_0xdd776f.startsWith('_')) {
                  _0x159b64.add(_0xdd776f);
                  if (_0x22d4f1) {
                    _0x15b99f.set(_0xdd776f, _0x33bde3);
                  }
                }
              }
            }
            for (const _0x4f1083 of _0x22b463.directories) {
              if (_0x4f1083.fileNameWithoutExtensions === '__pycache__') {
                continue;
              }
              if (_0x4f1083.fileName.startsWith('_')) {
                continue;
              }
              const _0x139222 = _0x1546c6.getModuleNameFromPath(_0x33bde3, _0x4f1083);
              if (_0x139222) {
                _0x159b64.add(_0x139222);
                if (_0x22d4f1) {
                  _0x15b99f.set(_0x139222, _0x33bde3);
                }
              }
            }
          } catch {}
          return {
            installedPackages: _0x159b64,
            thirdPartyPackages: _0x15b99f
          };
        }
        _sendInstalledPackagesTelemetry(_0x4ae8c3, _0x3d3238) {
          var _0x183744;
          if (_0x3d3238.installedPackagesReported || _0x3d3238.installedPackages.size === 0 || _0x469586.IS_RELEASE) {
            return;
          }
          const _0x271cd1 = new _0x6f76c3.TelemetryEvent(_0x6f76c3.TelemetryEventName.INSTALLED_PACKAGES);
          _0x271cd1.Properties.packagesBitArray = this._generateInstalledPackagesBitArray(_0x3d3238.installedPackages);
          if ((_0x183744 = _0x4ae8c3.serviceProvider.tryGet(_0x35c34f.PylanceServiceKeys.telemetry)) === null || _0x183744 === undefined) {
            undefined;
          } else {
            _0x183744.sendTelemetry(_0x271cd1);
          }
          _0x3d3238.installedPackagesReported = true;
        }
        _generateInstalledPackagesBitArray(_0x23f3e1) {
          const _0x1343ee = new Uint8Array(_0x2f072a.ImportPackageFilterList.length);
          _0x23f3e1.forEach(_0x34b370 => {
            const _0x371501 = _0x34b370.toLowerCase();
            const _0x551905 = _0x2f072a.ImportPackageFilterList.findIndex(_0x3e2cfb => _0x3e2cfb === _0x371501);
            if (_0x551905 >= 0) {
              _0x1343ee[_0x551905] = 1;
            }
          });
          return _0x1343ee.toString();
        }
        _computeModuleVersion(_0x498ee8, _0x41b711, _0x3f4445) {
          try {
            const _0x356ede = _0x498ee8.readdirEntriesSync(_0x3f4445);
            const _0x26f05f = _0x356ede.find(_0xf35ad9 => _0xf35ad9.name.toLowerCase().startsWith(_0x41b711) && _0xf35ad9.name.toLowerCase() !== _0x41b711 && _0xf35ad9.isDirectory());
            if (_0x26f05f) {
              const _0xd0b934 = _0x3f4445.combinePaths(_0x26f05f.name);
              const _0x29ea09 = _0x498ee8.readdirEntriesSync(_0xd0b934);
              for (let _0x1babca = 0; _0x1babca < _0x29ea09.length; _0x1babca++) {
                if (_0x29ea09[_0x1babca].name === 'METADATA' || _0x29ea09[_0x1babca].name === 'PKG-INFO') {
                  const _0x244bc1 = _0xd0b934.combinePaths(_0x29ea09[_0x1babca].name);
                  const _0x5185bb = _0x498ee8.readFileSync(_0x244bc1, 'utf-8');
                  if (_0x5185bb) {
                    const _0x151031 = /^Version:\s+(.*)/gm.exec(_0x5185bb);
                    if (_0x151031) {
                      return _0x151031[1];
                    }
                  }
                }
              }
            }
          } catch {}
          return '';
        }
      }
      exports.PackageDiscoverer = _0x10bbf1;
      (function (_0x55a8ea) {
        function _0x539c90(_0x5616d2) {
          return !!_0x5616d2 && !!_0x5616d2._installedPackageMap && !!_0x5616d2._packageCache && !!_0x5616d2._moduleVersionCache;
        }
        _0x55a8ea.is = _0x539c90;
      })(_0x10bbf1 || (exports.PackageDiscoverer = _0x10bbf1 = {}));
    },
    77907: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ProfilingService = undefined;
      const _0x5c94af = __importStar(require(86592));
      const _0x1ea782 = require(51507);
      const _0x3224f0 = require(71745);
      const _0x451de2 = require(99504);
      class _0x1401de {
        constructor(_0x30146e, _0xdee353) {
          this._sp = _0x30146e;
          this._profileId = 0;
          this._prefix = _0xdee353.replace(/[()]/g, '_').toLowerCase();
        }
        get currentProfilingInfo() {
          return this._currentProfilingInfo;
        }
        async startProfiling(_0x13670d) {
          var _0x202279;
          if (this._profilingSession) {
            return undefined;
          }
          let _0x589d33 = (_0x202279 = this._sp.tryGet(_0x3224f0.ServiceKeys.tempFile)) === null || _0x202279 === undefined ? undefined : _0x202279.tmpdir();
          if (_0x13670d) {
            this._profileId = _0x13670d.profileId;
            _0x589d33 = _0x13670d.profilingFolderUri;
          }
          if (!_0x589d33) {
            return undefined;
          }
          const _0x19c6b4 = this._sp.tryGet(_0x3224f0.ServiceKeys.console);
          const _0x44cd40 = _0x1ea782.createDeferred();
          const _0x4ee753 = new _0x5c94af.Session();
          _0x4ee753.connect();
          _0x4ee753.post('Profiler.enable', () => {
            _0x4ee753.post('Profiler.start', () => {
              if (_0x19c6b4 === null || _0x19c6b4 === undefined) {
                undefined;
              } else {
                _0x19c6b4.info(`[${this._getTitle()}] Profiling started`);
              }
              _0x44cd40.resolve(undefined);
            });
          });
          this._profilingSession = _0x4ee753;
          await _0x44cd40.promise;
          this._currentProfilingInfo = {
            profileId: this._profileId,
            profilingFolderUri: _0x589d33
          };
          return this._currentProfilingInfo;
        }
        async stopProfiling() {
          if (!this._profilingSession) {
            return undefined;
          }
          let _0x1df4de;
          const _0x54585b = _0x1ea782.createDeferred();
          const _0x30c9a4 = this._profilingSession;
          const _0x5f4f22 = this._sp.tryGet(_0x3224f0.ServiceKeys.console);
          const _0x5ad3b2 = this._currentProfilingInfo?.profilingFolderUri;
          _0x30c9a4.post('Profiler.stop', (_0x58f564, {
            profile: _0x4274d5
          }) => {
            if (_0x58f564) {
              if (_0x5f4f22 === null || _0x5f4f22 === undefined) {
                undefined;
              } else {
                _0x5f4f22.error(`There was an error stopping profiler: ${_0x58f564}`);
              }
              return;
            }
            const _0x5cc177 = this._sp.get(_0x3224f0.ServiceKeys.fs);
            try {
              const _0x1a0a39 = this._getTitle();
              if (!_0x5ad3b2) {
                if (_0x5f4f22 === null || _0x5f4f22 === undefined) {
                  undefined;
                } else {
                  _0x5f4f22.info(`[${_0x1a0a39}}] Profiling stopped but there is no place to save data.`);
                }
                return;
              }
              this._profileId++;
              const _0xbe7baf = _0x5ad3b2.combinePaths(`pylance_${_0x451de2.VERSION}_${_0x1a0a39}.cpuprofile`);
              _0x5cc177.writeFileSync(_0xbe7baf, JSON.stringify(_0x4274d5), 'utf8');
              _0x1df4de = _0xbe7baf;
              if (_0x5f4f22 === null || _0x5f4f22 === undefined) {
                undefined;
              } else {
                _0x5f4f22.info(`[${_0x1a0a39}}] Profiling stopped at ${_0x1df4de.getFilePath()}`);
              }
            } catch (_0x4091a6) {
              if (_0x5f4f22 === null || _0x5f4f22 === undefined) {
                undefined;
              } else {
                _0x5f4f22.error(`There was an error saving profile data: ${_0x4091a6}`);
              }
              return;
            }
            _0x30c9a4.post('Profiler.disable', () => {
              _0x30c9a4.disconnect();
              _0x54585b.resolve(undefined);
            });
          });
          this._profilingSession = undefined;
          this._currentProfilingInfo = undefined;
          await _0x54585b.promise;
          return _0x1df4de;
        }
        _getTitle() {
          return this._prefix + 'id_' + this._profileId;
        }
      }
      exports.ProfilingService = _0x1401de;
    },
    39545: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceAnalyzerService = undefined;
      const _0x177303 = require(33970);
      const _0x43c6e4 = require(4883);
      const _0x12b7dd = require(30048);
      const _0x1772c3 = require(95349);
      class _0x11dea1 extends _0x177303.AnalyzerService {
        constructor(_0x1815e8, _0x54af34, _0x28a3eb, _0xf8ca10) {
          super(_0x1815e8, _0x54af34, _0x28a3eb);
          this._serverConnection = _0xf8ca10;
        }
        applyConfigOptions(_0x523cf2) {
          super.applyConfigOptions(_0x523cf2);
          this._updateDependencyWatchers();
          _0x1772c3.CustomLSP.sendNotification(this._serverConnection, _0x1772c3.CustomLSP.Notifications.ConfigOptionsChanged, undefined);
        }
        dispose() {
          super.dispose();
          this._removeDependencyWatchers();
        }
        runAnalysis(_0x5d743c) {
          this.backgroundAnalysisProgram.refreshWorkspaceSymbols(_0x5d743c);
          super.runAnalysis(_0x5d743c);
        }
        _removeDependencyWatchers() {
          if (this._dependencyWatcher) {
            this._dependencyWatcher.close();
            this._dependencyWatcher = undefined;
          }
        }
        _updateDependencyWatchers() {
          this._removeDependencyWatchers();
          const _0x298fd7 = this.options.console;
          const _0x3ad027 = [this.getConfigOptions().projectRoot.combinePaths(_0x43c6e4.requirementsFileName), this.getConfigOptions().projectRoot.combinePaths(_0x43c6e4.pyprojectTomlName)];
          try {
            _0x298fd7.log(`Adding fs watcher for files:
 ${_0x3ad027.join('\n')}`);
            this._dependencyWatcher = this.fs.createFileSystemWatcher(_0x3ad027, (_0x4e0334, _0x53e934) => {
              var _0x1529d3;
              if (!_0x53e934) {
                return;
              }
              _0x298fd7.log(`Dependency: Received fs event '${_0x4e0334}' for path '${_0x53e934}'`);
              if ((_0x1529d3 = this.serviceProvider.tryGet(_0x12b7dd.PylanceServiceKeys.packageDiscoverer)) === null || _0x1529d3 === undefined) {
                undefined;
              } else {
                _0x1529d3.reset(this.backgroundAnalysisProgram.program, 'libraryUpdated');
              }
            });
          } catch {
            _0x298fd7.error(`Exception caught when installing fs watcher for:
 ${_0x3ad027.map(_0x1e5768 => _0x1e5768.toUserVisibleString()).join('\n')}`);
          }
        }
      }
      exports.PylanceAnalyzerService = _0x11dea1;
    },
    74899: function (module, exports, require) {
      'use strict';

      var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
        Object.defineProperty(o, "default", {
          enumerable: true,
          value: v
        });
      } : function (o, v) {
        o["default"] = v;
      });
      var __importStar = this && this.__importStar || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SymbolIndexer = undefined;
      const _0x1164e0 = require(56911);
      const _0x447e7f = __importStar(require(26687));
      const _0x55f11f = require(83760);
      const _0x4dc27e = require(12097);
      const _0x41a3ef = require(4064);
      const _0x30cc49 = require(91426);
      const _0x1e4410 = require(51862);
      const _0x538ecf = require(56412);
      const _0x1879ea = require(56814);
      const _0x3ad176 = require(16835);
      const _0x55bdaa = require(24122);
      class _0x289c94 {
        static getIndices(_0x27be87) {
          return _0x55bdaa.getBackgroundAnalysisProgram(_0x27be87).getIndices();
        }
        static indexSymbols(_0x21529d, _0x41ad95, _0x399659) {
          const _0x769287 = _0x447e7f.getFileInfo(_0x21529d.parserOutput.parseTree);
          if (!_0x769287) {
            return [];
          }
          const _0x12d3e0 = [];
          _0x1bc6c1(_0x769287, _0x21529d, _0x21529d.parserOutput.parseTree, _0x41ad95, _0x12d3e0, _0x399659);
          return _0x12d3e0;
        }
        static indexWorkspace(_0x375247, _0x415459, _0x21d703, _0x2bde84, _0x180d54, _0x10163d, _0x544ee4) {
          if (!_0x415459.configOptions.indexing) {
            return 0;
          }
          let _0x5f28dc = 0;
          const _0x29fce9 = new Set();
          const _0x49608e = _0x415459.getUserFiles();
          for (const _0x56371f of _0x49608e) {
            if (!_0x56371f.sourceFile.isParseRequired()) {
              _0x29fce9.add(_0x56371f);
            }
            if (_0x21d703.get(_0x56371f)) {
              _0x5f28dc++;
            }
          }
          if (_0x5f28dc >= _0x2bde84) {
            return 0;
          }
          for (const _0x345b74 of _0x49608e) {
            if (_0x21d703.get(_0x345b74)) {
              continue;
            }
            const _0x38c16d = _0x80b6b1(_0x345b74.sourceFile.getUri(), _0x345b74.sourceFile.getClientVersion());
            _0x21d703.set(_0x345b74, true);
            if (_0x38c16d) {
              if (++_0x5f28dc > _0x2bde84) {
                _0x2efa0c(_0x49608e, _0x29fce9);
                return _0x5f28dc;
              }
              _0x10163d(_0x345b74.sourceFile.getUri(), _0x38c16d);
            }
            _0x415459.handleMemoryHighUsage();
          }
          _0x2efa0c(_0x49608e, _0x29fce9);
          return _0x5f28dc;
          function _0x80b6b1(_0x292725, _0xb2bcf7) {
            return _0x375247.log(`indexing: ${_0x1e4410.getPathForLogging(_0x415459.fileSystem, _0x292725)}`, _0x593010 => {
              const _0xba2672 = _0x415459.getParseResults(_0x292725);
              if (!_0xba2672) {
                _0x593010.suppress();
                return undefined;
              }
              const _0x3242be = _0x289c94.indexSymbols(_0xba2672, {
                indexingForAutoImportMode: false,
                includeAliasesFromUserFiles: _0x180d54
              }, _0x544ee4);
              _0x593010.add(`found ${_0x3242be.length}`);
              const _0x239af5 = _0x292725.fileNameWithoutExtensions;
              const _0x1f03f6 = _0x4dc27e.isPrivateOrProtectedName(_0x239af5);
              return {
                uri: _0x292725,
                privateOrProtected: _0x1f03f6,
                symbols: _0x3242be,
                clientVersion: _0xb2bcf7
              };
            });
          }
          function _0x2efa0c(_0x2aa0e4, _0x450d05) {
            for (const _0x50b9de of _0x2aa0e4) {
              if (_0x50b9de.sourceFile.isParseRequired() || _0x450d05.has(_0x50b9de)) {
                continue;
              }
              _0x50b9de.sourceFile.dropParseAndBindInfo();
            }
          }
        }
      }
      exports.SymbolIndexer = _0x289c94;
      function _0x1bc6c1(_0x8fcb6b, _0x50b2e1, _0x3a0b5e, _0xbe53e6, _0x4ee70b, _0x336aeb) {
        _0x30cc49.throwIfCancellationRequested(_0x336aeb);
        const _0x2e5589 = _0x447e7f.getScope(_0x3a0b5e);
        if (!_0x2e5589) {
          return;
        }
        const _0xa6995d = _0x2e5589.symbolTable;
        _0xa6995d.forEach((_0x2eead2, _0x5ce4af) => {
          if (_0x2eead2.isIgnoredForProtocolMatch()) {
            return;
          }
          const _0x33b681 = _0x2eead2.isInDunderAll();
          if (_0xbe53e6.indexingForAutoImportMode && !_0xbe53e6.includeAllSymbols && !_0x8fcb6b.isStubFile && !_0x8fcb6b.isInPyTypedPackage && !_0x33b681) {
            return;
          }
          let _0x51869a = _0x41a3ef.getLastTypedDeclarationForSymbol(_0x2eead2);
          if (!_0x51869a && _0x2eead2.hasDeclarations()) {
            _0x51869a = _0x2eead2.getDeclarations()[0];
          }
          if (!_0x51869a) {
            return;
          }
          if (_0x51869a.type === 8) {
            if (!_0xbe53e6.indexingForAutoImportMode && !_0xbe53e6.includeAliasesFromUserFiles) {
              return;
            }
            if (!_0x51869a.loadSymbolsFromPath || _0x51869a.uri.isEmpty()) {
              return;
            }
          }
          _0x14829a(_0x8fcb6b, _0x50b2e1, _0x51869a, _0xbe53e6, _0x41a3ef.isVisibleExternally(_0x2eead2), _0x33b681, _0x5ce4af, _0x4ee70b, _0x336aeb);
        });
      }
      function _0x14829a(_0x13d194, _0x7bc038, _0x5e7560, _0x27b63f, _0x1fe74e, _0x22fb04, _0x56c4de, _0x3ee9a7, _0x460a98) {
        if (_0x27b63f.indexingForAutoImportMode && !_0x1fe74e) {
          return;
        }
        const _0x5a5f61 = _0x538ecf.getSymbolKind(_0x5e7560, undefined, _0x56c4de);
        if (_0x5a5f61 === undefined) {
          return;
        }
        const _0x22b806 = _0x5e7560.range;
        let _0x3b2611 = _0x22b806;
        const _0x276921 = [];
        if (_0x5e7560.type === 6 || _0x5e7560.type === 5) {
          if (!_0x27b63f.indexingForAutoImportMode) {
            _0x1bc6c1(_0x13d194, _0x7bc038, _0x5e7560.node, _0x27b63f, _0x276921, _0x460a98);
          }
          _0x3b2611 = _0x1879ea.convertOffsetsToRange(_0x5e7560.node.start, _0x5e7560.node.start + _0x5e7560.node.length, _0x7bc038.tokenizerOutput.lines);
        }
        let _0x228bd8 = undefined;
        if (_0x5e7560.type === 8) {
          _0x228bd8 = _0x4d645a(_0x447e7f.getFileInfo(_0x7bc038.parserOutput.parseTree).importLookup, _0x5e7560);
          if (!_0x228bd8) {
            return;
          }
        }
        const _0x120717 = {
          name: _0x56c4de,
          visibilityFlags: _0x1b8bc5(_0x1fe74e, _0x22fb04, _0x5e9d98(_0x5e7560)),
          kind: _0x5a5f61,
          itemKind: _0x3ad176.convertSymbolKindToCompletionItemKind(_0x5a5f61),
          alias: _0x228bd8,
          range: _0x27b63f.indexingForAutoImportMode ? undefined : _0x3b2611,
          selectionRange: _0x27b63f.indexingForAutoImportMode ? undefined : _0x22b806,
          children: _0x27b63f.indexingForAutoImportMode ? undefined : _0x276921
        };
        _0x3ee9a7.push(_0x120717);
      }
      function _0x1b8bc5(_0x2ecd9b, _0x5f1197, _0x2e7f61) {
        let _0x32cb3b = 0;
        if (_0x2ecd9b) {
          _0x32cb3b |= 1;
        }
        if (_0x5f1197) {
          _0x32cb3b |= 2;
        }
        if (_0x2e7f61) {
          _0x32cb3b |= 4;
        }
        return _0x32cb3b;
      }
      function _0x5e9d98(_0x5b4702) {
        if (_0x5b4702.type !== 8) {
          return false;
        }
        if (_0x5b4702.node.nodeType === 24) {
          const _0x1e3be7 = _0x5b4702.node;
          return !!_0x1e3be7.d.alias && _0x1e3be7.d.module.d.nameParts.length === 1 && _0x1e3be7.d.module.d.nameParts[0].d.value === _0x1e3be7.d.alias.d.value;
        }
        if (_0x5b4702.node.nodeType === 26) {
          const _0x584604 = _0x5b4702.node;
          return !!_0x584604.d.alias && _0x584604.d.name.d.value === _0x584604.d.alias.d.value;
        }
        return false;
      }
      function _0x4d645a(_0x4b6b0d, _0x182e1b) {
        if (!_0x182e1b.symbolName) {
          return undefined;
        }
        const _0x12a5ab = _0x55f11f.resolveAliasDeclaration(_0x4b6b0d, _0x182e1b, {
          resolveLocalNames: true,
          allowExternallyHiddenAccess: false,
          skipFileNeededCheck: false
        });
        if (!_0x12a5ab || !_0x12a5ab.declaration) {
          return undefined;
        }
        if (_0x12a5ab.isPrivate) {
          return undefined;
        }
        const _0x4f0878 = _0x55f11f.getNameFromDeclaration(_0x12a5ab.declaration);
        if (!_0x4f0878 || _0x12a5ab.declaration.uri.isEmpty()) {
          return undefined;
        }
        const _0x449ee0 = _0x538ecf.getSymbolKind(_0x12a5ab.declaration, undefined, _0x4f0878) ?? _0x1164e0.SymbolKind.Module;
        return {
          originalName: _0x4f0878,
          moduleUri: _0x12a5ab.declaration.uri,
          kind: _0x449ee0,
          itemKind: _0x3ad176.convertSymbolKindToCompletionItemKind(_0x449ee0)
        };
      }
    },
    82458: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.SymbolReferenceUpdator = undefined;
      const _0x2eeea0 = require(56911);
      const _0x1ca803 = require(26687);
      const _0x252690 = require(28445);
      const _0x1dce3b = require(83760);
      const _0x28e404 = require(75130);
      const _0x52f2b1 = require(47610);
      const _0x250a7e = require(41557);
      const _0x159066 = require(88744);
      const _0x2517a3 = require(3433);
      const _0x350666 = require(3113);
      const _0x30723c = require(58147);
      const _0x303cfd = require(48281);
      const _0x1784c0 = require(93779);
      const _0x1784d3 = require(88754);
      const _0x202d57 = require(5884);
      const _0x3b660a = require(67032);
      const _0x13943d = require(85114);
      var _0x144dd2;
      (function (_0x2135c9) {
        _0x2135c9[_0x2135c9.File = 0] = 'File';
        _0x2135c9[_0x2135c9.Folder = 1] = 'Folder';
        _0x2135c9[_0x2135c9.Symbol = 2] = 'Symbol';
      })(_0x144dd2 ||= {});
      const _0x236824 = {
        treatModuleInImportAndFromImportSame: true,
        skipUnreachableCode: false,
        providers: []
      };
      class _0x9c7a5a {
        constructor(_0x5d9d90, _0x1cc89f, _0xa6d6a, _0x230d96, _0x3b5220, _0x2d2136, _0x15d4e3, _0xd985df) {
          this._program = _0x5d9d90;
          this._moduleUri = _0x1cc89f;
          this._newModuleUri = _0xa6d6a;
          this._moduleNameAndType = _0x230d96;
          this._newModuleNameAndType = _0x3b5220;
          this._type = _0x2d2136;
          this.declarations = _0x15d4e3;
          this._token = _0xd985df;
          this._aliasIntroduced = new Set();
          this._textEditTracker = new _0x1784c0.TextEditTracker();
          this._moduleNames = this._moduleName.split('.');
          this._newModuleNames = this._newModuleName.split('.');
          this._onlyNameChanged = _0x52f2b1.haveSameParentModule(this._moduleNames, this._newModuleNames);
          _0x303cfd.assert(this._type !== _0x144dd2.Folder || this._onlyNameChanged, 'We only support simple rename for folder');
        }
        get lastModuleName() {
          return this._moduleNames[this._moduleNames.length - 1];
        }
        get textEditTracker() {
          return this._textEditTracker;
        }
        static createForModule(_0x154416, _0x3710eb, _0x208903, _0xcef6bb) {
          if (!_0x154416.fileSystem.existsSync(_0x3710eb)) {
            return undefined;
          }
          if (_0x202d57.isFile(_0x154416.fileSystem, _0x3710eb)) {
            return this._create(_0x154416, _0x3710eb, _0x208903, _0x144dd2.File, _0xcef6bb);
          } else {
            if (_0x202d57.isDirectory(_0x154416.fileSystem, _0x3710eb)) {
              if (_0x202d57.getDirectoryChangeKind(_0x154416.fileSystem, _0x3710eb, _0x208903) !== 'Renamed') {
                return undefined;
              }
              let _0x31e81d = _0x3710eb.initPyiUri;
              if (!_0x154416.fileSystem.existsSync(_0x31e81d)) {
                _0x31e81d = _0x3710eb.initPyUri;
                if (!_0x154416.fileSystem.existsSync(_0x31e81d)) {
                  return undefined;
                }
              }
              return this._create(_0x154416, _0x31e81d, _0x208903.combinePaths(_0x31e81d.fileName), _0x144dd2.Folder, _0xcef6bb);
            }
          }
          return undefined;
        }
        static createForSymbol(_0x58c9c1, _0x4c1a34, _0x5a2797, _0x4db002, _0x56dec0) {
          if (!_0x58c9c1.fileSystem.existsSync(_0x4c1a34)) {
            return undefined;
          }
          const _0x15fa4c = _0x4db002.filter(_0x1bcbd2 => _0x252690.isClassDeclaration(_0x1bcbd2) || _0x252690.isFunctionDeclaration(_0x1bcbd2) || _0x252690.isVariableDeclaration(_0x1bcbd2));
          if (_0x15fa4c.length === 0) {
            return undefined;
          }
          return this._create(_0x58c9c1, _0x4c1a34, _0x5a2797, _0x144dd2.Symbol, _0x15fa4c, _0x56dec0);
        }
        getEdits() {
          return this._textEditTracker.getEdits(this._token);
        }
        tryGetFirstSymbolUsage(_0x458aea, _0x408035) {
          const _0x2a0b07 = _0x408035?.name ?? _0x1dce3b.getNameFromDeclaration(this.declarations[0]) ?? '';
          const _0x3e698e = new _0x3b660a.DocumentSymbolCollector(this._program, [_0x2a0b07], _0x408035?.decls ?? this.declarations, _0x458aea.parseTree, this._token, _0x236824);
          for (const _0x1ce6c0 of _0x3e698e.collect().sort((_0x388273, _0x272481) => _0x388273.range.start - _0x272481.range.start)) {
            if (_0x250a7e.isImportModuleName(_0x1ce6c0.node) || _0x250a7e.isImportAlias(_0x1ce6c0.node) || _0x250a7e.isFromImportModuleName(_0x1ce6c0.node) || _0x250a7e.isFromImportName(_0x1ce6c0.node) || _0x250a7e.isFromImportAlias(_0x1ce6c0.node)) {
              continue;
            }
            return _0x1ce6c0.range.start;
          }
          return undefined;
        }
        processModuleReferences(_0x5add9a, _0x96c33a) {
          for (const _0x37767a of this._program.getSourceFileInfoList()) {
            if (!_0x2517a3.isUserCode(_0x37767a)) {
              continue;
            }
            const _0x360559 = _0x37767a.sourceFile.getUri();
            const _0x18b8a9 = _0x37767a.sourceFile.getFileContent() ?? '';
            if (!_0x360559.equals(_0x96c33a) && _0x18b8a9.indexOf(_0x5add9a) < 0) {
              continue;
            }
            const _0x3c91cd = this._program.getParseResults(_0x37767a.sourceFile.getUri());
            if (!_0x3c91cd) {
              continue;
            }
            this._renameReferences(_0x3c91cd);
            this._program.handleMemoryHighUsage();
          }
        }
        get _moduleName() {
          return this._moduleNameAndType.moduleName;
        }
        get _newLastModuleName() {
          return this._newModuleNames[this._newModuleNames.length - 1];
        }
        get _newModuleName() {
          return this._newModuleNameAndType.moduleName;
        }
        get _evaluator() {
          return this._program.evaluator;
        }
        static _create(_0x13988b, _0x1633b0, _0x2ad1a0, _0x177dc7, _0x1d09cf, _0x2e2b24) {
          const _0x4dc549 = _0x13988b.configOptions;
          const _0x45ef8f = _0x13988b.importResolver;
          const _0x132f03 = _0x4dc549.findExecEnvironment(_0x1633b0);
          const _0x334a9f = _0x45ef8f.getModuleNameForImport(_0x1633b0, _0x132f03);
          if (!_0x334a9f.moduleName) {
            return undefined;
          }
          const _0x1b112d = _0x45ef8f.getModuleNameForImport(_0x2ad1a0, _0x132f03);
          if (!_0x1b112d.moduleName) {
            return undefined;
          }
          _0x2e2b24 = _0x2eeea0.CancellationToken.is(_0x1d09cf) ? _0x1d09cf : _0x2e2b24;
          const _0x36ca44 = _0x2eeea0.CancellationToken.is(_0x1d09cf) ? [] : _0x1d09cf;
          if (_0x36ca44.length === 0) {
            _0x36ca44.push(_0x1dce3b.synthesizeAliasDeclaration(_0x1633b0));
            if (_0x350666.isStubFile(_0x1633b0)) {
              _0x45ef8f.resolveImport(_0x1633b0, _0x132f03, _0x28e404.createImportedModuleDescriptor(_0x334a9f.moduleName));
              _0x45ef8f.getSourceFilesFromStub(_0x1633b0, _0x132f03, false).forEach(_0x18b88f => _0x36ca44.push(_0x1dce3b.synthesizeAliasDeclaration(_0x18b88f)));
            }
          }
          return new _0x9c7a5a(_0x13988b, _0x1633b0, _0x2ad1a0, _0x334a9f, _0x1b112d, _0x177dc7, _0x36ca44, _0x2e2b24);
        }
        _renameReferences(_0x54cecb) {
          switch (this._type) {
            case _0x144dd2.Folder:
              return this._renameFolderReferences(_0x54cecb);
            case _0x144dd2.File:
              return this._renameModuleReferences(_0x54cecb);
            case _0x144dd2.Symbol:
              return this._updateSymbolReferences(_0x54cecb);
            default:
              return _0x303cfd.assertNever(this._type, this._type + ' is unknown');
          }
        }
        _updateSymbolReferences(_0x6ad37d) {
          const _0x1d25a3 = _0x1ca803.getFileInfo(_0x6ad37d.parserOutput.parseTree).fileUri;
          const _0x1a6c39 = _0x1d25a3.equals(this._moduleUri);
          const _0x3b60b7 = new _0x3b660a.DocumentSymbolCollector(this._program, [_0x1dce3b.getNameFromDeclaration(this.declarations[0]) || ''], this.declarations, _0x6ad37d.parserOutput.parseTree, this._token, _0x236824);
          const _0x5bb4b1 = _0x52f2b1.getTopLevelImports(_0x6ad37d.parserOutput.parseTree, true);
          const _0x2d80a0 = _0x5bb4b1.orderedImports.find(_0x4d7bbb => _0x4d7bbb.moduleName === this._newModuleName);
          let _0x6cbb45 = false;
          const _0x52e619 = new Map();
          const _0x12fbaa = new Map();
          for (const _0x5c9e1b of _0x3b60b7.collect()) {
            const _0x5433e1 = _0x5c9e1b.node;
            if (_0x5433e1.nodeType === 49) {
              if (_0x1a6c39) {
                this._textEditTracker.addEditWithTextRange(_0x6ad37d, _0x5433e1, '');
              }
              continue;
            }
            if (_0x250a7e.isFromImportName(_0x5433e1)) {
              this._updateNameInFromImportForSymbolReferences(_0x6ad37d, _0x5bb4b1, _0x5433e1);
              continue;
            }
            if (!_0x6cbb45) {
              _0x6cbb45 = _0x1a6c39 ? !this.declarations.some(_0xd1b004 => _0x1784d3.TextRange.containsRange(_0xd1b004.node, _0x5433e1)) : true;
            }
            const _0x9ce372 = _0x250a7e.getDottedNameWithGivenNodeAsLastName(_0x5433e1);
            if (_0x9ce372 === _0x5433e1 || _0x9ce372.nodeType !== 35) {
              this._collectWildcardImports(_0x5433e1, _0x52e619);
              continue;
            }
            this._collectSymbolReferencesPerImports(_0x9ce372, _0x12fbaa);
          }
          if (_0x1a6c39 && _0x6cbb45) {
            const _0x3eba7b = (_0x2d80a0 === null || _0x2d80a0 === undefined ? undefined : _0x2d80a0.node.nodeType) === 25 ? this._getNewModuleName(_0x1d25a3, _0x2d80a0.node.d.module.d.leadingDots > 0, false) : undefined;
            const _0x3ca8d5 = (_0x2d80a0 === null || _0x2d80a0 === undefined ? undefined : _0x2d80a0.node.nodeType) === 25 ? {
              currentFromImport: _0x2d80a0.node,
              originalModuleName: this._moduleName
            } : undefined;
            this._textEditTracker.addOrUpdateImport(_0x6ad37d, _0x5bb4b1, {
              name: this._newModuleName,
              nameForImportFrom: _0x3eba7b
            }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), [{
              name: _0x1dce3b.getNameFromDeclaration(this.declarations[0])
            }], _0x3ca8d5);
          }
          this._processSymbolReferenceOffWildcardImports(_0x6ad37d, _0x5bb4b1, _0x52e619);
          this._processSymbolReferenceOffImports(_0x6ad37d, _0x5bb4b1, _0x2d80a0, _0x12fbaa);
        }
        _processSymbolReferenceOffImports(_0x426cb7, _0x1aa812, _0x3c3fa0, _0x22b6d5) {
          const _0x477633 = _0x1ca803.getFileInfo(_0x426cb7.parserOutput.parseTree).fileUri;
          const _0x1b7760 = _0x477633.equals(this._newModuleUri);
          if (_0x1b7760) {
            for (const [_0x52bea9, _0x3a82e3] of _0x22b6d5) {
              if (this._canReplaceImportName(_0x426cb7.parserOutput, _0x52bea9, _0x3a82e3)) {
                this._textEditTracker.deleteImportName(_0x426cb7, _0x52bea9);
              }
              for (const _0x55cc62 of _0x3a82e3) {
                this._textEditTracker.addEditWithTextRange(_0x426cb7, _0x1784d3.TextRange.fromBounds(_0x55cc62.start, _0x55cc62.d.member.start), '');
              }
            }
            return;
          }
          for (const [_0xf2ecec, _0x5e4803] of _0x22b6d5) {
            let _0x5333c5;
            if (this._canReplaceImportName(_0x426cb7.parserOutput, _0xf2ecec, _0x5e4803)) {
              const _0x1f46a4 = this._getReferenceModuleName(_0x1aa812, _0x3c3fa0);
              if (_0xf2ecec.nodeType === 24) {
                if (_0x1f46a4) {
                  _0x5333c5 = _0x1f46a4;
                  this._textEditTracker.deleteImportName(_0x426cb7, _0xf2ecec);
                } else {
                  _0x5333c5 = _0xf2ecec.d.alias ? _0xf2ecec.d.alias.d.value : this._newModuleName;
                  this._textEditTracker.addEditWithTextRange(_0x426cb7, _0xf2ecec.d.module, this._newModuleName);
                }
              } else {
                if (_0x1f46a4) {
                  _0x5333c5 = _0x1f46a4;
                  this._textEditTracker.deleteImportName(_0x426cb7, _0xf2ecec);
                } else {
                  const _0x2c32d8 = _0xf2ecec.parent;
                  const _0x207b2b = this._getNewModuleName(_0x477633, _0x2c32d8.d.module.d.leadingDots > 0, true);
                  _0x5333c5 = _0xf2ecec.d.alias ? _0xf2ecec.d.alias.d.value : this._newLastModuleName;
                  this._textEditTracker.addEditWithTextRange(_0x426cb7, _0x2c32d8.d.module, _0x207b2b);
                  this._textEditTracker.addEditWithTextRange(_0x426cb7, _0xf2ecec.d.name, this._newLastModuleName);
                }
              }
            } else {
              const _0x280e0c = this._getReferenceModuleName(_0x1aa812, _0x3c3fa0);
              if (_0x280e0c) {
                _0x5333c5 = _0x280e0c;
              } else {
                _0x5333c5 = this._newModuleName;
                this._textEditTracker.addOrUpdateImport(_0x426cb7, _0x1aa812, {
                  name: this._newModuleName
                }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType));
              }
            }
            for (const _0x393939 of _0x5e4803) {
              this._textEditTracker.addEditWithTextRange(_0x426cb7, _0x393939.d.leftExpr, _0x5333c5);
            }
          }
        }
        _processSymbolReferenceOffWildcardImports(_0x4582bb, _0x29c09b, _0x3c5f86) {
          const _0x1fcc29 = _0x1ca803.getFileInfo(_0x4582bb.parserOutput.parseTree).fileUri;
          const _0x17dd70 = _0x1fcc29.equals(this._newModuleUri);
          if (_0x17dd70) {
            return;
          }
          for (const [_0x50909d, _0x30ab35] of _0x3c5f86) {
            const _0x4eb699 = _0x50909d;
            const _0x2a28ac = this._getNewModuleName(_0x1fcc29, _0x4eb699.d.module.d.leadingDots > 0, false);
            this._textEditTracker.addOrUpdateImport(_0x4582bb, _0x29c09b, {
              name: this._newModuleName,
              nameForImportFrom: _0x2a28ac
            }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), [..._0x30ab35].map(_0x21ccd2 => ({
              name: _0x21ccd2
            })), {
              currentFromImport: _0x4eb699,
              originalModuleName: this._moduleName
            });
          }
        }
        _collectSymbolReferencesPerImports(_0x26f664, _0x115515) {
          var _0x1d8f94;
          const _0xab0244 = _0x26f664.d.leftExpr.nodeType === 35 ? _0x26f664.d.leftExpr.d.member : _0x26f664.d.leftExpr.nodeType === 38 ? _0x26f664.d.leftExpr : undefined;
          if (!_0xab0244) {
            return;
          }
          const _0x511137 = (_0x1d8f94 = this._evaluator.getDeclInfoForNameNode(_0xab0244)?.decls) === null || _0x1d8f94 === undefined ? undefined : _0x1d8f94.filter(_0x1f5690 => _0x252690.isAliasDeclaration(_0x1f5690) && (_0x1f5690.node.nodeType === 24 || _0x1f5690.node.nodeType === 26));
          if (!_0x511137 || _0x511137.length === 0) {
            return;
          }
          const _0x1fa896 = _0x511137[0].node;
          _0x30723c.getOrAdd(_0x115515, _0x1fa896, () => []).push(_0x26f664);
        }
        _collectWildcardImports(_0x458e1f, _0x3f30f2) {
          const _0x50dba1 = this._evaluator.getDeclInfoForNameNode(_0x458e1f)?.decls;
          const _0x4ccd2e = _0x50dba1 === null || _0x50dba1 === undefined ? undefined : _0x50dba1.find(_0x3322d5 => _0x3322d5.node.nodeType === 25 && _0x3322d5.node.d.isWildcardImport);
          if (!_0x4ccd2e || !_0x252690.isAliasDeclaration(_0x4ccd2e)) {
            return;
          }
          _0x30723c.getOrAdd(_0x3f30f2, _0x4ccd2e.node, () => new Set()).add(_0x458e1f.d.value);
        }
        _updateNameInFromImportForSymbolReferences(_0x50bfb1, _0x1efb5e, _0x428d3e) {
          var _0x91f0c8;
          const _0x150960 = _0x1ca803.getFileInfo(_0x50bfb1.parserOutput.parseTree).fileUri;
          const _0x1951b5 = _0x150960.equals(this._newModuleUri);
          const _0x25299d = _0x428d3e.parent;
          const _0xb8c74f = _0x25299d?.parent;
          const _0x1f9d64 = this._getNewModuleName(_0x150960, _0xb8c74f.d.module.d.leadingDots > 0, false);
          if (_0x1951b5) {
            this._textEditTracker.deleteImportName(_0x50bfb1, _0x25299d);
            return;
          }
          if (_0xb8c74f.d.imports.length === 1) {
            this._textEditTracker.addEditWithTextRange(_0x50bfb1, _0xb8c74f.d.module, _0x1f9d64);
            return;
          }
          this._textEditTracker.deleteImportName(_0x50bfb1, _0x25299d);
          const _0x5c7cf5 = {
            name: _0x25299d.d.name.d.value,
            alias: (_0x91f0c8 = _0x25299d.d.alias) === null || _0x91f0c8 === undefined ? undefined : _0x91f0c8.d.value
          };
          this._textEditTracker.addOrUpdateImport(_0x50bfb1, _0x1efb5e, {
            name: this._newModuleName,
            nameForImportFrom: _0x1f9d64
          }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), [_0x5c7cf5], {
            currentFromImport: _0xb8c74f,
            originalModuleName: this._moduleName
          });
        }
        _getReferenceModuleName(_0x17723c, _0x43fd2a) {
          var _0x51bace;
          var _0x36f1a9;
          if (_0x43fd2a && _0x43fd2a.node.nodeType === 23) {
            if ((_0x51bace = _0x43fd2a.subnode) === null || _0x51bace === undefined ? undefined : _0x51bace.d.alias) {
              return _0x43fd2a.subnode.d.alias.d.value;
            } else {
              return this._newModuleName;
            }
          } else {
            if ((_0x36f1a9 = _0x17723c.implicitImports) === null || _0x36f1a9 === undefined ? undefined : _0x36f1a9.has(this._newModuleUri.key)) {
              const _0x217131 = _0x17723c.implicitImports.get(this._newModuleUri.key);
              if (_0x217131.d.alias) {
                return _0x217131.d.alias.d.value;
              } else {
                return _0x217131.d.name.d.value;
              }
            }
          }
          return undefined;
        }
        _canReplaceImportName(_0x554c09, _0x3add0a, _0x5be77f) {
          const _0x1af337 = _0x3add0a.d.alias ?? (_0x3add0a.nodeType === 24 ? _0x3add0a.d.module.d.nameParts[_0x3add0a.d.module.d.nameParts.length - 1] : _0x3add0a.d.name);
          const _0x3c6651 = _0x3b660a.DocumentSymbolCollector.getDeclarationsForNode(this._program, _0x1af337, false, this._token);
          if (_0x3c6651.length === 0) {
            return false;
          }
          const _0x3d5215 = new _0x3b660a.DocumentSymbolCollector(this._program, [_0x1af337.d.value], _0x3c6651, _0x554c09.parseTree, this._token, _0x236824);
          for (const _0x1f0d74 of _0x3d5215.collect()) {
            if (_0x250a7e.isImportModuleName(_0x1f0d74.node) || _0x250a7e.isImportAlias(_0x1f0d74.node) || _0x250a7e.isFromImportModuleName(_0x1f0d74.node) || _0x250a7e.isFromImportName(_0x1f0d74.node) || _0x250a7e.isFromImportAlias(_0x1f0d74.node)) {
              continue;
            }
            if (!_0x5be77f.some(_0x453e66 => _0x1784d3.TextRange.containsRange(_0x453e66, _0x1f0d74.node))) {
              return false;
            }
          }
          return true;
        }
        _renameFolderReferences(_0x59381b) {
          const _0x1b0caa = new _0x3b660a.DocumentSymbolCollector(this._program, [this.lastModuleName], this.declarations, _0x59381b.parserOutput.parseTree, this._token, _0x236824);
          for (const _0x2ac37c of _0x1b0caa.collect()) {
            this._textEditTracker.addEditWithTextRange(_0x59381b, _0x2ac37c.range, this._newLastModuleName);
          }
        }
        _renameModuleReferences(_0x168f73) {
          const _0x1b2fd8 = new _0x3b660a.DocumentSymbolCollector(this._program, [this.lastModuleName], this.declarations, _0x168f73.parserOutput.parseTree, this._token, _0x236824);
          const _0x41bc77 = _0x1b2fd8.collect();
          this._updateModuleReferences(_0x168f73, _0x41bc77);
          this._updateRelativeModuleNamePath(_0x168f73, _0x41bc77);
        }
        _updateRelativeModuleNamePath(_0xe50e20, _0x5b0efd) {
          const _0x4ecf02 = _0x1ca803.getFileInfo(_0xe50e20.parserOutput.parseTree).fileUri;
          if (!_0x4ecf02.equals(this._moduleUri)) {
            return;
          }
          let _0x207510;
          for (const _0x23a88d of this._getNewRelativeModuleNamesForFileMoved(_0x4ecf02, _0x59946b.collect(_0xe50e20.parserOutput.parseTree).filter(_0x2157a0 => !_0x5b0efd.some(_0x427fcf => _0x1784d3.TextRange.containsRange(_0x2157a0.parent, _0x427fcf.node))))) {
            this._textEditTracker.addEditWithTextRange(_0xe50e20, _0x23a88d.moduleName, _0x23a88d.newModuleName);
            if (!_0x23a88d.itemsToMove) {
              continue;
            }
            const _0x1526f9 = _0x23a88d.moduleName.parent;
            for (const _0x26ff13 of _0x23a88d.itemsToMove) {
              this._textEditTracker.deleteImportName(_0xe50e20, _0x26ff13);
            }
            _0x207510 = _0x207510 ?? _0x52f2b1.getTopLevelImports(_0xe50e20.parserOutput.parseTree, false);
            this._textEditTracker.addOrUpdateImport(_0xe50e20, _0x207510, {
              name: this._newModuleName,
              nameForImportFrom: _0x52f2b1.getRelativeModuleName(this._program.fileSystem, this._newModuleUri, this._newModuleUri, this._program.configOptions, false, true)
            }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), _0x23a88d.itemsToMove.map(_0xc997cb => {
              var _0x587222;
              return {
                name: _0xc997cb.d.name.d.value,
                alias: (_0x587222 = _0xc997cb.d.alias) === null || _0x587222 === undefined ? undefined : _0x587222.d.value
              };
            }), {
              currentFromImport: _0x1526f9,
              originalModuleName: this._moduleName
            });
          }
        }
        _updateModuleReferences(_0x24cd26, _0x54d5f9) {
          var _0x3075f2;
          var _0x55c2c7;
          const _0x4e8dab = _0x1ca803.getFileInfo(_0x24cd26.parserOutput.parseTree).fileUri;
          let _0xbbd475;
          for (const _0x2388c1 of _0x54d5f9) {
            const _0x12579c = _0x2388c1.node;
            if (_0x12579c.nodeType === 49) {
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              continue;
            }
            if (_0x250a7e.isImportModuleName(_0x12579c)) {
              if (!_0x250a7e.isLastNameOfModuleName(_0x12579c)) {
                continue;
              }
              const _0x351639 = _0x250a7e.getFirstAncestorOrSelfOfKind(_0x12579c, 37);
              if (_0x351639.d.nameParts.length === 1 && _0x351639.parent?.nodeType === 24 && !_0x351639.parent.d.alias && this._newModuleNames.length > 1) {
                this._aliasIntroduced.add(_0x351639.parent);
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x351639, this._newModuleName + ' as ' + this._newLastModuleName);
                continue;
              }
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x351639, this._newModuleName);
              continue;
            }
            if (_0x250a7e.isImportAlias(_0x12579c)) {
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              continue;
            }
            if (_0x250a7e.isFromImportModuleName(_0x12579c)) {
              if (!_0x250a7e.isLastNameOfModuleName(_0x12579c)) {
                continue;
              }
              const _0x56ce10 = _0x250a7e.getFirstAncestorOrSelfOfKind(_0x12579c, 37);
              const _0x95ece7 = _0x56ce10.parent;
              const _0x1c7ca3 = [];
              const _0x5a284c = [];
              for (const _0x16b1d1 of _0x95ece7.d.imports) {
                if (this._isExportedSymbol(_0x16b1d1.d.name)) {
                  _0x1c7ca3.push(_0x16b1d1);
                } else {
                  _0x5a284c.push(_0x16b1d1);
                }
              }
              if (_0x5a284c.length === 0) {
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x56ce10, this._getNewModuleName(_0x4e8dab, _0x56ce10.d.leadingDots > 0, false));
                continue;
              }
              if (_0x1c7ca3.length === 0) {
                continue;
              }
              if (_0x95ece7.d.module.d.leadingDots > 0) {
                for (const _0x23accf of this._getNewRelativeModuleNamesForFileMoved(_0x4e8dab, [_0x95ece7.d.module])) {
                  this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x23accf.moduleName, _0x23accf.newModuleName);
                }
              }
              for (const _0x277a05 of _0x1c7ca3) {
                this._textEditTracker.deleteImportName(_0x24cd26, _0x277a05);
              }
              _0xbbd475 = _0xbbd475 ?? _0x52f2b1.getTopLevelImports(_0x24cd26.parserOutput.parseTree, false);
              this._textEditTracker.addOrUpdateImport(_0x24cd26, _0xbbd475, {
                name: this._newModuleName
              }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), _0x1c7ca3.map(_0x1d9b4c => {
                var _0x4030b1;
                const _0x4897f9 = _0x54d5f9.findIndex(_0x56bbb0 => _0x56bbb0.node === _0x1d9b4c.d.name) >= 0 ? this._newLastModuleName : _0x1d9b4c.d.name.d.value;
                const _0x5959d6 = _0x54d5f9.findIndex(_0x39808f => _0x39808f.node === _0x1d9b4c.d.alias) >= 0 ? this._newLastModuleName : (_0x4030b1 = _0x1d9b4c.d.alias) === null || _0x4030b1 === undefined ? undefined : _0x4030b1.d.value;
                return {
                  name: _0x4897f9,
                  alias: _0x5959d6
                };
              }), {
                currentFromImport: _0x95ece7,
                originalModuleName: this._moduleName
              });
              continue;
            }
            if (_0x250a7e.isFromImportName(_0x12579c)) {
              if (this._textEditTracker.isNodeRemoved(_0x12579c)) {
                continue;
              }
              const _0x259cf0 = _0x12579c.parent?.parent;
              const _0x5228ea = this._getNewModuleName(_0x4e8dab, _0x259cf0.d.module.d.leadingDots > 0, true);
              if (this._isExportedSymbol(_0x12579c)) {
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
                continue;
              }
              if (_0x259cf0.d.imports.length === 1) {
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x259cf0.d.module, _0x5228ea);
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              } else {
                const _0x4bd762 = _0x12579c.parent;
                if (_0x259cf0.d.module.d.leadingDots > 0) {
                  for (const _0x323c12 of this._getNewRelativeModuleNamesForFileMoved(_0x4e8dab, [_0x259cf0.d.module])) {
                    this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x323c12.moduleName, _0x323c12.newModuleName);
                  }
                }
                this._textEditTracker.deleteImportName(_0x24cd26, _0x4bd762);
                _0xbbd475 = _0xbbd475 ?? _0x52f2b1.getTopLevelImports(_0x24cd26.parserOutput.parseTree, false);
                const _0x4262e4 = {
                  name: this._newLastModuleName,
                  alias: ((_0x3075f2 = _0x4bd762.d.alias) === null || _0x3075f2 === undefined ? undefined : _0x3075f2.d.value) === this.lastModuleName ? this._newLastModuleName : (_0x55c2c7 = _0x4bd762.d.alias) === null || _0x55c2c7 === undefined ? undefined : _0x55c2c7.d.value
                };
                this._textEditTracker.addOrUpdateImport(_0x24cd26, _0xbbd475, {
                  name: this._newModuleName,
                  nameForImportFrom: _0x5228ea
                }, _0x52f2b1.getImportGroupFromModuleNameAndType(this._newModuleNameAndType), [_0x4262e4], {
                  currentFromImport: _0x259cf0,
                  originalModuleName: this._moduleName
                });
              }
              continue;
            }
            if (_0x250a7e.isFromImportAlias(_0x12579c)) {
              if (this._textEditTracker.isNodeRemoved(_0x12579c)) {
                continue;
              }
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              continue;
            }
            const _0x34ba47 = _0x3b660a.DocumentSymbolCollector.getDeclarationsForNode(this._program, _0x12579c, false, this._token).filter(_0x392371 => _0x252690.isAliasDeclaration(_0x392371));
            if (this._onlyNameChanged) {
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              continue;
            }
            if (_0x34ba47 === null || _0x34ba47 === undefined ? undefined : _0x34ba47.some(_0x1c2f19 => !_0x1c2f19.usesLocalName && (!_0x1c2f19.node || _0x1c2f19.node.nodeType === 24) && !this._aliasIntroduced.has(_0x1c2f19.node))) {
              const _0x547415 = _0x250a7e.getDottedNameWithGivenNodeAsLastName(_0x12579c);
              if (_0x547415.parent?.nodeType !== 35) {
                this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x547415, this._newModuleName);
                continue;
              }
              const _0x763635 = this._evaluator.getDeclInfoForNameNode(_0x547415.parent.d.member)?.decls;
              if (!_0x763635 || _0x763635.length === 0) {
                continue;
              }
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x547415, this._newModuleName);
              continue;
            }
            if (_0x2388c1.node.d.value !== this._newLastModuleName) {
              this._textEditTracker.addEditWithTextRange(_0x24cd26, _0x2388c1.range, this._newLastModuleName);
              continue;
            }
          }
        }
        _getNewRelativeModuleNamesForFileMoved(_0x303b73, _0xed7253) {
          if (!_0x303b73.equals(this._moduleUri)) {
            return [];
          }
          const _0x1981c3 = _0x303b73.fileNameWithoutExtensions;
          const _0x44893f = _0x1981c3 === '__init__';
          const _0x5d047e = _0x303b73.getDirectory();
          const _0x39e989 = [];
          for (const _0x4bf6fe of _0xed7253) {
            if (_0x4bf6fe.d.leadingDots === 0) {
              continue;
            }
            const _0x426776 = this._getNewModuleNameInfoForFileMoved(_0x4bf6fe, _0x44893f, _0x5d047e);
            if (!_0x426776) {
              continue;
            }
            const _0xd7744a = _0x52f2b1.getRelativeModuleName(this._program.fileSystem, _0x426776.src, _0x426776.dest, this._program.configOptions, false, true);
            if (!_0xd7744a) {
              continue;
            }
            _0x39e989.push({
              moduleName: _0x4bf6fe,
              newModuleName: _0xd7744a,
              itemsToMove: _0x426776.itemsToMove
            });
          }
          return _0x39e989;
        }
        _getNewModuleNameInfoForFileMoved(_0x4928af, _0x5b77d7, _0x19e9de) {
          const _0x355e7e = _0x1ca803.getImportInfo(_0x4928af);
          if (!_0x355e7e) {
            return undefined;
          }
          let _0x52b76e = _0x355e7e.resolvedUris[_0x355e7e.resolvedUris.length - 1];
          if (!_0x52b76e || _0x52b76e.isEmpty()) {
            if (_0x4928af.d.nameParts.length === 0) {
              const _0x90f3b4 = _0x52f2b1.getDirectoryLeadingDotsPointsTo(_0x19e9de, _0x4928af.d.leadingDots);
              if (!_0x90f3b4) {
                return undefined;
              }
              _0x52b76e = _0x90f3b4.initPyUri;
            } else {
              return undefined;
            }
          }
          if (!this._moduleUri.equals(_0x52b76e) || !_0x5b77d7) {
            return {
              src: this._newModuleUri,
              dest: _0x52b76e
            };
          }
          const _0x56bd20 = [];
          const _0x3abdee = [];
          for (const _0x3064f3 of _0x4928af.parent.d.imports) {
            if (this._isExportedSymbol(_0x3064f3.d.name)) {
              _0x56bd20.push(_0x3064f3);
            } else {
              _0x3abdee.push(_0x3064f3);
            }
          }
          if (_0x3abdee.length === 0) {
            return {
              src: this._newModuleUri,
              dest: this._newModuleUri
            };
          }
          if (_0x56bd20.length === 0) {
            return {
              src: this._newModuleUri,
              dest: this._moduleUri
            };
          }
          return {
            src: this._newModuleUri,
            dest: this._moduleUri,
            itemsToMove: [..._0x56bd20]
          };
        }
        _isExportedSymbol(_0x2a65ca) {
          const _0x37a888 = this._evaluator.getDeclInfoForNameNode(_0x2a65ca)?.decls;
          if (!_0x37a888) {
            return false;
          }
          return !_0x37a888.some(_0x587ce2 => _0x252690.isAliasDeclaration(_0x587ce2) && _0x587ce2.submoduleFallback);
        }
        _getNewModuleName(_0x276ce1, _0xff6fc, _0x374d09) {
          const _0x30ea68 = _0x276ce1.equals(this._moduleUri) ? this._newModuleUri : _0x276ce1;
          const _0x443e1c = _0xff6fc ? _0x52f2b1.getRelativeModuleName(this._program.fileSystem, _0x30ea68, this._newModuleUri, this._program.configOptions, _0x374d09, true) ?? this._newModuleName : this._newModuleName;
          if (_0x374d09 && _0x443e1c.endsWith(this._newLastModuleName)) {
            const _0x32e1e5 = _0x443e1c === this._newLastModuleName ? 0 : _0x443e1c.length > this._newLastModuleName.length + 1 ? _0x443e1c[_0x443e1c.length - this._newLastModuleName.length - 2] !== '.' ? 1 : 0 : 0;
            const _0x5df88d = _0x443e1c.length - this._newLastModuleName.length - _0x32e1e5;
            const _0x9f487 = _0x443e1c.substr(0, _0x5df88d);
            if (_0x9f487.length > 0) {
              return _0x9f487;
            } else {
              return '.';
            }
          }
          return _0x443e1c;
        }
      }
      exports.SymbolReferenceUpdator = _0x9c7a5a;
      class _0x59946b extends _0x159066.ParseTreeWalker {
        constructor() {
          super(...arguments);
          this._result = [];
        }
        walk(_0x361a03) {
          if (_0x13943d.isExpressionNode(_0x361a03)) {
            return;
          }
          super.walk(_0x361a03);
        }
        visitModuleName(_0x33e592) {
          this._result.push(_0x33e592);
          return false;
        }
        static collect(_0x58e1b8) {
          const _0x233d58 = new _0x59946b();
          _0x233d58.walk(_0x58e1b8);
          return _0x233d58._result;
        }
      }
    },
    13234: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.TypeStringGenerator = undefined;
      const _0x31c016 = require(83760);
      const _0x49c012 = require(47610);
      const _0x1f9ee7 = require(41557);
      const _0x33f081 = require(21024);
      const _0xee4759 = require(13259);
      const _0x3dc911 = require(19013);
      const _0xab0c73 = require(30048);
      const _0xa583f3 = require(61904);
      const _0x2b3847 = {
        enforcePythonSyntax: true,
        expandTypeAlias: false,
        omitTypeArgsIfUnknown: true,
        printUnknownWithAny: true
      };
      class _0x21c067 {
        constructor(_0x55ad34, _0x290888, _0x4a79f3, _0x1cd5dd) {
          this._program = _0x55ad34;
          this._fileUri = _0x290888;
          this._token = _0x4a79f3;
          this._importAdder = _0x1cd5dd;
          this._options = this._getTypePrintOptions(!this._useTypeAlias);
          this._parseResults = this._program.getParseResults(this._fileUri);
          if (!this._parseResults) {
            return;
          }
          this._importStatements = _0x49c012.getTopLevelImports(this._parseResults.parserOutput.parseTree);
        }
        getTypeString(_0x1852c1) {
          if (!this._parseResults || !this._importStatements) {
            return this._program.evaluator.printType(_0x1852c1, this._options);
          }
          if (_0x33f081.isAny(_0x1852c1) || _0x33f081.isNever(_0x1852c1) || _0x33f081.isClass(_0x1852c1)) {
            return this._getTypeString(_0x1852c1);
          }
          if (_0x33f081.isUnion(_0x1852c1)) {
            return this._getUnionTypeString(_0x1852c1);
          }
          return this._program.evaluator.printType(_0x1852c1, this._options);
        }
        get _useTypeAlias() {
          if (this._importAdder) {
            return this._importAdder.options.useTypeAlias;
          } else {
            return false;
          }
        }
        _getUnionTypeString(_0x831251) {
          if (this._program.configOptions.diagnosticRuleSet.pep604Printing) {
            const _0x37ef1a = [];
            _0x831251.priv.subtypes.forEach(_0x2b838e => {
              _0x37ef1a.push(this.getTypeString(_0x2b838e));
            });
            return _0x37ef1a.join(' | ');
          }
          return this._getTypeString(_0x831251);
        }
        _getTypeString(_0x77c1f7) {
          const _0x87c807 = this._program.serviceProvider.tryGet(_0xab0c73.PylanceServiceKeys.declarationFinder);
          if (_0x87c807) {
            const _0x54df48 = _0x87c807.getDeclarations(_0x77c1f7, this._token, {
              useTypeAlias: this._useTypeAlias
            });
            for (const _0x1872fd of _0x54df48) {
              const _0x5e45de = this._tryGetExistingImportInfo(_0x77c1f7, _0x1872fd);
              return this._generateText(_0x77c1f7, _0x1872fd, _0x5e45de);
            }
          }
          return this._program.evaluator.printType(_0x77c1f7, this._options);
        }
        _tryGetExistingImportInfo(_0x505448, _0x53c8d0) {
          var _0x661741;
          const _0x3b3698 = _0x3dc911.getOutermostEnclosingClassNameNode(_0x53c8d0.node);
          const _0x26ee9d = (_0x3b3698 === null || _0x3b3698 === undefined ? undefined : _0x3b3698.d.value) ?? _0x31c016.getNameFromDeclaration(_0x53c8d0);
          const _0x316fc6 = (_0x661741 = this._importAdder) === null || _0x661741 === undefined ? undefined : _0x661741.tryGetImportResult(this._importStatements, this._parseResults, this._token);
          if (_0x316fc6) {
            for (const _0x39467a of _0x316fc6.applyData) {
              if (_0x39467a.info.some(_0x4826a1 => _0x4826a1.name === _0x26ee9d && !_0x4826a1.alias)) {
                return undefined;
              }
            }
          }
          return _0xee4759.tryGetExistingImportInfo(this._program, this._importStatements, _0x505448, _0x53c8d0);
        }
        _generateText(_0x321f1a, _0x3d431e, _0x193dac) {
          if (_0x193dac?.module) {
            return _0x193dac.module + '.' + this._getInsertionText(_0x321f1a, _0x3d431e, _0x193dac.outermostName);
          }
          if (_0x193dac) {
            return this._getInsertionText(_0x321f1a, _0x3d431e, _0x193dac.outermostName);
          }
          return this._getTypeText(_0x321f1a, _0x3d431e);
        }
        _getTypeText(_0x4dc7a6, _0x28377e) {
          const _0x5dd480 = this._program.evaluator.printType(_0x4dc7a6, this._options);
          if (_0x33f081.isClass(_0x4dc7a6)) {
            const _0x1e68db = _0x1f9ee7.getEnclosingClass(_0x28377e.node);
            if (_0x1e68db) {
              return _0x3dc911.getClassFullNameParts(_0x1e68db).join('.') + '.' + _0x5dd480;
            }
          }
          return _0x5dd480;
        }
        _getInsertionText(_0x30eeaf, _0x52ffe3, _0x4048a5) {
          var _0x2818af;
          if (_0x33f081.isClass(_0x30eeaf)) {
            const _0x1e3d84 = _0x1f9ee7.getEnclosingClass(_0x52ffe3.node);
            if (_0x1e3d84) {
              const _0x1b684e = _0x3dc911.getClassFullNameParts(_0x1e3d84);
              _0x1b684e[0] = _0x4048a5;
              _0x4048a5 = _0x1b684e.join('.') + '.' + _0x30eeaf.shared.name;
            }
            if (!_0x30eeaf.priv.typeArgs || _0x30eeaf.priv.typeArgs.length === 0) {
              return _0x4048a5;
            }
            if ((_0x2818af = _0x30eeaf.priv.typeArgs) === null || _0x2818af === undefined ? undefined : _0x2818af.every(_0x1d9f8b => _0x33f081.isUnknown(_0x1d9f8b))) {
              return _0x4048a5;
            }
            const _0x66a513 = _0x30eeaf.priv.typeArgs.map(_0x19867f => this.getTypeString(_0x19867f));
            return `${_0x4048a5}[${_0x66a513.join(', ')}]`;
          }
          if (_0x33f081.isUnion(_0x30eeaf)) {
            if (_0x30eeaf.priv.subtypes.length === 0) {
              return _0x4048a5;
            }
            if (_0x30eeaf.priv.subtypes.every(_0x3ede65 => _0x33f081.isUnknown(_0x3ede65))) {
              return _0x4048a5;
            }
            const _0x3071bf = _0x30eeaf.priv.subtypes.map(_0x54fa1c => this.getTypeString(_0x54fa1c));
            if (!_0xa583f3.isOptional(_0x30eeaf)) {
              return `${_0x4048a5}[${_0x3071bf.join(', ')}]`;
            }
            return `Optional${`[${_0x3071bf.filter(_0x5f027a => _0x5f027a !== 'None').join(', ')}]`}`;
          }
          return _0x4048a5;
        }
        _getTypePrintOptions(_0x5bb21f) {
          return {
            ..._0x2b3847,
            expandTypeAlias: _0x5bb21f
          };
        }
      }
      exports.TypeStringGenerator = _0x21c067;
    },
    44657: (module, exports) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CallArgumentNameModes = exports.MoveNewFileMarker = undefined;
      exports.MoveNewFileMarker = '*** new file ***';
      var _0x166458;
      (function (_0x29b03b) {
        _0x29b03b.off = 'off';
        _0x29b03b.partial = 'partial';
        _0x29b03b.all = 'all';
      })(_0x166458 || (exports.CallArgumentNameModes = _0x166458 = {}));
    },
    41976: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.ChatBlockWorkspaceFactory = exports.VSCodeChatCodeBlockScheme = undefined;
      const _0x55ca3b = require(30741);
      exports.VSCodeChatCodeBlockScheme = 'vscode-chat-code-block';
      class _0x2ed4f5 {
        constructor(_0x37fd0c) {
          this._createService = _0x37fd0c;
        }
        tryCreate(_0x50871c) {
          var _0x42bc72;
          if (!_0x50871c.kinds.includes(_0x55ca3b.WellKnownWorkspaceKinds.Default) || _0x50871c.requestingUri?.scheme !== exports.VSCodeChatCodeBlockScheme) {
            return undefined;
          }
          const _0x39a6c4 = _0x50871c.requestingUri.root;
          const _0x51ae87 = [..._0x50871c.kinds, _0x55ca3b.WellKnownWorkspaceKinds.Limited, 'chatBlock'];
          const _0x232271 = {
            workspaceName: _0x50871c.name,
            rootUri: _0x39a6c4,
            kinds: _0x51ae87,
            pythonPath: _0x50871c.pythonPath,
            pythonPathKind: _0x50871c.pythonPathKind,
            service: this._createService(_0x50871c.name, _0x39a6c4, _0x51ae87),
            disableLanguageServices: false,
            disableTaggedHints: false,
            disableOrganizeImports: true,
            disableWorkspaceSymbol: true,
            isInitialized: _0x55ca3b.createInitStatus(),
            searchPathsToWatch: [],
            pythonEnvironmentName: (_0x42bc72 = _0x50871c.pythonPath) === null || _0x42bc72 === undefined ? undefined : _0x42bc72.toString()
          };
          return _0x232271;
        }
      }
      exports.ChatBlockWorkspaceFactory = _0x2ed4f5;
    },
    86521: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.CopilotChatBlockWorkspaceFactory = exports.VSCodeCopilotChatCodeBlockScheme = undefined;
      const _0x1ade9a = require(30741);
      exports.VSCodeCopilotChatCodeBlockScheme = 'vscode-copilot-chat-code-block';
      class _0x3da19c {
        constructor(_0x3fa9ef) {
          this._createService = _0x3fa9ef;
        }
        tryCreate(_0x183685) {
          var _0x47224a;
          if (!_0x183685.kinds.includes(_0x1ade9a.WellKnownWorkspaceKinds.Default) || _0x183685.requestingUri?.scheme !== exports.VSCodeCopilotChatCodeBlockScheme) {
            return undefined;
          }
          const _0x236d8d = _0x183685.requestingUri.root;
          const _0x5a6c7b = [..._0x183685.kinds, _0x1ade9a.WellKnownWorkspaceKinds.Limited, 'copilotChatBlock'];
          const _0x14c218 = {
            workspaceName: _0x183685.name,
            rootUri: _0x236d8d,
            kinds: _0x5a6c7b,
            pythonPath: _0x183685.pythonPath,
            pythonPathKind: _0x183685.pythonPathKind,
            service: this._createService(_0x183685.name, _0x236d8d, _0x5a6c7b),
            disableLanguageServices: false,
            disableTaggedHints: false,
            disableOrganizeImports: true,
            disableWorkspaceSymbol: true,
            isInitialized: _0x1ade9a.createInitStatus(),
            searchPathsToWatch: [],
            pythonEnvironmentName: (_0x47224a = _0x183685.pythonPath) === null || _0x47224a === undefined ? undefined : _0x47224a.toString()
          };
          return _0x14c218;
        }
      }
      exports.CopilotChatBlockWorkspaceFactory = _0x3da19c;
    },
    58678: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.DefaultWorkspaceFactory = exports.DefaultWorkspacePath = undefined;
      const _0x5f27a1 = require(27113);
      const _0x47aa7e = require(30741);
      exports.DefaultWorkspacePath = '<default>';
      class _0x33d0ff {
        constructor(_0x4f9758) {
          this._createService = _0x4f9758;
        }
        tryCreate(_0x47dddf) {
          var _0x193da8;
          if (!_0x47dddf.kinds.includes(_0x47aa7e.WellKnownWorkspaceKinds.Default)) {
            return undefined;
          }
          const _0x3c74f3 = {
            workspaceName: _0x47dddf.name,
            rootUri: undefined,
            kinds: _0x47dddf.kinds,
            pythonPath: _0x47dddf.pythonPath,
            pythonPathKind: _0x47dddf.pythonPathKind,
            service: this._createService(_0x47dddf.name, _0x5f27a1.Uri.empty(), _0x47dddf.kinds),
            disableLanguageServices: false,
            disableTaggedHints: false,
            disableOrganizeImports: false,
            disableWorkspaceSymbol: false,
            isInitialized: _0x47aa7e.createInitStatus(),
            searchPathsToWatch: [],
            pythonEnvironmentName: (_0x193da8 = _0x47dddf.pythonPath) === null || _0x193da8 === undefined ? undefined : _0x193da8.toString()
          };
          return _0x3c74f3;
        }
      }
      exports.DefaultWorkspaceFactory = _0x33d0ff;
    },
    82724: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.NotebookWorkspaceFactory = undefined;
      const _0x3125b8 = require(27113);
      const _0x3f245d = require(30741);
      const _0x218deb = require(21368);
      class _0x4c5d32 {
        constructor(_0x1bd2ef) {
          this._createService = _0x1bd2ef;
        }
        tryCreate(_0x1b0448) {
          var _0x12b8a7;
          if (_0x3125b8.Uri.isEmpty(_0x1b0448.pythonPath) || _0x1b0448.pythonPathKind !== _0x218deb.WorkspacePythonPathKind.Immutable) {
            return undefined;
          }
          const _0x1bd472 = {
            workspaceName: _0x1b0448.name,
            rootUri: _0x1b0448.rootUri,
            kinds: _0x1b0448.kinds,
            pythonPath: _0x1b0448.pythonPath,
            pythonPathKind: _0x1b0448.pythonPathKind,
            service: this._createService(_0x1b0448.name, _0x1b0448.rootUri, _0x1b0448.kinds),
            disableLanguageServices: false,
            disableTaggedHints: false,
            disableOrganizeImports: false,
            disableWorkspaceSymbol: false,
            isInitialized: _0x3f245d.createInitStatus(),
            searchPathsToWatch: [],
            pythonEnvironmentName: (_0x12b8a7 = _0x1b0448.pythonPath) === null || _0x12b8a7 === undefined ? undefined : _0x12b8a7.toString()
          };
          return _0x1bd472;
        }
      }
      exports.NotebookWorkspaceFactory = _0x4c5d32;
    },
    83329: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.PylanceWorkspaceFactory = undefined;
      exports.renameWorkspace = _0x3063d5;
      const _0x4fa948 = require(27113);
      const _0x393732 = require(30741);
      const _0x2f4cdd = require(21368);
      const _0x5e1d9f = require(58678);
      const _0x55f404 = require(43085);
      let _0x12cd3e = 0;
      function _0x3063d5(_0x45225e, _0x523091) {
        _0x45225e.workspaceName = _0x523091;
        _0x45225e.service.setServiceName(_0x523091);
      }
      class _0x17bbb4 {
        constructor(_0x1fc4e3, _0x2d6c81, _0x25063e, _0x36a359, _0x5b39d2, _0x52665c, _0x4fb284) {
          this._console = _0x1fc4e3;
          this._isWeb = _0x2d6c81;
          this._isPythonPathImmutable = _0x36a359;
          this._onWorkspaceCreated = _0x5b39d2;
          this._onWorkspaceRemoved = _0x52665c;
          this._serviceProvider = _0x4fb284;
          this._map = new Map();
          this._id = _0x12cd3e++;
          this._console.log(`Pylance WorkspaceFactory ${this._id} created`);
          this._factories = new _0x55f404.WorkspaceFactories(_0x25063e);
        }
        handleInitialize(_0x1d1fe9) {
          if (_0x1d1fe9.workspaceFolders) {
            _0x1d1fe9.workspaceFolders.forEach(_0x1e9587 => {
              this._add({
                rootUri: _0x4fa948.Uri.parse(_0x1e9587.uri, this._serviceProvider),
                name: _0x1e9587.name,
                pythonPathKind: _0x2f4cdd.WorkspacePythonPathKind.Mutable,
                kinds: [_0x393732.WellKnownWorkspaceKinds.Regular]
              });
            });
          } else {
            if (_0x1d1fe9.rootPath) {
              this._add({
                rootUri: _0x4fa948.Uri.file(_0x1d1fe9.rootPath, this._serviceProvider),
                name: _0x4fa948.Uri.file(_0x1d1fe9.rootPath, this._serviceProvider).fileNameWithoutExtensions,
                pythonPathKind: _0x2f4cdd.WorkspacePythonPathKind.Mutable,
                kinds: [_0x393732.WellKnownWorkspaceKinds.Regular]
              });
            }
          }
        }
        handleWorkspaceFoldersChanged(_0x248f43, _0x43d74b) {
          _0x248f43.removed.forEach(_0x12b396 => {
            const _0x401238 = _0x4fa948.Uri.parse(_0x12b396.uri, this._serviceProvider);
            const _0x41d220 = this.getNonDefaultWorkspaces().filter(_0x14d98a => _0x14d98a.rootUri.equals(_0x401238));
            _0x41d220.forEach(_0x12fa91 => {
              this._remove(_0x12fa91);
            });
          });
          _0x248f43.added.forEach(_0x315ec6 => {
            const _0x3425e1 = _0x4fa948.Uri.parse(_0x315ec6.uri, this._serviceProvider);
            const _0xb08648 = this.items().filter(_0x2df37e => _0x3425e1.startsWith(_0x2df37e.rootUri))[0];
            const _0x365aff = this._add({
              rootUri: _0x3425e1,
              name: _0x315ec6.name,
              pythonPathKind: _0x2f4cdd.WorkspacePythonPathKind.Mutable,
              kinds: [_0x393732.WellKnownWorkspaceKinds.Regular]
            });
            if (_0xb08648) {
              this._mimicOpenFiles(_0xb08648, _0x365aff, _0x57bde1 => _0x57bde1.startsWith(_0x3425e1));
            }
          });
          const _0x290b5e = (_0x43d74b === null || _0x43d74b === undefined ? undefined : _0x43d74b.filter(_0x8e0593 => !_0x248f43.added.some(_0x11d2f8 => _0x11d2f8.uri === _0x8e0593.uri) && !_0x248f43.removed.some(_0x2c9a3d => _0x2c9a3d.uri === _0x8e0593.uri))) ?? [];
          _0x290b5e.forEach(_0x40a572 => {
            const _0x19513c = _0x4fa948.Uri.parse(_0x40a572.uri, this._serviceProvider);
            const _0xceb05a = this.getNonDefaultWorkspaces().filter(_0x17ce70 => _0x17ce70.rootUri.equals(_0x19513c) && _0x17ce70.workspaceName !== _0x40a572.name);
            _0xceb05a.forEach(_0x598394 => _0x3063d5(_0x598394, _0x40a572.name));
          });
        }
        items() {
          return Array.from(this._map.values());
        }
        applyPythonPath(_0x57a0f5, _0x4e4986) {
          if (_0x57a0f5.pythonPathKind === _0x2f4cdd.WorkspacePythonPathKind.Mutable && !_0x4fa948.Uri.isEmpty(_0x4e4986)) {
            const _0x265a77 = _0x57a0f5.pythonPath;
            _0x57a0f5.pythonPath = _0x4e4986;
            const _0x4fbec6 = this._factories.getWorkspaceKey(_0x57a0f5);
            const _0x2f5dbc = this._map.get(_0x4fbec6);
            if (_0x2f5dbc) {
              _0x2f5dbc.pythonPath = _0x4e4986;
            }
            if (_0x265a77 && !_0x4fa948.Uri.equals(_0x4e4986, _0x265a77) && _0x2f5dbc) {
              this._moveImmutableFilesToCorrectWorkspace(_0x265a77, _0x2f5dbc);
            }
          }
          return _0x57a0f5.pythonPath;
        }
        clear() {
          this._map.forEach(_0x30c974 => {
            _0x30c974.isInitialized.resolve();
            _0x30c974.service.dispose();
          });
          this._map.clear();
          this._console.log(`WorkspaceFactory ${this._id} clear`);
        }
        hasMultipleWorkspaces(_0x4fe992) {
          if (this._map.size === 0 || this._map.size === 1) {
            return false;
          }
          let _0x15c15f = 0;
          for (const _0x5c77ce of this._map) {
            if (!_0x4fe992 || _0x5c77ce[1].kinds.some(_0x308830 => _0x308830 === _0x4fe992)) {
              _0x15c15f++;
            }
            if (_0x15c15f > 1) {
              return true;
            }
          }
          return false;
        }
        getContainingWorkspace(_0x533b87, _0x433efc) {
          return this._getBestRegularWorkspace(this.getNonDefaultWorkspaces(_0x393732.WellKnownWorkspaceKinds.Regular).filter(_0x5cf0df => _0x533b87.startsWith(_0x5cf0df.rootUri)), _0x433efc);
        }
        moveFiles(_0x191fae, _0x585b9e, _0x52bd31) {
          if (_0x585b9e === _0x52bd31) {
            return;
          }
          try {
            _0x191fae.forEach(_0x53a09d => {
              var _0x56d1cd;
              const _0xbe0952 = _0x585b9e.service.backgroundAnalysisProgram.program.getSourceFileInfo(_0x53a09d);
              if (_0xbe0952) {
                const _0x3f0304 = _0xbe0952.sourceFile.getClientVersion() ?? null;
                const _0x9f042a = _0xbe0952.sourceFile.getFileContent() || '';
                const _0xb8993a = _0xbe0952.sourceFile.getIPythonMode();
                const _0x255318 = (_0x56d1cd = _0xbe0952.chainedSourceFile) === null || _0x56d1cd === undefined ? undefined : _0x56d1cd.sourceFile.getUri();
                _0x585b9e.service.setFileClosed(_0x53a09d, false);
                _0x52bd31.service.setFileOpened(_0x53a09d, _0x3f0304, _0x9f042a, _0xb8993a, _0x255318);
              }
            });
            this.removeUnused(_0x585b9e);
          } catch (_0x35ab15) {
            this._console.error(_0x35ab15.toString());
          }
        }
        getNonDefaultWorkspaces(_0x135a16) {
          const _0x5c5f00 = [];
          this._map.forEach(_0x5591d0 => {
            if (!_0x5591d0.rootUri) {
              return;
            }
            if (_0x135a16 && !_0x5591d0.kinds.some(_0x37f8e3 => _0x37f8e3 === _0x135a16)) {
              return;
            }
            _0x5c5f00.push(_0x5591d0);
          });
          return _0x5c5f00;
        }
        async getWorkspaceForFile(_0xdfbf38, _0x2354cc) {
          await Promise.all(this.items().map(_0x4b1e81 => _0x4b1e81.isInitialized.promise));
          const _0x153b05 = await this._getOrCreateBestWorkspaceForFile(_0xdfbf38, _0x2354cc);
          await _0x153b05.isInitialized.promise;
          return _0x153b05;
        }
        getWorkspaceForFileSync(_0x24011f, _0x4c7abf) {
          return this._getOrCreateBestWorkspaceFileSync(_0x24011f, _0x4c7abf);
        }
        async getContainingWorkspacesForFile(_0x4893cf) {
          await Promise.all(this.items().map(_0x5b7a57 => _0x5b7a57.isInitialized.promise));
          const _0x46c885 = this.getContainingWorkspacesForFileSync(_0x4893cf);
          await Promise.all(_0x46c885.map(_0xb7c472 => _0xb7c472.isInitialized.promise));
          return _0x46c885;
        }
        getContainingWorkspacesForFileSync(_0x4a5bdd) {
          let _0x368b32 = this.items().filter(_0x1e408a => _0x1e408a.service.hasSourceFile(_0x4a5bdd));
          if (_0x368b32.length === 0) {
            _0x368b32.push(this._getOrCreateBestWorkspaceFileSync(_0x4a5bdd, undefined));
          }
          if (this._isPythonPathImmutable(_0x4a5bdd)) {
            _0x368b32 = _0x368b32.filter(_0x148a91 => _0x148a91.pythonPathKind === _0x2f4cdd.WorkspacePythonPathKind.Immutable);
          }
          return _0x368b32;
        }
        removeUnused(_0x1861be) {
          if (_0x1861be.service.getOpenFiles().filter(_0x14841d => this._isPythonPathImmutable(_0x14841d)).length === 0 && _0x1861be.pythonPathKind === _0x2f4cdd.WorkspacePythonPathKind.Immutable) {
            this._remove(_0x1861be);
          }
        }
        async _moveImmutableFilesToCorrectWorkspace(_0x46682b, _0x39ba76) {
          const _0x1571f5 = _0x39ba76.service.getOpenFiles().filter(_0x53bbb0 => this._isPythonPathImmutable(_0x53bbb0));
          const _0x1bfb92 = this.items().find(_0x359f17 => _0x4fa948.Uri.equals(_0x359f17.pythonPath, _0x39ba76.pythonPath) && _0x359f17 !== _0x39ba76);
          const _0x2a9669 = (_0x1bfb92 === null || _0x1bfb92 === undefined ? undefined : _0x1bfb92.service.getOpenFiles().filter(_0xd574fe => this._isPythonPathImmutable(_0xd574fe))) ?? [];
          if (_0x1571f5.length > 0) {
            const _0x1983a9 = this._getOrCreateBestWorkspaceFileSync(_0x1571f5[0], _0x46682b);
            if (_0x1983a9 !== _0x39ba76) {
              this.moveFiles(_0x1571f5, _0x39ba76, _0x1983a9);
            }
          }
          if (_0x1bfb92) {
            this.moveFiles(_0x2a9669, _0x1bfb92, _0x39ba76);
            this.removeUnused(_0x1bfb92);
          }
        }
        _add(_0x58ff9f) {
          const _0x77d3f4 = _0x58ff9f.rootUri ?? _0x4fa948.Uri.empty();
          if (!_0x58ff9f.kinds.includes(_0x393732.WellKnownWorkspaceKinds.Default) && (!_0x77d3f4.isLocal() || this._isWeb)) {
            _0x58ff9f.kinds = [..._0x58ff9f.kinds, _0x393732.WellKnownWorkspaceKinds.Limited];
          }
          const _0x40e64f = this._factories.createWorkspace(_0x58ff9f);
          const _0x2ff8a4 = this._factories.getWorkspaceKey(_0x40e64f);
          this._remove(_0x40e64f);
          this._console.log(`WorkspaceFactory ${this._id} add ${_0x2ff8a4}`);
          this._map.set(_0x2ff8a4, _0x40e64f);
          this._onWorkspaceCreated(_0x40e64f);
          return _0x40e64f;
        }
        _remove(_0x4e36ef) {
          const _0x4abf51 = this._factories.getWorkspaceKey(_0x4e36ef);
          const _0x36fb00 = this._map.get(_0x4abf51);
          if (_0x36fb00) {
            _0x36fb00.isInitialized.resolve();
            this._onWorkspaceRemoved(_0x36fb00);
            _0x36fb00.service.dispose();
            this._console.log(`WorkspaceFactory ${this._id} remove ${_0x4abf51}`);
            this._map.delete(_0x4abf51);
          }
        }
        async _getOrCreateBestWorkspaceForFile(_0x439b25, _0x30677e) {
          var _0xfd9e92;
          let _0x16b0ce = await this._getBestWorkspaceForFileAndWaitForInitialize(_0x439b25, _0x30677e);
          if (!_0x4fa948.Uri.isEmpty(_0x30677e) && !((_0xfd9e92 = _0x16b0ce.pythonPath) === null || _0xfd9e92 === undefined ? undefined : _0xfd9e92.equals(_0x30677e))) {
            _0x16b0ce = this._createImmutableCopy(_0x16b0ce, _0x30677e);
          }
          return _0x16b0ce;
        }
        async _getBestWorkspaceForFileAndWaitForInitialize(_0x38bd6c, _0x34584d) {
          const _0x3a4cc3 = 100;
          for (let _0x4bac84 = 0; _0x4bac84 < _0x3a4cc3; ++_0x4bac84) {
            const _0x5bc31d = this._getBestWorkspaceForFile(_0x38bd6c, _0x34584d);
            await _0x5bc31d.isInitialized.promise;
            const _0x4b900b = this._getBestWorkspaceForFile(_0x38bd6c, _0x34584d);
            if (_0x5bc31d === _0x4b900b) {
              return _0x5bc31d;
            }
          }
          throw new Error(`Failed to get the best workspace after ${_0x3a4cc3} attempts`);
        }
        _getOrCreateBestWorkspaceFileSync(_0x5b7606, _0x2e0342) {
          var _0x52a352;
          let _0x34cba0 = this._getBestWorkspaceForFile(_0x5b7606, _0x2e0342);
          if (!_0x4fa948.Uri.isEmpty(_0x2e0342) && !((_0x52a352 = _0x34cba0.pythonPath) === null || _0x52a352 === undefined ? undefined : _0x52a352.equals(_0x2e0342))) {
            _0x34cba0 = this._createImmutableCopy(_0x34cba0, _0x2e0342);
          }
          return _0x34cba0;
        }
        _mimicOpenFiles(_0x3c01e4, _0xa2f25d, _0xd37a3d) {
          var _0x554d31;
          const _0x4b48fb = _0x3c01e4.service.getOpenFiles().filter(_0x38a4ed => !this._isPythonPathImmutable(_0x38a4ed));
          for (const _0x4ea2e8 of _0x4b48fb) {
            const _0x44b821 = _0x3c01e4.service.backgroundAnalysisProgram.program.getSourceFileInfo(_0x4ea2e8);
            if (_0x44b821 && _0xd37a3d(_0x4ea2e8)) {
              const _0xfe4753 = _0x44b821.sourceFile;
              const _0x31009d = _0xfe4753.getFileContent();
              _0xa2f25d.service.setFileOpened(_0x4ea2e8, _0xfe4753.getClientVersion() ?? null, _0x31009d || '', _0xfe4753.getIPythonMode(), (_0x554d31 = _0x44b821.chainedSourceFile) === null || _0x554d31 === undefined ? undefined : _0x554d31.sourceFile.getUri());
            }
          }
        }
        _createImmutableCopy(_0xc1968b, _0x35e0c8) {
          const _0x4712e4 = this._add({
            rootUri: _0xc1968b.rootUri,
            name: _0xc1968b.workspaceName,
            pythonPath: _0x35e0c8,
            pythonPathKind: _0x2f4cdd.WorkspacePythonPathKind.Immutable,
            kinds: _0xc1968b.kinds
          });
          this._mimicOpenFiles(_0xc1968b, _0x4712e4, () => true);
          return _0x4712e4;
        }
        _getBestWorkspaceForFile(_0x5d2c02, _0x113f68) {
          var _0x4116ec;
          let _0x37cd91;
          const _0x277b82 = this.items().filter(_0x376ceb => {
            var _0x1f2aa7;
            return _0x376ceb.service.isTracked(_0x5d2c02) || ((_0x1f2aa7 = _0x376ceb.rootUri) === null || _0x1f2aa7 === undefined ? undefined : _0x1f2aa7.equals(_0x5d2c02));
          }).filter(_0x1ea0d4);
          _0x37cd91 = this._getBestRegularWorkspace(_0x277b82, _0x113f68);
          const _0x4f540d = this.getNonDefaultWorkspaces(_0x393732.WellKnownWorkspaceKinds.Regular);
          if (_0x37cd91 === undefined && _0x4f540d.every(_0x42a50f => _0x42a50f.rootUri.scheme === _0x4f540d[0].rootUri.scheme && (_0x42a50f.rootUri.scheme === _0x5d2c02.scheme || _0x5d2c02.isUntitled()) && _0x42a50f.rootUri.equals(_0x4f540d[0].rootUri))) {
            _0x37cd91 = this._getBestRegularWorkspace(_0x4f540d, _0x113f68);
          }
          if (_0x37cd91 === undefined || !((_0x4116ec = _0x37cd91.pythonPath) === null || _0x4116ec === undefined ? undefined : _0x4116ec.equals(_0x113f68))) {
            _0x37cd91 = this._getBestRegularWorkspace(_0x4f540d.filter(_0x15195a => _0x15195a.service.hasSourceFile(_0x5d2c02) && _0x15195a.rootUri.scheme === _0x5d2c02.scheme), _0x113f68) || _0x37cd91;
          }
          if (_0x37cd91 === undefined) {
            _0x37cd91 = this._getOrCreateDefaultWorkspace(_0x5d2c02, _0x113f68);
          }
          return _0x37cd91;
        }
        _getOrCreateDefaultWorkspace(_0x332396, _0x1b7de3) {
          let _0x2f23e8 = this._map.get(this._factories.getDefaultWorkspaceKey(_0x332396, _0x1b7de3));
          if (!_0x2f23e8) {
            _0x2f23e8 = this._add({
              rootUri: undefined,
              name: _0x5e1d9f.DefaultWorkspacePath,
              pythonPath: _0x1b7de3,
              pythonPathKind: !_0x4fa948.Uri.isEmpty(_0x1b7de3) ? _0x2f4cdd.WorkspacePythonPathKind.Immutable : _0x2f4cdd.WorkspacePythonPathKind.Mutable,
              kinds: [_0x393732.WellKnownWorkspaceKinds.Default],
              requestingUri: _0x332396
            });
          }
          return _0x2f23e8;
        }
        _getLongestPathWorkspace(_0x3d77e8) {
          const _0x3f6965 = _0x3d77e8.reduce((_0x77fa81, _0x5a1616) => {
            if (!_0x77fa81) {
              return _0x5a1616.rootUri;
            }
            if (_0x5a1616.rootUri.getPathLength() > _0x77fa81.getPathLength()) {
              return _0x5a1616.rootUri;
            }
            return _0x77fa81;
          }, _0x4fa948.Uri.empty());
          return _0x3d77e8.find(_0x5a0e84 => _0x5a0e84.rootUri.equals(_0x3f6965));
        }
        _getBestRegularWorkspace(_0x2aeaa4, _0x33de09) {
          if (_0x2aeaa4.length === 0) {
            return undefined;
          }
          if (_0x2aeaa4.length === 1) {
            return _0x2aeaa4[0];
          }
          if (!_0x4fa948.Uri.isEmpty(_0x33de09)) {
            const _0x1b3639 = _0x2aeaa4.filter(_0x1a9bc3 => _0x4fa948.Uri.equals(_0x1a9bc3.pythonPath, _0x33de09));
            if (_0x1b3639.length > 0) {
              return this._getLongestPathWorkspace(_0x1b3639);
            }
          }
          return this._getLongestPathWorkspace(_0x2aeaa4);
        }
      }
      exports.PylanceWorkspaceFactory = _0x17bbb4;
      function _0x1ea0d4(_0x10c959) {
        return !!_0x10c959.rootUri;
      }
    },
    95069: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.RegularWorkspaceFactory = undefined;
      const _0x49afcc = require(27113);
      const _0x5da9b6 = require(30741);
      const _0x491cb7 = require(21368);
      class _0x1a68e0 {
        constructor(_0x258a8e) {
          this._createService = _0x258a8e;
        }
        tryCreate(_0x315650) {
          var _0x55bcaf;
          if (_0x49afcc.Uri.isEmpty(_0x315650.rootUri) || !_0x315650.kinds.includes(_0x5da9b6.WellKnownWorkspaceKinds.Regular) || _0x315650.pythonPathKind !== _0x491cb7.WorkspacePythonPathKind.Mutable) {
            return undefined;
          }
          const _0x1e6826 = {
            workspaceName: _0x315650.name,
            rootUri: _0x315650.rootUri,
            kinds: _0x315650.kinds,
            pythonPath: _0x315650.pythonPath,
            pythonPathKind: _0x315650.pythonPathKind,
            service: this._createService(_0x315650.name, _0x315650.rootUri, _0x315650.kinds),
            disableLanguageServices: false,
            disableTaggedHints: false,
            disableOrganizeImports: false,
            disableWorkspaceSymbol: false,
            isInitialized: _0x5da9b6.createInitStatus(),
            searchPathsToWatch: [],
            pythonEnvironmentName: (_0x55bcaf = _0x315650.pythonPath) === null || _0x55bcaf === undefined ? undefined : _0x55bcaf.toString()
          };
          return _0x1e6826;
        }
      }
      exports.RegularWorkspaceFactory = _0x1a68e0;
    },
    43085: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      exports.WorkspaceFactories = undefined;
      const _0x56d658 = require(27113);
      const _0x17dba9 = require(30741);
      const _0x31c959 = require(21368);
      const _0x422b3a = require(41976);
      const _0x4ddfdd = require(86521);
      const _0x2c6c82 = require(58678);
      const _0x176330 = require(82724);
      const _0x569fc9 = require(95069);
      class _0xdc290c {
        constructor(_0x5c90b0) {
          this._factories = [new _0x569fc9.RegularWorkspaceFactory(_0x5c90b0), new _0x176330.NotebookWorkspaceFactory(_0x5c90b0), new _0x422b3a.ChatBlockWorkspaceFactory(_0x5c90b0), new _0x4ddfdd.CopilotChatBlockWorkspaceFactory(_0x5c90b0), new _0x2c6c82.DefaultWorkspaceFactory(_0x5c90b0)];
        }
        getDefaultWorkspaceKey(_0x11af94, _0x167343) {
          const _0x2e4596 = _0x11af94?.scheme === _0x422b3a.VSCodeChatCodeBlockScheme || _0x11af94?.scheme === _0x4ddfdd.VSCodeCopilotChatCodeBlockScheme;
          const _0x207a1e = _0x2e4596 ? _0x11af94.root : _0x2c6c82.DefaultWorkspacePath;
          return _0x207a1e + ':' + (!_0x56d658.Uri.isEmpty(_0x167343) ? _0x167343 : _0x31c959.WorkspacePythonPathKind.Mutable);
        }
        getWorkspaceKey(_0x2b1020) {
          if (_0x2b1020.kinds.includes(_0x17dba9.WellKnownWorkspaceKinds.Default)) {
            return this.getDefaultWorkspaceKey(_0x2b1020.rootUri, _0x2b1020.pythonPath);
          }
          return _0x2b1020.rootUri + ':' + (_0x2b1020.pythonPathKind === _0x31c959.WorkspacePythonPathKind.Mutable ? _0x2b1020.pythonPathKind : _0x2b1020.pythonPath);
        }
        createWorkspace(_0x5698bc) {
          for (const _0x2699ff of this._factories) {
            const _0x46bbfb = _0x2699ff.tryCreate(_0x5698bc);
            if (_0x46bbfb) {
              return _0x46bbfb;
            }
          }
          return this.createWorkspace(_0x5698bc);
        }
      }
      exports.WorkspaceFactories = _0xdc290c;
    },
    69506: (module, exports, require) => {
      'use strict';

      Object.defineProperty(exports, '__esModule', {
        value: true
      });
      const _0x485df7 = require(91693);
      _0x485df7.run();
    },
    20181: module => {
      'use strict';

      module.exports = require('buffer');
    },
    35317: module => {
      'use strict';

      module.exports = require('child_process');
    },
    76982: module => {
      'use strict';

      module.exports = require('crypto');
    },
    24434: module => {
      'use strict';

      module.exports = require('events');
    },
    79896: module => {
      'use strict';

      module.exports = require('fs');
    },
    69278: module => {
      'use strict';

      module.exports = require('net');
    },
    86592: module => {
      'use strict';

      module.exports = require('node:inspector');
    },
    57975: module => {
      'use strict';

      module.exports = require('node:util');
    },
    70857: module => {
      'use strict';

      module.exports = require('os');
    },
    16928: module => {
      'use strict';

      module.exports = require('path');
    },
    82987: module => {
      'use strict';

      module.exports = require('perf_hooks');
    },
    23785: module => {
      'use strict';

      module.exports = require('readline');
    },
    2203: module => {
      'use strict';

      module.exports = require('stream');
    },
    87016: module => {
      'use strict';

      module.exports = require('url');
    },
    39023: module => {
      'use strict';

      module.exports = require('util');
    },
    11493: module => {
      'use strict';

      module.exports = require('v8');
    },
    28167: module => {
      'use strict';

      module.exports = require('worker_threads');
    },
    43106: module => {
      'use strict';

      module.exports = require('zlib');
    },
    23203: module => {
      'use strict';

      module.exports = {
        version: '2024.12.1',
        pyrightCommit: 'ce1325fc36ed42c4f30e0967e5e47c4bb82c88b2',
        pyrightVersion: '1.1.389'
      };
    },
    18721: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Přidat {importText}',
            searchImport: 'Hledat další shody importu'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Změnit pravopis na „{word}“'
          },
          ExtraPath: {
            addExtraPath: 'Přidat „{name}“ do extraPaths'
          },
          Extract: {
            method: 'Extrahovat metodu',
            variable: 'Extrahovat proměnnou'
          },
          FixAll: {
            runFixAll: 'Spustit pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementovat všechny zděděné abstraktní třídy'
          },
          MoveSymbol: {
            commandTitle: 'Přesunout symbol',
            moveSymbolsTo: 'Přesunout symbol do...',
            moveSymbolsToNewFile: 'Přesunout symbol do nového souboru'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Odstranit všechny nepoužívané importy',
            removeUnusedImport: 'Odebrat nepoužitý import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Převést všechny formáty importu',
            convertAllToAbsolutePath: 'Převést všechny importy na absolutní cestu',
            convertAllToRelativePath: 'Převést všechny importy na relativní cestu',
            convertToAbsolutePath: 'Převést na absolutní cestu',
            convertToRelativePath: 'Převést na relativní cestu'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Další informace o řešení importů',
            selectInterpreterTitle: 'Vyberte jiného interpreta',
            selectKernelTitle: 'Vyberte jiné jádro (kernel) Jupyter'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Data protokolování se uložila do umístění [{filePath}]({uri}). Další podrobnosti najdete v podokně výstupu Python Language Server.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Data profilace se uložila do umístění [{filePath}]({uri}). Další podrobnosti najdete v podokně výstupu „Python Language Server.“'
          },
          gotoOutputCommand: 'Zobrazit výstup'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Generovat Docstring pomocí Copilotu',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementovat všechny zděděné abstraktní třídy pomocí Copilotu'
        },
        Diagnostic: {
          importResolveRedirect: 'Import {importName} se v prostředí {venv} nepovedlo najít.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generovat řetězec Docstring',
          description: 'Popis',
          docstringForName: 'Docstring pro {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Výchozí prostředí Pythonu',
          globalEnvironmentName: 'globální',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} soubory/souborů a {cellCount} buňky/buněk k analýze',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} soubory/souborů a 1 buňka k analýze',
          singularFileAndPluralCellsToAnalyze: '1 soubor a {cellCount} buňky/buněk k analýze',
          singularFileAndSingularCellToAnalyze: '1 soubor a 1 buňka k analýze',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Nahlásit problém',
          title: 'Zjistili jsme problém s výkonem rozšíření Pylance. Chcete nahlásit problém pomocí příkazu Pylance: Nahlásit problém?'
        },
        Pytest: {
          addTypeAnnotation: 'Přidat poznámku typu k názvu {name}',
          addTypeAnnotations: 'Přidat poznámky typu pro všechny odkazy fixture v tomto souboru',
          fixtureNotFound: '„{fixture}“ není známý testovací přípravek (fixture). Testovací metody by měly jako parametry přijímat pouze názvy testovacích přípravků (fixture) nebo parametrizace (parametrization).'
        },
        Refactoring: {
          moveFile: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileAbsentSymbol: 'Nepovedlo se najít symbol, který se má přesunout.',
          moveFileDescription: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileExtensionMismatch: 'Pokud chcete přesunout symbol, musí mít zdrojový soubor ({src}) a cílový soubor ({dest}) stejnou příponu souboru.',
          moveFileImportableOnly: 'Přesouvat se můžou jenom objekty, které se dají importovat z jiných modulů, jako jsou třídy nebo funkce.',
          moveFileInsertLocation: 'Nelze najít umístění pro vložení symbolu. Symbol se stejným názvem už může v {name} existovat.',
          moveFileLabel: 'Chcete aktualizovat všechny odkazy na import pro {oldModuleName} na {newModuleName}?',
          moveFileMissingInfo: 'Nelze najít informace o souboru pro {name}.',
          moveFileMultipleDeclarations: 'Tento symbol nelze přesunout, protože je deklarován vícekrát.',
          moveFileNotUserFile: 'Tento symbol nelze přesunout. Podporují se pouze symboly v souboru projektu nebo uživatele.',
          moveFilePrivateSymbol: '{name} se nedá přesunout, protože se jedná o privátní symbol.',
          moveFileSameFile: 'Symbol nelze přesunout do stejného souboru, ve kterém se právě nachází.',
          moveFileSimpleAssignmentsOnly: 'Tento výraz nejde přesunout. Podporují se pouze jednoduchá přiřazení, například proměnná, které se přiřazuje hodnota.',
          moveFileSymbolNotFound: 'Na pozici {position} nelze najít symbol.',
          moveFileUnsupportedSymbol: 'Tento symbol nelze přesunout. Podporují se pouze proměnné, funkce a třídy na úrovni modulu.'
        }
      };
    },
    52420: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" hinzufügen',
            searchImport: 'Nach zusätzlichen Importübereinstimmungen suchen'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Schreibweise in "{word}" ändern'
          },
          ExtraPath: {
            addExtraPath: '"{name}" zu extraPaths hinzufügen'
          },
          Extract: {
            method: 'Methode extrahieren',
            variable: 'Variable extrahieren'
          },
          FixAll: {
            runFixAll: 'Pylance "Alle korrigieren" ausführen'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Alle geerbten abstrakten Klassen implementieren'
          },
          MoveSymbol: {
            commandTitle: 'Symbol verschieben',
            moveSymbolsTo: 'Symbol verschieben nach...',
            moveSymbolsToNewFile: 'Symbol in neue Datei verschieben'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Alle nicht verwendeten Importe entfernen',
            removeUnusedImport: 'Nicht verwendete Importe entfernen'
          },
          ToggleImportPath: {
            convertAllFormat: 'Alle Importformate konvertieren',
            convertAllToAbsolutePath: 'Alle Importe in absoluten Pfad konvertieren',
            convertAllToRelativePath: 'Alle Importe in relativen Pfad konvertieren',
            convertToAbsolutePath: 'In absoluten Pfad konvertieren',
            convertToRelativePath: 'In relativen Pfad konvertieren'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Weitere Informationen zum Auflösen von Importen',
            selectInterpreterTitle: 'Anderen Interpreter auswählen',
            selectKernelTitle: 'Anderen Jupyter-kernel auswählen'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Protokollierungsdaten wurden unter [{filePath}]({uri}) gespeichert. Weitere Informationen finden Sie im Ausgabebereich „Python-Sprachserver“.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profilerstellungsdaten wurden unter [{filePath}]({uri}) gespeichert. Weitere Informationen finden Sie im Ausgabebereich „Python-Sprachserver“.'
          },
          gotoOutputCommand: 'Ausgabe anzeigen'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Docstring mit Copilot generieren',
          implementAllInheritedAbstractClasseswithCopilot: 'Alle geerbten abstrakten Klassen mit Copilot implementieren'
        },
        Diagnostic: {
          importResolveRedirect: 'Der Import "{importName}" wurde in der Umgebung "{venv}" nicht gefunden.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring generieren',
          description: 'Beschreibung',
          docstringForName: 'Docstring für {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Python-Standardumgebung',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} Dateien und {cellCount} Zellen zu analysieren',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} Dateien und 1 Zeile zu analysieren',
          singularFileAndPluralCellsToAnalyze: '1 Datei und {cellCount} Zellen zu analysieren',
          singularFileAndSingularCellToAnalyze: '1 Datei und 1 Zelle zu analysieren',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Problem melden',
          title: 'Wir haben ein Leistungsproblem mit Pylance erkannt. Möchten Sie ein Problem mithilfe des Befehls „Pylance: Problem melden“ melden?'
        },
        Pytest: {
          addTypeAnnotation: 'Typanmerkung zu {name} hinzufügen',
          addTypeAnnotations: 'Typanmerkungen für alle fixture Verweise in dieser Datei hinzufügen',
          fixtureNotFound: '\'{fixture}\' ist keine bekannte Test-fixture. Testmethoden dürfen nur fixture- oder parametrization Namen als Parameter empfangen.'
        },
        Refactoring: {
          moveFile: 'Möchten Sie alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileAbsentSymbol: 'Es wurde kein zu verschiebendes Symbol gefunden.',
          moveFileDescription: 'Alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileExtensionMismatch: 'Um ein Symbol zu verschieben, müssen die Quelldatei („{src}“) und die Zieldatei („{dest}“) dieselbe Dateierweiterung aufweisen.',
          moveFileImportableOnly: 'Nur Objekte, die aus anderen Modulen importiert werden können, z. B. Klassen oder Funktionen, dürfen verschoben werden.',
          moveFileInsertLocation: 'Es wurde keine Position zum Einfügen des Symbols gefunden. In „{name}“ ist möglicherweise bereits ein Symbol mit diesem Namen vorhanden.',
          moveFileLabel: 'Alle Importverweise für "{oldModuleName}" auf "{newModuleName}" aktualisieren?',
          moveFileMissingInfo: 'Es wurden keine Dateiinformationen für „{name}“ gefunden.',
          moveFileMultipleDeclarations: 'Dieses Symbol kann nicht verschoben werden, da es mehrmals deklariert ist.',
          moveFileNotUserFile: 'Dieses Symbol kann nicht verschoben werden. Nur Symbole in einer Projekt- oder Benutzerdatei werden unterstützt.',
          moveFilePrivateSymbol: '„{name}“ kann nicht verschoben werden, da es sich um ein privates Symbol handelt.',
          moveFileSameFile: 'Ein Symbol kann nicht in dieselbe Datei verschoben werden, in der es sich aktuell befindet.',
          moveFileSimpleAssignmentsOnly: 'Dieser Ausdruck kann nicht verschoben werden. Es werden nur einfache Zuweisungen unterstützt, z. B. eine Variable, der ein Wert zugewiesen wird.',
          moveFileSymbolNotFound: 'An Position „{position}“ wurde kein Symbol gefunden.',
          moveFileUnsupportedSymbol: 'Dieses Symbol kann nicht verschoben werden. Nur Variablen, Funktionen und Klassen auf Modulebene werden unterstützt.'
        }
      };
    },
    76463: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Add "{importText}"',
            searchImport: 'Search for additional import matches'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Change spelling to "{word}"'
          },
          ExtraPath: {
            addExtraPath: {
              message: 'Add "{name}" to extraPaths',
              comment: '{Locked=\'extraPaths\'}'
            }
          },
          Extract: {
            method: 'Extract method',
            variable: 'Extract variable'
          },
          FixAll: {
            runFixAll: 'Run pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implement all inherited abstract classes'
          },
          MoveSymbol: {
            commandTitle: 'Move symbol',
            moveSymbolsTo: {
              message: 'Move symbol to...',
              comment: '{StrEnds=\'...\'}'
            },
            moveSymbolsToNewFile: 'Move symbol to new file'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Remove all unused imports',
            removeUnusedImport: 'Remove unused import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convert all import formats',
            convertAllToAbsolutePath: 'Convert all imports to absolute path',
            convertAllToRelativePath: 'Convert all imports to relative path',
            convertToAbsolutePath: 'Convert to absolute path',
            convertToRelativePath: 'Convert to relative path'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Learn more about resolving imports',
            selectInterpreterTitle: 'Select a different interpreter',
            selectKernelTitle: {
              message: 'Select a different Jupyter kernel',
              comment: '{Locked=\'Jupyter\',\'kernel\'}'
            }
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Logging data has been saved at [{filePath}]({uri}). See `Python Language Server` output pane for more detail.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profiling data has been saved at [{filePath}]({uri}). See `Python Language Server` output pane for more detail.'
          },
          gotoOutputCommand: 'Show Output'
        },
        Copilot: {
          implementAllInheritedAbstractClasseswithCopilot: {
            message: 'Implement all inherited abstract classes with Copilot',
            comment: '{Locked=\'Copilot\'}'
          },
          GenerateDocstringWithCopilot: {
            message: 'Generate Docstring with Copilot',
            comment: '{Locked=\'Copilot\', \'Docstring\'}'
          }
        },
        Diagnostic: {
          importResolveRedirect: 'Import "{importName}" could not be found in the "{venv}" environment.'
        },
        DocstringTemplate: {
          description: 'Description',
          docstringForName: {
            message: 'Docstring for {name}',
            comment: '{Locked=\'Docstring\'}'
          },
          GenerateDocstring: {
            message: 'Generate Docstring',
            comment: '{Locked=\'Docstring\'}'
          }
        },
        Messages: {
          defaultPythonEnvironmentName: {
            message: 'Default Python Environment',
            comment: '{Locked=\'Python\'}'
          },
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} files and {cellCount} cells to analyze',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} files and 1 cell to analyze',
          singularFileAndPluralCellsToAnalyze: '1 file and {cellCount} cells to analyze',
          singularFileAndSingularCellToAnalyze: '1 file and 1 cell to analyze',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Report issue',
          title: {
            message: 'We have detected a performance issue with Pylance. Would you like to file an issue using the `Pylance: Report Issue` command?',
            comment: '{Locked=\'Pylance\'}'
          }
        },
        Pytest: {
          addTypeAnnotation: 'Add type annotation to {name}',
          addTypeAnnotations: {
            message: 'Add type annotations for all fixture references in this file',
            comment: '{Locked=\'fixture\'}'
          },
          fixtureNotFound: {
            message: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.',
            comment: '{Locked=\'fixture\',\'parametrization\'}'
          }
        },
        Refactoring: {
          moveFile: 'Do you want to update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileAbsentSymbol: 'Cannot find a symbol to move.',
          moveFileDescription: 'Update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileExtensionMismatch: 'To move a symbol, the source file ("{src}") and destination file ("{dest}") must have the same file extension.',
          moveFileImportableOnly: 'Only objects that can be imported from other modules, such as classes or functions, are allowed to be moved.',
          moveFileInsertLocation: 'Cannot find a location to insert the symbol. A symbol with the same name might already exist in "{name}".',
          moveFileLabel: 'Update all import references for "{oldModuleName}" to "{newModuleName}"?',
          moveFileMissingInfo: 'Cannot find file information for "{name}".',
          moveFileMultipleDeclarations: 'This symbol cannot be moved because it is declared multiple times.',
          moveFileNotUserFile: 'This symbol cannot be moved. Only symbols in a project or user file are supported.',
          moveFilePrivateSymbol: '"{name}" cannot be moved because it is a private symbol.',
          moveFileSameFile: 'A symbol cannot be moved to the same file where it is currently located.',
          moveFileSimpleAssignmentsOnly: 'This expression can\'t be moved. Only simple assignments, such as a variable being assigned a value, are supported.',
          moveFileSymbolNotFound: 'Cannot find a symbol at position "{position}".',
          moveFileUnsupportedSymbol: 'This symbol cannot be moved. Only variables, functions, and classes at the module level are supported.'
        }
      };
    },
    32535: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Agregar "{importText}"',
            searchImport: 'Buscar coincidencias de importación adicionales'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Cambiar la ortografía a "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Agregar "{name}" a extraPaths'
          },
          Extract: {
            method: 'Extraer método',
            variable: 'Extraer variable'
          },
          FixAll: {
            runFixAll: 'Ejecutar pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementar todas las clases abstractas heredadas'
          },
          MoveSymbol: {
            commandTitle: 'Mover símbolo',
            moveSymbolsTo: 'Mover símbolo a...',
            moveSymbolsToNewFile: 'Mover el símbolo a un nuevo archivo'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Eliminar todas las importaciones no utilizadas',
            removeUnusedImport: 'Eliminar la importación no utilizada'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convierte todos los formatos de importación',
            convertAllToAbsolutePath: 'Convertir todas las importaciones en rutas absolutas',
            convertAllToRelativePath: 'Convertir todas las importaciones en rutas relativas',
            convertToAbsolutePath: 'Convertir a ruta absoluta',
            convertToRelativePath: 'Convertir en ruta de acceso relativa'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Más información sobre cómo resolver importaciones',
            selectInterpreterTitle: 'Seleccionar otro intérprete',
            selectKernelTitle: 'Seleccionar otro kernel de Jupyter'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Los datos de registro se han guardado en [{filePath}]({uri}). Consulte el panel de salida `Servidor de lenguaje de Python` para obtener más detalles.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Los datos de generación de perfiles se han guardado en [{filePath}]({uri}). Consulte el panel de salida "Servidor de lenguaje de Python" para obtener más detalles.'
          },
          gotoOutputCommand: 'Mostrar salida'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Generar Docstring con Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementación de todas las clases abstractas heredadas con Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'No se encontraron "{importName}" de importación en el entorno de "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generar Docstring',
          description: 'Descripción',
          docstringForName: 'Docstring para {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Entorno de Python predeterminado',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} archivos y {cellCount} celdas para analizar',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} archivos y 1 celda para analizar',
          singularFileAndPluralCellsToAnalyze: '1 archivo y {cellCount} celdas para analizar',
          singularFileAndSingularCellToAnalyze: '1 archivo y 1 celda para analizar',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Notificar el problema',
          title: 'Hemos detectado un problema de rendimiento con Pylance. ¿Desea notificar un problema mediante el comando `Pylance: Report Issue`?'
        },
        Pytest: {
          addTypeAnnotation: 'Agregar anotación de tipo a {name}',
          addTypeAnnotations: 'Agregar anotaciones de tipo para todas las referencias de fixture en este archivo',
          fixtureNotFound: '\'{fixture}\' no es un fixture de prueba conocido. Los métodos de prueba solo deben recibir nombres de fixture o parametrization como parámetros.'
        },
        Refactoring: {
          moveFile: '¿Desea actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileAbsentSymbol: 'No se encuentra un símbolo para mover.',
          moveFileDescription: '¿Actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileExtensionMismatch: 'Para mover un símbolo, el archivo de origen ("{src}") y el archivo de destino ("{dest}") deben tener la misma extensión de archivo.',
          moveFileImportableOnly: 'Solo se pueden mover los objetos que se pueden importar de otros módulos, como clases o funciones.',
          moveFileInsertLocation: 'No se encuentra una ubicación para insertar el símbolo. Es posible que ya exista un símbolo con el mismo nombre en "{name}".',
          moveFileLabel: '¿Actualizar todas las referencias de importación de "{oldModuleName}" a "{newModuleName}"?',
          moveFileMissingInfo: 'No se encuentra información de archivo para "{name}".',
          moveFileMultipleDeclarations: 'Este símbolo no se puede mover porque está declarado varias veces.',
          moveFileNotUserFile: 'No se puede mover este símbolo. Solo se admiten símbolos en un archivo de proyecto o de usuario.',
          moveFilePrivateSymbol: '"{name}" no se puede mover porque es un símbolo privado.',
          moveFileSameFile: 'No se puede mover un símbolo al mismo archivo en el que se encuentra actualmente.',
          moveFileSimpleAssignmentsOnly: 'Esta expresión no se puede mover. Solo se admiten asignaciones simples, como una variable a la que se asigna un valor.',
          moveFileSymbolNotFound: 'No se encuentra un símbolo en la posición "{position}".',
          moveFileUnsupportedSymbol: 'No se puede mover este símbolo. Solo se admiten variables, funciones y clases en el nivel de módulo.'
        }
      };
    },
    47011: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Ajouter « {importText} »',
            searchImport: 'Rechercher d’autres correspondances d’importation'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Changer l’orthographe en « {word} »'
          },
          ExtraPath: {
            addExtraPath: 'Ajouter "{name}" à extraPaths'
          },
          Extract: {
            method: 'Méthode d\'extraction',
            variable: 'Extraire la variable'
          },
          FixAll: {
            runFixAll: 'Exécutez pylance tout réparer'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implémenter toutes les classes abstraites héritées'
          },
          MoveSymbol: {
            commandTitle: 'Déplacer le symbole',
            moveSymbolsTo: 'Déplacer le symbole vers ...',
            moveSymbolsToNewFile: 'Déplacer le symbole vers un nouveau fichier'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Supprimer toutes les importations inutilisées',
            removeUnusedImport: 'Supprimer l’importation inutilisée'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convertir tous les formats d’importation',
            convertAllToAbsolutePath: 'Convertir toutes les importations en chemin absolu',
            convertAllToRelativePath: 'Convertir toutes les importations en chemin d’accès relatif',
            convertToAbsolutePath: 'Convertir en chemin absolu',
            convertToRelativePath: 'Convertir en chemin relatif'
          },
          UnresolvedImports: {
            learnMoreTitle: 'En savoir plus sur la résolution des importations',
            selectInterpreterTitle: 'Sélectionnez un autre interprète',
            selectKernelTitle: 'Sélectionnez un autre Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Les données de journalisation ont été enregistrées sur [{filePath}]({uri}). Pour obtenir plus d’informations, consultez le volet de sortie `Serveur de langage Python`.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Les données de profilage ont été enregistrées sur [{filePath}]({uri}). Pour plus d’informations, consultez le volet de sortie « Serveur de langage Python ».'
          },
          gotoOutputCommand: 'Afficher la sortie'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Générez une Docstring avec Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implémenter toutes les classes abstraites héritées avec Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'L\'importation "{importName}" est introuvable dans l\'environnement "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Générer Docstring',
          description: 'Description',
          docstringForName: 'Docstring pour {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Environnement Python par défaut',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} fichiers et {cellCount} cellules à analyser',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} fichiers et 1 cellule à analyser',
          singularFileAndPluralCellsToAnalyze: '1 fichier et {cellCount} cellules à analyser',
          singularFileAndSingularCellToAnalyze: '1 fichier et 1 cellule à analyser',
          windowsStoreEnvironmentName: 'magasin microsoft'
        },
        PerformanceTracking: {
          button: 'Signaler un problème',
          title: 'Nous avons détecté un problème de performances avec Pylance. Voulez-vous signaler un problème en utilisant la commande `Pylance : signaler un problème` ?'
        },
        Pytest: {
          addTypeAnnotation: 'Ajouter une annotation de type à {name}',
          addTypeAnnotations: 'Ajouter des annotations de type pour toutes les références de fixture dans ce fichier',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Voulez-vous mettre à jour toutes les références d’importation pour « {oldModuleName} » en « {newModuleName} » ?',
          moveFileAbsentSymbol: 'Symbole à déplacer introuvable.',
          moveFileDescription: 'Mettre à jour toutes les références d’importation pour « {oldModuleName} » sur « {newModuleName} » ?',
          moveFileExtensionMismatch: 'Pour déplacer un symbole, le fichier source (« {src} ») et le fichier de destination (« {dest} ») doivent présenter la même extension de fichier.',
          moveFileImportableOnly: 'Seuls les objets pouvant être importés à partir d’autres modules, tels que des classes, peuvent être déplacés.',
          moveFileInsertLocation: 'Impossible de trouver un emplacement où insérer le symbole. Un symbole portant le même nom existe peut-être déjà dans « {name} ».',
          moveFileLabel: 'Mettre à jour toutes les références d’importation pour « {oldModuleName} » sur « {newModuleName} » ?',
          moveFileMissingInfo: 'Impossible de trouver les informations de fichier pour « {name} ».',
          moveFileMultipleDeclarations: 'Impossible de déplacer ce symbole, car il est déclaré plusieurs fois.',
          moveFileNotUserFile: 'Impossible de déplacer ce symbole. Seuls les symboles d’un projet ou d’un fichier utilisateur sont pris en charge.',
          moveFilePrivateSymbol: '« {name} » ne peut pas être déplacé, car il s’agit d’un symbole privé.',
          moveFileSameFile: 'Un symbole ne peut pas être déplacé vers le même fichier dans lequel il est actuellement.',
          moveFileSimpleAssignmentsOnly: 'Impossible de déplacer cette expression. Seules les affectations simples, telles qu’une variable à laquelle une valeur est attribuée, sont prises en charge.',
          moveFileSymbolNotFound: 'Symbole introuvable à la position « {position} ».',
          moveFileUnsupportedSymbol: 'Impossible de déplacer ce symbole. Seules les variables, fonctions et classes au niveau du module sont prises en charge.'
        }
      };
    },
    94814: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Aggiungi "{importText}"',
            searchImport: 'Cercare corrispondenze di importazione aggiuntive'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Cambiare ortografia in "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Aggiungi "{name}" a extraPaths'
          },
          Extract: {
            method: 'Estrai il metodo',
            variable: 'Estrarre variabile'
          },
          FixAll: {
            runFixAll: 'Esegui correggi tutto di pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementare tutte le classi astratte ereditate'
          },
          MoveSymbol: {
            commandTitle: 'Spostare simbolo',
            moveSymbolsTo: 'Sposta simbolo in...',
            moveSymbolsToNewFile: 'Spostare il simbolo in un nuovo file'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Rimuovere tutte le importazioni inutilizzate',
            removeUnusedImport: 'Rimuovere importazioni inutilizzate'
          },
          ToggleImportPath: {
            convertAllFormat: 'Convertire tutti i formati di importazione',
            convertAllToAbsolutePath: 'Converte tutte le importazioni in percorso assoluto',
            convertAllToRelativePath: 'Convertire tutte le importazioni in percorso relativo',
            convertToAbsolutePath: 'Convertire in percorso assoluto',
            convertToRelativePath: 'Converti in percorso relativo'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Altre informazioni sulla risoluzione delle importazioni',
            selectInterpreterTitle: 'Selezionare un interprete diverso',
            selectKernelTitle: 'Selezionare un kernel Jupyter diverso'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'I dati di registrazione sono stati salvati in [{filePath}]({uri}). Per altri dettagli, vedere il riquadro di output del server di linguaggio Python.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'I dati di profilatura sono stati salvati in [{filePath}]({uri}). Per altri dettagli, vedere il riquadro di output del server di linguaggio Python.'
          },
          gotoOutputCommand: 'Mostra output'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Genera Docstring con Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implementare tutte le classi astratte ereditate con Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Impossibile trovare l’importazione "{importName}" nell\'ambiente "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Genera Docstring',
          description: 'Descrizione',
          docstringForName: 'Docstring per {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Ambiente Python predefinito',
          globalEnvironmentName: 'globale',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} file e {cellCount} celle da analizzare',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} file e 1 cella da analizzare',
          singularFileAndPluralCellsToAnalyze: '1 file e {cellCount} celle da analizzare',
          singularFileAndSingularCellToAnalyze: '1 file e 1 cella da analizzare',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Segnala problema',
          title: 'È stato rilevato un problema di prestazioni per Pylance. Segnalare un problema usando il comando \'Pylance: Report Issue\'?'
        },
        Pytest: {
          addTypeAnnotation: 'Aggiungi l’annotazione di tipo a {name}',
          addTypeAnnotations: 'Aggiungere annotazioni di tipo per tutti i riferimenti alle fixture in questo file',
          fixtureNotFound: '`{fixture}` non è una fixture di test nota. I metodi di test devono ricevere come parametri solo nomi di fixture o di parametrization.'
        },
        Refactoring: {
          moveFile: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileAbsentSymbol: 'Impossibile trovare un simbolo da spostare.',
          moveFileDescription: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileExtensionMismatch: 'Per spostare un simbolo, il file di origine ("{src}") e il file di destinazione ("{dest}") devono avere la stessa estensione di file.',
          moveFileImportableOnly: 'È possibile spostare solo gli oggetti che possono essere importati da altri moduli, ad esempio classi o funzioni.',
          moveFileInsertLocation: 'Impossibile trovare una posizione in cui inserire il simbolo. Un simbolo con lo stesso nome potrebbe già esistere in "{name}".',
          moveFileLabel: 'Aggiornare tutti i riferimenti all\'importazione per "{oldModuleName}" a "{newModuleName}"?',
          moveFileMissingInfo: 'Impossibile trovare le informazioni sul file per "{name}".',
          moveFileMultipleDeclarations: 'Impossibile spostare questo simbolo perché è dichiarato più volte.',
          moveFileNotUserFile: 'Impossibile spostare questo simbolo. Sono supportati solo i simboli in un progetto o in un file utente.',
          moveFilePrivateSymbol: 'Impossibile spostare "{name}" perché è un simbolo privato.',
          moveFileSameFile: 'Non è possibile spostare un simbolo nello stesso file in cui si trova attualmente.',
          moveFileSimpleAssignmentsOnly: 'Questa espressione non può essere spostata. Sono supportate solo le assegnazioni semplici, ad esempio una variabile a cui viene assegnato un valore.',
          moveFileSymbolNotFound: 'Impossibile trovare un simbolo nella posizione "{position}".',
          moveFileUnsupportedSymbol: 'Impossibile spostare questo simbolo. Sono supportate solo variabili, funzioni e classi a livello di modulo.'
        }
      };
    },
    29150: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" の追加',
            searchImport: '一致するその他のインポートを検索する'
          },
          ChangeSpelling: {
            changeSpellingTo: 'スペルを "{word}" に変更する'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths に "{name}" を追加する'
          },
          Extract: {
            method: 'メソッドを抽出する',
            variable: '変数の抽出'
          },
          FixAll: {
            runFixAll: 'Pylance fix all を実行する'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '継承されたすべての抽象クラスを実装します'
          },
          MoveSymbol: {
            commandTitle: 'シンボルの移動',
            moveSymbolsTo: 'シンボルを以下に移動...',
            moveSymbolsToNewFile: 'シンボルを新しいファイルに移動する'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '未使用のインポートをすべて削除する',
            removeUnusedImport: '未使用のインポートを削除する'
          },
          ToggleImportPath: {
            convertAllFormat: 'すべてのインポート形式を変換する',
            convertAllToAbsolutePath: 'すべてのインポートを絶対パスに変換する',
            convertAllToRelativePath: 'すべてのインポートを相対パスに変換する',
            convertToAbsolutePath: '絶対パスに変換する',
            convertToRelativePath: '相対パスに変換する'
          },
          UnresolvedImports: {
            learnMoreTitle: 'インポートの解決に関する詳細情報',
            selectInterpreterTitle: '別のインタープリターを選択する',
            selectKernelTitle: '別の Jupyter kernel を選択する'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'ログ データは [{filePath}]({uri}) に保存されました。詳細については、\'Python Language Server\' 出力ウィンドウを参照してください。'
          },
          ProfilingCommand: {
            profilingDataSaved: 'プロファイル データは [{filePath}]({uri}) に保存されました。詳細については、\'Python Language Server\' 出力ウィンドウを参照してください。'
          },
          gotoOutputCommand: '出力の表示'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot で Docstring を生成する',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot を使用して継承されたすべての抽象クラスを実装します'
        },
        Diagnostic: {
          importResolveRedirect: 'インポート "{importName}" が "{venv}" 環境に見つかりませんでした。'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring の生成',
          description: '説明',
          docstringForName: '{name} の Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '既定の Python 環境',
          globalEnvironmentName: 'グローバル',
          pluralFilesAndPluralCellsToAnalyze: '分析する {fileCount} 個のファイルと {cellCount} 個のセル',
          pluralFilesAndSingularCellToAnalyze: '分析する {fileCount} 個ファイルと 1 個のセル',
          singularFileAndPluralCellsToAnalyze: '分析する 1 個のファイルと {cellCount} 個のセル',
          singularFileAndSingularCellToAnalyze: '分析する 1 個のファイルと 1 個のセル',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: '問題の報告',
          title: 'Pylance でパフォーマンスの問題が検出されました。`Pylance: Report Issue` コマンドを使用して問題を報告しますか?'
        },
        Pytest: {
          addTypeAnnotation: '型の注釈を {name} に追加する',
          addTypeAnnotations: 'このファイル内のすべての fixture 参照の型注釈を追加します',
          fixtureNotFound: '\'{fixture}\' は既知のテスト fixture ではありません。テスト メソッドは、fixture 名または parametrization 名のみをパラメーターとして受け取る必要があります。'
        },
        Refactoring: {
          moveFile: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileAbsentSymbol: '移動するシンボルが見つかりません。',
          moveFileDescription: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileExtensionMismatch: 'シンボルを移動するには、移動元ファイル ("{src}") と移動先ファイル ("{dest}") のファイル拡張子が同じである必要があります。',
          moveFileImportableOnly: '他のモジュール (クラスまたは関数など) からインポートできるオブジェクトのみを移動できます。',
          moveFileInsertLocation: 'シンボルを挿入する場所が見つかりません。同じ名前のシンボルが既に "{name}" に存在している可能性があります。',
          moveFileLabel: '"{oldModuleName}" のすべてのインポート参照を "{newModuleName}" に更新しますか?',
          moveFileMissingInfo: '"{name}" のファイル情報が見つかりません。',
          moveFileMultipleDeclarations: 'このシンボルは複数回宣言されているため、移動できません。',
          moveFileNotUserFile: 'このシンボルは移動できません。プロジェクトまたはユーザー ファイル内のシンボルのみがサポートされています。',
          moveFilePrivateSymbol: '"{name}" はプライベート シンボルであるため、移動できません。',
          moveFileSameFile: 'シンボルは、現在配置されているファイルと同じファイルに移動できません。',
          moveFileSimpleAssignmentsOnly: 'この式は移動できません。値が割り当てられている変数など、単純な代入のみがサポートされています。',
          moveFileSymbolNotFound: '位置 "{position}" にシンボルが見つかりません。',
          moveFileUnsupportedSymbol: 'このシンボルは移動できません。モジュール レベルの変数、関数、クラスのみがサポートされています。'
        }
      };
    },
    14997: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '"{importText}" 추가',
            searchImport: '추가 가져오기 일치 항목 검색'
          },
          ChangeSpelling: {
            changeSpellingTo: '철자를 "{word}"(으)로 변경'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths에 ‘{name}’ 추가'
          },
          Extract: {
            method: '메서드 추출',
            variable: '변수 추출'
          },
          FixAll: {
            runFixAll: '모두 Pylance 수정 실행'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '상속된 추상 클래스 모두 구현'
          },
          MoveSymbol: {
            commandTitle: '기호 이동',
            moveSymbolsTo: '기호를 다음으로 이동...',
            moveSymbolsToNewFile: '기호를 새 파일로 이동'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '사용되지 않는 가져오기 모두 제거',
            removeUnusedImport: '사용되지 않는 가져오기 제거'
          },
          ToggleImportPath: {
            convertAllFormat: '모든 가져오기 형식 변환',
            convertAllToAbsolutePath: '모든 가져오기를 절대 경로로 변환',
            convertAllToRelativePath: '모든 가져오기를 상대 경로로 변환',
            convertToAbsolutePath: '절대 경로로 변환',
            convertToRelativePath: '상대 경로로 변환'
          },
          UnresolvedImports: {
            learnMoreTitle: '가져오기 해결에 대해 자세히 알아보기',
            selectInterpreterTitle: '다른 인터프리터 선택',
            selectKernelTitle: '다른 Jupyter kernel 선택'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '로깅 데이터가 [{filePath}]({uri})에 저장되었습니다. 자세한 내용은 \'Python 언어 서버\' 출력 창을 참조하세요.'
          },
          ProfilingCommand: {
            profilingDataSaved: '프로파일링 데이터가 [{filePath}]({uri})에 저장되었습니다. 자세한 내용은 \'Python 언어 서버\' 출력 창을 참조하세요.'
          },
          gotoOutputCommand: '출력 표시'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot로 Docstring 생성',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot을 사용하여 상속된 모든 추상 클래스 구현'
        },
        Diagnostic: {
          importResolveRedirect: '"{venv}" 환경에서 "{importName}" 가져오기를 찾을 수 없습니다.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring 생성',
          description: '설명',
          docstringForName: '{name}의 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '기본 Python 환경',
          globalEnvironmentName: '글로벌',
          pluralFilesAndPluralCellsToAnalyze: '분석할 파일 {fileCount}개 및 셀 {cellCount}개',
          pluralFilesAndSingularCellToAnalyze: '분석할 파일 {fileCount}개 및 셀 1개',
          singularFileAndPluralCellsToAnalyze: '분석할 파일 1개 및 셀 {cellCount}개',
          singularFileAndSingularCellToAnalyze: '분석할 파일 1개 및 셀 1개',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '문제 보고',
          title: 'Pylance에서 성능 문제가 발견되었습니다. \'Pylance: Report Issue\' 명령을 사용하여 문제를 제출하시겠습니까?'
        },
        Pytest: {
          addTypeAnnotation: '{name}에 형식 주석 추가',
          addTypeAnnotations: '이 파일의 모든 fixture 참조에 대한 형식 주석 추가',
          fixtureNotFound: '\'{fixture}\'은(는) 알려진 테스트 fixture가 아닙니다. 테스트 메서드는 fixture 또는 parametrization 이름만 매개 변수로 받아야 합니다.'
        },
        Refactoring: {
          moveFile: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileAbsentSymbol: '이동할 기호를 찾을 수 없습니다.',
          moveFileDescription: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileExtensionMismatch: '기호를 이동하려면 원본 파일("{src}") 및 대상 파일("{dest}")의 파일 확장명이 같아야 합니다.',
          moveFileImportableOnly: '클래스 또는 함수와 같은 다른 모듈에서 가져올 수 있는 개체만 이동할 수 있습니다.',
          moveFileInsertLocation: '기호를 삽입할 위치를 찾을 수 없습니다. 이름이 같은 기호가 "{name}"에 이미 있을 수 있습니다.',
          moveFileLabel: '"{oldModuleName}"에 대한 모든 가져오기 참조를 "{newModuleName}"(으)로 업데이트하시겠습니까?',
          moveFileMissingInfo: '"{name}"에 대한 파일 정보를 찾을 수 없습니다.',
          moveFileMultipleDeclarations: '이 기호는 여러 번 선언되었으므로 이동할 수 없습니다.',
          moveFileNotUserFile: '이 기호를 이동할 수 없습니다. 프로젝트 또는 사용자 파일의 기호만 지원됩니다.',
          moveFilePrivateSymbol: '"{name}"은 프라이빗 기호이므로 이동할 수 없습니다.',
          moveFileSameFile: '기호는 현재 있는 동일한 파일로 이동할 수 없습니다.',
          moveFileSimpleAssignmentsOnly: '이 식을 이동할 수 없습니다. 값이 할당되는 변수와 같은 간단한 할당만 지원됩니다.',
          moveFileSymbolNotFound: '"{position}" 위치에서 기호를 찾을 수 없습니다.',
          moveFileUnsupportedSymbol: '이 기호를 이동할 수 없습니다. 모듈 수준의 변수, 함수, 클래스만 지원됩니다.'
        }
      };
    },
    42235: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Dodaj element „{importText}”',
            searchImport: 'Wyszukaj dodatkowe dopasowania importów'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Zmień pisownię na „{word}”'
          },
          ExtraPath: {
            addExtraPath: 'Dodaj nazwę „{name}” do elementów extraPaths'
          },
          Extract: {
            method: 'Metoda wyodrębniania',
            variable: 'Wyodrębnij zmienną'
          },
          FixAll: {
            runFixAll: 'Uruchom funkcję „Napraw wszystko” rozszerzenia Pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Zaimplementuj wszystkie dziedziczone klasy abstrakcyjne'
          },
          MoveSymbol: {
            commandTitle: 'Przenieś symbol',
            moveSymbolsTo: 'Przenieś symbol do...',
            moveSymbolsToNewFile: 'Przenieś symbol do nowego pliku'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Usuń wszystkie nieużywane importy',
            removeUnusedImport: 'Usuń nieużywany import'
          },
          ToggleImportPath: {
            convertAllFormat: 'Konwertuj wszystkie formaty importu',
            convertAllToAbsolutePath: 'Konwertuj wszystkie importy na ścieżkę bezwzględną',
            convertAllToRelativePath: 'Konwertuj wszystkie importy na ścieżkę względną',
            convertToAbsolutePath: 'Konwertuj na ścieżkę bezwzględną',
            convertToRelativePath: 'Konwertuj na ścieżkę względną'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Dowiedz się więcej o rozwiązywaniu importów',
            selectInterpreterTitle: 'Wybierz inny interpreter',
            selectKernelTitle: 'Select a different Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Dane rejestrowania zostały zapisane w ścieżce [{filePath}]({uri}). Zobacz okienko danych wyjściowych `Python Language Server`, aby uzyskać więcej szczegółów.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Dane profilowania zostały zapisane w ścieżce [{filePath}]({uri}). Zobacz okienko danych wyjściowych „Python Language Server”, aby uzyskać więcej szczegółów.'
          },
          gotoOutputCommand: 'Pokaż dane wyjściowe'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Wygeneruj Docstring za pomocą funkcji Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Zaimplementuj wszystkie dziedziczone klasy abstrakcyjne za pomocą funkcji Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Nie można odnaleźć importu„{importName}” w środowisku „{venv}”.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Generuj Docstring',
          description: 'Opis',
          docstringForName: 'Docstring for {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Bieżące środowisko Python',
          globalEnvironmentName: 'globalny',
          pluralFilesAndPluralCellsToAnalyze: 'Pliki ({fileCount}) i komórki ({cellCount}) do przeanalizowania',
          pluralFilesAndSingularCellToAnalyze: '1 komórka i następująca liczba plików do przeanalizowania: {fileCount}',
          singularFileAndPluralCellsToAnalyze: '1 plik i następująca liczba komórek do przeanalizowania: {cellCount}',
          singularFileAndSingularCellToAnalyze: '1 plik i 1 komórka do przeanalizowania',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Zgłoś problem',
          title: 'Wykryliśmy problem z wydajnością usługi Pylance. Czy chcesz zgłosić problem przy użyciu polecenia `Pylance: Problem z raportem`?'
        },
        Pytest: {
          addTypeAnnotation: 'Dodaj adnotację typu do elementu {name}',
          addTypeAnnotations: 'Add type annotations for all fixture references in this file',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Czy chcesz aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileAbsentSymbol: 'Nie można odnaleźć symbolu do przeniesienia.',
          moveFileDescription: 'Aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileExtensionMismatch: 'Aby przenieść symbol, plik źródłowy („{src}”) i plik docelowy („{dest}”) muszą mieć to samo rozszerzenie pliku.',
          moveFileImportableOnly: 'Tylko obiekty, które mogą być importowane z innych modułów, takie jak klasy lub funkcje, mogą być przenoszone.',
          moveFileInsertLocation: 'Nie można odnaleźć lokalizacji do wstawienia symbolu. Symbol o tej samej nazwie może już istnieć w elemencie „{name}”.',
          moveFileLabel: 'Aktualizować wszystkie odniesienia importu dla modułu „{oldModuleName}” do modułu „{newModuleName}”?',
          moveFileMissingInfo: 'Nie można odnaleźć informacji o pliku dla „{name}”.',
          moveFileMultipleDeclarations: 'Nie można przenieść tego symbolu, ponieważ jest on zadeklarowany wiele razy.',
          moveFileNotUserFile: 'Nie można przenieść tego symbolu. Obsługiwane są tylko symbole w projekcie lub pliku użytkownika.',
          moveFilePrivateSymbol: 'Nie można przenieść elementu „{name}”, ponieważ jest to symbol prywatny.',
          moveFileSameFile: 'Nie można przenieść symbolu do tego samego pliku, w którym się obecnie znajduje.',
          moveFileSimpleAssignmentsOnly: 'Nie można przenieść tego wyrażenia. Obsługiwane są tylko proste przypisania, takie jak zmienna, do których jest przypisywana wartość.',
          moveFileSymbolNotFound: 'Nie można odnaleźć symbolu na pozycji „{position}”.',
          moveFileUnsupportedSymbol: 'Nie można przenieść tego symbolu. Obsługiwane są tylko zmienne, funkcje i klasy na poziomie modułu.'
        }
      };
    },
    6842: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Adicionar "{importText}"',
            searchImport: 'Procure correspondências de importação adicionais'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Alterar a ortografia para "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Adicionar "{name}" a extraPaths'
          },
          Extract: {
            method: 'Extrair método',
            variable: 'Extrair variável'
          },
          FixAll: {
            runFixAll: 'Executar fix all do Pylance'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Implementar todas as classes abstratas herdadas'
          },
          MoveSymbol: {
            commandTitle: 'Mover símbolo',
            moveSymbolsTo: 'Mover símbolo para...',
            moveSymbolsToNewFile: 'Mover símbolo para novo arquivo'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Excluir todas as importações não usadas',
            removeUnusedImport: 'Remover Importações não utilizadas'
          },
          ToggleImportPath: {
            convertAllFormat: 'Converter todos os formatos de importação',
            convertAllToAbsolutePath: 'Converter todas as importações em caminho absoluto',
            convertAllToRelativePath: 'Converter todas as importações em caminho relativo',
            convertToAbsolutePath: 'Converter em caminho absoluto',
            convertToRelativePath: 'Converter em caminho relativo'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Saiba mais sobre como resolver importações',
            selectInterpreterTitle: 'Selecionar um intérprete diferente',
            selectKernelTitle: 'Selecionar um kernel do Jupyter diferente'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Os dados de registro em log foram salvos em [{filePath}]({uri}). Consulte o painel de saída `Servidor de Linguagem Python` para obter mais detalhes.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Os dados de criação de perfil foram salvos em [{filePath}]({uri}). Consulte o painel de saída "Servidor de Linguagem Python" para obter mais detalhes.'
          },
          gotoOutputCommand: 'Mostrar Saída'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Gerar Docstring com o Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Implemente todas as classes abstratas herdadas com o Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Não foi possível localizar a importação "{importName}" no ambiente "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Gerar Docstring',
          description: 'Descrição',
          docstringForName: 'Docstring para {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Ambiente do Python Padrão',
          globalEnvironmentName: 'global',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} arquivos e {cellCount} células para analisar',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} arquivos e 1 célula para analisar',
          singularFileAndPluralCellsToAnalyze: '1 arquivo e {cellCount} células para analisar',
          singularFileAndSingularCellToAnalyze: '1 arquivo e 1 célula para analisar',
          windowsStoreEnvironmentName: 'Microsoft Store'
        },
        PerformanceTracking: {
          button: 'Relatar problema',
          title: 'Detectamos um problema de desempenho com o Pylance. Deseja relatar um problema usando o comando `Pylance: Report Issue`?'
        },
        Pytest: {
          addTypeAnnotation: 'Adicionar anotação de tipo a {name}',
          addTypeAnnotations: 'Adicionar anotações de tipo para todas as referências de fixture de teste neste arquivo',
          fixtureNotFound: '\'{fixture}\' não é um fixture de teste conhecido. Os métodos de teste só devem receber nomes de fixture ou parametrization como parâmetros.'
        },
        Refactoring: {
          moveFile: 'Deseja atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileAbsentSymbol: 'Não é possível encontrar um símbolo para mover.',
          moveFileDescription: 'Atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileExtensionMismatch: 'Para mover um símbolo, o arquivo de origem ("{src}") e o arquivo de destino ("{dest}") devem ter a mesma extensão de arquivo.',
          moveFileImportableOnly: 'Somente objetos que podem ser importados de outros módulos, como classes ou funções, podem ser movidos.',
          moveFileInsertLocation: 'Não é possível encontrar um local para inserir o símbolo. Um símbolo com o mesmo nome pode já existir em "{name}".',
          moveFileLabel: 'Atualizar todas as referências de importação de "{oldModuleName}" para "{newModuleName}"?',
          moveFileMissingInfo: 'Não foi possível encontrar informações do arquivo "{name}".',
          moveFileMultipleDeclarations: 'Esse símbolo não pode ser movido porque foi declarado várias vezes.',
          moveFileNotUserFile: 'Esse símbolo não pode ser movido. Somente símbolos em um projeto ou arquivo de usuário são suportados.',
          moveFilePrivateSymbol: '"{name}" não pode ser movido porque é um símbolo privado.',
          moveFileSameFile: 'Um símbolo não pode ser movido para o mesmo arquivo onde está localizado atualmente.',
          moveFileSimpleAssignmentsOnly: 'Essa expressão não pode ser movida. Somente atribuições simples, como a atribuição de um valor a uma variável, são suportadas.',
          moveFileSymbolNotFound: 'Não é possível encontrar um símbolo na posição "{position}".',
          moveFileUnsupportedSymbol: 'Esse símbolo não pode ser movido. Somente variáveis, funções e classes no nível do módulo são suportadas.'
        }
      };
    },
    39452: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '[6EOWN][นั้Æðð "{ïmpørtTëxt}"Ấğ倪İЂҰक्นั้ढूँ]',
            searchImport: '[SEcEV][นั้§ëærçh før æððïtïøñæl ïmpørt mætçhësẤğ倪İЂҰक्र्तिृまนั้ढूँ]'
          },
          ChangeSpelling: {
            changeSpellingTo: '[S2wV8][นั้Çhæñgë spëllïñg tø "{wørð}"Ấğ倪İЂҰक्र्तिृนั้ढूँ]'
          },
          ExtraPath: {
            addExtraPath: '[vPbBT][นั้Æðð "{ñæmë}" tø extraPathsẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          Extract: {
            method: '[6CJmj][นั้Ëxtræçt mëthøðẤğ倪İЂҰนั้ढूँ]',
            variable: '[yAhZ4][นั้Ëxtræçt værïæþlëẤğ倪İЂҰนั้ढूँ]'
          },
          FixAll: {
            runFixAll: '[kBeph][นั้Rµñ pÿlæñçë fïx ællẤğ倪İЂҰक्นั้ढूँ]'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '[jVUSx][นั้Ïmplëmëñt æll ïñhërïtëð æþstræçt çlæssësẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          MoveSymbol: {
            commandTitle: '[tW1Sd][นั้Møvë sÿmþølẤğ倪İนั้ढूँ]',
            moveSymbolsTo: '[jnDNO][นั้Møvë sÿmþøl tøẤğ倪İЂҰนั้ढूँ]...',
            moveSymbolsToNewFile: '[i6bBJ][นั้Møvë sÿmþøl tø ñëw fïlëẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '[ji2Ww][นั้Rëmøvë æll µñµsëð ïmpørtsẤğ倪İЂҰक्र्นั้ढूँ]',
            removeUnusedImport: '[a0K5t][นั้Rëmøvë µñµsëð ïmpørtẤğ倪İЂҰक्นั้ढूँ]'
          },
          ToggleImportPath: {
            convertAllFormat: '[Xa2Zv][นั้Çøñvërt æll ïmpørt førmætsẤğ倪İЂҰक्र्นั้ढूँ]',
            convertAllToAbsolutePath: '[rYYle][นั้Çøñvërt æll ïmpørts tø æþsølµtë pæthẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            convertAllToRelativePath: '[q94B6][นั้Çøñvërt æll ïmpørts tø rëlætïvë pæthẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            convertToAbsolutePath: '[kBV0h][นั้Çøñvërt tø æþsølµtë pæthẤğ倪İЂҰक्र्นั้ढूँ]',
            convertToRelativePath: '[GuQt9][นั้Çøñvërt tø rëlætïvë pæthẤğ倪İЂҰक्र्นั้ढूँ]'
          },
          UnresolvedImports: {
            learnMoreTitle: '[rCXA3][นั้£ëærñ mørë æþøµt rësølvïñg ïmpørtsẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
            selectInterpreterTitle: '[v2LhD][นั้§ëlëçt æ ðïffërëñt ïñtërprëtërẤğ倪İЂҰक्र्तिृนั้ढूँ]',
            selectKernelTitle: '[HutRH][นั้§ëlëçt æ ðïffërëñt Jupyter kernelẤğ倪İЂҰक्र्तिृนั้ढूँ]'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '[kNaJm][นั้£øggïñg ðætæ hæs þëëñ sævëð æt [{fïlëPæth}]({µrï}). §ëë `Pÿthøñ £æñgµægë §ërvër` øµtpµt pæñë før mørë ðëtæïl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          ProfilingCommand: {
            profilingDataSaved: '[CpJI3][นั้Prøfïlïñg ðætæ hæs þëëñ sævëð æt [{fïlëPæth}]({µrï}). §ëë `Pÿthøñ £æñgµægë §ërvër` øµtpµt pæñë før mørë ðëtæïl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]'
          },
          gotoOutputCommand: '[xTS0O][นั้§høw ØµtpµtẤğ倪İนั้ढूँ]'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '[mMtFO][นั้Gëñërætë Docstring wïth CopilotẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          implementAllInheritedAbstractClasseswithCopilot: '[jx3Bq][นั้Ïmplëmëñt æll ïñhërïtëð æþstræçt çlæssës wïth CopilotẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]'
        },
        Diagnostic: {
          importResolveRedirect: '[KGYYn][นั้Ïmpørt "{ïmpørtÑæmë}" çøµlð ñøt þë føµñð ïñ thë "{vëñv}" ëñvïrøñmëñt.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまนั้ढूँ]'
        },
        DocstringTemplate: {
          GenerateDocstring: '[A6Ydq][นั้Gëñërætë DocstringẤğ倪İЂҰक्นั้ढूँ]',
          description: '[ab4Nk][นั้ÐësçrïptïøñẤğ倪İนั้ढूँ]',
          docstringForName: '[3r0Lu][นั้Docstring før {ñæmë}Ấğ倪İЂҰक्นั้ढूँ]'
        },
        Messages: {
          defaultPythonEnvironmentName: '[oW2bW][นั้Ðëfæµlt Python ËñvïrøñmëñtẤğ倪İЂҰक्र्นั้ढूँ]',
          globalEnvironmentName: '[H7OID][นั้gløþælẤğนั้ढूँ]',
          pluralFilesAndPluralCellsToAnalyze: '[EP1hA][นั้{fïlëÇøµñt} fïlës æñð {çëllÇøµñt} çëlls tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰนั้ढूँ]',
          pluralFilesAndSingularCellToAnalyze: '[Tg5wq][นั้{fïlëÇøµñt} fïlës æñð 1 çëll tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          singularFileAndPluralCellsToAnalyze: '[rwT7l][นั้1 fïlë æñð {çëllÇøµñt} çëlls tø æñælÿzëẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          singularFileAndSingularCellToAnalyze: '[Lt1RE][นั้1 fïlë æñð 1 çëll tø æñælÿzëẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          windowsStoreEnvironmentName: '[0RfQa][นั้mïçrøsøft størëẤğ倪İЂҰนั้ढूँ]'
        },
        PerformanceTracking: {
          button: '[PhmTE][นั้Rëpørt ïssµëẤğ倪İЂนั้ढूँ]',
          title: '[6XFDs][นั้Wë hævë ðëtëçtëð æ përførmæñçë ïssµë wïth Pylance. Wøµlð ÿøµ lïkë tø fïlë æñ ïssµë µsïñg thë `Pylance: Rëpørt Ïssµë` çømmæñð?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]'
        },
        Pytest: {
          addTypeAnnotation: '[fukwx][นั้Æðð tÿpë æññøtætïøñ tø {ñæmë}Ấğ倪İЂҰक्र्तिृนั้ढूँ]',
          addTypeAnnotations: '[ci8Cb][นั้Æðð tÿpë æññøtætïøñs før æll fixture rëfërëñçës ïñ thïs fïlëẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्นั้ढूँ]',
          fixtureNotFound: '[sIWxh][นั้\'{fixture}\' ïs ñøt æ kñøwñ tëst fixture. Tëst mëthøðs shøµlð øñlÿ rëçëïvë fixture ør parametrization ñæmës æs pæræmëtërs.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰนั้ढूँ]'
        },
        Refactoring: {
          moveFile: '[uzRfT][นั้Ðø ÿøµ wæñt tø µpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]',
          moveFileAbsentSymbol: '[3hHvF][นั้Çæññøt fïñð æ sÿmþøl tø møvë.Ấğ倪İЂҰक्र्तिृนั้ढूँ]',
          moveFileDescription: '[qbSm6][นั้Üpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileExtensionMismatch: '[fpltY][นั้Tø møvë æ sÿmþøl, thë søµrçë fïlë ("{srç}") æñð ðëstïñætïøñ fïlë ("{ðëst}") mµst hævë thë sæmë fïlë ëxtëñsïøñ.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğนั้ढूँ]',
          moveFileImportableOnly: '[CFuY4][นั้Øñlÿ øþjëçts thæt çæñ þë ïmpørtëð frøm øthër møðµlës, sµçh æs çlæssës ør fµñçtïøñs, ærë ælløwëð tø þë møvëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileInsertLocation: '[BJOq2][นั้Çæññøt fïñð æ løçætïøñ tø ïñsërt thë sÿmþøl. Æ sÿmþøl wïth thë sæmë ñæmë mïght ælrëæðÿ ëxïst ïñ "{ñæmë}".Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまนั้ढूँ]',
          moveFileLabel: '[TMnnY][นั้Üpðætë æll ïmpørt rëfërëñçës før "{ølðMøðµlëÑæmë}" tø "{ñëwMøðµlëÑæmë}"?Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileMissingInfo: '[FctQ6][นั้Çæññøt fïñð fïlë ïñførmætïøñ før "{ñæmë}".Ấğ倪İЂҰक्र्तिृまẤğ倪นั้ढूँ]',
          moveFileMultipleDeclarations: '[Icw4C][นั้Thïs sÿmþøl çæññøt þë møvëð þëçæµsë ït ïs ðëçlærëð mµltïplë tïmës.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृนั้ढूँ]',
          moveFileNotUserFile: '[3KMZz][นั้Thïs sÿmþøl çæññøt þë møvëð. Øñlÿ sÿmþøls ïñ æ prøjëçt ør µsër fïlë ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂนั้ढूँ]',
          moveFilePrivateSymbol: '[7EZBN][นั้"{ñæmë}" çæññøt þë møvëð þëçæµsë ït ïs æ prïvætë sÿmþøl.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्นั้ढूँ]',
          moveFileSameFile: '[QQSb2][นั้Æ sÿmþøl çæññøt þë møvëð tø thë sæmë fïlë whërë ït ïs çµrrëñtlÿ løçætëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤนั้ढूँ]',
          moveFileSimpleAssignmentsOnly: '[4O7iP][นั้Thïs ëxprëssïøñ çæñ\'t þë møvëð. Øñlÿ sïmplë æssïgñmëñts, sµçh æs æ værïæþlë þëïñg æssïgñëð æ vælµë, ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İนั้ढूँ]',
          moveFileSymbolNotFound: '[eCktQ][นั้Çæññøt fïñð æ sÿmþøl æt pøsïtïøñ "{pøsïtïøñ}".Ấğ倪İЂҰक्र्तिृまẤğ倪İนั้ढूँ]',
          moveFileUnsupportedSymbol: '[cwXih][นั้Thïs sÿmþøl çæññøt þë møvëð. Øñlÿ værïæþlës, fµñçtïøñs, æñð çlæssës æt thë møðµlë lëvël ærë sµppørtëð.Ấğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृまẤğ倪İЂҰक्र्तिृนั้ढूँ]'
        }
      };
    },
    53802: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Добавить "{importText}"',
            searchImport: 'Искать дополнительные совпадающие импортированные данные'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Изменить написание на "{word}"'
          },
          ExtraPath: {
            addExtraPath: 'Добавить "{name}" в extraPaths'
          },
          Extract: {
            method: 'Извлечь метод',
            variable: 'Извлечь переменную'
          },
          FixAll: {
            runFixAll: 'Выполнить pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Реализовать все унаследованные абстрактные классы'
          },
          MoveSymbol: {
            commandTitle: 'Переместить символ',
            moveSymbolsTo: 'Переместить символ в...',
            moveSymbolsToNewFile: 'Переместить символ в новый файл'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Удалите все неиспользуемые операции импорта',
            removeUnusedImport: 'Удалить неиспользованные операторы импорта'
          },
          ToggleImportPath: {
            convertAllFormat: 'Преобразовать все форматы импорта',
            convertAllToAbsolutePath: 'Изменить все операторы импорта так, чтобы они использовали абсолютный путь',
            convertAllToRelativePath: 'Изменить все операторы импорта так, чтобы они использовали относительный путь',
            convertToAbsolutePath: 'Преобразовать в абсолютный путь',
            convertToRelativePath: 'Преобразовать в относительный путь'
          },
          UnresolvedImports: {
            learnMoreTitle: 'Подробнее о решении проблем с импортом',
            selectInterpreterTitle: 'Выберите другой интерпретатор',
            selectKernelTitle: 'Выберите другое Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Данные ведения журнала сохранены в [{filePath}]({uri}). Дополнительные сведения см. в области вывода "Языковой сервер Python".'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Данные профилирования сохранены в [{filePath}]({uri}). Дополнительные сведения см. в области вывода "Языковой сервер Python".'
          },
          gotoOutputCommand: 'Показать вывод'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Создание Docstring с помощью Copilot',
          implementAllInheritedAbstractClasseswithCopilot: 'Реализовать все унаследованные абстрактные классы с помощью Copilot'
        },
        Diagnostic: {
          importResolveRedirect: 'Импорт "{importName}" не найден в среде "{venv}".'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Генерировать Docstring',
          description: 'Описание',
          docstringForName: 'Docstring для {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Среда Python по умолчанию',
          globalEnvironmentName: 'глобальная',
          pluralFilesAndPluralCellsToAnalyze: 'Файлы ({fileCount}) и ячейки ({cellCount}) для анализа',
          pluralFilesAndSingularCellToAnalyze: 'Файлы ({fileCount}) и 1 ячейка для анализа',
          singularFileAndPluralCellsToAnalyze: '1 файл и ячейки ({cellCount}) для анализа',
          singularFileAndSingularCellToAnalyze: '1 файл и 1 ячейка для анализа',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Сообщить о проблеме',
          title: 'Обнаружена проблема производительности с Pylance. Вы хотите отправить сообщение о проблеме с помощью команды "Pylance: сообщить о проблеме"?'
        },
        Pytest: {
          addTypeAnnotation: 'Добавление заметки с типом в {name}',
          addTypeAnnotations: 'Добавить заметки типа для всех fixture на средства в этом файле',
          fixtureNotFound: '"{fixture}" не является известным тестовым fixture тестирования. Методы тестирования должны получать в качестве параметров только имена fixture тестирования или parametrization.'
        },
        Refactoring: {
          moveFile: 'Хотите заменить все импортирующие ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileAbsentSymbol: 'Не удается найти символ для перемещения.',
          moveFileDescription: 'Заменить все ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileExtensionMismatch: 'Для перемещения символа исходный файл ("{src}") и конечный файл ("{dest}") должны иметь одинаковое расширение файла.',
          moveFileImportableOnly: 'Разрешено перемещать только объекты, которые можно импортировать из других модулей, таких как классы или функции.',
          moveFileInsertLocation: 'Не удается найти расположение для вставки символа. Возможно, символ с таким именем уже существует в "{name}".',
          moveFileLabel: 'Заменить все ссылки на "{oldModuleName}" ссылками на "{newModuleName}"?',
          moveFileMissingInfo: 'Не удается найти сведения о файле для "{name}".',
          moveFileMultipleDeclarations: 'Невозможно переместить этот символ, так как он объявлен несколько раз.',
          moveFileNotUserFile: 'Этот символ не может быть перемещен. Поддерживаются только символы в проекте или пользовательском файле.',
          moveFilePrivateSymbol: '"{name}" невозможно переместить, так как это закрытый символ.',
          moveFileSameFile: 'Символ нельзя переместить в тот же файл, где он находится в данный момент.',
          moveFileSimpleAssignmentsOnly: 'Невозможно переместить это выражение. Поддерживаются только простые присвоения, например присвоение значения переменной.',
          moveFileSymbolNotFound: 'Не удается найти символ в позиции "{position}".',
          moveFileUnsupportedSymbol: 'Этот символ не может быть перемещен. Поддерживаются только переменные, функции и классы на уровне модуля.'
        }
      };
    },
    49381: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: 'Şunu ekle: "{importText}"',
            searchImport: 'Ek içeri aktarma eşleşmelerini ara'
          },
          ChangeSpelling: {
            changeSpellingTo: 'Yazımı "{word}" olarak değiştir'
          },
          ExtraPath: {
            addExtraPath: 'extraPaths içine "{name}" ekle'
          },
          Extract: {
            method: 'Metodu ayıkla',
            variable: 'Değişken ayıkla'
          },
          FixAll: {
            runFixAll: 'Pylance tümünü düzeltmeyi çalıştır'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: 'Devralınan tüm soyut sınıfları uygula'
          },
          MoveSymbol: {
            commandTitle: 'Simgeyi taşı',
            moveSymbolsTo: 'Simgeyi taşı...',
            moveSymbolsToNewFile: 'Simgeyi yeni dosyaya taşı'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: 'Kullanılmayan tüm içeri aktarmaları kaldır',
            removeUnusedImport: 'Kullanılmayan içeri aktarmaları kaldır'
          },
          ToggleImportPath: {
            convertAllFormat: 'Tüm içeri aktarma biçimlerini dönüştür',
            convertAllToAbsolutePath: 'Tüm içeri aktarmaları mutlak yola dönüştür',
            convertAllToRelativePath: 'Tüm içeri aktarmaları göreli yola dönüştür',
            convertToAbsolutePath: 'Mutlak yola dönüştür',
            convertToRelativePath: 'Göreli yola dönüştür'
          },
          UnresolvedImports: {
            learnMoreTitle: 'İçeri aktarmaları çözümleme hakkında daha fazla bilgi edinin',
            selectInterpreterTitle: 'Farklı bir yorumlayıcı seçin',
            selectKernelTitle: 'Select a different Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: 'Günlük verileri [{filePath}]({uri}) konumuna kaydedildi. Daha fazla ayrıntı için `Python Dil Sunucusu` çıkış bölmesine bakın.'
          },
          ProfilingCommand: {
            profilingDataSaved: 'Profil oluşturma verileri [{filePath}]({uri}) konumuna kaydedildi. Daha fazla ayrıntı için `Python Language Server` çıkış bölmesine bakın.'
          },
          gotoOutputCommand: 'Çıkışı Göster'
        },
        Copilot: {
          GenerateDocstringWithCopilot: 'Copilot ile Docstring oluşturma',
          implementAllInheritedAbstractClasseswithCopilot: 'Copilot ile devralınan tüm soyut sınıfları uygula'
        },
        Diagnostic: {
          importResolveRedirect: '"{importName}", "{venv}" ortamında bulunamadı.'
        },
        DocstringTemplate: {
          GenerateDocstring: 'Docstring Oluşturma',
          description: 'Açıklama',
          docstringForName: 'Docstring for {name}'
        },
        Messages: {
          defaultPythonEnvironmentName: 'Varsayılan Python Ortamı',
          globalEnvironmentName: 'genel',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} dosya ve {cellCount} hücre analiz edilecek',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} dosya ve 1 hücre analiz edilecek',
          singularFileAndPluralCellsToAnalyze: '1 dosya ve {cellCount} hücre analiz edilecek',
          singularFileAndSingularCellToAnalyze: '1 dosya ve 1 hücre analiz edilecek',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: 'Sorun bildir',
          title: 'Pylance ile ilgili bir performans sorunu algılandı. \'Pylance: Sorun Bildir\' komutunu kullanarak bir sorun kaydetmek ister misiniz?'
        },
        Pytest: {
          addTypeAnnotation: '{name} içine tür ek açıklaması ekle',
          addTypeAnnotations: 'Add type annotations for all fixture references in this file',
          fixtureNotFound: '\'{fixture}\' is not a known test fixture. Test methods should only receive fixture or parametrization names as parameters.'
        },
        Refactoring: {
          moveFile: 'Tüm içeri aktarma başvurularını "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirmek istiyor musunuz?',
          moveFileAbsentSymbol: 'Taşınacak simge bulunamıyor.',
          moveFileDescription: 'Tüm içeri aktarma başvuruları "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirilsin mi?',
          moveFileExtensionMismatch: 'Bir simgeyi taşımak için kaynak dosya ("{src}") ile hedef dosyanın ("{dest}") uzantısı aynı olmalıdır.',
          moveFileImportableOnly: 'Yalnızca sınıflar veya işlevler gibi diğer modüllerden içeri aktarılabilen nesnelerin taşınmasına izin verilir.',
          moveFileInsertLocation: 'Simgenin ekleneceği konum bulunamıyor. "{name}" konumunda aynı ada sahip bir simge zaten var olabilir.',
          moveFileLabel: 'Tüm içeri aktarma başvuruları "{oldModuleName}" modülünden "{newModuleName}" modülüne güncelleştirilsin mi?',
          moveFileMissingInfo: '"{name}" için dosya bilgileri bulunamıyor.',
          moveFileMultipleDeclarations: 'Birden çok kez bildirildiği için bu simge taşınamaz.',
          moveFileNotUserFile: 'Bu simge taşınamıyor. Yalnızca bir projedeki veya kullanıcı dosyasındaki simgeler desteklenir.',
          moveFilePrivateSymbol: 'Özel simge olduğundan "{name}" taşınamıyor.',
          moveFileSameFile: 'Simge şu anda bulunduğu dosyaya taşınamıyor.',
          moveFileSimpleAssignmentsOnly: 'Bu ifade taşınamıyor. Yalnızca bir değer atanan değişken gibi basit atamalar desteklenir.',
          moveFileSymbolNotFound: '"{position}" konumunda simge bulunamıyor.',
          moveFileUnsupportedSymbol: 'Bu simge taşınamıyor. Yalnızca modül düzeyindeki değişkenler, işlevler ve sınıflar desteklenir.'
        }
      };
    },
    70417: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '添加“{importText}”',
            searchImport: '搜索其他导入匹配项'
          },
          ChangeSpelling: {
            changeSpellingTo: '将拼写更改为“{word}”'
          },
          ExtraPath: {
            addExtraPath: '将“{name}”添加到 extraPaths'
          },
          Extract: {
            method: '提取方法',
            variable: '提取变量'
          },
          FixAll: {
            runFixAll: '运行 pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '实现继承的所有抽象类'
          },
          MoveSymbol: {
            commandTitle: '移动符号',
            moveSymbolsTo: '将符号移动到...',
            moveSymbolsToNewFile: '将符号移动到新文件'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '删除所有未使用的导入',
            removeUnusedImport: '删除未使用的导入'
          },
          ToggleImportPath: {
            convertAllFormat: '转换所有导入格式',
            convertAllToAbsolutePath: '将所有导入转换为绝对路径',
            convertAllToRelativePath: '将所有导入转换为相对路径',
            convertToAbsolutePath: '转换为绝对路径',
            convertToRelativePath: '转换为相对路径'
          },
          UnresolvedImports: {
            learnMoreTitle: '详细了解如何解析导入',
            selectInterpreterTitle: '选择其他解释器',
            selectKernelTitle: '选择其他 Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '日志记录数据已保存在 [{filePath}]({uri})。有关更多详细信息，请参阅 `Python 语言服务器` 输出窗格。'
          },
          ProfilingCommand: {
            profilingDataSaved: '分析数据已保存在 [{filePath}]({uri})。有关更多详细信息，请参阅 `Python 语言服务器` 输出窗格。'
          },
          gotoOutputCommand: '显示输出'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '使用 Copilot 生成 Docstring',
          implementAllInheritedAbstractClasseswithCopilot: '通过 Copilot 实现继承的所有抽象类'
        },
        Diagnostic: {
          importResolveRedirect: '在“{venv}”环境中找不到导入“{importName}”。'
        },
        DocstringTemplate: {
          GenerateDocstring: '生成 Docstring',
          description: '说明',
          docstringForName: '{name} 的 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '默认 Python 环境',
          globalEnvironmentName: '全局',
          pluralFilesAndPluralCellsToAnalyze: '要分析的 {fileCount} 个文件和 {cellCount} 个单元格',
          pluralFilesAndSingularCellToAnalyze: '要分析的 {fileCount} 个文件和 1 个单元格',
          singularFileAndPluralCellsToAnalyze: '要分析的 1 个文件和 {cellCount} 个单元格',
          singularFileAndSingularCellToAnalyze: '要分析的 1 个文件和 1 个单元格',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '报告问题',
          title: '我们检测到 Pylance 存在性能问题。是否要使用 `Pylance: Report Issue` 命令提交问题?'
        },
        Pytest: {
          addTypeAnnotation: '将类型批注添加到 {name}',
          addTypeAnnotations: '为此文件中的所有 fixture 引用添加类型注释',
          fixtureNotFound: '\'{fixture}\' 不是已知的测试 fixture。测试方法应只接收 fixture 或 parametrization 名称作为参数。'
        },
        Refactoring: {
          moveFile: '是否要将“{oldModuleName}”的所有导入引用更新为“{newModuleName}”?',
          moveFileAbsentSymbol: '找不到要移动的符号。',
          moveFileDescription: '是否将 “{oldModuleName}” 的所有导入引用更新为 “{newModuleName}”?',
          moveFileExtensionMismatch: '要移动符号，源文件(“{src}”)和目标文件(“{dest}”)必须具有相同的文件扩展名。',
          moveFileImportableOnly: '仅允许移动可从其他模块导入的对象，例如类或函数。',
          moveFileInsertLocation: '找不到要插入符号的位置。“{name}”中可能已存在同名符号。',
          moveFileLabel: '是否将 “{oldModuleName}” 的所有导入引用更新为 “{newModuleName}”?',
          moveFileMissingInfo: '找不到“{name}”的文件信息。',
          moveFileMultipleDeclarations: '无法移动此符号，因为已多次声明它。',
          moveFileNotUserFile: '无法移动此符号。仅支持项目或用户文件中的符号。',
          moveFilePrivateSymbol: '无法移动“{name}”，因为它是专用符号。',
          moveFileSameFile: '无法将符号移动到其当前所在的同一文件。',
          moveFileSimpleAssignmentsOnly: '无法移动此表达式。仅支持简单的赋值，例如为变量赋值。',
          moveFileSymbolNotFound: '在位置“{position}”处找不到符号。',
          moveFileUnsupportedSymbol: '无法移动此符号。仅支持模块级别的变量、函数和类。'
        }
      };
    },
    41101: module => {
      'use strict';

      module.exports = {
        CodeAction: {
          AutoImport: {
            addAutoImport: '新增 "{importText}"',
            searchImport: '搜尋其他匯入相符項目'
          },
          ChangeSpelling: {
            changeSpellingTo: '將拼字變更為 "{word}"'
          },
          ExtraPath: {
            addExtraPath: '新增 "{name}" 至 extraPaths'
          },
          Extract: {
            method: '擷取方法',
            variable: '擷取變數'
          },
          FixAll: {
            runFixAll: '執行 pylance fix all'
          },
          ImplementAbstractClass: {
            implementAllAbstractClasses: '實作所有繼承的抽象類別'
          },
          MoveSymbol: {
            commandTitle: '移動符號',
            moveSymbolsTo: '移動符號至...',
            moveSymbolsToNewFile: '移動符號至新檔案'
          },
          RemoveUnusedImport: {
            removeAllUnusedImports: '移除所有未使用的匯入',
            removeUnusedImport: '移除未使用的匯入'
          },
          ToggleImportPath: {
            convertAllFormat: '轉換所有匯入格式',
            convertAllToAbsolutePath: '將所有匯入轉換為絕對路徑',
            convertAllToRelativePath: '將所有匯入轉換為相對路徑',
            convertToAbsolutePath: '轉換為絕對路徑',
            convertToRelativePath: '轉換成相對路徑'
          },
          UnresolvedImports: {
            learnMoreTitle: '深入了解如何解析匯入',
            selectInterpreterTitle: '選取其他解譯器',
            selectKernelTitle: '選取其他 Jupyter kernel'
          }
        },
        Commands: {
          LoggingCommand: {
            loggingDataSaved: '記錄資料已儲存在 [{filePath}]({uri})。如需詳細資料，請參閱 [Python 語言伺服器] 輸出窗格。'
          },
          ProfilingCommand: {
            profilingDataSaved: '分析資料已儲存在 [{filePath}]({uri})。如需詳細資料，請參閱 [Python 語言伺服器] 輸出窗格。'
          },
          gotoOutputCommand: '顯示輸出'
        },
        Copilot: {
          GenerateDocstringWithCopilot: '使用 Copilot 產生 Docstring',
          implementAllInheritedAbstractClasseswithCopilot: '使用 Copilot 來實作所有繼承的抽象類別'
        },
        Diagnostic: {
          importResolveRedirect: '在 "{venv}" 環境中找不到匯入 "{importName}"。'
        },
        DocstringTemplate: {
          GenerateDocstring: '產生 Docstring',
          description: '說明',
          docstringForName: '{name} 的 Docstring'
        },
        Messages: {
          defaultPythonEnvironmentName: '預設 Python 環境',
          globalEnvironmentName: '全域',
          pluralFilesAndPluralCellsToAnalyze: '{fileCount} 個檔案和 {cellCount} 個儲存格要分析',
          pluralFilesAndSingularCellToAnalyze: '{fileCount} 個檔案和 1 個儲存格要分析',
          singularFileAndPluralCellsToAnalyze: '1 個檔案和 {cellCount} 個儲存格要分析',
          singularFileAndSingularCellToAnalyze: '1 的檔案和 1 個儲存格要分析',
          windowsStoreEnvironmentName: 'microsoft store'
        },
        PerformanceTracking: {
          button: '回報問題',
          title: '偵測到 Pylance 發生效能問題。要使用 `Pylance: Report Issue` 命令提出問題嗎?'
        },
        Pytest: {
          addTypeAnnotation: '新增型別註解至 {name}',
          addTypeAnnotations: '新增此檔案中所有 fixture 參考的類型註釋',
          fixtureNotFound: '\'{fixture}\' 不是已知的測試 fixture。測試方法應該只接收 fixture 或 parametrization 名稱作為參數。'
        },
        Refactoring: {
          moveFile: '是否要將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileAbsentSymbol: '找不到要移動的符號。',
          moveFileDescription: '將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileExtensionMismatch: '若要移動符號，來源檔案 ("{src}") 與目的檔案 ("{dest}") 必須具有相同的檔案副檔名。',
          moveFileImportableOnly: '＝只允許移動可以從其他模組匯入的物件，例如類別或函數。',
          moveFileInsertLocation: '找不到要插入符號的位置。"{name}" 中可能已存在相同名稱的符號。',
          moveFileLabel: '將 "{oldModuleName}" 的所有匯入參考更新為 "{newModuleName}"?',
          moveFileMissingInfo: '找不到 "{name}" 的檔案資訊。',
          moveFileMultipleDeclarations: '無法移動此符號，因為它已遭多次宣告。',
          moveFileNotUserFile: '無法移動此符號。只支援專案或使用者檔案中的符號。',
          moveFilePrivateSymbol: '無法移動 "{name}"，因為它是私人符號。',
          moveFileSameFile: '無法將符號移至其目前所在的同一個檔案中。',
          moveFileSimpleAssignmentsOnly: '無法移動此運算式。只支援例如為變數指派值等簡單的指派。',
          moveFileSymbolNotFound: '在位置 "{position}" 找不到符號。',
          moveFileUnsupportedSymbol: '無法移動此符號。僅支援模組層級的變數、函式和類別。'
        }
      };
    }
  };
  var _0x3afcf1 = {};
  function _0x4e9d31(_0x5d0907) {
    var _0x5f4312 = _0x3afcf1[_0x5d0907];
    if (_0x5f4312 !== undefined) {
      return _0x5f4312.exports;
    }
    var _0x114258 = _0x3afcf1[_0x5d0907] = {
      id: _0x5d0907,
      loaded: false,
      exports: {}
    };
    _0x187ed8[_0x5d0907].call(_0x114258.exports, _0x114258, _0x114258.exports, _0x4e9d31);
    _0x114258.loaded = true;
    return _0x114258.exports;
  }
  _0x4e9d31.m = _0x187ed8;
  _0x4e9d31.x = () => {
    var _0x19c60a = _0x4e9d31.O(undefined, [121, 344], () => _0x4e9d31(69506));
    _0x19c60a = _0x4e9d31.O(_0x19c60a);
    return _0x19c60a;
  };
  (() => {
    var _0x10d2ee = [];
    _0x4e9d31.O = (_0x21e323, _0x7f6a12, _0x5bc311, _0x167f90) => {
      if (_0x7f6a12) {
        _0x167f90 = _0x167f90 || 0;
        for (var _0x1ae967 = _0x10d2ee.length; _0x1ae967 > 0 && _0x10d2ee[_0x1ae967 - 1][2] > _0x167f90; _0x1ae967--) {
          _0x10d2ee[_0x1ae967] = _0x10d2ee[_0x1ae967 - 1];
        }
        _0x10d2ee[_0x1ae967] = [_0x7f6a12, _0x5bc311, _0x167f90];
        return;
      }
      var _0x1ebd8b = Infinity;
      for (var _0x1ae967 = 0; _0x1ae967 < _0x10d2ee.length; _0x1ae967++) {
        var [_0x7f6a12, _0x5bc311, _0x167f90] = _0x10d2ee[_0x1ae967];
        var _0x1aed6c = true;
        for (var _0x29a9d0 = 0; _0x29a9d0 < _0x7f6a12.length; _0x29a9d0++) {
          if ((_0x167f90 & 1 === 0 || _0x1ebd8b >= _0x167f90) && Object.keys(_0x4e9d31.O).every(_0x39b08f => _0x4e9d31.O[_0x39b08f](_0x7f6a12[_0x29a9d0]))) {
            _0x7f6a12.splice(_0x29a9d0--, 1);
          } else {
            _0x1aed6c = false;
            if (_0x167f90 < _0x1ebd8b) {
              _0x1ebd8b = _0x167f90;
            }
          }
        }
        if (_0x1aed6c) {
          _0x10d2ee.splice(_0x1ae967--, 1);
          var _0x5eefac = _0x5bc311();
          if (_0x5eefac !== undefined) {
            _0x21e323 = _0x5eefac;
          }
        }
      }
      return _0x21e323;
    };
  })();
  (() => {
    _0x4e9d31.n = _0x556eb6 => {
      var _0x3f31bd = _0x556eb6 && _0x556eb6.__esModule ? () => _0x556eb6.default : () => _0x556eb6;
      _0x4e9d31.d(_0x3f31bd, {
        a: _0x3f31bd
      });
      return _0x3f31bd;
    };
  })();
  (() => {
    _0x4e9d31.d = (_0x117063, _0x20784c) => {
      for (var _0x5db779 in _0x20784c) {
        if (_0x4e9d31.o(_0x20784c, _0x5db779) && !_0x4e9d31.o(_0x117063, _0x5db779)) {
          Object.defineProperty(_0x117063, _0x5db779, {
            enumerable: true,
            get: _0x20784c[_0x5db779]
          });
        }
      }
    };
  })();
  (() => {
    _0x4e9d31.f = {};
    _0x4e9d31.e = _0x2bf60e => {
      return Promise.all(Object.keys(_0x4e9d31.f).reduce((_0x15b24a, _0x1e12d8) => {
        _0x4e9d31.f[_0x1e12d8](_0x2bf60e, _0x15b24a);
        return _0x15b24a;
      }, []));
    };
  })();
  (() => {
    _0x4e9d31.u = _0x1e7a41 => {
      return `${{
        '121': 'vendor',
        '344': 'pyright'
      }[_0x1e7a41]}.bundle.js`;
    };
  })();
  (() => {
    _0x4e9d31.o = (_0x4eb173, _0x36c297) => Object.prototype.hasOwnProperty.call(_0x4eb173, _0x36c297);
  })();
  (() => {
    _0x4e9d31.r = _0x495378 => {
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        Object.defineProperty(_0x495378, Symbol.toStringTag, {
          value: 'Module'
        });
      }
      Object.defineProperty(_0x495378, '__esModule', {
        value: true
      });
    };
  })();
  (() => {
    _0x4e9d31.nmd = _0x2a410b => {
      _0x2a410b.paths = [];
      if (!_0x2a410b.children) {
        _0x2a410b.children = [];
      }
      return _0x2a410b;
    };
  })();
  (() => {
    _0x4e9d31.j = 326;
  })();
  (() => {
    var _0x56e5e3 = {
      326: 1
    };
    _0x4e9d31.O.require = _0x4204ce => _0x56e5e3[_0x4204ce];
    var _0x2555fc = _0x1de23b => {
      var _0x365f96 = _0x1de23b.modules;
      var _0x203613 = _0x1de23b.ids;
      var _0x337ad4 = _0x1de23b.runtime;
      for (var _0x65c3d5 in _0x365f96) {
        if (_0x4e9d31.o(_0x365f96, _0x65c3d5)) {
          _0x4e9d31.m[_0x65c3d5] = _0x365f96[_0x65c3d5];
        }
      }
      if (_0x337ad4) {
        _0x337ad4(_0x4e9d31);
      }
      for (var _0xa940e2 = 0; _0xa940e2 < _0x203613.length; _0xa940e2++) {
        _0x56e5e3[_0x203613[_0xa940e2]] = 1;
      }
      _0x4e9d31.O();
    };
    _0x4e9d31.f.require = (_0x1f5956, _0x5ce28f) => {
      if (!_0x56e5e3[_0x1f5956]) {
        if (true) {
          _0x2555fc(require(`./${_0x4e9d31.u(_0x1f5956)}`));
        } else {
          _0x56e5e3[_0x1f5956] = 1;
        }
      }
    };
  })();
  (() => {
    var _0x14b2cb = _0x4e9d31.x;
    _0x4e9d31.x = () => {
      _0x4e9d31.e(121);
      _0x4e9d31.e(344);
      return _0x14b2cb();
    };
  })();
  var _0xcdfb20 = _0x4e9d31.x();
  module.exports = _0xcdfb20;
})(); //# sourceMappingURL=sync.bundle.js.map
//# sourceMappingURL=sync.bundle.js.map