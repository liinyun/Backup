import type * as t from '@babel/types';
import { type Node } from '@babel/traverse';
import type { TransformState, Transform, AsyncTransform } from 'webcrack/ast-utils';
export declare function parse(code: string): import("@babel/parser").ParseResult<t.File>;
export declare function generate(ast: t.Node): string;
export declare function applyTransformAsync<TOptions>(ast: Node, transform: AsyncTransform<TOptions>, options?: TOptions): Promise<TransformState>;
export declare function applyTransform<TOptions>(ast: Node, transform: Transform<TOptions>, options?: TOptions, noScopeOverride?: boolean): TransformState;
export declare function applyTransforms(ast: Node, transforms: Transform[], options?: {
    noScope?: boolean;
    name?: string;
    log?: boolean;
}): TransformState;
