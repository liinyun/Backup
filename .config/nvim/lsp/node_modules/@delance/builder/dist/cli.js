#!/usr/bin/env bun
import {
  __require,
  delance_builder_default
} from "./index.js";

// cli.ts
import { spawnSync } from "node:child_process";
import debug from "debug";

// utils/colors.ts
import { isatty } from "node:tty";
/*! modified from picocolors v1.0.0 | ISC License | github.com/alexeyraspopov/picocolors */
var argv = process.argv || [];
var { env } = process;
var enabled = !(("NO_COLOR" in env) || argv.includes("--no-color")) && (("FORCE_COLOR" in env) || argv.includes("--color") || process.platform === "win32" || isatty(1) && env.TERM !== "dumb" || ("CI" in env));
var formatter = (open, close, replace = open) => enabled ? (input) => {
  const string = String(input);
  const index = string.indexOf(close, open.length);
  return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
} : String;
var replaceClose = (string, close, replace, index) => {
  const start = string.slice(0, Math.max(0, index)) + replace;
  const end = string.slice(Math.max(0, index + close.length));
  const nextIndex = end.indexOf(close);
  return ~nextIndex ? start + replaceClose(end, close, replace, nextIndex) : start + end;
};
var bold = /* @__PURE__ */ formatter("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m");
var dim = /* @__PURE__ */ formatter("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m");
var underline = /* @__PURE__ */ formatter("\x1B[4m", "\x1B[24m");
var red = /* @__PURE__ */ formatter("\x1B[31m", "\x1B[39m");
var green = /* @__PURE__ */ formatter("\x1B[32m", "\x1B[39m");
var yellow = /* @__PURE__ */ formatter("\x1B[33m", "\x1B[39m");
var magenta = /* @__PURE__ */ formatter("\x1B[35m", "\x1B[39m");
var cyan = /* @__PURE__ */ formatter("\x1B[36m", "\x1B[39m");
var white = /* @__PURE__ */ formatter("\x1B[37m", "\x1B[39m");
var bgBlack = /* @__PURE__ */ formatter("\x1B[40m", "\x1B[49m");
var bgBlue = /* @__PURE__ */ formatter("\x1B[44m", "\x1B[49m");

// cli.ts
function hl(..._arguments) {
  return bgBlack(` ${dim(magenta("$"))} ${[...function* () {
    for (let i = 0;i < _arguments.length; i++) {
      const argument = _arguments[i];
      if (i === 0) {
        yield yellow(argument);
        continue;
      }
      if (argument === "|") {
        yield green("|");
        yield yellow(_arguments[++i]);
        continue;
      }
      if (argument.startsWith("-")) {
        yield cyan(argument);
        continue;
      }
      if (argument.startsWith("#")) {
        yield dim(_arguments.slice(i).join(" "));
        return;
      }
      if (true) {
        if (argument.startsWith('"') && argument.endsWith('"') || argument.startsWith("\'") && argument.endsWith("\'")) {
          yield argument[0] + magenta(argument.slice(1, -1)) + argument[0];
          continue;
        }
      }
      yield argument;
    }
  }()].join(" ")} `);
}
var errorMessage = `
  ${red("Uh-oh")}. ${bold(yellow("@delance/builder"))} CLI requires Bun to run.
  If you were trying to run the language server, use ${bold(magenta("npm i @delance/runtime"))}.

  \u2022 To install Bun:
    ${hl("npm", "i", "-d", "bun", "#", "locally")}
    ${hl("curl", "-fsSL", "https://bun.sh/install", "|", "bash", "#", "globally")}
  \u2022 More info: ${underline(cyan("https://bun.sh/docs/installation"))}

${"\u2500".repeat(80)}
`;
if (!process.isBun) {
  const { status, error } = spawnSync("bun", ["run", ...process.argv.slice(1)], { stdio: "inherit" });
  if (status) {
    process.exit(status);
  } else {
    if (error && error.code === "ENOENT") {
      console.error(errorMessage);
    }
    throw error;
  }
}
async function main(argv2) {
  debug.enable("*,-babel");
  const cwd = argv2.pop();
  for await (const x of new Bun.Glob("{!browser,*}.bundle.js").scan({ absolute: true, cwd })) {
    console.group(`${magenta("> build")} ${dim(x)}`);
    const label = `${bgBlue(white(" Processed "))} ${dim(x)}`;
    console.time(label);
    try {
      const file = Bun.file(x);
      await Bun.write(file, await delance_builder_default(await file.text()));
    } catch (error) {
      console.error(`Error while processing file ${x} `);
      throw error;
    }
    console.timeEnd(label);
    console.groupEnd();
  }
}
if (__require.main == __require.module) {
  await main(process.argv);
}
export {
  main
};
