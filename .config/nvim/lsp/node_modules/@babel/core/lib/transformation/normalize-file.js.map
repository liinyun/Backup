{"version":3,"names":["fs","path","buildDebug","_t","file","traverseFast","convertSourceMap","File","parser","cloneDeep","debug","INLINE_SOURCEMAP_REGEX","EXTERNAL_SOURCEMAP_REGEX","normalizeFile","pluginPasses","options","code","ast","type","Error","cloneInputAst","inputMap","inputSourceMap","fromObject","lastComment","extractComments","fromComment","err","filename","match","exec","inputMapContent","readFileSync","resolve","dirname","fromJSON","extractCommentsFromList","regex","comments","filter","value","test","node","leadingComments","innerComments","trailingComments"],"sources":["../../src/transformation/normalize-file.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport buildDebug from \"debug\";\nimport type { Handler } from \"gensync\";\nimport { file, traverseFast } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { PluginPasses } from \"../config\";\nimport convertSourceMap from \"convert-source-map\";\nimport type { SourceMapConverter as Converter } from \"convert-source-map\";\nimport File from \"./file/file\";\nimport parser from \"../parser\";\nimport cloneDeep from \"./util/clone-deep\";\n\nconst debug = buildDebug(\"babel:transform:file\");\n\n// These regexps are copied from the convert-source-map package,\n// but without // or /* at the beginning of the comment.\n\n// eslint-disable-next-line max-len\nconst INLINE_SOURCEMAP_REGEX =\n  /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX =\n  /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nexport type NormalizedFile = {\n  code: string;\n  ast: t.File;\n  inputMap: Converter | null;\n};\n\nexport default function* normalizeFile(\n  pluginPasses: PluginPasses,\n  options: { [key: string]: any },\n  code: string,\n  ast?: t.File | t.Program | null,\n): Handler<File> {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = cloneDeep(ast);\n    }\n  } else {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = yield* parser(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n  if (options.inputSourceMap !== false) {\n    // If an explicit object is passed in, it overrides the processing of\n    // source maps that may be in the file itself.\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = convertSourceMap.fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n      if (lastComment) {\n        try {\n          inputMap = convertSourceMap.fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          // when `lastComment` is non-null, EXTERNAL_SOURCEMAP_REGEX must have matches\n          const match: [string, string] = EXTERNAL_SOURCEMAP_REGEX.exec(\n            lastComment,\n          ) as any;\n          const inputMapContent = fs.readFileSync(\n            path.resolve(path.dirname(options.filename), match[1]),\n            \"utf8\",\n          );\n          inputMap = convertSourceMap.fromJSON(inputMapContent);\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new File(options, {\n    code,\n    ast: ast as t.File,\n    inputMap,\n  });\n}\n\nfunction extractCommentsFromList(\n  regex: RegExp,\n  comments: t.Comment[],\n  lastComment: string | null,\n): [t.Comment[], string | null] {\n  if (comments) {\n    comments = comments.filter(({ value }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n      return true;\n    });\n  }\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex: RegExp, ast: t.Node) {\n  let lastComment: string = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.leadingComments,\n      lastComment,\n    );\n    [node.innerComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.innerComments,\n      lastComment,\n    );\n    [node.trailingComments, lastComment] = extractCommentsFromList(\n      regex,\n      node.trailingComments,\n      lastComment,\n    );\n  });\n  return lastComment;\n}\n"],"mappings":"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"}