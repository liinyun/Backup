{"version":3,"names":["removed","msg","access","assertString","assertBoolean","assertObject","assertArray","assertCallerMetadata","assertInputSourceMap","assertIgnoreList","assertPluginList","assertConfigApplicableTest","assertConfigFileSearch","assertBabelrcSearch","assertFunction","assertRootMode","assertSourceMaps","assertCompact","assertSourceType","assertTargets","assertAssumptions","ConfigError","ROOT_VALIDATORS","cwd","root","rootMode","configFile","caller","filename","filenameRelative","code","ast","cloneInputAst","envName","BABELRC_VALIDATORS","babelrc","babelrcRoots","NONPRESET_VALIDATORS","extends","ignore","only","targets","browserslistConfigFile","browserslistEnv","COMMON_VALIDATORS","inputSourceMap","presets","plugins","passPerPreset","assumptions","env","assertEnvSet","overrides","assertOverridesList","test","include","exclude","retainLines","comments","shouldPrintComment","compact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceType","wrapPluginVisitorMethod","highlightCode","sourceMaps","sourceMap","sourceFileName","sourceRoot","parserOpts","generatorOpts","Object","assign","getModuleId","moduleRoot","moduleIds","moduleId","knownAssumptions","assumptionsNames","Set","getSource","loc","type","source","parent","validate","opts","validateNested","error","configError","message","assertNoDuplicateSourcemap","keys","forEach","key","optLoc","name","Error","validator","throwUnknownError","version","unknownOptErr","has","obj","prototype","hasOwnProperty","call","value","envLoc","arr","index","item","entries","objLoc","overridesLoc","checkNoUnwrappedItemOptionPairs","items","e","lastItem","thisItem","file","options","undefined","request","JSON","stringify"],"sources":["../../../src/config/validation/options.ts"],"sourcesContent":["import type { InputTargets, Targets } from \"@babel/helper-compilation-targets\";\n\nimport type { ConfigItem } from \"../item\";\nimport type Plugin from \"../plugin\";\n\nimport removed from \"./removed\";\nimport {\n  msg,\n  access,\n  assertString,\n  assertBoolean,\n  assertObject,\n  assertArray,\n  assertCallerMetadata,\n  assertInputSourceMap,\n  assertIgnoreList,\n  assertPluginList,\n  assertConfigApplicableTest,\n  assertConfigFileSearch,\n  assertBabelrcSearch,\n  assertFunction,\n  assertRootMode,\n  assertSourceMaps,\n  assertCompact,\n  assertSourceType,\n  assertTargets,\n  assertAssumptions,\n} from \"./option-assertions\";\nimport type { ValidatorSet, Validator, OptionPath } from \"./option-assertions\";\nimport type { UnloadedDescriptor } from \"../config-descriptors\";\nimport type { ParserOptions } from \"@babel/parser\";\nimport type { GeneratorOptions } from \"@babel/generator\";\nimport ConfigError from \"../../errors/config-error\";\n\nconst ROOT_VALIDATORS: ValidatorSet = {\n  cwd: assertString as Validator<ValidatedOptions[\"cwd\"]>,\n  root: assertString as Validator<ValidatedOptions[\"root\"]>,\n  rootMode: assertRootMode as Validator<ValidatedOptions[\"rootMode\"]>,\n  configFile: assertConfigFileSearch as Validator<\n    ValidatedOptions[\"configFile\"]\n  >,\n\n  caller: assertCallerMetadata as Validator<ValidatedOptions[\"caller\"]>,\n  filename: assertString as Validator<ValidatedOptions[\"filename\"]>,\n  filenameRelative: assertString as Validator<\n    ValidatedOptions[\"filenameRelative\"]\n  >,\n  code: assertBoolean as Validator<ValidatedOptions[\"code\"]>,\n  ast: assertBoolean as Validator<ValidatedOptions[\"ast\"]>,\n\n  cloneInputAst: assertBoolean as Validator<ValidatedOptions[\"cloneInputAst\"]>,\n\n  envName: assertString as Validator<ValidatedOptions[\"envName\"]>,\n};\n\nconst BABELRC_VALIDATORS: ValidatorSet = {\n  babelrc: assertBoolean as Validator<ValidatedOptions[\"babelrc\"]>,\n  babelrcRoots: assertBabelrcSearch as Validator<\n    ValidatedOptions[\"babelrcRoots\"]\n  >,\n};\n\nconst NONPRESET_VALIDATORS: ValidatorSet = {\n  extends: assertString as Validator<ValidatedOptions[\"extends\"]>,\n  ignore: assertIgnoreList as Validator<ValidatedOptions[\"ignore\"]>,\n  only: assertIgnoreList as Validator<ValidatedOptions[\"only\"]>,\n\n  targets: assertTargets as Validator<ValidatedOptions[\"targets\"]>,\n  browserslistConfigFile: assertConfigFileSearch as Validator<\n    ValidatedOptions[\"browserslistConfigFile\"]\n  >,\n  browserslistEnv: assertString as Validator<\n    ValidatedOptions[\"browserslistEnv\"]\n  >,\n};\n\nconst COMMON_VALIDATORS: ValidatorSet = {\n  // TODO: Should 'inputSourceMap' be moved to be a root-only option?\n  // We may want a boolean-only version to be a common option, with the\n  // object only allowed as a root config argument.\n  inputSourceMap: assertInputSourceMap as Validator<\n    ValidatedOptions[\"inputSourceMap\"]\n  >,\n  presets: assertPluginList as Validator<ValidatedOptions[\"presets\"]>,\n  plugins: assertPluginList as Validator<ValidatedOptions[\"plugins\"]>,\n  passPerPreset: assertBoolean as Validator<ValidatedOptions[\"passPerPreset\"]>,\n  assumptions: assertAssumptions as Validator<ValidatedOptions[\"assumptions\"]>,\n\n  env: assertEnvSet as Validator<ValidatedOptions[\"env\"]>,\n  overrides: assertOverridesList as Validator<ValidatedOptions[\"overrides\"]>,\n\n  // We could limit these to 'overrides' blocks, but it's not clear why we'd\n  // bother, when the ability to limit a config to a specific set of files\n  // is a fairly general useful feature.\n  test: assertConfigApplicableTest as Validator<ValidatedOptions[\"test\"]>,\n  include: assertConfigApplicableTest as Validator<ValidatedOptions[\"include\"]>,\n  exclude: assertConfigApplicableTest as Validator<ValidatedOptions[\"exclude\"]>,\n\n  retainLines: assertBoolean as Validator<ValidatedOptions[\"retainLines\"]>,\n  comments: assertBoolean as Validator<ValidatedOptions[\"comments\"]>,\n  shouldPrintComment: assertFunction as Validator<\n    ValidatedOptions[\"shouldPrintComment\"]\n  >,\n  compact: assertCompact as Validator<ValidatedOptions[\"compact\"]>,\n  minified: assertBoolean as Validator<ValidatedOptions[\"minified\"]>,\n  auxiliaryCommentBefore: assertString as Validator<\n    ValidatedOptions[\"auxiliaryCommentBefore\"]\n  >,\n  auxiliaryCommentAfter: assertString as Validator<\n    ValidatedOptions[\"auxiliaryCommentAfter\"]\n  >,\n  sourceType: assertSourceType as Validator<ValidatedOptions[\"sourceType\"]>,\n  wrapPluginVisitorMethod: assertFunction as Validator<\n    ValidatedOptions[\"wrapPluginVisitorMethod\"]\n  >,\n  highlightCode: assertBoolean as Validator<ValidatedOptions[\"highlightCode\"]>,\n  sourceMaps: assertSourceMaps as Validator<ValidatedOptions[\"sourceMaps\"]>,\n  sourceMap: assertSourceMaps as Validator<ValidatedOptions[\"sourceMap\"]>,\n  sourceFileName: assertString as Validator<ValidatedOptions[\"sourceFileName\"]>,\n  sourceRoot: assertString as Validator<ValidatedOptions[\"sourceRoot\"]>,\n  parserOpts: assertObject as Validator<ValidatedOptions[\"parserOpts\"]>,\n  generatorOpts: assertObject as Validator<ValidatedOptions[\"generatorOpts\"]>,\n};\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(COMMON_VALIDATORS, {\n    getModuleId: assertFunction,\n    moduleRoot: assertString,\n    moduleIds: assertBoolean,\n    moduleId: assertString,\n  });\n}\n\nexport type InputOptions = ValidatedOptions;\n\nexport type ValidatedOptions = {\n  cwd?: string;\n  filename?: string;\n  filenameRelative?: string;\n  babelrc?: boolean;\n  babelrcRoots?: BabelrcSearch;\n  configFile?: ConfigFileSearch;\n  root?: string;\n  rootMode?: RootMode;\n  code?: boolean;\n  ast?: boolean;\n  cloneInputAst?: boolean;\n  inputSourceMap?: RootInputSourceMapOption;\n  envName?: string;\n  caller?: CallerMetadata;\n  extends?: string;\n  env?: EnvSet<ValidatedOptions>;\n  ignore?: IgnoreList;\n  only?: IgnoreList;\n  overrides?: OverridesList;\n  // Generally verify if a given config object should be applied to the given file.\n  test?: ConfigApplicableTest;\n  include?: ConfigApplicableTest;\n  exclude?: ConfigApplicableTest;\n  presets?: PluginList;\n  plugins?: PluginList;\n  passPerPreset?: boolean;\n  assumptions?: {\n    [name: string]: boolean;\n  };\n  // browserslists-related options\n  targets?: TargetsListOrObject;\n  browserslistConfigFile?: ConfigFileSearch;\n  browserslistEnv?: string;\n  // Options for @babel/generator\n  retainLines?: boolean;\n  comments?: boolean;\n  shouldPrintComment?: Function;\n  compact?: CompactOption;\n  minified?: boolean;\n  auxiliaryCommentBefore?: string;\n  auxiliaryCommentAfter?: string;\n  // Parser\n  sourceType?: SourceTypeOption;\n  wrapPluginVisitorMethod?: Function;\n  highlightCode?: boolean;\n  // Sourcemap generation options.\n  sourceMaps?: SourceMapsOption;\n  sourceMap?: SourceMapsOption;\n  sourceFileName?: string;\n  sourceRoot?: string;\n  // Deprecate top level parserOpts\n  parserOpts?: ParserOptions;\n  // Deprecate top level generatorOpts\n  generatorOpts?: GeneratorOptions;\n};\n\nexport type NormalizedOptions = {\n  readonly targets: Targets;\n} & Omit<ValidatedOptions, \"targets\">;\n\nexport type CallerMetadata = {\n  // If 'caller' is specified, require that the name is given for debugging\n  // messages.\n  name: string;\n};\nexport type EnvSet<T> = {\n  [x: string]: T;\n};\nexport type IgnoreItem =\n  | string\n  | RegExp\n  | ((\n      path: string | undefined,\n      context: { dirname: string; caller: CallerMetadata; envName: string },\n    ) => unknown);\nexport type IgnoreList = ReadonlyArray<IgnoreItem>;\n\nexport type PluginOptions = object | void | false;\nexport type PluginTarget = string | object | Function;\nexport type PluginItem =\n  | ConfigItem\n  | Plugin\n  | PluginTarget\n  | [PluginTarget, PluginOptions]\n  | [PluginTarget, PluginOptions, string | void];\nexport type PluginList = ReadonlyArray<PluginItem>;\n\nexport type OverridesList = Array<ValidatedOptions>;\nexport type ConfigApplicableTest = IgnoreItem | Array<IgnoreItem>;\n\nexport type ConfigFileSearch = string | boolean;\nexport type BabelrcSearch = boolean | IgnoreItem | IgnoreList;\nexport type SourceMapsOption = boolean | \"inline\" | \"both\";\nexport type SourceTypeOption = \"module\" | \"script\" | \"unambiguous\";\nexport type CompactOption = boolean | \"auto\";\nexport type RootInputSourceMapOption = {} | boolean;\nexport type RootMode = \"root\" | \"upward\" | \"upward-optional\";\n\nexport type TargetsListOrObject =\n  | Targets\n  | InputTargets\n  | InputTargets[\"browsers\"];\n\nexport type OptionsSource =\n  | \"arguments\"\n  | \"configfile\"\n  | \"babelrcfile\"\n  | \"extendsfile\"\n  | \"preset\"\n  | \"plugin\";\n\nexport type RootPath = Readonly<{\n  type: \"root\";\n  source: OptionsSource;\n}>;\n\ntype OverridesPath = Readonly<{\n  type: \"overrides\";\n  index: number;\n  parent: RootPath;\n}>;\n\ntype EnvPath = Readonly<{\n  type: \"env\";\n  name: string;\n  parent: RootPath | OverridesPath;\n}>;\n\nexport type NestingPath = RootPath | OverridesPath | EnvPath;\n\nconst knownAssumptions = [\n  \"arrayLikeIsIterable\",\n  \"constantReexports\",\n  \"constantSuper\",\n  \"enumerableModuleMeta\",\n  \"ignoreFunctionLength\",\n  \"ignoreToPrimitiveHint\",\n  \"iterableIsArray\",\n  \"mutableTemplateObject\",\n  \"noClassCalls\",\n  \"noDocumentAll\",\n  \"noIncompleteNsImportDetection\",\n  \"noNewArrows\",\n  \"objectRestNoSymbols\",\n  \"privateFieldsAsSymbols\",\n  \"privateFieldsAsProperties\",\n  \"pureGetters\",\n  \"setClassMethods\",\n  \"setComputedProperties\",\n  \"setPublicClassFields\",\n  \"setSpreadProperties\",\n  \"skipForOfIteratorClosing\",\n  \"superIsCallableConstructor\",\n] as const;\nexport type AssumptionName = (typeof knownAssumptions)[number];\nexport const assumptionsNames = new Set(knownAssumptions);\n\nfunction getSource(loc: NestingPath): OptionsSource {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nexport function validate(\n  type: OptionsSource,\n  opts: {},\n  filename?: string,\n): ValidatedOptions {\n  try {\n    return validateNested(\n      {\n        type: \"root\",\n        source: type,\n      },\n      opts,\n    );\n  } catch (error) {\n    const configError = new ConfigError(error.message, filename);\n    // @ts-expect-error TODO: .code is not defined on ConfigError or Error\n    if (error.code) configError.code = error.code;\n    throw configError;\n  }\n}\n\nfunction validateNested(loc: NestingPath, opts: { [key: string]: unknown }) {\n  const type = getSource(loc);\n\n  assertNoDuplicateSourcemap(opts);\n\n  Object.keys(opts).forEach((key: string) => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc,\n    } as const;\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${msg(optLoc)} is not allowed in preset options`);\n    }\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(\n        `${msg(optLoc)} is only allowed in root programmatic options`,\n      );\n    }\n    if (\n      type !== \"arguments\" &&\n      type !== \"configfile\" &&\n      BABELRC_VALIDATORS[key]\n    ) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(\n          `${msg(\n            optLoc,\n          )} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` +\n            `or babel.config.js/config file options`,\n        );\n      }\n\n      throw new Error(\n        `${msg(\n          optLoc,\n        )} is only allowed in root programmatic options, or babel.config.js/config file options`,\n      );\n    }\n\n    const validator =\n      COMMON_VALIDATORS[key] ||\n      NONPRESET_VALIDATORS[key] ||\n      BABELRC_VALIDATORS[key] ||\n      ROOT_VALIDATORS[key] ||\n      (throwUnknownError as Validator<void>);\n\n    validator(optLoc, opts[key]);\n  });\n\n  return opts;\n}\n\nfunction throwUnknownError(loc: OptionPath) {\n  const key = loc.name;\n\n  if (removed[key]) {\n    const { message, version = 5 } = removed[key];\n\n    throw new Error(\n      `Using removed Babel ${version} option: ${msg(loc)} - ${message}`,\n    );\n  } else {\n    // eslint-disable-next-line max-len\n    const unknownOptErr = new Error(\n      `Unknown option: ${msg(\n        loc,\n      )}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`,\n    );\n    // @ts-expect-error todo(flow->ts): consider creating something like BabelConfigError with code field in it\n    unknownOptErr.code = \"BABEL_UNKNOWN_OPTION\";\n\n    throw unknownOptErr;\n  }\n}\n\nfunction has(obj: {}, key: string) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts: {}): void {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(\n  loc: OptionPath,\n  value: unknown,\n): void | EnvSet<ValidatedOptions> {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${msg(loc)} is not allowed inside of another .env block`);\n  }\n  const parent: RootPath | OverridesPath = loc.parent;\n\n  const obj = assertObject(loc, value);\n  if (obj) {\n    // Validate but don't copy the .env object in order to preserve\n    // object identity for use during config chain processing.\n    for (const envName of Object.keys(obj)) {\n      const env = assertObject(access(loc, envName), obj[envName]);\n      if (!env) continue;\n\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent,\n      } as const;\n      validateNested(envLoc, env);\n    }\n  }\n  return obj;\n}\n\nfunction assertOverridesList(\n  loc: OptionPath,\n  value: unknown[],\n): undefined | OverridesList {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${msg(loc)} is not allowed inside an .env block`);\n  }\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${msg(loc)} is not allowed inside an .overrides block`);\n  }\n  const parent: RootPath = loc.parent;\n\n  const arr = assertArray(loc, value);\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = access(loc, index);\n      const env = assertObject(objLoc, item);\n      if (!env) throw new Error(`${msg(objLoc)} must be an object`);\n\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent,\n      } as const;\n      validateNested(overridesLoc, env);\n    }\n  }\n  return arr as OverridesList;\n}\n\nexport function checkNoUnwrappedItemOptionPairs(\n  items: Array<UnloadedDescriptor>,\n  index: number,\n  type: \"plugin\" | \"preset\",\n  e: Error,\n): void {\n  if (index === 0) return;\n\n  const lastItem = items[index - 1];\n  const thisItem = items[index];\n\n  if (\n    lastItem.file &&\n    lastItem.options === undefined &&\n    typeof thisItem.value === \"object\"\n  ) {\n    e.message +=\n      `\\n- Maybe you meant to use\\n` +\n      `\"${type}s\": [\\n  [\"${lastItem.file.request}\", ${JSON.stringify(\n        thisItem.value,\n        undefined,\n        2,\n      )}]\\n]\\n` +\n      `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;\n  }\n}\n"],"mappings":"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"}