{"version":3,"names":["gensync","loadConfig","parser","normalizeOptions","beginHiddenCallStack","parseRunner","parse","code","opts","config","passes","callback","undefined","sync","errback","parseSync","args","parseAsync","async"],"sources":["../src/parse.ts"],"sourcesContent":["import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config\";\nimport type { InputOptions } from \"./config\";\nimport parser from \"./parser\";\nimport type { ParseResult } from \"./parser\";\nimport normalizeOptions from \"./transformation/normalize-opts\";\nimport type { ValidatedOptions } from \"./config/validation/options\";\n\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace\";\n\ntype FileParseCallback = {\n  (err: Error, ast: null): void;\n  (err: null, ast: ParseResult | null): void;\n};\n\ntype Parse = {\n  (code: string, callback: FileParseCallback): void;\n  (\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileParseCallback,\n  ): void;\n  (code: string, opts?: InputOptions | null): ParseResult | null;\n};\n\nconst parseRunner = gensync(function* parse(\n  code: string,\n  opts: InputOptions | undefined | null,\n): Handler<ParseResult | null> {\n  const config = yield* loadConfig(opts);\n\n  if (config === null) {\n    return null;\n  }\n\n  return yield* parser(config.passes, normalizeOptions(config), code);\n});\n\nexport const parse: Parse = function parse(\n  code,\n  opts?,\n  callback?: FileParseCallback,\n) {\n  if (typeof opts === \"function\") {\n    callback = opts;\n    opts = undefined as ValidatedOptions;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'parse' function expects a callback. If you need to call it synchronously, please use 'parseSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'parse' function will expect a callback. If you need to call it synchronously, please use 'parseSync'.\",\n      // );\n      return beginHiddenCallStack(parseRunner.sync)(code, opts);\n    }\n  }\n\n  beginHiddenCallStack(parseRunner.errback)(code, opts, callback);\n};\n\nexport function parseSync(...args: Parameters<typeof parseRunner.sync>) {\n  return beginHiddenCallStack(parseRunner.sync)(...args);\n}\nexport function parseAsync(...args: Parameters<typeof parseRunner.async>) {\n  return beginHiddenCallStack(parseRunner.async)(...args);\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAwB,SAAS;AAE/C,OAAOC,UAAU,MAAM,mBAAU;AAEjC,OAAOC,MAAM,MAAM,mBAAU;AAE7B,OAAOC,gBAAgB,MAAM,oCAAiC;AAG9D,SAASC,oBAAoB,QAAQ,iCAA8B;AAiBnE,MAAMC,WAAW,GAAGL,OAAO,CAAC,UAAUM,KAAKA,CACzCC,IAAY,EACZC,IAAqC,EACR;EAC7B,MAAMC,MAAM,GAAG,OAAOR,UAAU,CAACO,IAAI,CAAC;EAEtC,IAAIC,MAAM,KAAK,IAAI,EAAE;IACnB,OAAO,IAAI;EACb;EAEA,OAAO,OAAOP,MAAM,CAACO,MAAM,CAACC,MAAM,EAAEP,gBAAgB,CAACM,MAAM,CAAC,EAAEF,IAAI,CAAC;AACrE,CAAC,CAAC;AAEF,OAAO,MAAMD,KAAY,GAAG,SAASA,KAAKA,CACxCC,IAAI,EACJC,IAAK,EACLG,QAA4B,EAC5B;EACA,IAAI,OAAOH,IAAI,KAAK,UAAU,EAAE;IAC9BG,QAAQ,GAAGH,IAAI;IACfA,IAAI,GAAGI,SAA6B;EACtC;EAEA,IAAID,QAAQ,KAAKC,SAAS,EAAE;IAKnB;MAIL,OAAOR,oBAAoB,CAACC,WAAW,CAACQ,IAAI,CAAC,CAACN,IAAI,EAAEC,IAAI,CAAC;IAC3D;EACF;EAEAJ,oBAAoB,CAACC,WAAW,CAACS,OAAO,CAAC,CAACP,IAAI,EAAEC,IAAI,EAAEG,QAAQ,CAAC;AACjE,CAAC;AAED,OAAO,SAASI,SAASA,CAAC,GAAGC,IAAyC,EAAE;EACtE,OAAOZ,oBAAoB,CAACC,WAAW,CAACQ,IAAI,CAAC,CAAC,GAAGG,IAAI,CAAC;AACxD;AACA,OAAO,SAASC,UAAUA,CAAC,GAAGD,IAA0C,EAAE;EACxE,OAAOZ,oBAAoB,CAACC,WAAW,CAACa,KAAK,CAAC,CAAC,GAAGF,IAAI,CAAC;AACzD"}