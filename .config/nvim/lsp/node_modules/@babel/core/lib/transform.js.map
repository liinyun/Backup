{"version":3,"names":["gensync","loadConfig","run","beginHiddenCallStack","transformRunner","transform","code","opts","config","optsOrCallback","maybeCallback","callback","undefined","sync","errback","transformSync","args","transformAsync","async"],"sources":["../src/transform.ts"],"sourcesContent":["import gensync, { type Handler } from \"gensync\";\n\nimport loadConfig from \"./config\";\nimport type { InputOptions, ResolvedConfig } from \"./config\";\nimport { run } from \"./transformation\";\n\nimport type { FileResult, FileResultCallback } from \"./transformation\";\nimport { beginHiddenCallStack } from \"./errors/rewrite-stack-trace\";\n\nexport type { FileResult } from \"./transformation\";\n\ntype Transform = {\n  (code: string, callback: FileResultCallback): void;\n  (\n    code: string,\n    opts: InputOptions | undefined | null,\n    callback: FileResultCallback,\n  ): void;\n  (code: string, opts?: InputOptions | null): FileResult | null;\n};\n\nconst transformRunner = gensync(function* transform(\n  code: string,\n  opts?: InputOptions,\n): Handler<FileResult | null> {\n  const config: ResolvedConfig | null = yield* loadConfig(opts);\n  if (config === null) return null;\n\n  return yield* run(config, code);\n});\n\nexport const transform: Transform = function transform(\n  code,\n  optsOrCallback?: InputOptions | null | undefined | FileResultCallback,\n  maybeCallback?: FileResultCallback,\n) {\n  let opts: InputOptions | undefined | null;\n  let callback: FileResultCallback | undefined;\n  if (typeof optsOrCallback === \"function\") {\n    callback = optsOrCallback;\n    opts = undefined;\n  } else {\n    opts = optsOrCallback;\n    callback = maybeCallback;\n  }\n\n  if (callback === undefined) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"Starting from Babel 8.0.0, the 'transform' function expects a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      );\n    } else {\n      // console.warn(\n      //   \"Starting from Babel 8.0.0, the 'transform' function will expect a callback. If you need to call it synchronously, please use 'transformSync'.\",\n      // );\n      return beginHiddenCallStack(transformRunner.sync)(code, opts);\n    }\n  }\n\n  beginHiddenCallStack(transformRunner.errback)(code, opts, callback);\n};\n\nexport function transformSync(\n  ...args: Parameters<typeof transformRunner.sync>\n) {\n  return beginHiddenCallStack(transformRunner.sync)(...args);\n}\nexport function transformAsync(\n  ...args: Parameters<typeof transformRunner.async>\n) {\n  return beginHiddenCallStack(transformRunner.async)(...args);\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAwB,SAAS;AAE/C,OAAOC,UAAU,MAAM,mBAAU;AAEjC,SAASC,GAAG,QAAQ,2BAAkB;AAGtC,SAASC,oBAAoB,QAAQ,iCAA8B;AAcnE,MAAMC,eAAe,GAAGJ,OAAO,CAAC,UAAUK,SAASA,CACjDC,IAAY,EACZC,IAAmB,EACS;EAC5B,MAAMC,MAA6B,GAAG,OAAOP,UAAU,CAACM,IAAI,CAAC;EAC7D,IAAIC,MAAM,KAAK,IAAI,EAAE,OAAO,IAAI;EAEhC,OAAO,OAAON,GAAG,CAACM,MAAM,EAAEF,IAAI,CAAC;AACjC,CAAC,CAAC;AAEF,OAAO,MAAMD,SAAoB,GAAG,SAASA,SAASA,CACpDC,IAAI,EACJG,cAAqE,EACrEC,aAAkC,EAClC;EACA,IAAIH,IAAqC;EACzC,IAAII,QAAwC;EAC5C,IAAI,OAAOF,cAAc,KAAK,UAAU,EAAE;IACxCE,QAAQ,GAAGF,cAAc;IACzBF,IAAI,GAAGK,SAAS;EAClB,CAAC,MAAM;IACLL,IAAI,GAAGE,cAAc;IACrBE,QAAQ,GAAGD,aAAa;EAC1B;EAEA,IAAIC,QAAQ,KAAKC,SAAS,EAAE;IAKnB;MAIL,OAAOT,oBAAoB,CAACC,eAAe,CAACS,IAAI,CAAC,CAACP,IAAI,EAAEC,IAAI,CAAC;IAC/D;EACF;EAEAJ,oBAAoB,CAACC,eAAe,CAACU,OAAO,CAAC,CAACR,IAAI,EAAEC,IAAI,EAAEI,QAAQ,CAAC;AACrE,CAAC;AAED,OAAO,SAASI,aAAaA,CAC3B,GAAGC,IAA6C,EAChD;EACA,OAAOb,oBAAoB,CAACC,eAAe,CAACS,IAAI,CAAC,CAAC,GAAGG,IAAI,CAAC;AAC5D;AACA,OAAO,SAASC,cAAcA,CAC5B,GAAGD,IAA8C,EACjD;EACA,OAAOb,oBAAoB,CAACC,eAAe,CAACc,KAAK,CAAC,CAAC,GAAGF,IAAI,CAAC;AAC7D"}